
Pedals_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c728  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab8  0800c834  0800c834  0000d834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2ec  0800d2ec  0000f094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2ec  0800d2ec  0000e2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2f4  0800d2f4  0000f094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2f4  0800d2f4  0000e2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d2f8  0800d2f8  0000e2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800d2fc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  20000094  0800d390  0000f094  2**2
                  ALLOC
 10 ._user_heap_stack 00000900  200009c0  0800d390  0000f9c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153eb  00000000  00000000  0000f0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c72  00000000  00000000  000244a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00028120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b61  00000000  00000000  00028fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c823  00000000  00000000  00029b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ee5  00000000  00000000  0004632c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0997  00000000  00000000  00059211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9ba8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004480  00000000  00000000  000f9bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fe06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c81c 	.word	0x0800c81c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	0800c81c 	.word	0x0800c81c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
 80001b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	0a1b      	lsrs	r3, r3, #8
 80001b6:	b29a      	uxth	r2, r3
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	615a      	str	r2, [r3, #20]
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	68db      	ldr	r3, [r3, #12]
 80001d4:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	0a1b      	lsrs	r3, r3, #8
 80001da:	b29b      	uxth	r3, r3
 80001dc:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 80001de:	68fa      	ldr	r2, [r7, #12]
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	4013      	ands	r3, r2
 80001e4:	041a      	lsls	r2, r3, #16
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	43d9      	mvns	r1, r3
 80001ea:	68bb      	ldr	r3, [r7, #8]
 80001ec:	400b      	ands	r3, r1
 80001ee:	431a      	orrs	r2, r3
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	611a      	str	r2, [r3, #16]
}
 80001f4:	bf00      	nop
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
	...

08000200 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000208:	4b08      	ldr	r3, [pc, #32]	@ (800022c <LL_APB2_GRP1_EnableClock+0x2c>)
 800020a:	699a      	ldr	r2, [r3, #24]
 800020c:	4907      	ldr	r1, [pc, #28]	@ (800022c <LL_APB2_GRP1_EnableClock+0x2c>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4313      	orrs	r3, r2
 8000212:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000214:	4b05      	ldr	r3, [pc, #20]	@ (800022c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000216:	699a      	ldr	r2, [r3, #24]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4013      	ands	r3, r2
 800021c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800021e:	68fb      	ldr	r3, [r7, #12]
}
 8000220:	bf00      	nop
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40021000 	.word	0x40021000

08000230 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int le, char *ptr, int len)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++)
 800023c:	2300      	movs	r3, #0
 800023e:	617b      	str	r3, [r7, #20]
 8000240:	e009      	b.n	8000256 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	1c5a      	adds	r2, r3, #1
 8000246:	60ba      	str	r2, [r7, #8]
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	4618      	mov	r0, r3
 800024c:	f7ff ff86 	bl	800015c <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	3301      	adds	r3, #1
 8000254:	617b      	str	r3, [r7, #20]
 8000256:	697a      	ldr	r2, [r7, #20]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	429a      	cmp	r2, r3
 800025c:	dbf1      	blt.n	8000242 <_write+0x12>
	}
	return len;
 800025e:	687b      	ldr	r3, [r7, #4]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3718      	adds	r7, #24
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026e:	f000 fc59 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000272:	f000 f823 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000276:	f000 f89d 	bl	80003b4 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 800027a:	f000 f879 	bl	8000370 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
	tusb_rhport_init_t dev_init = { .role = TUSB_ROLE_DEVICE, .speed =
 800027e:	4b0d      	ldr	r3, [pc, #52]	@ (80002b4 <main+0x4c>)
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	80bb      	strh	r3, [r7, #4]
			TUSB_SPEED_AUTO };
//  LL_USB_InitPeriph();
  get_serial_id_string();
 8000284:	f000 fa30 	bl	80006e8 <get_serial_id_string>
	tusb_init(BOARD_TUD_RHPORT, &dev_init);
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	2000      	movs	r0, #0
 800028e:	f00a fe6d 	bl	800af6c <tusb_rhport_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf(serial_str);
 8000292:	4809      	ldr	r0, [pc, #36]	@ (80002b8 <main+0x50>)
 8000294:	f00b f9c6 	bl	800b624 <iprintf>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 8000298:	2100      	movs	r1, #0
 800029a:	f04f 30ff 	mov.w	r0, #4294967295
 800029e:	f006 fe31 	bl	8006f04 <tud_task_ext>
}
 80002a2:	bf00      	nop

	while (1) {
		tud_task();
		cdc_task();
 80002a4:	f000 f930 	bl	8000508 <cdc_task>
		led_blinking_task();
 80002a8:	f000 fa3c 	bl	8000724 <led_blinking_task>
		hid_task();
 80002ac:	f000 f992 	bl	80005d4 <hid_task>
		tud_task();
 80002b0:	bf00      	nop
 80002b2:	e7f1      	b.n	8000298 <main+0x30>
 80002b4:	0800c834 	.word	0x0800c834
 80002b8:	20000388 	.word	0x20000388

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b094      	sub	sp, #80	@ 0x50
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002c6:	2228      	movs	r2, #40	@ 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f00b fb2e 	bl	800b92c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ec:	2301      	movs	r3, #1
 80002ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000302:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000306:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000308:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800030c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000312:	4618      	mov	r0, r3
 8000314:	f002 f8f6 	bl	8002504 <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800031e:	f000 fa23 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	230f      	movs	r3, #15
 8000324:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	2302      	movs	r3, #2
 8000328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000332:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	2102      	movs	r1, #2
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fb62 	bl	8002a08 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800034a:	f000 fa0d 	bl	8000768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800034e:	2310      	movs	r3, #16
 8000350:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f002 fcb1 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000364:	f000 fa00 	bl	8000768 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	3750      	adds	r7, #80	@ 0x50
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000374:	4b0d      	ldr	r3, [pc, #52]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 8000376:	4a0e      	ldr	r2, [pc, #56]	@ (80003b0 <MX_USB_PCD_Init+0x40>)
 8000378:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800037a:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 800037c:	2208      	movs	r2, #8
 800037e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000380:	4b0a      	ldr	r3, [pc, #40]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 8000382:	2202      	movs	r2, #2
 8000384:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000386:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 8000388:	2200      	movs	r2, #0
 800038a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800038c:	4b07      	ldr	r3, [pc, #28]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 800038e:	2200      	movs	r2, #0
 8000390:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000392:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 8000394:	2200      	movs	r2, #0
 8000396:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000398:	4804      	ldr	r0, [pc, #16]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 800039a:	f000 fd50 	bl	8000e3e <HAL_PCD_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80003a4:	f000 f9e0 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	200000b0 	.word	0x200000b0
 80003b0:	40005c00 	.word	0x40005c00

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80003c8:	2010      	movs	r0, #16
 80003ca:	f7ff ff19 	bl	8000200 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80003ce:	2020      	movs	r0, #32
 80003d0:	f7ff ff16 	bl	8000200 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80003d4:	2004      	movs	r0, #4
 80003d6:	f7ff ff13 	bl	8000200 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80003da:	2008      	movs	r0, #8
 80003dc:	f7ff ff10 	bl	8000200 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(userLED_GPIO_Port, userLED_Pin);
 80003e0:	4919      	ldr	r1, [pc, #100]	@ (8000448 <MX_GPIO_Init+0x94>)
 80003e2:	481a      	ldr	r0, [pc, #104]	@ (800044c <MX_GPIO_Init+0x98>)
 80003e4:	f7ff fee0 	bl	80001a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, Clutch_Clock_Pin|Brake_Clock_Pin|Throttle_Clock_Pin);
 80003e8:	f644 1149 	movw	r1, #18761	@ 0x4949
 80003ec:	4818      	ldr	r0, [pc, #96]	@ (8000450 <MX_GPIO_Init+0x9c>)
 80003ee:	f7ff fedb 	bl	80001a8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = userLED_Pin;
 80003f2:	4b15      	ldr	r3, [pc, #84]	@ (8000448 <MX_GPIO_Init+0x94>)
 80003f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003f6:	2301      	movs	r3, #1
 80003f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80003fa:	2303      	movs	r3, #3
 80003fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000402:	2301      	movs	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(userLED_GPIO_Port, &GPIO_InitStruct);
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	4810      	ldr	r0, [pc, #64]	@ (800044c <MX_GPIO_Init+0x98>)
 800040c:	f002 fdc6 	bl	8002f9c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Clutch_Clock_Pin|Brake_Clock_Pin|Throttle_Clock_Pin;
 8000410:	f644 1349 	movw	r3, #18761	@ 0x4949
 8000414:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000416:	2301      	movs	r3, #1
 8000418:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800041a:	2302      	movs	r3, #2
 800041c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4619      	mov	r1, r3
 8000426:	480a      	ldr	r0, [pc, #40]	@ (8000450 <MX_GPIO_Init+0x9c>)
 8000428:	f002 fdb8 	bl	8002f9c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Clutch_Data_Pin|Brake_Data_Pin|Throttle_Data_Pin;
 800042c:	f249 2392 	movw	r3, #37522	@ 0x9292
 8000430:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000432:	2304      	movs	r3, #4
 8000434:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4619      	mov	r1, r3
 800043a:	4805      	ldr	r0, [pc, #20]	@ (8000450 <MX_GPIO_Init+0x9c>)
 800043c:	f002 fdae 	bl	8002f9c <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000440:	bf00      	nop
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	04200020 	.word	0x04200020
 800044c:	40011000 	.word	0x40011000
 8000450:	40010800 	.word	0x40010800

08000454 <echo_serial_port>:

/* USER CODE BEGIN 4 */
// echo to either Serial0 or Serial1
// with Serial0 as all lower case, Serial1 as all upper case
static void echo_serial_port(uint8_t itf, uint8_t buf[], uint32_t count) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < count; i++) {
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	e041      	b.n	80004ec <echo_serial_port+0x98>
		if (itf == 0) {
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d116      	bne.n	800049c <echo_serial_port+0x48>
			// echo back 1st port as lower case
			if (isupper(buf[i]))
 800046e:	68ba      	ldr	r2, [r7, #8]
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	4413      	add	r3, r2
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	3301      	adds	r3, #1
 8000478:	4a22      	ldr	r2, [pc, #136]	@ (8000504 <echo_serial_port+0xb0>)
 800047a:	4413      	add	r3, r2
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	f003 0303 	and.w	r3, r3, #3
 8000482:	2b01      	cmp	r3, #1
 8000484:	d120      	bne.n	80004c8 <echo_serial_port+0x74>
				buf[i] += 'a' - 'A';
 8000486:	68ba      	ldr	r2, [r7, #8]
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	4413      	add	r3, r2
 800048c:	781a      	ldrb	r2, [r3, #0]
 800048e:	68b9      	ldr	r1, [r7, #8]
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	440b      	add	r3, r1
 8000494:	3220      	adds	r2, #32
 8000496:	b2d2      	uxtb	r2, r2
 8000498:	701a      	strb	r2, [r3, #0]
 800049a:	e015      	b.n	80004c8 <echo_serial_port+0x74>
		} else {
			// echo back 2nd port as upper case
			if (islower(buf[i]))
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	4413      	add	r3, r2
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	4a17      	ldr	r2, [pc, #92]	@ (8000504 <echo_serial_port+0xb0>)
 80004a8:	4413      	add	r3, r2
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	f003 0303 	and.w	r3, r3, #3
 80004b0:	2b02      	cmp	r3, #2
 80004b2:	d109      	bne.n	80004c8 <echo_serial_port+0x74>
				buf[i] -= 'a' - 'A';
 80004b4:	68ba      	ldr	r2, [r7, #8]
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	4413      	add	r3, r2
 80004ba:	781a      	ldrb	r2, [r3, #0]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	440b      	add	r3, r1
 80004c2:	3a20      	subs	r2, #32
 80004c4:	b2d2      	uxtb	r2, r2
 80004c6:	701a      	strb	r2, [r3, #0]
		}

		tud_cdc_n_write_char(itf, buf[i]);
 80004c8:	68ba      	ldr	r2, [r7, #8]
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	4413      	add	r3, r2
 80004ce:	781a      	ldrb	r2, [r3, #0]
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	74fb      	strb	r3, [r7, #19]
 80004d4:	4613      	mov	r3, r2
 80004d6:	74bb      	strb	r3, [r7, #18]
// Write bytes to TX FIFO, data may remain in the FIFO for a while
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize);

// Write a byte
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_n_write_char(uint8_t itf, char ch) {
  return tud_cdc_n_write(itf, &ch, 1);
 80004d8:	f107 0112 	add.w	r1, r7, #18
 80004dc:	7cfb      	ldrb	r3, [r7, #19]
 80004de:	2201      	movs	r2, #1
 80004e0:	4618      	mov	r0, r3
 80004e2:	f004 fb35 	bl	8004b50 <tud_cdc_n_write>
	for (uint32_t i = 0; i < count; i++) {
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	3301      	adds	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	697a      	ldr	r2, [r7, #20]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d3b9      	bcc.n	8000468 <echo_serial_port+0x14>
	}
	tud_cdc_n_write_flush(itf);
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f004 fb5e 	bl	8004bb8 <tud_cdc_n_write_flush>
}
 80004fc:	bf00      	nop
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	0800d1b5 	.word	0x0800d1b5

08000508 <cdc_task>:

//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+
static void cdc_task(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b092      	sub	sp, #72	@ 0x48
 800050c:	af00      	add	r7, sp, #0
	uint8_t itf;

	for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800050e:	2300      	movs	r3, #0
 8000510:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000514:	e01a      	b.n	800054c <cdc_task+0x44>
		// connected() check for DTR bit
		// Most but not all terminal client set this when making connection
		// if ( tud_cdc_n_connected(itf) )
		{
			if (tud_cdc_n_available(itf)) {
 8000516:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800051a:	4618      	mov	r0, r3
 800051c:	f004 fad6 	bl	8004acc <tud_cdc_n_available>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d00d      	beq.n	8000542 <cdc_task+0x3a>
				uint8_t buf[64];

				uint32_t count = tud_cdc_n_read(itf, buf, sizeof(buf));
 8000526:	4639      	mov	r1, r7
 8000528:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800052c:	2240      	movs	r2, #64	@ 0x40
 800052e:	4618      	mov	r0, r3
 8000530:	f004 fae2 	bl	8004af8 <tud_cdc_n_read>
 8000534:	6438      	str	r0, [r7, #64]	@ 0x40

				// echo back to both serial ports
				echo_serial_port(0, buf, count);
 8000536:	463b      	mov	r3, r7
 8000538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800053a:	4619      	mov	r1, r3
 800053c:	2000      	movs	r0, #0
 800053e:	f7ff ff89 	bl	8000454 <echo_serial_port>
	for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8000542:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000546:	3301      	adds	r3, #1
 8000548:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800054c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0e0      	beq.n	8000516 <cdc_task+0xe>
//        echo_serial_port(1, buf, count);
			}
		}
	}
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3748      	adds	r7, #72	@ 0x48
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <tud_mount_cb>:

// Invoked when device is mounted
void tud_mount_cb(void) {
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_MOUNTED;
 8000564:	4b03      	ldr	r3, [pc, #12]	@ (8000574 <tud_mount_cb+0x14>)
 8000566:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800056a:	601a      	str	r2, [r3, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000000 	.word	0x20000000

08000578 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void) {
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_NOT_MOUNTED;
 800057c:	4b03      	ldr	r3, [pc, #12]	@ (800058c <tud_umount_cb+0x14>)
 800057e:	2264      	movs	r2, #100	@ 0x64
 8000580:	601a      	str	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en) {
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	(void) remote_wakeup_en;
	blink_interval_ms = BLINK_SUSPENDED;
 800059a:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <tud_suspend_cb+0x1c>)
 800059c:	22fa      	movs	r2, #250	@ 0xfa
 800059e:	601a      	str	r2, [r3, #0]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000

080005b0 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	blink_interval_ms = tud_mounted() ? BLINK_MOUNTED : BLINK_NOT_MOUNTED;
 80005b4:	f006 fabe 	bl	8006b34 <tud_mounted>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <tud_resume_cb+0x14>
 80005be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005c2:	e000      	b.n	80005c6 <tud_resume_cb+0x16>
 80005c4:	2364      	movs	r3, #100	@ 0x64
 80005c6:	4a02      	ldr	r2, [pc, #8]	@ (80005d0 <tud_resume_cb+0x20>)
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000000 	.word	0x20000000

080005d4 <hid_task>:

//--------------------------------------------------------------------+
// USB HID
//--------------------------------------------------------------------+

void hid_task(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af04      	add	r7, sp, #16
	// Poll every 10ms
	const uint32_t interval_ms = 10;
 80005da:	230a      	movs	r3, #10
 80005dc:	60fb      	str	r3, [r7, #12]
	static uint32_t start_ms = 0;

	if (HAL_GetTick() - start_ms < interval_ms)
 80005de:	f000 faf9 	bl	8000bd4 <HAL_GetTick>
 80005e2:	4602      	mov	r2, r0
 80005e4:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <hid_task+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d852      	bhi.n	8000696 <hid_task+0xc2>
		return; // not enough time
	start_ms += interval_ms;
 80005f0:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <hid_task+0xcc>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	4a29      	ldr	r2, [pc, #164]	@ (80006a0 <hid_task+0xcc>)
 80005fa:	6013      	str	r3, [r2, #0]

	uint32_t const btn = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]

	// Remote wakeup
	if (tud_suspended() && btn) {
 8000600:	f006 faa8 	bl	8006b54 <tud_suspended>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d004      	beq.n	8000614 <hid_task+0x40>
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <hid_task+0x40>
		// Wake up host if we are in suspend mode
		// and REMOTE_WAKEUP feature is enabled by host
		tud_remote_wakeup();
 8000610:	f006 fab2 	bl	8006b78 <tud_remote_wakeup>
	}

	/*------------- Keyboard -------------*/
	if (tud_hid_n_ready(ITF_KEYBOARD)) {
 8000614:	2000      	movs	r0, #0
 8000616:	f004 ff19 	bl	800544c <tud_hid_n_ready>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d01f      	beq.n	8000660 <hid_task+0x8c>
		// use to avoid send multiple consecutive zero report for keyboard
		static bool has_key = false;

		if (btn) {
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00f      	beq.n	8000646 <hid_task+0x72>
			uint8_t keycode[6] = { 0 };
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	80bb      	strh	r3, [r7, #4]
			keycode[0] = HID_KEY_A;
 800062e:	2304      	movs	r3, #4
 8000630:	703b      	strb	r3, [r7, #0]

			tud_hid_n_keyboard_report(ITF_KEYBOARD, 0, 0, keycode);
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	2000      	movs	r0, #0
 800063a:	f004 ffd1 	bl	80055e0 <tud_hid_n_keyboard_report>

			has_key = true;
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <hid_task+0xd0>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
 8000644:	e00c      	b.n	8000660 <hid_task+0x8c>
		} else {
			// send empty key report if previously has key pressed
			if (has_key)
 8000646:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <hid_task+0xd0>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d005      	beq.n	800065a <hid_task+0x86>
				tud_hid_n_keyboard_report(ITF_KEYBOARD, 0, 0, NULL);
 800064e:	2300      	movs	r3, #0
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	2000      	movs	r0, #0
 8000656:	f004 ffc3 	bl	80055e0 <tud_hid_n_keyboard_report>
			has_key = false;
 800065a:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <hid_task+0xd0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
		}
	}

	/*------------- Mouse -------------*/
	if (tud_hid_n_ready(ITF_MOUSE)) {
 8000660:	2001      	movs	r0, #1
 8000662:	f004 fef3 	bl	800544c <tud_hid_n_ready>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d015      	beq.n	8000698 <hid_task+0xc4>
		if (btn) {
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d012      	beq.n	8000698 <hid_task+0xc4>
			int8_t const delta = 5;
 8000672:	2305      	movs	r3, #5
 8000674:	71fb      	strb	r3, [r7, #7]

			// no button, right + down, no scroll pan
			tud_hid_n_mouse_report(ITF_MOUSE, 0, 0x00, delta, delta, 0, 0);
 8000676:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800067a:	2300      	movs	r3, #0
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	2300      	movs	r3, #0
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4613      	mov	r3, r2
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2001      	movs	r0, #1
 8000690:	f004 ffd3 	bl	800563a <tud_hid_n_mouse_report>
 8000694:	e000      	b.n	8000698 <hid_task+0xc4>
		return; // not enough time
 8000696:	bf00      	nop
		}
	}
}
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200003a4 	.word	0x200003a4
 80006a4:	200003a8 	.word	0x200003a8

080006a8 <tud_hid_get_report_cb>:

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t itf, uint8_t report_id,
		hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4603      	mov	r3, r0
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	460b      	mov	r3, r1
 80006b6:	71bb      	strb	r3, [r7, #6]
 80006b8:	4613      	mov	r3, r2
 80006ba:	717b      	strb	r3, [r7, #5]
	(void) report_id;
	(void) report_type;
	(void) buffer;
	(void) reqlen;

	return 0;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t itf, uint8_t report_id,
		hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	460b      	mov	r3, r1
 80006d6:	71bb      	strb	r3, [r7, #6]
 80006d8:	4613      	mov	r3, r2
 80006da:	717b      	strb	r3, [r7, #5]
	(void) itf;
	(void) report_id;
	(void) report_type;
	(void) buffer;
	(void) bufsize;
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
	...

080006e8 <get_serial_id_string>:

// Convert Serial ID to String
void get_serial_id_string(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af02      	add	r7, sp, #8
	unsigned int id1 = HAL_GetUIDw0();
 80006ee:	f000 fa7b 	bl	8000be8 <HAL_GetUIDw0>
 80006f2:	60f8      	str	r0, [r7, #12]
	unsigned int id2 = HAL_GetUIDw1();
 80006f4:	f000 fa82 	bl	8000bfc <HAL_GetUIDw1>
 80006f8:	60b8      	str	r0, [r7, #8]
	unsigned int id3 = HAL_GetUIDw2();
 80006fa:	f000 fa89 	bl	8000c10 <HAL_GetUIDw2>
 80006fe:	6078      	str	r0, [r7, #4]

	// Format: XXXXXXXXYYYYYYYYZZZZZZZZ (Hex format)
	snprintf(serial_str, sizeof(serial_str), "%08X%08X%08X\n", id1, id2, id3);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4a04      	ldr	r2, [pc, #16]	@ (800071c <get_serial_id_string+0x34>)
 800070c:	211a      	movs	r1, #26
 800070e:	4804      	ldr	r0, [pc, #16]	@ (8000720 <get_serial_id_string+0x38>)
 8000710:	f00b f800 	bl	800b714 <sniprintf>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	0800c838 	.word	0x0800c838
 8000720:	20000388 	.word	0x20000388

08000724 <led_blinking_task>:

//--------------------------------------------------------------------+
// BLINKING TASK
//--------------------------------------------------------------------+
void led_blinking_task(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	static uint32_t start_ms = 0;
//  static bool led_state = false;

	// Blink every interval ms
	if (HAL_GetTick() - start_ms < blink_interval_ms)
 8000728:	f000 fa54 	bl	8000bd4 <HAL_GetTick>
 800072c:	4602      	mov	r2, r0
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <led_blinking_task+0x34>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	1ad2      	subs	r2, r2, r3
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <led_blinking_task+0x38>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d30b      	bcc.n	8000754 <led_blinking_task+0x30>
		return; // not enough time
	start_ms += blink_interval_ms;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <led_blinking_task+0x34>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <led_blinking_task+0x38>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4413      	add	r3, r2
 8000746:	4a04      	ldr	r2, [pc, #16]	@ (8000758 <led_blinking_task+0x34>)
 8000748:	6013      	str	r3, [r2, #0]

//  board_led_write(led_state);
	LL_GPIO_TogglePin(userLED_GPIO_Port, userLED_Pin);
 800074a:	4905      	ldr	r1, [pc, #20]	@ (8000760 <led_blinking_task+0x3c>)
 800074c:	4805      	ldr	r0, [pc, #20]	@ (8000764 <led_blinking_task+0x40>)
 800074e:	f7ff fd3a 	bl	80001c6 <LL_GPIO_TogglePin>
 8000752:	e000      	b.n	8000756 <led_blinking_task+0x32>
		return; // not enough time
 8000754:	bf00      	nop
//  led_state = 1 - led_state; // toggle
}
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200003ac 	.word	0x200003ac
 800075c:	20000000 	.word	0x20000000
 8000760:	04200020 	.word	0x04200020
 8000764:	40011000 	.word	0x40011000

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <HAL_MspInit+0x5c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	4a14      	ldr	r2, [pc, #80]	@ (80007d0 <HAL_MspInit+0x5c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6193      	str	r3, [r2, #24]
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <HAL_MspInit+0x5c>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <HAL_MspInit+0x5c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a0e      	ldr	r2, [pc, #56]	@ (80007d0 <HAL_MspInit+0x5c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <HAL_MspInit+0x5c>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007aa:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <HAL_MspInit+0x60>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <HAL_MspInit+0x60>)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010000 	.word	0x40010000

080007d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a11      	ldr	r2, [pc, #68]	@ (800082c <HAL_PCD_MspInit+0x54>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d11b      	bne.n	8000822 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <HAL_PCD_MspInit+0x58>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a10      	ldr	r2, [pc, #64]	@ (8000830 <HAL_PCD_MspInit+0x58>)
 80007f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <HAL_PCD_MspInit+0x58>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2013      	movs	r0, #19
 8000808:	f000 fae3 	bl	8000dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800080c:	2013      	movs	r0, #19
 800080e:	f000 fafc 	bl	8000e0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2014      	movs	r0, #20
 8000818:	f000 fadb 	bl	8000dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800081c:	2014      	movs	r0, #20
 800081e:	f000 faf4 	bl	8000e0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40005c00 	.word	0x40005c00
 8000830:	40021000 	.word	0x40021000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <NMI_Handler+0x4>

0800083c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <MemManage_Handler+0x4>

0800084c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <UsageFault_Handler+0x4>

0800085c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000884:	f000 f994 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */
	tud_int_handler(BOARD_TUD_RHPORT);
 8000890:	2000      	movs	r0, #0
 8000892:	f008 ff2b 	bl	80096ec <dcd_int_handler>
  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000896:	4802      	ldr	r0, [pc, #8]	@ (80008a0 <USB_HP_CAN1_TX_IRQHandler+0x14>)
 8000898:	f000 fbc7 	bl	800102a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000b0 	.word	0x200000b0

080008a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	tud_int_handler(BOARD_TUD_RHPORT);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f008 ff1f 	bl	80096ec <dcd_int_handler>
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008ae:	4802      	ldr	r0, [pc, #8]	@ (80008b8 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 80008b0:	f000 fbbb 	bl	800102a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000b0 	.word	0x200000b0

080008bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	e00a      	b.n	80008e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ce:	f3af 8000 	nop.w
 80008d2:	4601      	mov	r1, r0
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	60ba      	str	r2, [r7, #8]
 80008da:	b2ca      	uxtb	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3301      	adds	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dbf0      	blt.n	80008ce <_read+0x12>
  }

  return len;
 80008ec:	687b      	ldr	r3, [r7, #4]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800091c:	605a      	str	r2, [r3, #4]
  return 0;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <_isatty>:

int _isatty(int file)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800093e:	b480      	push	{r7}
 8000940:	b085      	sub	sp, #20
 8000942:	af00      	add	r7, sp, #0
 8000944:	60f8      	str	r0, [r7, #12]
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
	...

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	@ (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f00b f81e 	bl	800b9c8 <__errno>
 800098c:	4603      	mov	r3, r0
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <_sbrk+0x64>)
 80009a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20005000 	.word	0x20005000
 80009b8:	00000600 	.word	0x00000600
 80009bc:	200003b0 	.word	0x200003b0
 80009c0:	200009c0 	.word	0x200009c0

080009c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 80009d4:	4b02      	ldr	r3, [pc, #8]	@ (80009e0 <tud_descriptor_device_cb+0x10>)
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	0800ceac 	.word	0x0800ceac

080009e4 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t itf)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  if (itf == 0)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <tud_hid_descriptor_report_cb+0x14>
  {
    return desc_hid_report1;
 80009f4:	4b03      	ldr	r3, [pc, #12]	@ (8000a04 <tud_hid_descriptor_report_cb+0x20>)
 80009f6:	e000      	b.n	80009fa <tud_hid_descriptor_report_cb+0x16>
  }

  return NULL;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	0800cec0 	.word	0x0800cec0

08000a08 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_fs_configuration;
 8000a12:	4b03      	ldr	r3, [pc, #12]	@ (8000a20 <tud_descriptor_configuration_cb+0x18>)
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	0800cef0 	.word	0x0800cef0

08000a24 <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	460a      	mov	r2, r1
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	80bb      	strh	r3, [r7, #4]
  (void) langid;
  size_t chr_count;

  switch ( index ) {
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d002      	beq.n	8000a40 <tud_descriptor_string_cb+0x1c>
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d009      	beq.n	8000a52 <tud_descriptor_string_cb+0x2e>
 8000a3e:	e00b      	b.n	8000a58 <tud_descriptor_string_cb+0x34>
    case STRID_LANGID:
      memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8000a40:	4b23      	ldr	r3, [pc, #140]	@ (8000ad0 <tud_descriptor_string_cb+0xac>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	4b22      	ldr	r3, [pc, #136]	@ (8000ad4 <tud_descriptor_string_cb+0xb0>)
 8000a4a:	805a      	strh	r2, [r3, #2]
      chr_count = 1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
      break;
 8000a50:	e02d      	b.n	8000aae <tud_descriptor_string_cb+0x8a>

    case STRID_SERIAL:
//      chr_count = board_usb_get_serial(_desc_str + 1, 32);
      chr_count = sizeof(serial_str);
 8000a52:	2319      	movs	r3, #25
 8000a54:	617b      	str	r3, [r7, #20]
      break;
 8000a56:	e02a      	b.n	8000aae <tud_descriptor_string_cb+0x8a>

    default:
      // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
      // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

      if ( !(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])) ) return NULL;
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2b05      	cmp	r3, #5
 8000a5c:	d901      	bls.n	8000a62 <tud_descriptor_string_cb+0x3e>
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e031      	b.n	8000ac6 <tud_descriptor_string_cb+0xa2>

      const char *str = string_desc_arr[index];
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	4a1a      	ldr	r2, [pc, #104]	@ (8000ad0 <tud_descriptor_string_cb+0xac>)
 8000a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6a:	60fb      	str	r3, [r7, #12]
//      board_get_unique_id

      // Cap at max char
      chr_count = strlen(str);
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f7ff fb6d 	bl	800014c <strlen>
 8000a72:	6178      	str	r0, [r7, #20]
      size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 8000a74:	2320      	movs	r3, #32
 8000a76:	60bb      	str	r3, [r7, #8]
      if ( chr_count > max_count ) chr_count = max_count;
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d901      	bls.n	8000a84 <tud_descriptor_string_cb+0x60>
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	617b      	str	r3, [r7, #20]

      // Convert ASCII string into UTF-16
      for ( size_t i = 0; i < chr_count; i++ ) {
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	e00c      	b.n	8000aa4 <tud_descriptor_string_cb+0x80>
        _desc_str[1 + i] = str[i];
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	4413      	add	r3, r2
 8000a90:	781a      	ldrb	r2, [r3, #0]
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	3301      	adds	r3, #1
 8000a96:	4611      	mov	r1, r2
 8000a98:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad4 <tud_descriptor_string_cb+0xb0>)
 8000a9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for ( size_t i = 0; i < chr_count; i++ ) {
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d3ee      	bcc.n	8000a8a <tud_descriptor_string_cb+0x66>
      }
      break;
 8000aac:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <tud_descriptor_string_cb+0xb0>)
 8000ac2:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <tud_descriptor_string_cb+0xb0>)
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	200003b4 	.word	0x200003b4

08000ad8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad8:	f7ff ff74 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480b      	ldr	r0, [pc, #44]	@ (8000b0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ade:	490c      	ldr	r1, [pc, #48]	@ (8000b10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a09      	ldr	r2, [pc, #36]	@ (8000b18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000af4:	4c09      	ldr	r4, [pc, #36]	@ (8000b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b02:	f00a ff67 	bl	800b9d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b06:	f7ff fbaf 	bl	8000268 <main>
  bx lr
 8000b0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000b14:	0800d2fc 	.word	0x0800d2fc
  ldr r2, =_sbss
 8000b18:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000b1c:	200009c0 	.word	0x200009c0

08000b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_2_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <HAL_Init+0x28>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	@ (8000b4c <HAL_Init+0x28>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f941 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f000 f808 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fe18 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40022000 	.word	0x40022000

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <HAL_InitTick+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <HAL_InitTick+0x58>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f959 	bl	8000e26 <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d80a      	bhi.n	8000b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f000 f921 	bl	8000dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4a06      	ldr	r2, [pc, #24]	@ (8000bac <HAL_InitTick+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000004 	.word	0x20000004
 8000ba8:	20000024 	.word	0x20000024
 8000bac:	20000020 	.word	0x20000020

08000bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <HAL_IncTick+0x1c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <HAL_IncTick+0x20>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a03      	ldr	r2, [pc, #12]	@ (8000bd0 <HAL_IncTick+0x20>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	20000024 	.word	0x20000024
 8000bd0:	200003f8 	.word	0x200003f8

08000bd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	@ (8000be4 <HAL_GetTick+0x10>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	200003f8 	.word	0x200003f8

08000be8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8000bec:	4b02      	ldr	r3, [pc, #8]	@ (8000bf8 <HAL_GetUIDw0+0x10>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	1ffff7e8 	.word	0x1ffff7e8

08000bfc <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000c00:	4b02      	ldr	r3, [pc, #8]	@ (8000c0c <HAL_GetUIDw1+0x10>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	1ffff7ec 	.word	0x1ffff7ec

08000c10 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000c14:	4b02      	ldr	r3, [pc, #8]	@ (8000c20 <HAL_GetUIDw2+0x10>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	1ffff7f0 	.word	0x1ffff7f0

08000c24 <__NVIC_SetPriorityGrouping>:
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_EnableIRQ>:
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4906      	ldr	r1, [pc, #24]	@ (8000cbc <__NVIC_EnableIRQ+0x34>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	@ (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	@ (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	@ 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	@ 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Config>:
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d88:	d301      	bcc.n	8000d8e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00f      	b.n	8000dae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <SysTick_Config+0x40>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d96:	210f      	movs	r1, #15
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f7ff ff90 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <SysTick_Config+0x40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <SysTick_Config+0x40>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff2d 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff42 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff90 	bl	8000d14 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff5f 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff35 	bl	8000c88 <__NVIC_EnableIRQ>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffa2 	bl	8000d78 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e0e8      	b.n	8001022 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d106      	bne.n	8000e6a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fcb7 	bl	80007d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 f900 	bl	8003082 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e8c:	f002 f8ec 	bl	8003068 <USB_CoreInit>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d005      	beq.n	8000ea2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2202      	movs	r2, #2
 8000e9a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e0bf      	b.n	8001022 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f002 f904 	bl	80030b6 <USB_SetCurrentMode>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d005      	beq.n	8000ec0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e0b0      	b.n	8001022 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e03e      	b.n	8000f44 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	440b      	add	r3, r1
 8000ed4:	3311      	adds	r3, #17
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	440b      	add	r3, r1
 8000ee8:	3310      	adds	r3, #16
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000eee:	7bfa      	ldrb	r2, [r7, #15]
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	440b      	add	r3, r1
 8000efc:	3313      	adds	r3, #19
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f02:	7bfa      	ldrb	r2, [r7, #15]
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	440b      	add	r3, r1
 8000f10:	3320      	adds	r3, #32
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	440b      	add	r3, r1
 8000f24:	3324      	adds	r3, #36	@ 0x24
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	3301      	adds	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	791b      	ldrb	r3, [r3, #4]
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d3bb      	bcc.n	8000ec6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	e044      	b.n	8000fde <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f54:	7bfa      	ldrb	r2, [r7, #15]
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	440b      	add	r3, r1
 8000f62:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f6a:	7bfa      	ldrb	r2, [r7, #15]
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	440b      	add	r3, r1
 8000f78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f80:	7bfa      	ldrb	r2, [r7, #15]
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	440b      	add	r3, r1
 8000f8e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fc2:	7bfa      	ldrb	r2, [r7, #15]
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	791b      	ldrb	r3, [r3, #4]
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d3b5      	bcc.n	8000f54 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3304      	adds	r3, #4
 8000ff0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ff2:	f002 f86c 	bl	80030ce <USB_DevInit>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2202      	movs	r2, #2
 8001000:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e00c      	b.n	8001022 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f003 fc38 	bl	8004890 <USB_DevDisconnect>

  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b088      	sub	sp, #32
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fc34 	bl	80048a4 <USB_ReadInterrupts>
 800103c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f985 	bl	8001358 <PCD_EP_ISR_Handler>

    return;
 800104e:	e119      	b.n	8001284 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001056:	2b00      	cmp	r3, #0
 8001058:	d013      	beq.n	8001082 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800106c:	b292      	uxth	r2, r2
 800106e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f931 	bl	80012da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001078:	2100      	movs	r1, #0
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f948 	bl	8001310 <HAL_PCD_SetAddress>

    return;
 8001080:	e100      	b.n	8001284 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00c      	beq.n	80010a6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001094:	b29a      	uxth	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800109e:	b292      	uxth	r2, r2
 80010a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010a4:	e0ee      	b.n	8001284 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00c      	beq.n	80010ca <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80010c2:	b292      	uxth	r2, r2
 80010c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010c8:	e0dc      	b.n	8001284 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d027      	beq.n	8001124 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80010dc:	b29a      	uxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0204 	bic.w	r2, r2, #4
 80010e6:	b292      	uxth	r2, r2
 80010e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0208 	bic.w	r2, r2, #8
 80010fe:	b292      	uxth	r2, r2
 8001100:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f8fa 	bl	80012fe <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001112:	b29a      	uxth	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800111c:	b292      	uxth	r2, r2
 800111e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001122:	e0af      	b.n	8001284 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 8083 	beq.w	8001236 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001130:	2300      	movs	r3, #0
 8001132:	77fb      	strb	r3, [r7, #31]
 8001134:	e010      	b.n	8001158 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	7ffb      	ldrb	r3, [r7, #31]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	441a      	add	r2, r3
 8001142:	7ffb      	ldrb	r3, [r7, #31]
 8001144:	8812      	ldrh	r2, [r2, #0]
 8001146:	b292      	uxth	r2, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	3320      	adds	r3, #32
 800114c:	443b      	add	r3, r7
 800114e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001152:	7ffb      	ldrb	r3, [r7, #31]
 8001154:	3301      	adds	r3, #1
 8001156:	77fb      	strb	r3, [r7, #31]
 8001158:	7ffb      	ldrb	r3, [r7, #31]
 800115a:	2b07      	cmp	r3, #7
 800115c:	d9eb      	bls.n	8001136 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001166:	b29a      	uxth	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0201 	orr.w	r2, r2, #1
 8001170:	b292      	uxth	r2, r2
 8001172:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800117e:	b29a      	uxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0201 	bic.w	r2, r2, #1
 8001188:	b292      	uxth	r2, r2
 800118a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800118e:	bf00      	nop
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001198:	b29b      	uxth	r3, r3
 800119a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f6      	beq.n	8001190 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011b4:	b292      	uxth	r2, r2
 80011b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	77fb      	strb	r3, [r7, #31]
 80011be:	e00f      	b.n	80011e0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80011c0:	7ffb      	ldrb	r3, [r7, #31]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	4611      	mov	r1, r2
 80011c8:	7ffa      	ldrb	r2, [r7, #31]
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	440a      	add	r2, r1
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	3320      	adds	r3, #32
 80011d2:	443b      	add	r3, r7
 80011d4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80011d8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80011da:	7ffb      	ldrb	r3, [r7, #31]
 80011dc:	3301      	adds	r3, #1
 80011de:	77fb      	strb	r3, [r7, #31]
 80011e0:	7ffb      	ldrb	r3, [r7, #31]
 80011e2:	2b07      	cmp	r3, #7
 80011e4:	d9ec      	bls.n	80011c0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0208 	orr.w	r2, r2, #8
 80011f8:	b292      	uxth	r2, r2
 80011fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001210:	b292      	uxth	r2, r2
 8001212:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800121e:	b29a      	uxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0204 	orr.w	r2, r2, #4
 8001228:	b292      	uxth	r2, r2
 800122a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f85c 	bl	80012ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001234:	e026      	b.n	8001284 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00f      	beq.n	8001260 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001252:	b292      	uxth	r2, r2
 8001254:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f835 	bl	80012c8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800125e:	e011      	b.n	8001284 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00c      	beq.n	8001284 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001272:	b29a      	uxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800127c:	b292      	uxth	r2, r2
 800127e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001282:	bf00      	nop
  }
}
 8001284:	3720      	adds	r7, #32
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001322:	2b01      	cmp	r3, #1
 8001324:	d101      	bne.n	800132a <HAL_PCD_SetAddress+0x1a>
 8001326:	2302      	movs	r3, #2
 8001328:	e012      	b.n	8001350 <HAL_PCD_SetAddress+0x40>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	78fa      	ldrb	r2, [r7, #3]
 8001336:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	78fa      	ldrb	r2, [r7, #3]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f003 fa92 	bl	800486a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b096      	sub	sp, #88	@ 0x58
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001360:	e3bb      	b.n	8001ada <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800136a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800136e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800137c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001380:	2b00      	cmp	r3, #0
 8001382:	f040 8175 	bne.w	8001670 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001386:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	2b00      	cmp	r3, #0
 8001390:	d14e      	bne.n	8001430 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800139e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013a2:	81fb      	strh	r3, [r7, #14]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	89fb      	ldrh	r3, [r7, #14]
 80013aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3310      	adds	r3, #16
 80013ba:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4413      	add	r3, r2
 80013d0:	3302      	adds	r3, #2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80013e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013ea:	695a      	ldr	r2, [r3, #20]
 80013ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	441a      	add	r2, r3
 80013f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013f4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80013f6:	2100      	movs	r1, #0
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff51 	bl	80012a0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7b5b      	ldrb	r3, [r3, #13]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 8368 	beq.w	8001ada <PCD_EP_ISR_Handler+0x782>
 800140a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f040 8363 	bne.w	8001ada <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7b5b      	ldrb	r3, [r3, #13]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800141e:	b2da      	uxtb	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	735a      	strb	r2, [r3, #13]
 800142e:	e354      	b.n	8001ada <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001436:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001442:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001446:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800144a:	2b00      	cmp	r3, #0
 800144c:	d034      	beq.n	80014b8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001456:	b29b      	uxth	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4413      	add	r3, r2
 8001462:	3306      	adds	r3, #6
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	4413      	add	r3, r2
 800146c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001478:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001486:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800148a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800148c:	b29b      	uxth	r3, r3
 800148e:	f003 fa5d 	bl	800494c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b29a      	uxth	r2, r3
 800149a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800149e:	4013      	ands	r3, r2
 80014a0:	823b      	strh	r3, [r7, #16]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	8a3a      	ldrh	r2, [r7, #16]
 80014a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014ac:	b292      	uxth	r2, r2
 80014ae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff00 	bl	80012b6 <HAL_PCD_SetupStageCallback>
 80014b6:	e310      	b.n	8001ada <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014b8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f280 830c 	bge.w	8001ada <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80014ce:	4013      	ands	r3, r2
 80014d0:	83fb      	strh	r3, [r7, #30]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	8bfa      	ldrh	r2, [r7, #30]
 80014d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014dc:	b292      	uxth	r2, r2
 80014de:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4413      	add	r3, r2
 80014f4:	3306      	adds	r3, #6
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800150a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800150c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d019      	beq.n	8001548 <PCD_EP_ISR_Handler+0x1f0>
 8001514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d015      	beq.n	8001548 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001522:	6959      	ldr	r1, [r3, #20]
 8001524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001526:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800152a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800152c:	b29b      	uxth	r3, r3
 800152e:	f003 fa0d 	bl	800494c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	441a      	add	r2, r3
 800153c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800153e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001540:	2100      	movs	r1, #0
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fea1 	bl	800128a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001552:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800155a:	2b00      	cmp	r3, #0
 800155c:	f040 82bd 	bne.w	8001ada <PCD_EP_ISR_Handler+0x782>
 8001560:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001564:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001568:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800156c:	f000 82b5 	beq.w	8001ada <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800157e:	b29b      	uxth	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4413      	add	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b29b      	uxth	r3, r3
 8001596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800159a:	b29a      	uxth	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	801a      	strh	r2, [r3, #0]
 80015a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80015a6:	d91d      	bls.n	80015e4 <PCD_EP_ISR_Handler+0x28c>
 80015a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	095b      	lsrs	r3, r3, #5
 80015ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80015b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <PCD_EP_ISR_Handler+0x26a>
 80015bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015be:	3b01      	subs	r3, #1
 80015c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	029b      	lsls	r3, r3, #10
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015dc:	b29a      	uxth	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	801a      	strh	r2, [r3, #0]
 80015e2:	e026      	b.n	8001632 <PCD_EP_ISR_Handler+0x2da>
 80015e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10a      	bne.n	8001602 <PCD_EP_ISR_Handler+0x2aa>
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	801a      	strh	r2, [r3, #0]
 8001600:	e017      	b.n	8001632 <PCD_EP_ISR_Handler+0x2da>
 8001602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	647b      	str	r3, [r7, #68]	@ 0x44
 800160a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <PCD_EP_ISR_Handler+0x2c4>
 8001616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001618:	3301      	adds	r3, #1
 800161a:	647b      	str	r3, [r7, #68]	@ 0x44
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	b29a      	uxth	r2, r3
 8001622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001624:	b29b      	uxth	r3, r3
 8001626:	029b      	lsls	r3, r3, #10
 8001628:	b29b      	uxth	r3, r3
 800162a:	4313      	orrs	r3, r2
 800162c:	b29a      	uxth	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800163e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001642:	827b      	strh	r3, [r7, #18]
 8001644:	8a7b      	ldrh	r3, [r7, #18]
 8001646:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800164a:	827b      	strh	r3, [r7, #18]
 800164c:	8a7b      	ldrh	r3, [r7, #18]
 800164e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001652:	827b      	strh	r3, [r7, #18]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	8a7b      	ldrh	r3, [r7, #18]
 800165a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800165e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800166a:	b29b      	uxth	r3, r3
 800166c:	8013      	strh	r3, [r2, #0]
 800166e:	e234      	b.n	8001ada <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001684:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001688:	2b00      	cmp	r3, #0
 800168a:	f280 80fc 	bge.w	8001886 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80016a4:	4013      	ands	r3, r2
 80016a6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80016bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016c0:	b292      	uxth	r2, r2
 80016c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016c4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80016da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016dc:	7b1b      	ldrb	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d125      	bne.n	800172e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4413      	add	r3, r2
 80016f6:	3306      	adds	r3, #6
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800170a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800170e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8092 	beq.w	800183c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800171e:	6959      	ldr	r1, [r3, #20]
 8001720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001722:	88da      	ldrh	r2, [r3, #6]
 8001724:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001728:	f003 f910 	bl	800494c <USB_ReadPMA>
 800172c:	e086      	b.n	800183c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800172e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001730:	78db      	ldrb	r3, [r3, #3]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d10a      	bne.n	800174c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001736:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800173a:	461a      	mov	r2, r3
 800173c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f9d9 	bl	8001af6 <HAL_PCD_EP_DB_Receive>
 8001744:	4603      	mov	r3, r0
 8001746:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800174a:	e077      	b.n	800183c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	b29b      	uxth	r3, r3
 800175e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001766:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	441a      	add	r2, r3
 8001778:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800177c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001788:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800178c:	b29b      	uxth	r3, r3
 800178e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d024      	beq.n	80017f4 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	3302      	adds	r3, #2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017d2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80017d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d02e      	beq.n	800183c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017e4:	6959      	ldr	r1, [r3, #20]
 80017e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017e8:	891a      	ldrh	r2, [r3, #8]
 80017ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80017ee:	f003 f8ad 	bl	800494c <USB_ReadPMA>
 80017f2:	e023      	b.n	800183c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4413      	add	r3, r2
 8001808:	3306      	adds	r3, #6
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	4413      	add	r3, r2
 8001812:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800181c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001820:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800182e:	6959      	ldr	r1, [r3, #20]
 8001830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001832:	895a      	ldrh	r2, [r3, #10]
 8001834:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001838:	f003 f888 	bl	800494c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800183c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183e:	69da      	ldr	r2, [r3, #28]
 8001840:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001844:	441a      	add	r2, r3
 8001846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001848:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800184a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001852:	441a      	add	r2, r3
 8001854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001856:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <PCD_EP_ISR_Handler+0x514>
 8001860:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d206      	bcs.n	800187a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800186c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fd09 	bl	800128a <HAL_PCD_DataOutStageCallback>
 8001878:	e005      	b.n	8001886 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001880:	4618      	mov	r0, r3
 8001882:	f001 fc41 	bl	8003108 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001886:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800188a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8123 	beq.w	8001ada <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001894:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	3310      	adds	r3, #16
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80018be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018c2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	441a      	add	r2, r3
 80018d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80018d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80018e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e6:	78db      	ldrb	r3, [r3, #3]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	f040 80a2 	bne.w	8001a32 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80018ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80018f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f6:	7b1b      	ldrb	r3, [r3, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8093 	beq.w	8001a24 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	d046      	beq.n	8001998 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800190a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800190c:	785b      	ldrb	r3, [r3, #1]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d126      	bne.n	8001960 <PCD_EP_ISR_Handler+0x608>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001920:	b29b      	uxth	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	4413      	add	r3, r2
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
 800192a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	011a      	lsls	r2, r3, #4
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	4413      	add	r3, r2
 8001934:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001938:	623b      	str	r3, [r7, #32]
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001944:	b29a      	uxth	r2, r3
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	801a      	strh	r2, [r3, #0]
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001958:	b29a      	uxth	r2, r3
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	801a      	strh	r2, [r3, #0]
 800195e:	e061      	b.n	8001a24 <PCD_EP_ISR_Handler+0x6cc>
 8001960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d15d      	bne.n	8001a24 <PCD_EP_ISR_Handler+0x6cc>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800197c:	4413      	add	r3, r2
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	011a      	lsls	r2, r3, #4
 8001986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001988:	4413      	add	r3, r2
 800198a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800198e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001992:	2200      	movs	r2, #0
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	e045      	b.n	8001a24 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800199e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a0:	785b      	ldrb	r3, [r3, #1]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d126      	bne.n	80019f4 <PCD_EP_ISR_Handler+0x69c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ba:	4413      	add	r3, r2
 80019bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80019be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	011a      	lsls	r2, r3, #4
 80019c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c6:	4413      	add	r3, r2
 80019c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80019cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80019ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019d8:	b29a      	uxth	r2, r3
 80019da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	e017      	b.n	8001a24 <PCD_EP_ISR_Handler+0x6cc>
 80019f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d113      	bne.n	8001a24 <PCD_EP_ISR_Handler+0x6cc>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a0a:	4413      	add	r3, r2
 8001a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	011a      	lsls	r2, r3, #4
 8001a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a16:	4413      	add	r3, r2
 8001a18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a20:	2200      	movs	r2, #0
 8001a22:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fc38 	bl	80012a0 <HAL_PCD_DataInStageCallback>
 8001a30:	e053      	b.n	8001ada <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d146      	bne.n	8001acc <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4413      	add	r3, r2
 8001a52:	3302      	adds	r3, #2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a66:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a6c:	699a      	ldr	r2, [r3, #24]
 8001a6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d907      	bls.n	8001a86 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001a7e:	1ad2      	subs	r2, r2, r3
 8001a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a82:	619a      	str	r2, [r3, #24]
 8001a84:	e002      	b.n	8001a8c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d106      	bne.n	8001aa2 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fc00 	bl	80012a0 <HAL_PCD_DataInStageCallback>
 8001aa0:	e01b      	b.n	8001ada <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001aaa:	441a      	add	r2, r3
 8001aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aae:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ab8:	441a      	add	r2, r3
 8001aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001abc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fb1f 	bl	8003108 <USB_EPStartXfer>
 8001aca:	e006      	b.n	8001ada <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001acc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f91b 	bl	8001d10 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	b21b      	sxth	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f6ff ac3b 	blt.w	8001362 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3758      	adds	r7, #88	@ 0x58
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b088      	sub	sp, #32
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	4613      	mov	r3, r2
 8001b02:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d07e      	beq.n	8001c0c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	3302      	adds	r3, #2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b36:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	699a      	ldr	r2, [r3, #24]
 8001b3c:	8b7b      	ldrh	r3, [r7, #26]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d306      	bcc.n	8001b50 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	8b7b      	ldrh	r3, [r7, #26]
 8001b48:	1ad2      	subs	r2, r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	619a      	str	r2, [r3, #24]
 8001b4e:	e002      	b.n	8001b56 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d123      	bne.n	8001ba6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b78:	833b      	strh	r3, [r7, #24]
 8001b7a:	8b3b      	ldrh	r3, [r7, #24]
 8001b7c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001b80:	833b      	strh	r3, [r7, #24]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	441a      	add	r2, r3
 8001b90:	8b3b      	ldrh	r3, [r7, #24]
 8001b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01f      	beq.n	8001bf0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bca:	82fb      	strh	r3, [r7, #22]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	441a      	add	r2, r3
 8001bda:	8afb      	ldrh	r3, [r7, #22]
 8001bdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001be0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001be8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001bf0:	8b7b      	ldrh	r3, [r7, #26]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8087 	beq.w	8001d06 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	6959      	ldr	r1, [r3, #20]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	891a      	ldrh	r2, [r3, #8]
 8001c04:	8b7b      	ldrh	r3, [r7, #26]
 8001c06:	f002 fea1 	bl	800494c <USB_ReadPMA>
 8001c0a:	e07c      	b.n	8001d06 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	3306      	adds	r3, #6
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c34:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	8b7b      	ldrh	r3, [r7, #26]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d306      	bcc.n	8001c4e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	8b7b      	ldrh	r3, [r7, #26]
 8001c46:	1ad2      	subs	r2, r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	619a      	str	r2, [r3, #24]
 8001c4c:	e002      	b.n	8001c54 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d123      	bne.n	8001ca4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c76:	83fb      	strh	r3, [r7, #30]
 8001c78:	8bfb      	ldrh	r3, [r7, #30]
 8001c7a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001c7e:	83fb      	strh	r3, [r7, #30]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	441a      	add	r2, r3
 8001c8e:	8bfb      	ldrh	r3, [r7, #30]
 8001c90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d11f      	bne.n	8001cee <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cc8:	83bb      	strh	r3, [r7, #28]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	441a      	add	r2, r3
 8001cd8:	8bbb      	ldrh	r3, [r7, #28]
 8001cda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001cee:	8b7b      	ldrh	r3, [r7, #26]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	6959      	ldr	r1, [r3, #20]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	895a      	ldrh	r2, [r3, #10]
 8001d00:	8b7b      	ldrh	r3, [r7, #26]
 8001d02:	f002 fe23 	bl	800494c <USB_ReadPMA>
    }
  }

  return count;
 8001d06:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0a4      	sub	sp, #144	@ 0x90
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 81dd 	beq.w	80020e4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d52:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d907      	bls.n	8001d72 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d6a:	1ad2      	subs	r2, r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	619a      	str	r2, [r3, #24]
 8001d70:	e002      	b.n	8001d78 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 80b9 	bne.w	8001ef4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	785b      	ldrb	r3, [r3, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d126      	bne.n	8001dd8 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d9e:	4413      	add	r3, r2
 8001da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	011a      	lsls	r2, r3, #4
 8001da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001daa:	4413      	add	r3, r2
 8001dac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc0:	801a      	strh	r2, [r3, #0]
 8001dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd4:	801a      	strh	r2, [r3, #0]
 8001dd6:	e01a      	b.n	8001e0e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	785b      	ldrb	r3, [r3, #1]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d116      	bne.n	8001e0e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df4:	4413      	add	r3, r2
 8001df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	011a      	lsls	r2, r3, #4
 8001dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e00:	4413      	add	r3, r2
 8001e02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e06:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	785b      	ldrb	r3, [r3, #1]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d126      	bne.n	8001e6a <HAL_PCD_EP_DB_Transmit+0x15a>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	4413      	add	r3, r2
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	011a      	lsls	r2, r3, #4
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	801a      	strh	r2, [r3, #0]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	801a      	strh	r2, [r3, #0]
 8001e68:	e017      	b.n	8001e9a <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	785b      	ldrb	r3, [r3, #1]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d113      	bne.n	8001e9a <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	4413      	add	r3, r2
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	011a      	lsls	r2, r3, #4
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e92:	623b      	str	r3, [r7, #32]
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	2200      	movs	r2, #0
 8001e98:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f7ff f9fd 	bl	80012a0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 82fc 	beq.w	80024aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ecc:	82fb      	strh	r3, [r7, #22]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	441a      	add	r2, r3
 8001edc:	8afb      	ldrh	r3, [r7, #22]
 8001ede:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ee2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ee6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	8013      	strh	r3, [r2, #0]
 8001ef2:	e2da      	b.n	80024aa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d021      	beq.n	8001f42 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f18:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	441a      	add	r2, r3
 8001f2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001f2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	f040 82ae 	bne.w	80024aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f56:	441a      	add	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	69da      	ldr	r2, [r3, #28]
 8001f60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f64:	441a      	add	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	6a1a      	ldr	r2, [r3, #32]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d30b      	bcc.n	8001f8e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	6a1a      	ldr	r2, [r3, #32]
 8001f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f86:	1ad2      	subs	r2, r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	621a      	str	r2, [r3, #32]
 8001f8c:	e017      	b.n	8001fbe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d108      	bne.n	8001fa8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001f96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001fa6:	e00a      	b.n	8001fbe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	785b      	ldrb	r3, [r3, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d165      	bne.n	8002092 <HAL_PCD_EP_DB_Transmit+0x382>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fda:	4413      	add	r3, r2
 8001fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	011a      	lsls	r2, r3, #4
 8001fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001fec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffc:	801a      	strh	r2, [r3, #0]
 8001ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002002:	2b3e      	cmp	r3, #62	@ 0x3e
 8002004:	d91d      	bls.n	8002042 <HAL_PCD_EP_DB_Transmit+0x332>
 8002006:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800200e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <HAL_PCD_EP_DB_Transmit+0x310>
 800201a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800201c:	3b01      	subs	r3, #1
 800201e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29a      	uxth	r2, r3
 8002026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002028:	b29b      	uxth	r3, r3
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	b29b      	uxth	r3, r3
 800202e:	4313      	orrs	r3, r2
 8002030:	b29b      	uxth	r3, r3
 8002032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203a:	b29a      	uxth	r2, r3
 800203c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203e:	801a      	strh	r2, [r3, #0]
 8002040:	e044      	b.n	80020cc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10a      	bne.n	8002060 <HAL_PCD_EP_DB_Transmit+0x350>
 800204a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002058:	b29a      	uxth	r2, r3
 800205a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800205c:	801a      	strh	r2, [r3, #0]
 800205e:	e035      	b.n	80020cc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002060:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002064:	085b      	lsrs	r3, r3, #1
 8002066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002068:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HAL_PCD_EP_DB_Transmit+0x36a>
 8002074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002076:	3301      	adds	r3, #1
 8002078:	64bb      	str	r3, [r7, #72]	@ 0x48
 800207a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	b29a      	uxth	r2, r3
 8002080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002082:	b29b      	uxth	r3, r3
 8002084:	029b      	lsls	r3, r3, #10
 8002086:	b29b      	uxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	b29a      	uxth	r2, r3
 800208c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800208e:	801a      	strh	r2, [r3, #0]
 8002090:	e01c      	b.n	80020cc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	785b      	ldrb	r3, [r3, #1]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d118      	bne.n	80020cc <HAL_PCD_EP_DB_Transmit+0x3bc>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	647b      	str	r3, [r7, #68]	@ 0x44
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ae:	4413      	add	r3, r2
 80020b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	011a      	lsls	r2, r3, #4
 80020b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ba:	4413      	add	r3, r2
 80020bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80020c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80020c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	6959      	ldr	r1, [r3, #20]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	891a      	ldrh	r2, [r3, #8]
 80020d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f002 fbf0 	bl	80048c2 <USB_WritePMA>
 80020e2:	e1e2      	b.n	80024aa <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	3306      	adds	r3, #6
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	4413      	add	r3, r2
 8002102:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800210c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	699a      	ldr	r2, [r3, #24]
 8002114:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002118:	429a      	cmp	r2, r3
 800211a:	d307      	bcc.n	800212c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002124:	1ad2      	subs	r2, r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	619a      	str	r2, [r3, #24]
 800212a:	e002      	b.n	8002132 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f040 80c0 	bne.w	80022bc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	785b      	ldrb	r3, [r3, #1]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d126      	bne.n	8002192 <HAL_PCD_EP_DB_Transmit+0x482>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002152:	b29b      	uxth	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002158:	4413      	add	r3, r2
 800215a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	011a      	lsls	r2, r3, #4
 8002162:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002164:	4413      	add	r3, r2
 8002166:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800216a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800216c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002176:	b29a      	uxth	r2, r3
 8002178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218a:	b29a      	uxth	r2, r3
 800218c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800218e:	801a      	strh	r2, [r3, #0]
 8002190:	e01a      	b.n	80021c8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d116      	bne.n	80021c8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	667b      	str	r3, [r7, #100]	@ 0x64
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021ae:	4413      	add	r3, r2
 80021b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	011a      	lsls	r2, r3, #4
 80021b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021ba:	4413      	add	r3, r2
 80021bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80021c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021c4:	2200      	movs	r2, #0
 80021c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	785b      	ldrb	r3, [r3, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d12b      	bne.n	800222e <HAL_PCD_EP_DB_Transmit+0x51e>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021ea:	4413      	add	r3, r2
 80021ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	011a      	lsls	r2, r3, #4
 80021f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021f6:	4413      	add	r3, r2
 80021f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002200:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220c:	b29a      	uxth	r2, r3
 800220e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002212:	801a      	strh	r2, [r3, #0]
 8002214:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002224:	b29a      	uxth	r2, r3
 8002226:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800222a:	801a      	strh	r2, [r3, #0]
 800222c:	e017      	b.n	800225e <HAL_PCD_EP_DB_Transmit+0x54e>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d113      	bne.n	800225e <HAL_PCD_EP_DB_Transmit+0x54e>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800223e:	b29b      	uxth	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002244:	4413      	add	r3, r2
 8002246:	677b      	str	r3, [r7, #116]	@ 0x74
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	011a      	lsls	r2, r3, #4
 800224e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002250:	4413      	add	r3, r2
 8002252:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002256:	673b      	str	r3, [r7, #112]	@ 0x70
 8002258:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800225a:	2200      	movs	r2, #0
 800225c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	4619      	mov	r1, r3
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f7ff f81b 	bl	80012a0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f040 811a 	bne.w	80024aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800228c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002290:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	441a      	add	r2, r3
 80022a2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80022a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	8013      	strh	r3, [r2, #0]
 80022ba:	e0f6      	b.n	80024aa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d121      	bne.n	800230a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	441a      	add	r2, r3
 80022f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80022f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002306:	b29b      	uxth	r3, r3
 8002308:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002310:	2b01      	cmp	r3, #1
 8002312:	f040 80ca 	bne.w	80024aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800231e:	441a      	add	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800232c:	441a      	add	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	6a1a      	ldr	r2, [r3, #32]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	429a      	cmp	r2, r3
 800233c:	d30b      	bcc.n	8002356 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	6a1a      	ldr	r2, [r3, #32]
 800234a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800234e:	1ad2      	subs	r2, r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	621a      	str	r2, [r3, #32]
 8002354:	e017      	b.n	8002386 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d108      	bne.n	8002370 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800235e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002362:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800236e:	e00a      	b.n	8002386 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2200      	movs	r2, #0
 800237c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	657b      	str	r3, [r7, #84]	@ 0x54
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d165      	bne.n	8002460 <HAL_PCD_EP_DB_Transmit+0x750>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023a8:	4413      	add	r3, r2
 80023aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	011a      	lsls	r2, r3, #4
 80023b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023b4:	4413      	add	r3, r2
 80023b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80023bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023ca:	801a      	strh	r2, [r3, #0]
 80023cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80023d2:	d91d      	bls.n	8002410 <HAL_PCD_EP_DB_Transmit+0x700>
 80023d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <HAL_PCD_EP_DB_Transmit+0x6de>
 80023e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ea:	3b01      	subs	r3, #1
 80023ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	029b      	lsls	r3, r3, #10
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	4313      	orrs	r3, r2
 80023fe:	b29b      	uxth	r3, r3
 8002400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002408:	b29a      	uxth	r2, r3
 800240a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800240c:	801a      	strh	r2, [r3, #0]
 800240e:	e041      	b.n	8002494 <HAL_PCD_EP_DB_Transmit+0x784>
 8002410:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <HAL_PCD_EP_DB_Transmit+0x71e>
 8002418:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002426:	b29a      	uxth	r2, r3
 8002428:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800242a:	801a      	strh	r2, [r3, #0]
 800242c:	e032      	b.n	8002494 <HAL_PCD_EP_DB_Transmit+0x784>
 800242e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_PCD_EP_DB_Transmit+0x738>
 8002442:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002444:	3301      	adds	r3, #1
 8002446:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002448:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	b29a      	uxth	r2, r3
 800244e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002450:	b29b      	uxth	r3, r3
 8002452:	029b      	lsls	r3, r3, #10
 8002454:	b29b      	uxth	r3, r3
 8002456:	4313      	orrs	r3, r2
 8002458:	b29a      	uxth	r2, r3
 800245a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800245c:	801a      	strh	r2, [r3, #0]
 800245e:	e019      	b.n	8002494 <HAL_PCD_EP_DB_Transmit+0x784>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d115      	bne.n	8002494 <HAL_PCD_EP_DB_Transmit+0x784>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002470:	b29b      	uxth	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002476:	4413      	add	r3, r2
 8002478:	657b      	str	r3, [r7, #84]	@ 0x54
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	011a      	lsls	r2, r3, #4
 8002480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002482:	4413      	add	r3, r2
 8002484:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002488:	653b      	str	r3, [r7, #80]	@ 0x50
 800248a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800248e:	b29a      	uxth	r2, r3
 8002490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002492:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	6959      	ldr	r1, [r3, #20]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	895a      	ldrh	r2, [r3, #10]
 80024a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f002 fa0c 	bl	80048c2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024c4:	82bb      	strh	r3, [r7, #20]
 80024c6:	8abb      	ldrh	r3, [r7, #20]
 80024c8:	f083 0310 	eor.w	r3, r3, #16
 80024cc:	82bb      	strh	r3, [r7, #20]
 80024ce:	8abb      	ldrh	r3, [r7, #20]
 80024d0:	f083 0320 	eor.w	r3, r3, #32
 80024d4:	82bb      	strh	r3, [r7, #20]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	441a      	add	r2, r3
 80024e4:	8abb      	ldrh	r3, [r7, #20]
 80024e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3790      	adds	r7, #144	@ 0x90
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e272      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8087 	beq.w	8002632 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002524:	4b92      	ldr	r3, [pc, #584]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b04      	cmp	r3, #4
 800252e:	d00c      	beq.n	800254a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002530:	4b8f      	ldr	r3, [pc, #572]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d112      	bne.n	8002562 <HAL_RCC_OscConfig+0x5e>
 800253c:	4b8c      	ldr	r3, [pc, #560]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002548:	d10b      	bne.n	8002562 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254a:	4b89      	ldr	r3, [pc, #548]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d06c      	beq.n	8002630 <HAL_RCC_OscConfig+0x12c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d168      	bne.n	8002630 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e24c      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x76>
 800256c:	4b80      	ldr	r3, [pc, #512]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a7f      	ldr	r2, [pc, #508]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e02e      	b.n	80025d8 <HAL_RCC_OscConfig+0xd4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x98>
 8002582:	4b7b      	ldr	r3, [pc, #492]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a7a      	ldr	r2, [pc, #488]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b78      	ldr	r3, [pc, #480]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a77      	ldr	r2, [pc, #476]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002594:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e01d      	b.n	80025d8 <HAL_RCC_OscConfig+0xd4>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0xbc>
 80025a6:	4b72      	ldr	r3, [pc, #456]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a71      	ldr	r2, [pc, #452]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e00b      	b.n	80025d8 <HAL_RCC_OscConfig+0xd4>
 80025c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4b68      	ldr	r3, [pc, #416]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a67      	ldr	r2, [pc, #412]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7fe faf8 	bl	8000bd4 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe faf4 	bl	8000bd4 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	@ 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e200      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0xe4>
 8002606:	e014      	b.n	8002632 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe fae4 	bl	8000bd4 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7fe fae0 	bl	8000bd4 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	@ 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e1ec      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	4b53      	ldr	r3, [pc, #332]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x10c>
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d063      	beq.n	8002706 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800263e:	4b4c      	ldr	r3, [pc, #304]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800264a:	4b49      	ldr	r3, [pc, #292]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b08      	cmp	r3, #8
 8002654:	d11c      	bne.n	8002690 <HAL_RCC_OscConfig+0x18c>
 8002656:	4b46      	ldr	r3, [pc, #280]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d116      	bne.n	8002690 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	4b43      	ldr	r3, [pc, #268]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_RCC_OscConfig+0x176>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e1c0      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267a:	4b3d      	ldr	r3, [pc, #244]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4939      	ldr	r1, [pc, #228]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268e:	e03a      	b.n	8002706 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002698:	4b36      	ldr	r3, [pc, #216]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe fa99 	bl	8000bd4 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a6:	f7fe fa95 	bl	8000bd4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e1a1      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4927      	ldr	r1, [pc, #156]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]
 80026d8:	e015      	b.n	8002706 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026da:	4b26      	ldr	r3, [pc, #152]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fa78 	bl	8000bd4 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e8:	f7fe fa74 	bl	8000bd4 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e180      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d03a      	beq.n	8002788 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d019      	beq.n	800274e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271a:	4b17      	ldr	r3, [pc, #92]	@ (8002778 <HAL_RCC_OscConfig+0x274>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002720:	f7fe fa58 	bl	8000bd4 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002728:	f7fe fa54 	bl	8000bd4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e160      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	4b0d      	ldr	r3, [pc, #52]	@ (8002770 <HAL_RCC_OscConfig+0x26c>)
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002746:	2001      	movs	r0, #1
 8002748:	f000 fa9c 	bl	8002c84 <RCC_Delay>
 800274c:	e01c      	b.n	8002788 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274e:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <HAL_RCC_OscConfig+0x274>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002754:	f7fe fa3e 	bl	8000bd4 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275a:	e00f      	b.n	800277c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275c:	f7fe fa3a 	bl	8000bd4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d908      	bls.n	800277c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e146      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	42420000 	.word	0x42420000
 8002778:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800277c:	4b92      	ldr	r3, [pc, #584]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1e9      	bne.n	800275c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a6 	beq.w	80028e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279a:	4b8b      	ldr	r3, [pc, #556]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10d      	bne.n	80027c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	4b88      	ldr	r3, [pc, #544]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	4a87      	ldr	r2, [pc, #540]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b0:	61d3      	str	r3, [r2, #28]
 80027b2:	4b85      	ldr	r3, [pc, #532]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027be:	2301      	movs	r3, #1
 80027c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c2:	4b82      	ldr	r3, [pc, #520]	@ (80029cc <HAL_RCC_OscConfig+0x4c8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d118      	bne.n	8002800 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ce:	4b7f      	ldr	r3, [pc, #508]	@ (80029cc <HAL_RCC_OscConfig+0x4c8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a7e      	ldr	r2, [pc, #504]	@ (80029cc <HAL_RCC_OscConfig+0x4c8>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027da:	f7fe f9fb 	bl	8000bd4 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e2:	f7fe f9f7 	bl	8000bd4 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b64      	cmp	r3, #100	@ 0x64
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e103      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	4b75      	ldr	r3, [pc, #468]	@ (80029cc <HAL_RCC_OscConfig+0x4c8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x312>
 8002808:	4b6f      	ldr	r3, [pc, #444]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	4a6e      	ldr	r2, [pc, #440]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6213      	str	r3, [r2, #32]
 8002814:	e02d      	b.n	8002872 <HAL_RCC_OscConfig+0x36e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x334>
 800281e:	4b6a      	ldr	r3, [pc, #424]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4a69      	ldr	r2, [pc, #420]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6213      	str	r3, [r2, #32]
 800282a:	4b67      	ldr	r3, [pc, #412]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4a66      	ldr	r2, [pc, #408]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	f023 0304 	bic.w	r3, r3, #4
 8002834:	6213      	str	r3, [r2, #32]
 8002836:	e01c      	b.n	8002872 <HAL_RCC_OscConfig+0x36e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b05      	cmp	r3, #5
 800283e:	d10c      	bne.n	800285a <HAL_RCC_OscConfig+0x356>
 8002840:	4b61      	ldr	r3, [pc, #388]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4a60      	ldr	r2, [pc, #384]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	6213      	str	r3, [r2, #32]
 800284c:	4b5e      	ldr	r3, [pc, #376]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	4a5d      	ldr	r2, [pc, #372]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6213      	str	r3, [r2, #32]
 8002858:	e00b      	b.n	8002872 <HAL_RCC_OscConfig+0x36e>
 800285a:	4b5b      	ldr	r3, [pc, #364]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4a5a      	ldr	r2, [pc, #360]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6213      	str	r3, [r2, #32]
 8002866:	4b58      	ldr	r3, [pc, #352]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a57      	ldr	r2, [pc, #348]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d015      	beq.n	80028a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7fe f9ab 	bl	8000bd4 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7fe f9a7 	bl	8000bd4 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0b1      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002898:	4b4b      	ldr	r3, [pc, #300]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ee      	beq.n	8002882 <HAL_RCC_OscConfig+0x37e>
 80028a4:	e014      	b.n	80028d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7fe f995 	bl	8000bd4 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ac:	e00a      	b.n	80028c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ae:	f7fe f991 	bl	8000bd4 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028bc:	4293      	cmp	r3, r2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e09b      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c4:	4b40      	ldr	r3, [pc, #256]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ee      	bne.n	80028ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d105      	bne.n	80028e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d6:	4b3c      	ldr	r3, [pc, #240]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	4a3b      	ldr	r2, [pc, #236]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8087 	beq.w	80029fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ec:	4b36      	ldr	r3, [pc, #216]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d061      	beq.n	80029bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d146      	bne.n	800298e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002900:	4b33      	ldr	r3, [pc, #204]	@ (80029d0 <HAL_RCC_OscConfig+0x4cc>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7fe f965 	bl	8000bd4 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290e:	f7fe f961 	bl	8000bd4 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e06d      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002920:	4b29      	ldr	r3, [pc, #164]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f0      	bne.n	800290e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002934:	d108      	bne.n	8002948 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002936:	4b24      	ldr	r3, [pc, #144]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	4921      	ldr	r1, [pc, #132]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002948:	4b1f      	ldr	r3, [pc, #124]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a19      	ldr	r1, [r3, #32]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	430b      	orrs	r3, r1
 800295a:	491b      	ldr	r1, [pc, #108]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002960:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <HAL_RCC_OscConfig+0x4cc>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7fe f935 	bl	8000bd4 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296e:	f7fe f931 	bl	8000bd4 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e03d      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002980:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x46a>
 800298c:	e035      	b.n	80029fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <HAL_RCC_OscConfig+0x4cc>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fe f91e 	bl	8000bd4 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe f91a 	bl	8000bd4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e026      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ae:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x498>
 80029ba:	e01e      	b.n	80029fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e019      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40007000 	.word	0x40007000
 80029d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_RCC_OscConfig+0x500>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000

08002a08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0d0      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d910      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b67      	ldr	r3, [pc, #412]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 0207 	bic.w	r2, r3, #7
 8002a32:	4965      	ldr	r1, [pc, #404]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b63      	ldr	r3, [pc, #396]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b8      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a64:	4b59      	ldr	r3, [pc, #356]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a58      	ldr	r2, [pc, #352]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a7c:	4b53      	ldr	r3, [pc, #332]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a52      	ldr	r2, [pc, #328]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b50      	ldr	r3, [pc, #320]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	494d      	ldr	r1, [pc, #308]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d040      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	4b47      	ldr	r3, [pc, #284]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d115      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac6:	4b41      	ldr	r3, [pc, #260]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e073      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e06b      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae6:	4b39      	ldr	r3, [pc, #228]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f023 0203 	bic.w	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4936      	ldr	r1, [pc, #216]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af8:	f7fe f86c 	bl	8000bd4 <HAL_GetTick>
 8002afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b00:	f7fe f868 	bl	8000bd4 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e053      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b16:	4b2d      	ldr	r3, [pc, #180]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 020c 	and.w	r2, r3, #12
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d1eb      	bne.n	8002b00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b28:	4b27      	ldr	r3, [pc, #156]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d210      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b24      	ldr	r3, [pc, #144]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 0207 	bic.w	r2, r3, #7
 8002b3e:	4922      	ldr	r1, [pc, #136]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e032      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b19      	ldr	r3, [pc, #100]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4916      	ldr	r1, [pc, #88]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	490e      	ldr	r1, [pc, #56]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b96:	f000 f821 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	490a      	ldr	r1, [pc, #40]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	5ccb      	ldrb	r3, [r1, r3]
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a09      	ldr	r2, [pc, #36]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bb2:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd ffca 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40022000 	.word	0x40022000
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	0800ce9c 	.word	0x0800ce9c
 8002bd4:	20000004 	.word	0x20000004
 8002bd8:	20000020 	.word	0x20000020

08002bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d002      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x30>
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x36>
 8002c0a:	e027      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c0c:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c0e:	613b      	str	r3, [r7, #16]
      break;
 8002c10:	e027      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	0c9b      	lsrs	r3, r3, #18
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	4a17      	ldr	r2, [pc, #92]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d010      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c2a:	4b11      	ldr	r3, [pc, #68]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0c5b      	lsrs	r3, r3, #17
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	4a11      	ldr	r2, [pc, #68]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c3e:	fb03 f202 	mul.w	r2, r3, r2
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	e004      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	613b      	str	r3, [r7, #16]
      break;
 8002c5a:	e002      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c5c:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c5e:	613b      	str	r3, [r7, #16]
      break;
 8002c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c62:	693b      	ldr	r3, [r7, #16]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	007a1200 	.word	0x007a1200
 8002c78:	0800cf58 	.word	0x0800cf58
 8002c7c:	0800cf68 	.word	0x0800cf68
 8002c80:	003d0900 	.word	0x003d0900

08002c84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <RCC_Delay+0x34>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0a      	ldr	r2, [pc, #40]	@ (8002cbc <RCC_Delay+0x38>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0a5b      	lsrs	r3, r3, #9
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ca0:	bf00      	nop
  }
  while (Delay --);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1e5a      	subs	r2, r3, #1
 8002ca6:	60fa      	str	r2, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f9      	bne.n	8002ca0 <RCC_Delay+0x1c>
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	20000004 	.word	0x20000004
 8002cbc:	10624dd3 	.word	0x10624dd3

08002cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d07d      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce0:	4b4f      	ldr	r3, [pc, #316]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4b4c      	ldr	r3, [pc, #304]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	4a4b      	ldr	r2, [pc, #300]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf6:	61d3      	str	r3, [r2, #28]
 8002cf8:	4b49      	ldr	r3, [pc, #292]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d04:	2301      	movs	r3, #1
 8002d06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	4b46      	ldr	r3, [pc, #280]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d118      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d14:	4b43      	ldr	r3, [pc, #268]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a42      	ldr	r2, [pc, #264]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d20:	f7fd ff58 	bl	8000bd4 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d26:	e008      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d28:	f7fd ff54 	bl	8000bd4 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	@ 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e06d      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d46:	4b36      	ldr	r3, [pc, #216]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d02e      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d027      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d64:	4b2e      	ldr	r3, [pc, #184]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d74:	4b2c      	ldr	r3, [pc, #176]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d7a:	4a29      	ldr	r2, [pc, #164]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d014      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fd ff23 	bl	8000bd4 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7fd ff1f 	bl	8000bd4 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e036      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ee      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4917      	ldr	r1, [pc, #92]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dcc:	4b14      	ldr	r3, [pc, #80]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	4a13      	ldr	r2, [pc, #76]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002de4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	490b      	ldr	r1, [pc, #44]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e02:	4b07      	ldr	r3, [pc, #28]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	4904      	ldr	r1, [pc, #16]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40007000 	.word	0x40007000
 8002e28:	42420440 	.word	0x42420440

08002e2c <LL_GPIO_SetPinMode>:
{
 8002e2c:	b490      	push	{r4, r7}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	0e1b      	lsrs	r3, r3, #24
 8002e40:	4413      	add	r3, r2
 8002e42:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002e44:	6822      	ldr	r2, [r4, #0]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	210f      	movs	r1, #15
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	401a      	ands	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	61bb      	str	r3, [r7, #24]
  return result;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	4313      	orrs	r3, r2
 8002e84:	6023      	str	r3, [r4, #0]
}
 8002e86:	bf00      	nop
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc90      	pop	{r4, r7}
 8002e8e:	4770      	bx	lr

08002e90 <LL_GPIO_SetPinSpeed>:
{
 8002e90:	b490      	push	{r4, r7}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	0e1b      	lsrs	r3, r3, #24
 8002ea4:	4413      	add	r3, r2
 8002ea6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002ea8:	6822      	ldr	r2, [r4, #0]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	613b      	str	r3, [r7, #16]
  return result;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	2103      	movs	r1, #3
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	401a      	ands	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	61bb      	str	r3, [r7, #24]
  return result;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	6023      	str	r3, [r4, #0]
}
 8002eea:	bf00      	nop
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc90      	pop	{r4, r7}
 8002ef2:	4770      	bx	lr

08002ef4 <LL_GPIO_SetPinOutputType>:
{
 8002ef4:	b490      	push	{r4, r7}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	0e1b      	lsrs	r3, r3, #24
 8002f08:	4413      	add	r3, r2
 8002f0a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002f0c:	6822      	ldr	r2, [r4, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	613b      	str	r3, [r7, #16]
  return result;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	2104      	movs	r1, #4
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	61bb      	str	r3, [r7, #24]
  return result;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	6023      	str	r3, [r4, #0]
}
 8002f4e:	bf00      	nop
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc90      	pop	{r4, r7}
 8002f56:	4770      	bx	lr

08002f58 <LL_GPIO_SetPinPull>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	401a      	ands	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	613b      	str	r3, [r7, #16]
  return result;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	4619      	mov	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	408b      	lsls	r3, r1
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	60da      	str	r2, [r3, #12]
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	60fb      	str	r3, [r7, #12]
  return result;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002fc6:	e044      	b.n	8003052 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d03a      	beq.n	800304c <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	2b07      	cmp	r3, #7
 8002fda:	d806      	bhi.n	8002fea <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002fdc:	f240 1201 	movw	r2, #257	@ 0x101
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	e008      	b.n	8002ffc <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3b08      	subs	r3, #8
 8002fee:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ffa:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d106      	bne.n	8003012 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	461a      	mov	r2, r3
 800300a:	69b9      	ldr	r1, [r7, #24]
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ffa3 	bl	8002f58 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	461a      	mov	r2, r3
 8003018:	69b9      	ldr	r1, [r7, #24]
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ff06 	bl	8002e2c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d003      	beq.n	8003030 <LL_GPIO_Init+0x94>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b09      	cmp	r3, #9
 800302e:	d10d      	bne.n	800304c <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	461a      	mov	r2, r3
 8003036:	69b9      	ldr	r1, [r7, #24]
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ff29 	bl	8002e90 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	461a      	mov	r2, r3
 8003044:	69b9      	ldr	r1, [r7, #24]
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ff54 	bl	8002ef4 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	3301      	adds	r3, #1
 8003050:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	fa22 f303 	lsr.w	r3, r2, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1b4      	bne.n	8002fc8 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3720      	adds	r7, #32
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	4638      	mov	r0, r7
 8003072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800308a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800308e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	b29b      	uxth	r3, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	b29b      	uxth	r3, r3
 80030a0:	4013      	ands	r3, r2
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	4638      	mov	r0, r7
 80030d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b0c2      	sub	sp, #264	@ 0x108
 800310c:	af00      	add	r7, sp, #0
 800310e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003116:	6018      	str	r0, [r3, #0]
 8003118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800311c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003120:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	2b01      	cmp	r3, #1
 8003130:	f040 86b7 	bne.w	8003ea2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699a      	ldr	r2, [r3, #24]
 8003140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	429a      	cmp	r2, r3
 800314e:	d908      	bls.n	8003162 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003160:	e007      	b.n	8003172 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	7b1b      	ldrb	r3, [r3, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d13a      	bne.n	80031f8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6959      	ldr	r1, [r3, #20]
 800318e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	88da      	ldrh	r2, [r3, #6]
 800319a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80031a4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80031a8:	6800      	ldr	r0, [r0, #0]
 80031aa:	f001 fb8a 	bl	80048c2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80031ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4413      	add	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	011a      	lsls	r2, r3, #4
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4413      	add	r3, r2
 80031e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	f000 be1f 	b.w	8003e36 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80031f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	78db      	ldrb	r3, [r3, #3]
 8003204:	2b02      	cmp	r3, #2
 8003206:	f040 8462 	bne.w	8003ace <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800320a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800320e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a1a      	ldr	r2, [r3, #32]
 8003216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800321a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	429a      	cmp	r2, r3
 8003224:	f240 83df 	bls.w	80039e6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800322c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	b29b      	uxth	r3, r3
 8003246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800324a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003256:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	441a      	add	r2, r3
 800326c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003270:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003274:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003278:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800327c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003280:	b29b      	uxth	r3, r3
 8003282:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a1a      	ldr	r2, [r3, #32]
 8003290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003294:	1ad2      	subs	r2, r2, r3
 8003296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800329a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80032a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 81c7 	beq.w	8003658 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80032ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80032d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	785b      	ldrb	r3, [r3, #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d177      	bne.n	80033d6 <USB_EPStartXfer+0x2ce>
 80032e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003300:	b29b      	uxth	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003306:	4413      	add	r3, r2
 8003308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800330a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800330e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	011a      	lsls	r2, r3, #4
 8003318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331a:	4413      	add	r3, r2
 800331c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800332c:	b29a      	uxth	r2, r3
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	801a      	strh	r2, [r3, #0]
 8003332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003336:	2b3e      	cmp	r3, #62	@ 0x3e
 8003338:	d921      	bls.n	800337e <USB_EPStartXfer+0x276>
 800333a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2b00      	cmp	r3, #0
 800334e:	d104      	bne.n	800335a <USB_EPStartXfer+0x252>
 8003350:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003354:	3b01      	subs	r3, #1
 8003356:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	b29a      	uxth	r2, r3
 8003360:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003364:	b29b      	uxth	r3, r3
 8003366:	029b      	lsls	r3, r3, #10
 8003368:	b29b      	uxth	r3, r3
 800336a:	4313      	orrs	r3, r2
 800336c:	b29b      	uxth	r3, r3
 800336e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003376:	b29a      	uxth	r2, r3
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	801a      	strh	r2, [r3, #0]
 800337c:	e050      	b.n	8003420 <USB_EPStartXfer+0x318>
 800337e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <USB_EPStartXfer+0x294>
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003394:	b29a      	uxth	r2, r3
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	801a      	strh	r2, [r3, #0]
 800339a:	e041      	b.n	8003420 <USB_EPStartXfer+0x318>
 800339c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80033a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <USB_EPStartXfer+0x2b4>
 80033b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80033b6:	3301      	adds	r3, #1
 80033b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	029b      	lsls	r3, r3, #10
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	4313      	orrs	r3, r2
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	e024      	b.n	8003420 <USB_EPStartXfer+0x318>
 80033d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80033da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	785b      	ldrb	r3, [r3, #1]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d11c      	bne.n	8003420 <USB_EPStartXfer+0x318>
 80033e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80033ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	4413      	add	r3, r2
 80033fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80033fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	011a      	lsls	r2, r3, #4
 800340c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340e:	4413      	add	r3, r2
 8003410:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800341a:	b29a      	uxth	r2, r3
 800341c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	895b      	ldrh	r3, [r3, #10]
 800342c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6959      	ldr	r1, [r3, #20]
 800343c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003440:	b29b      	uxth	r3, r3
 8003442:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003446:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800344a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800344e:	6800      	ldr	r0, [r0, #0]
 8003450:	f001 fa37 	bl	80048c2 <USB_WritePMA>
            ep->xfer_buff += len;
 8003454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003464:	441a      	add	r2, r3
 8003466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800346a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6a1a      	ldr	r2, [r3, #32]
 800347e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	429a      	cmp	r2, r3
 800348c:	d90f      	bls.n	80034ae <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800348e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6a1a      	ldr	r2, [r3, #32]
 800349a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800349e:	1ad2      	subs	r2, r2, r3
 80034a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	621a      	str	r2, [r3, #32]
 80034ac:	e00e      	b.n	80034cc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80034ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80034be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2200      	movs	r2, #0
 80034ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80034cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	785b      	ldrb	r3, [r3, #1]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d177      	bne.n	80035cc <USB_EPStartXfer+0x4c4>
 80034dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	61bb      	str	r3, [r7, #24]
 80034e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	4413      	add	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	011a      	lsls	r2, r3, #4
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	4413      	add	r3, r2
 8003512:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003522:	b29a      	uxth	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	801a      	strh	r2, [r3, #0]
 8003528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800352c:	2b3e      	cmp	r3, #62	@ 0x3e
 800352e:	d921      	bls.n	8003574 <USB_EPStartXfer+0x46c>
 8003530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800353a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <USB_EPStartXfer+0x448>
 8003546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800354a:	3b01      	subs	r3, #1
 800354c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	b29a      	uxth	r2, r3
 8003556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800355a:	b29b      	uxth	r3, r3
 800355c:	029b      	lsls	r3, r3, #10
 800355e:	b29b      	uxth	r3, r3
 8003560:	4313      	orrs	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800356c:	b29a      	uxth	r2, r3
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	801a      	strh	r2, [r3, #0]
 8003572:	e056      	b.n	8003622 <USB_EPStartXfer+0x51a>
 8003574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <USB_EPStartXfer+0x48a>
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	b29b      	uxth	r3, r3
 8003582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800358a:	b29a      	uxth	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	801a      	strh	r2, [r3, #0]
 8003590:	e047      	b.n	8003622 <USB_EPStartXfer+0x51a>
 8003592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800359c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d004      	beq.n	80035b2 <USB_EPStartXfer+0x4aa>
 80035a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ac:	3301      	adds	r3, #1
 80035ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035bc:	b29b      	uxth	r3, r3
 80035be:	029b      	lsls	r3, r3, #10
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	4313      	orrs	r3, r2
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	801a      	strh	r2, [r3, #0]
 80035ca:	e02a      	b.n	8003622 <USB_EPStartXfer+0x51a>
 80035cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80035d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	785b      	ldrb	r3, [r3, #1]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d122      	bne.n	8003622 <USB_EPStartXfer+0x51a>
 80035dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80035e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	623b      	str	r3, [r7, #32]
 80035e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80035ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	4413      	add	r3, r2
 80035fe:	623b      	str	r3, [r7, #32]
 8003600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	011a      	lsls	r2, r3, #4
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	4413      	add	r3, r2
 8003612:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800361c:	b29a      	uxth	r2, r3
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	891b      	ldrh	r3, [r3, #8]
 800362e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6959      	ldr	r1, [r3, #20]
 800363e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003642:	b29b      	uxth	r3, r3
 8003644:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003648:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800364c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003650:	6800      	ldr	r0, [r0, #0]
 8003652:	f001 f936 	bl	80048c2 <USB_WritePMA>
 8003656:	e3ee      	b.n	8003e36 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800365c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d177      	bne.n	8003758 <USB_EPStartXfer+0x650>
 8003668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800366c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003682:	b29b      	uxth	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003688:	4413      	add	r3, r2
 800368a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800368c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	011a      	lsls	r2, r3, #4
 800369a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800369c:	4413      	add	r3, r2
 800369e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036b2:	801a      	strh	r2, [r3, #0]
 80036b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80036ba:	d921      	bls.n	8003700 <USB_EPStartXfer+0x5f8>
 80036bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d104      	bne.n	80036dc <USB_EPStartXfer+0x5d4>
 80036d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036d6:	3b01      	subs	r3, #1
 80036d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	029b      	lsls	r3, r3, #10
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	4313      	orrs	r3, r2
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	e056      	b.n	80037ae <USB_EPStartXfer+0x6a6>
 8003700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10a      	bne.n	800371e <USB_EPStartXfer+0x616>
 8003708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003716:	b29a      	uxth	r2, r3
 8003718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800371a:	801a      	strh	r2, [r3, #0]
 800371c:	e047      	b.n	80037ae <USB_EPStartXfer+0x6a6>
 800371e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003722:	085b      	lsrs	r3, r3, #1
 8003724:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <USB_EPStartXfer+0x636>
 8003734:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003738:	3301      	adds	r3, #1
 800373a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800373e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b29a      	uxth	r2, r3
 8003744:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003748:	b29b      	uxth	r3, r3
 800374a:	029b      	lsls	r3, r3, #10
 800374c:	b29b      	uxth	r3, r3
 800374e:	4313      	orrs	r3, r2
 8003750:	b29a      	uxth	r2, r3
 8003752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003754:	801a      	strh	r2, [r3, #0]
 8003756:	e02a      	b.n	80037ae <USB_EPStartXfer+0x6a6>
 8003758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800375c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	785b      	ldrb	r3, [r3, #1]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d122      	bne.n	80037ae <USB_EPStartXfer+0x6a6>
 8003768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800376c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	653b      	str	r3, [r7, #80]	@ 0x50
 8003774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003778:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003782:	b29b      	uxth	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003788:	4413      	add	r3, r2
 800378a:	653b      	str	r3, [r7, #80]	@ 0x50
 800378c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	011a      	lsls	r2, r3, #4
 800379a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800379c:	4413      	add	r3, r2
 800379e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80037ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	891b      	ldrh	r3, [r3, #8]
 80037ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6959      	ldr	r1, [r3, #20]
 80037ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80037d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80037d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80037dc:	6800      	ldr	r0, [r0, #0]
 80037de:	f001 f870 	bl	80048c2 <USB_WritePMA>
            ep->xfer_buff += len;
 80037e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037f2:	441a      	add	r2, r3
 80037f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6a1a      	ldr	r2, [r3, #32]
 800380c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	429a      	cmp	r2, r3
 800381a:	d90f      	bls.n	800383c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800381c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a1a      	ldr	r2, [r3, #32]
 8003828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800382c:	1ad2      	subs	r2, r2, r3
 800382e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	621a      	str	r2, [r3, #32]
 800383a:	e00e      	b.n	800385a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800383c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800384c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800385a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800385e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	643b      	str	r3, [r7, #64]	@ 0x40
 8003866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800386a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	785b      	ldrb	r3, [r3, #1]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d177      	bne.n	8003966 <USB_EPStartXfer+0x85e>
 8003876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800387a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003886:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003890:	b29b      	uxth	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003896:	4413      	add	r3, r2
 8003898:	63bb      	str	r3, [r7, #56]	@ 0x38
 800389a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800389e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	011a      	lsls	r2, r3, #4
 80038a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038aa:	4413      	add	r3, r2
 80038ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038bc:	b29a      	uxth	r2, r3
 80038be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c0:	801a      	strh	r2, [r3, #0]
 80038c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80038c8:	d921      	bls.n	800390e <USB_EPStartXfer+0x806>
 80038ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d104      	bne.n	80038ea <USB_EPStartXfer+0x7e2>
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e4:	3b01      	subs	r3, #1
 80038e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	029b      	lsls	r3, r3, #10
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	4313      	orrs	r3, r2
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003906:	b29a      	uxth	r2, r3
 8003908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390a:	801a      	strh	r2, [r3, #0]
 800390c:	e050      	b.n	80039b0 <USB_EPStartXfer+0x8a8>
 800390e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <USB_EPStartXfer+0x824>
 8003916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003924:	b29a      	uxth	r2, r3
 8003926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003928:	801a      	strh	r2, [r3, #0]
 800392a:	e041      	b.n	80039b0 <USB_EPStartXfer+0x8a8>
 800392c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003930:	085b      	lsrs	r3, r3, #1
 8003932:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d004      	beq.n	800394c <USB_EPStartXfer+0x844>
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003946:	3301      	adds	r3, #1
 8003948:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800394c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	b29a      	uxth	r2, r3
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003956:	b29b      	uxth	r3, r3
 8003958:	029b      	lsls	r3, r3, #10
 800395a:	b29b      	uxth	r3, r3
 800395c:	4313      	orrs	r3, r2
 800395e:	b29a      	uxth	r2, r3
 8003960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003962:	801a      	strh	r2, [r3, #0]
 8003964:	e024      	b.n	80039b0 <USB_EPStartXfer+0x8a8>
 8003966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800396a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	785b      	ldrb	r3, [r3, #1]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d11c      	bne.n	80039b0 <USB_EPStartXfer+0x8a8>
 8003976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800397a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003984:	b29b      	uxth	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800398a:	4413      	add	r3, r2
 800398c:	643b      	str	r3, [r7, #64]	@ 0x40
 800398e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	011a      	lsls	r2, r3, #4
 800399c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800399e:	4413      	add	r3, r2
 80039a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80039b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	895b      	ldrh	r3, [r3, #10]
 80039bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6959      	ldr	r1, [r3, #20]
 80039cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80039d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80039da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80039de:	6800      	ldr	r0, [r0, #0]
 80039e0:	f000 ff6f 	bl	80048c2 <USB_WritePMA>
 80039e4:	e227      	b.n	8003e36 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80039e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80039f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a1c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	441a      	add	r2, r3
 8003a3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a72:	4413      	add	r3, r2
 8003a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	011a      	lsls	r2, r3, #4
 8003a84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a86:	4413      	add	r3, r2
 8003a88:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	891b      	ldrh	r3, [r3, #8]
 8003aa4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6959      	ldr	r1, [r3, #20]
 8003ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003abe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003ac2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003ac6:	6800      	ldr	r0, [r0, #0]
 8003ac8:	f000 fefb 	bl	80048c2 <USB_WritePMA>
 8003acc:	e1b3      	b.n	8003e36 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6a1a      	ldr	r2, [r3, #32]
 8003ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ade:	1ad2      	subs	r2, r2, r3
 8003ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003af0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80c6 	beq.w	8003ca0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	785b      	ldrb	r3, [r3, #1]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d177      	bne.n	8003c20 <USB_EPStartXfer+0xb18>
 8003b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b50:	4413      	add	r3, r2
 8003b52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	011a      	lsls	r2, r3, #4
 8003b62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b64:	4413      	add	r3, r2
 8003b66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b80:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b82:	d921      	bls.n	8003bc8 <USB_EPStartXfer+0xac0>
 8003b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b92:	f003 031f 	and.w	r3, r3, #31
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <USB_EPStartXfer+0xa9c>
 8003b9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003ba4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	029b      	lsls	r3, r3, #10
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bc4:	801a      	strh	r2, [r3, #0]
 8003bc6:	e050      	b.n	8003c6a <USB_EPStartXfer+0xb62>
 8003bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <USB_EPStartXfer+0xade>
 8003bd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003be2:	801a      	strh	r2, [r3, #0]
 8003be4:	e041      	b.n	8003c6a <USB_EPStartXfer+0xb62>
 8003be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d004      	beq.n	8003c06 <USB_EPStartXfer+0xafe>
 8003bfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003c00:	3301      	adds	r3, #1
 8003c02:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	029b      	lsls	r3, r3, #10
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c1c:	801a      	strh	r2, [r3, #0]
 8003c1e:	e024      	b.n	8003c6a <USB_EPStartXfer+0xb62>
 8003c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	785b      	ldrb	r3, [r3, #1]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d11c      	bne.n	8003c6a <USB_EPStartXfer+0xb62>
 8003c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c44:	4413      	add	r3, r2
 8003c46:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	011a      	lsls	r2, r3, #4
 8003c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c58:	4413      	add	r3, r2
 8003c5a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c68:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	895b      	ldrh	r3, [r3, #10]
 8003c76:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6959      	ldr	r1, [r3, #20]
 8003c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003c90:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003c94:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003c98:	6800      	ldr	r0, [r0, #0]
 8003c9a:	f000 fe12 	bl	80048c2 <USB_WritePMA>
 8003c9e:	e0ca      	b.n	8003e36 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	785b      	ldrb	r3, [r3, #1]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d177      	bne.n	8003da0 <USB_EPStartXfer+0xc98>
 8003cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cd0:	4413      	add	r3, r2
 8003cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	011a      	lsls	r2, r3, #4
 8003ce2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cfa:	801a      	strh	r2, [r3, #0]
 8003cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d00:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d02:	d921      	bls.n	8003d48 <USB_EPStartXfer+0xc40>
 8003d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d12:	f003 031f 	and.w	r3, r3, #31
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d104      	bne.n	8003d24 <USB_EPStartXfer+0xc1c>
 8003d1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	029b      	lsls	r3, r3, #10
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	4313      	orrs	r3, r2
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d44:	801a      	strh	r2, [r3, #0]
 8003d46:	e05c      	b.n	8003e02 <USB_EPStartXfer+0xcfa>
 8003d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <USB_EPStartXfer+0xc5e>
 8003d50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d62:	801a      	strh	r2, [r3, #0]
 8003d64:	e04d      	b.n	8003e02 <USB_EPStartXfer+0xcfa>
 8003d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <USB_EPStartXfer+0xc7e>
 8003d7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003d80:	3301      	adds	r3, #1
 8003d82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	029b      	lsls	r3, r3, #10
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	4313      	orrs	r3, r2
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d9c:	801a      	strh	r2, [r3, #0]
 8003d9e:	e030      	b.n	8003e02 <USB_EPStartXfer+0xcfa>
 8003da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	785b      	ldrb	r3, [r3, #1]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d128      	bne.n	8003e02 <USB_EPStartXfer+0xcfa>
 8003db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003db4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	011a      	lsls	r2, r3, #4
 8003de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dec:	4413      	add	r3, r2
 8003dee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003df2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e00:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	891b      	ldrh	r3, [r3, #8]
 8003e0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6959      	ldr	r1, [r3, #20]
 8003e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003e28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003e2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003e30:	6800      	ldr	r0, [r0, #0]
 8003e32:	f000 fd46 	bl	80048c2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e5c:	817b      	strh	r3, [r7, #10]
 8003e5e:	897b      	ldrh	r3, [r7, #10]
 8003e60:	f083 0310 	eor.w	r3, r3, #16
 8003e64:	817b      	strh	r3, [r7, #10]
 8003e66:	897b      	ldrh	r3, [r7, #10]
 8003e68:	f083 0320 	eor.w	r3, r3, #32
 8003e6c:	817b      	strh	r3, [r7, #10]
 8003e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	441a      	add	r2, r3
 8003e88:	897b      	ldrh	r3, [r7, #10]
 8003e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	8013      	strh	r3, [r2, #0]
 8003e9e:	f000 bcde 	b.w	800485e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8003ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	7b1b      	ldrb	r3, [r3, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f040 80bb 	bne.w	800402a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8003eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d917      	bls.n	8003f00 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8003ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8003ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef0:	1ad2      	subs	r2, r2, r3
 8003ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	619a      	str	r2, [r3, #24]
 8003efe:	e00e      	b.n	8003f1e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8003f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8003f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f42:	4413      	add	r3, r2
 8003f44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	011a      	lsls	r2, r3, #4
 8003f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f76:	801a      	strh	r2, [r3, #0]
 8003f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f7e:	d924      	bls.n	8003fca <USB_EPStartXfer+0xec2>
 8003f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d104      	bne.n	8003fa0 <USB_EPStartXfer+0xe98>
 8003f96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	029b      	lsls	r3, r3, #10
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fc4:	801a      	strh	r2, [r3, #0]
 8003fc6:	f000 bc10 	b.w	80047ea <USB_EPStartXfer+0x16e2>
 8003fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10c      	bne.n	8003fec <USB_EPStartXfer+0xee4>
 8003fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fe8:	801a      	strh	r2, [r3, #0]
 8003fea:	e3fe      	b.n	80047ea <USB_EPStartXfer+0x16e2>
 8003fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d004      	beq.n	800400c <USB_EPStartXfer+0xf04>
 8004002:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004006:	3301      	adds	r3, #1
 8004008:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800400c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	b29a      	uxth	r2, r3
 8004014:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004018:	b29b      	uxth	r3, r3
 800401a:	029b      	lsls	r3, r3, #10
 800401c:	b29b      	uxth	r3, r3
 800401e:	4313      	orrs	r3, r2
 8004020:	b29a      	uxth	r2, r3
 8004022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004026:	801a      	strh	r2, [r3, #0]
 8004028:	e3df      	b.n	80047ea <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800402a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800402e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	78db      	ldrb	r3, [r3, #3]
 8004036:	2b02      	cmp	r3, #2
 8004038:	f040 8218 	bne.w	800446c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800403c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	785b      	ldrb	r3, [r3, #1]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f040 809d 	bne.w	8004188 <USB_EPStartXfer+0x1080>
 800404e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004052:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800405c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004060:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800406a:	b29b      	uxth	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004072:	4413      	add	r3, r2
 8004074:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800407c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	011a      	lsls	r2, r3, #4
 8004086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800408a:	4413      	add	r3, r2
 800408c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004094:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	b29b      	uxth	r3, r3
 800409c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040a6:	801a      	strh	r2, [r3, #0]
 80040a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80040b6:	d92b      	bls.n	8004110 <USB_EPStartXfer+0x1008>
 80040b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d104      	bne.n	80040e8 <USB_EPStartXfer+0xfe0>
 80040de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e2:	3b01      	subs	r3, #1
 80040e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	029b      	lsls	r3, r3, #10
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	4313      	orrs	r3, r2
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004106:	b29a      	uxth	r2, r3
 8004108:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800410c:	801a      	strh	r2, [r3, #0]
 800410e:	e070      	b.n	80041f2 <USB_EPStartXfer+0x10ea>
 8004110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10c      	bne.n	800413a <USB_EPStartXfer+0x1032>
 8004120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800412c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004130:	b29a      	uxth	r2, r3
 8004132:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004136:	801a      	strh	r2, [r3, #0]
 8004138:	e05b      	b.n	80041f2 <USB_EPStartXfer+0x10ea>
 800413a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800413e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800414c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d004      	beq.n	800416a <USB_EPStartXfer+0x1062>
 8004160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004164:	3301      	adds	r3, #1
 8004166:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800416a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29a      	uxth	r2, r3
 8004172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004176:	b29b      	uxth	r3, r3
 8004178:	029b      	lsls	r3, r3, #10
 800417a:	b29b      	uxth	r3, r3
 800417c:	4313      	orrs	r3, r2
 800417e:	b29a      	uxth	r2, r3
 8004180:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	e034      	b.n	80041f2 <USB_EPStartXfer+0x10ea>
 8004188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800418c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	785b      	ldrb	r3, [r3, #1]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d12c      	bne.n	80041f2 <USB_EPStartXfer+0x10ea>
 8004198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800419c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041bc:	4413      	add	r3, r2
 80041be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	011a      	lsls	r2, r3, #4
 80041d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041d4:	4413      	add	r3, r2
 80041d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041f0:	801a      	strh	r2, [r3, #0]
 80041f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	785b      	ldrb	r3, [r3, #1]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f040 809d 	bne.w	800434c <USB_EPStartXfer+0x1244>
 8004212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004216:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004224:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800422e:	b29b      	uxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004236:	4413      	add	r3, r2
 8004238:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800423c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	011a      	lsls	r2, r3, #4
 800424a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800424e:	4413      	add	r3, r2
 8004250:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004254:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004258:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004264:	b29a      	uxth	r2, r3
 8004266:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800426a:	801a      	strh	r2, [r3, #0]
 800426c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b3e      	cmp	r3, #62	@ 0x3e
 800427a:	d92b      	bls.n	80042d4 <USB_EPStartXfer+0x11cc>
 800427c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800428e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <USB_EPStartXfer+0x11a4>
 80042a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042a6:	3b01      	subs	r3, #1
 80042a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	029b      	lsls	r3, r3, #10
 80042bc:	b29b      	uxth	r3, r3
 80042be:	4313      	orrs	r3, r2
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042d0:	801a      	strh	r2, [r3, #0]
 80042d2:	e069      	b.n	80043a8 <USB_EPStartXfer+0x12a0>
 80042d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10c      	bne.n	80042fe <USB_EPStartXfer+0x11f6>
 80042e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042fa:	801a      	strh	r2, [r3, #0]
 80042fc:	e054      	b.n	80043a8 <USB_EPStartXfer+0x12a0>
 80042fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	085b      	lsrs	r3, r3, #1
 800430c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <USB_EPStartXfer+0x1226>
 8004324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004328:	3301      	adds	r3, #1
 800432a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800432e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29a      	uxth	r2, r3
 8004336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800433a:	b29b      	uxth	r3, r3
 800433c:	029b      	lsls	r3, r3, #10
 800433e:	b29b      	uxth	r3, r3
 8004340:	4313      	orrs	r3, r2
 8004342:	b29a      	uxth	r2, r3
 8004344:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004348:	801a      	strh	r2, [r3, #0]
 800434a:	e02d      	b.n	80043a8 <USB_EPStartXfer+0x12a0>
 800434c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	785b      	ldrb	r3, [r3, #1]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d125      	bne.n	80043a8 <USB_EPStartXfer+0x12a0>
 800435c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800436a:	b29b      	uxth	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004372:	4413      	add	r3, r2
 8004374:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800437c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	011a      	lsls	r2, r3, #4
 8004386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800438a:	4413      	add	r3, r2
 800438c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004390:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043a6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80043a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8218 	beq.w	80047ea <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80043ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80043da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80043de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <USB_EPStartXfer+0x12ea>
 80043e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80043ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10d      	bne.n	800440e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80043f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80043f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f040 81f5 	bne.w	80047ea <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004400:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	f040 81ee 	bne.w	80047ea <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800440e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800441c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004434:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800443c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	441a      	add	r2, r3
 8004452:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004456:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800445a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800445e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004462:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004466:	b29b      	uxth	r3, r3
 8004468:	8013      	strh	r3, [r2, #0]
 800446a:	e1be      	b.n	80047ea <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800446c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	78db      	ldrb	r3, [r3, #3]
 8004478:	2b01      	cmp	r3, #1
 800447a:	f040 81b4 	bne.w	80047e6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800447e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800448e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	429a      	cmp	r2, r3
 8004498:	d917      	bls.n	80044ca <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800449a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800449e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80044aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ba:	1ad2      	subs	r2, r2, r3
 80044bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	619a      	str	r2, [r3, #24]
 80044c8:	e00e      	b.n	80044e8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80044ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80044da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2200      	movs	r2, #0
 80044e6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80044e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	785b      	ldrb	r3, [r3, #1]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 8085 	bne.w	8004604 <USB_EPStartXfer+0x14fc>
 80044fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800450c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004516:	b29b      	uxth	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800451e:	4413      	add	r3, r2
 8004520:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	011a      	lsls	r2, r3, #4
 8004532:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004536:	4413      	add	r3, r2
 8004538:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800453c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004540:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800454c:	b29a      	uxth	r2, r3
 800454e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004552:	801a      	strh	r2, [r3, #0]
 8004554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004558:	2b3e      	cmp	r3, #62	@ 0x3e
 800455a:	d923      	bls.n	80045a4 <USB_EPStartXfer+0x149c>
 800455c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <USB_EPStartXfer+0x1474>
 8004572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004576:	3b01      	subs	r3, #1
 8004578:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800457c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29a      	uxth	r2, r3
 8004584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004588:	b29b      	uxth	r3, r3
 800458a:	029b      	lsls	r3, r3, #10
 800458c:	b29b      	uxth	r3, r3
 800458e:	4313      	orrs	r3, r2
 8004590:	b29b      	uxth	r3, r3
 8004592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800459a:	b29a      	uxth	r2, r3
 800459c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045a0:	801a      	strh	r2, [r3, #0]
 80045a2:	e060      	b.n	8004666 <USB_EPStartXfer+0x155e>
 80045a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10c      	bne.n	80045c6 <USB_EPStartXfer+0x14be>
 80045ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045bc:	b29a      	uxth	r2, r3
 80045be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	e04f      	b.n	8004666 <USB_EPStartXfer+0x155e>
 80045c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80045d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d004      	beq.n	80045e6 <USB_EPStartXfer+0x14de>
 80045dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045e0:	3301      	adds	r3, #1
 80045e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80045e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	029b      	lsls	r3, r3, #10
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	4313      	orrs	r3, r2
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	e030      	b.n	8004666 <USB_EPStartXfer+0x155e>
 8004604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d128      	bne.n	8004666 <USB_EPStartXfer+0x155e>
 8004614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004618:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004630:	b29b      	uxth	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004638:	4413      	add	r3, r2
 800463a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800463e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	011a      	lsls	r2, r3, #4
 800464c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004650:	4413      	add	r3, r2
 8004652:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004656:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800465a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800465e:	b29a      	uxth	r2, r3
 8004660:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004664:	801a      	strh	r2, [r3, #0]
 8004666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800466a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	785b      	ldrb	r3, [r3, #1]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f040 8085 	bne.w	8004790 <USB_EPStartXfer+0x1688>
 8004686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800468a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004698:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80046aa:	4413      	add	r3, r2
 80046ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80046b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	011a      	lsls	r2, r3, #4
 80046be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80046c2:	4413      	add	r3, r2
 80046c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046d8:	b29a      	uxth	r2, r3
 80046da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80046de:	801a      	strh	r2, [r3, #0]
 80046e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80046e6:	d923      	bls.n	8004730 <USB_EPStartXfer+0x1628>
 80046e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <USB_EPStartXfer+0x1600>
 80046fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004702:	3b01      	subs	r3, #1
 8004704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29a      	uxth	r2, r3
 8004710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004714:	b29b      	uxth	r3, r3
 8004716:	029b      	lsls	r3, r3, #10
 8004718:	b29b      	uxth	r3, r3
 800471a:	4313      	orrs	r3, r2
 800471c:	b29b      	uxth	r3, r3
 800471e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004726:	b29a      	uxth	r2, r3
 8004728:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800472c:	801a      	strh	r2, [r3, #0]
 800472e:	e05c      	b.n	80047ea <USB_EPStartXfer+0x16e2>
 8004730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10c      	bne.n	8004752 <USB_EPStartXfer+0x164a>
 8004738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	b29b      	uxth	r3, r3
 8004740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004748:	b29a      	uxth	r2, r3
 800474a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800474e:	801a      	strh	r2, [r3, #0]
 8004750:	e04b      	b.n	80047ea <USB_EPStartXfer+0x16e2>
 8004752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800475c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d004      	beq.n	8004772 <USB_EPStartXfer+0x166a>
 8004768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800476c:	3301      	adds	r3, #1
 800476e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004772:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29a      	uxth	r2, r3
 800477a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800477e:	b29b      	uxth	r3, r3
 8004780:	029b      	lsls	r3, r3, #10
 8004782:	b29b      	uxth	r3, r3
 8004784:	4313      	orrs	r3, r2
 8004786:	b29a      	uxth	r2, r3
 8004788:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800478c:	801a      	strh	r2, [r3, #0]
 800478e:	e02c      	b.n	80047ea <USB_EPStartXfer+0x16e2>
 8004790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d124      	bne.n	80047ea <USB_EPStartXfer+0x16e2>
 80047a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047b6:	4413      	add	r3, r2
 80047b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	011a      	lsls	r2, r3, #4
 80047ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047ce:	4413      	add	r3, r2
 80047d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047dc:	b29a      	uxth	r2, r3
 80047de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047e2:	801a      	strh	r2, [r3, #0]
 80047e4:	e001      	b.n	80047ea <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e03a      	b.n	8004860 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800480c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004810:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004814:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004818:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800481c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004820:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004824:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004828:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800482c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004830:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800483a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	441a      	add	r2, r3
 8004846:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800484a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800484e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800485a:	b29b      	uxth	r3, r3
 800485c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	460b      	mov	r3, r1
 8004874:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004876:	78fb      	ldrb	r3, [r7, #3]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d103      	bne.n	8004884 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2280      	movs	r2, #128	@ 0x80
 8004880:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr

08004890 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80048b6:	68fb      	ldr	r3, [r7, #12]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr

080048c2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b08b      	sub	sp, #44	@ 0x2c
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	4611      	mov	r1, r2
 80048ce:	461a      	mov	r2, r3
 80048d0:	460b      	mov	r3, r1
 80048d2:	80fb      	strh	r3, [r7, #6]
 80048d4:	4613      	mov	r3, r2
 80048d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80048d8:	88bb      	ldrh	r3, [r7, #4]
 80048da:	3301      	adds	r3, #1
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	005a      	lsls	r2, r3, #1
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048f4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048fa:	e01e      	b.n	800493a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3301      	adds	r3, #1
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	b21a      	sxth	r2, r3
 800490c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004910:	4313      	orrs	r3, r2
 8004912:	b21b      	sxth	r3, r3
 8004914:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	8a7a      	ldrh	r2, [r7, #18]
 800491a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	3302      	adds	r3, #2
 8004920:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	3302      	adds	r3, #2
 8004926:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	3301      	adds	r3, #1
 800492c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3301      	adds	r3, #1
 8004932:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	3b01      	subs	r3, #1
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1dd      	bne.n	80048fc <USB_WritePMA+0x3a>
  }
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	372c      	adds	r7, #44	@ 0x2c
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800494c:	b480      	push	{r7}
 800494e:	b08b      	sub	sp, #44	@ 0x2c
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	4611      	mov	r1, r2
 8004958:	461a      	mov	r2, r3
 800495a:	460b      	mov	r3, r1
 800495c:	80fb      	strh	r3, [r7, #6]
 800495e:	4613      	mov	r3, r2
 8004960:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004962:	88bb      	ldrh	r3, [r7, #4]
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	b29b      	uxth	r3, r3
 8004968:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	005a      	lsls	r2, r3, #1
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800497e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
 8004984:	e01b      	b.n	80049be <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	3302      	adds	r3, #2
 8004992:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	3301      	adds	r3, #1
 80049a0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	3301      	adds	r3, #1
 80049b0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	3302      	adds	r3, #2
 80049b6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	3b01      	subs	r3, #1
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80049be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e0      	bne.n	8004986 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80049c4:	88bb      	ldrh	r3, [r7, #4]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	701a      	strb	r2, [r3, #0]
  }
}
 80049e0:	bf00      	nop
 80049e2:	372c      	adds	r7, #44	@ 0x2c
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr
	...

080049ec <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_fifo_t _cdcd_fifo_cfg;

static bool _prep_out_transaction(uint8_t itf) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	22a8      	movs	r2, #168	@ 0xa8
 80049fe:	fb02 f303 	mul.w	r3, r2, r3
 8004a02:	4a30      	ldr	r2, [pc, #192]	@ (8004ac4 <_prep_out_transaction+0xd8>)
 8004a04:	4413      	add	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	01db      	lsls	r3, r3, #7
 8004a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac8 <_prep_out_transaction+0xdc>)
 8004a0e:	4413      	add	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8004a12:	f002 f88f 	bl	8006b34 <tud_mounted>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d009      	beq.n	8004a30 <_prep_out_transaction+0x44>
 8004a1c:	f002 f89a 	bl	8006b54 <tud_suspended>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f083 0301 	eor.w	r3, r3, #1
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <_prep_out_transaction+0x44>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <_prep_out_transaction+0x46>
 8004a30:	2300      	movs	r3, #0
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8004a38:	f083 0301 	eor.w	r3, r3, #1
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d103      	bne.n	8004a4a <_prep_out_transaction+0x5e>
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	78db      	ldrb	r3, [r3, #3]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <_prep_out_transaction+0x62>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e035      	b.n	8004aba <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	3310      	adds	r3, #16
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 fd75 	bl	8006542 <tu_fifo_remaining>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8004a5c:	897b      	ldrh	r3, [r7, #10]
 8004a5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a60:	d801      	bhi.n	8004a66 <_prep_out_transaction+0x7a>
 8004a62:	2300      	movs	r3, #0
 8004a64:	e029      	b.n	8004aba <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	78da      	ldrb	r2, [r3, #3]
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f003 fd06 	bl	8008480 <usbd_edpt_claim>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f083 0301 	eor.w	r3, r3, #1
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <_prep_out_transaction+0x98>
 8004a80:	2300      	movs	r3, #0
 8004a82:	e01a      	b.n	8004aba <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	3310      	adds	r3, #16
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 fd5a 	bl	8006542 <tu_fifo_remaining>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8004a92:	897b      	ldrh	r3, [r7, #10]
 8004a94:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a96:	d908      	bls.n	8004aaa <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	78d9      	ldrb	r1, [r3, #3]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	7df8      	ldrb	r0, [r7, #23]
 8004aa0:	2340      	movs	r3, #64	@ 0x40
 8004aa2:	f003 fd41 	bl	8008528 <usbd_edpt_xfer>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	e007      	b.n	8004aba <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	78da      	ldrb	r2, [r3, #3]
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f003 fd0e 	bl	80084d4 <usbd_edpt_release>
    return false;
 8004ab8:	2300      	movs	r3, #0
  }
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	200003fc 	.word	0x200003fc
 8004ac8:	200004a4 	.word	0x200004a4

08004acc <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	22a8      	movs	r2, #168	@ 0xa8
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	3310      	adds	r3, #16
 8004ae0:	4a04      	ldr	r2, [pc, #16]	@ (8004af4 <tud_cdc_n_available+0x28>)
 8004ae2:	4413      	add	r3, r2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 fcba 	bl	800645e <tu_fifo_count>
 8004aea:	4603      	mov	r3, r0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	200003fc 	.word	0x200003fc

08004af8 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	22a8      	movs	r2, #168	@ 0xa8
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8004b4c <tud_cdc_n_read+0x54>)
 8004b10:	4413      	add	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f103 0010 	add.w	r0, r3, #16
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d802      	bhi.n	8004b2a <tud_cdc_n_read+0x32>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	e001      	b.n	8004b2e <tud_cdc_n_read+0x36>
 8004b2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b2e:	461a      	mov	r2, r3
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	f001 fd61 	bl	80065f8 <tu_fifo_read_n>
 8004b36:	4603      	mov	r3, r0
 8004b38:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff ff55 	bl	80049ec <_prep_out_transaction>
  return num_read;
 8004b42:	693b      	ldr	r3, [r7, #16]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	200003fc 	.word	0x200003fc

08004b50 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	22a8      	movs	r2, #168	@ 0xa8
 8004b62:	fb02 f303 	mul.w	r3, r2, r3
 8004b66:	4a13      	ldr	r2, [pc, #76]	@ (8004bb4 <tud_cdc_n_write+0x64>)
 8004b68:	4413      	add	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f103 001c 	add.w	r0, r3, #28
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d802      	bhi.n	8004b82 <tud_cdc_n_write+0x32>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	e001      	b.n	8004b86 <tud_cdc_n_write+0x36>
 8004b82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b86:	461a      	mov	r2, r3
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	f001 fd8a 	bl	80066a2 <tu_fifo_write_n>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	331c      	adds	r3, #28
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 fc61 	bl	800645e <tu_fifo_count>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004ba0:	d903      	bls.n	8004baa <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 f807 	bl	8004bb8 <tud_cdc_n_write_flush>
  }

  return ret;
 8004baa:	8a7b      	ldrh	r3, [r7, #18]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	200003fc 	.word	0x200003fc

08004bb8 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	22a8      	movs	r2, #168	@ 0xa8
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	4a3c      	ldr	r2, [pc, #240]	@ (8004cbc <tud_cdc_n_write_flush+0x104>)
 8004bcc:	4413      	add	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	01db      	lsls	r3, r3, #7
 8004bd4:	4a3a      	ldr	r2, [pc, #232]	@ (8004cc0 <tud_cdc_n_write_flush+0x108>)
 8004bd6:	4413      	add	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	f001 ffab 	bl	8006b34 <tud_mounted>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d009      	beq.n	8004bf8 <tud_cdc_n_write_flush+0x40>
 8004be4:	f001 ffb6 	bl	8006b54 <tud_suspended>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f083 0301 	eor.w	r3, r3, #1
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <tud_cdc_n_write_flush+0x40>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <tud_cdc_n_write_flush+0x42>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8004c00:	f083 0301 	eor.w	r3, r3, #1
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <tud_cdc_n_write_flush+0x56>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e051      	b.n	8004cb2 <tud_cdc_n_write_flush+0xfa>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	331c      	adds	r3, #28
 8004c12:	4618      	mov	r0, r3
 8004c14:	f001 fc23 	bl	800645e <tu_fifo_count>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <tud_cdc_n_write_flush+0x6a>
    return 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e047      	b.n	8004cb2 <tud_cdc_n_write_flush+0xfa>
  }

  const uint8_t rhport = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	789a      	ldrb	r2, [r3, #2]
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f003 fc26 	bl	8008480 <usbd_edpt_claim>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f083 0301 	eor.w	r3, r3, #1
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <tud_cdc_n_write_flush+0x8c>
 8004c40:	2300      	movs	r3, #0
 8004c42:	e036      	b.n	8004cb2 <tud_cdc_n_write_flush+0xfa>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f103 001c 	add.w	r0, r3, #28
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	3340      	adds	r3, #64	@ 0x40
 8004c4e:	2240      	movs	r2, #64	@ 0x40
 8004c50:	4619      	mov	r1, r3
 8004c52:	f001 fcd1 	bl	80065f8 <tu_fifo_read_n>
 8004c56:	4603      	mov	r3, r0
 8004c58:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8004c5a:	89bb      	ldrh	r3, [r7, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d020      	beq.n	8004ca2 <tud_cdc_n_write_flush+0xea>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	7899      	ldrb	r1, [r3, #2]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004c6a:	89bb      	ldrh	r3, [r7, #12]
 8004c6c:	7bf8      	ldrb	r0, [r7, #15]
 8004c6e:	f003 fc5b 	bl	8008528 <usbd_edpt_xfer>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f083 0301 	eor.w	r3, r3, #1
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00f      	beq.n	8004c9e <tud_cdc_n_write_flush+0xe6>
 8004c7e:	22d5      	movs	r2, #213	@ 0xd5
 8004c80:	4910      	ldr	r1, [pc, #64]	@ (8004cc4 <tud_cdc_n_write_flush+0x10c>)
 8004c82:	4811      	ldr	r0, [pc, #68]	@ (8004cc8 <tud_cdc_n_write_flush+0x110>)
 8004c84:	f006 fcce 	bl	800b624 <iprintf>
 8004c88:	4b10      	ldr	r3, [pc, #64]	@ (8004ccc <tud_cdc_n_write_flush+0x114>)
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d000      	beq.n	8004c9a <tud_cdc_n_write_flush+0xe2>
 8004c98:	be00      	bkpt	0x0000
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e009      	b.n	8004cb2 <tud_cdc_n_write_flush+0xfa>
    return count;
 8004c9e:	89bb      	ldrh	r3, [r7, #12]
 8004ca0:	e007      	b.n	8004cb2 <tud_cdc_n_write_flush+0xfa>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	789a      	ldrb	r2, [r3, #2]
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f003 fc12 	bl	80084d4 <usbd_edpt_release>
    return 0;
 8004cb0:	2300      	movs	r3, #0
  }
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	200003fc 	.word	0x200003fc
 8004cc0:	200004a4 	.word	0x200004a4
 8004cc4:	0800cf6c 	.word	0x0800cf6c
 8004cc8:	0800c884 	.word	0x0800c884
 8004ccc:	e000edf0 	.word	0xe000edf0

08004cd0 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8004cd6:	22a8      	movs	r2, #168	@ 0xa8
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4822      	ldr	r0, [pc, #136]	@ (8004d64 <cdcd_init+0x94>)
 8004cdc:	f006 fe26 	bl	800b92c <memset>
  tu_memclr(&_cdcd_fifo_cfg, sizeof(_cdcd_fifo_cfg));
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4820      	ldr	r0, [pc, #128]	@ (8004d68 <cdcd_init+0x98>)
 8004ce6:	f006 fe21 	bl	800b92c <memset>

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004cea:	2300      	movs	r3, #0
 8004cec:	71fb      	strb	r3, [r7, #7]
 8004cee:	e031      	b.n	8004d54 <cdcd_init+0x84>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	22a8      	movs	r2, #168	@ 0xa8
 8004cf4:	fb02 f303 	mul.w	r3, r2, r3
 8004cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8004d64 <cdcd_init+0x94>)
 8004cfa:	4413      	add	r3, r2
 8004cfc:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	22ff      	movs	r2, #255	@ 0xff
 8004d02:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004d0a:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2200      	movs	r2, #0
 8004d16:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2208      	movs	r2, #8
 8004d1c:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	f103 0010 	add.w	r0, r3, #16
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	2301      	movs	r3, #1
 8004d30:	2240      	movs	r2, #64	@ 0x40
 8004d32:	f001 f86b 	bl	8005e0c <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	f103 001c 	add.w	r0, r3, #28
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8004d42:	2301      	movs	r3, #1
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	2301      	movs	r3, #1
 8004d48:	2240      	movs	r2, #64	@ 0x40
 8004d4a:	f001 f85f 	bl	8005e0c <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	3301      	adds	r3, #1
 8004d52:	71fb      	strb	r3, [r7, #7]
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0ca      	beq.n	8004cf0 <cdcd_init+0x20>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	200003fc 	.word	0x200003fc
 8004d68:	20000524 	.word	0x20000524

08004d6c <cdcd_deinit>:

bool cdcd_deinit(void) {
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8004d70:	2301      	movs	r3, #1
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr
	...

08004d7c <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004d86:	2300      	movs	r3, #0
 8004d88:	73fb      	strb	r3, [r7, #15]
 8004d8a:	e02c      	b.n	8004de6 <cdcd_reset+0x6a>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	22a8      	movs	r2, #168	@ 0xa8
 8004d90:	fb02 f303 	mul.w	r3, r2, r3
 8004d94:	4a18      	ldr	r2, [pc, #96]	@ (8004df8 <cdcd_reset+0x7c>)
 8004d96:	4413      	add	r3, r2
 8004d98:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8004d9a:	2205      	movs	r2, #5
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	68b8      	ldr	r0, [r7, #8]
 8004da0:	f006 fdc4 	bl	800b92c <memset>
    if (!_cdcd_fifo_cfg.rx_persistent) {
 8004da4:	4b15      	ldr	r3, [pc, #84]	@ (8004dfc <cdcd_reset+0x80>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d104      	bne.n	8004dbc <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	3310      	adds	r3, #16
 8004db6:	4618      	mov	r0, r3
 8004db8:	f001 fc85 	bl	80066c6 <tu_fifo_clear>
    }
    if (!_cdcd_fifo_cfg.tx_persistent) {
 8004dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8004dfc <cdcd_reset+0x80>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	331c      	adds	r3, #28
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f001 fc79 	bl	80066c6 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	331c      	adds	r3, #28
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 fc83 	bl	80066e6 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	3301      	adds	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0cf      	beq.n	8004d8c <cdcd_reset+0x10>
  }
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	200003fc 	.word	0x200003fc
 8004dfc:	20000524 	.word	0x20000524

08004e00 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b09a      	sub	sp, #104	@ 0x68
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	4603      	mov	r3, r0
 8004e08:	6039      	str	r1, [r7, #0]
 8004e0a:	71fb      	strb	r3, [r7, #7]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	795b      	ldrb	r3, [r3, #5]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d103      	bne.n	8004e20 <cdcd_open+0x20>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	799b      	ldrb	r3, [r3, #6]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d001      	beq.n	8004e24 <cdcd_open+0x24>
 8004e20:	2300      	movs	r3, #0
 8004e22:	e0ec      	b.n	8004ffe <cdcd_open+0x1fe>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8004e24:	2300      	movs	r3, #0
 8004e26:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8004e2a:	e010      	b.n	8004e4e <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8004e2c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e30:	22a8      	movs	r2, #168	@ 0xa8
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	4a74      	ldr	r2, [pc, #464]	@ (8005008 <cdcd_open+0x208>)
 8004e38:	4413      	add	r3, r2
 8004e3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8004e3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e3e:	789b      	ldrb	r3, [r3, #2]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d009      	beq.n	8004e58 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8004e44:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8004e4e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ea      	beq.n	8004e2c <cdcd_open+0x2c>
 8004e56:	e000      	b.n	8004e5a <cdcd_open+0x5a>
      break;
 8004e58:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8004e5a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d010      	beq.n	8004e84 <cdcd_open+0x84>
 8004e62:	f240 1241 	movw	r2, #321	@ 0x141
 8004e66:	4969      	ldr	r1, [pc, #420]	@ (800500c <cdcd_open+0x20c>)
 8004e68:	4869      	ldr	r0, [pc, #420]	@ (8005010 <cdcd_open+0x210>)
 8004e6a:	f006 fbdb 	bl	800b624 <iprintf>
 8004e6e:	4b69      	ldr	r3, [pc, #420]	@ (8005014 <cdcd_open+0x214>)
 8004e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d000      	beq.n	8004e80 <cdcd_open+0x80>
 8004e7e:	be00      	bkpt	0x0000
 8004e80:	2300      	movs	r3, #0
 8004e82:	e0bc      	b.n	8004ffe <cdcd_open+0x1fe>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	789a      	ldrb	r2, [r3, #2]
 8004e88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e8a:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8004e8c:	2309      	movs	r3, #9
 8004e8e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea2:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8004ea4:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8004ea6:	e013      	b.n	8004ed0 <cdcd_open+0xd0>
 8004ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eae:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ecc:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8004ece:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8004eda:	2b24      	cmp	r3, #36	@ 0x24
 8004edc:	d104      	bne.n	8004ee8 <cdcd_open+0xe8>
 8004ede:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8004ee2:	88bb      	ldrh	r3, [r7, #4]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d9df      	bls.n	8004ea8 <cdcd_open+0xa8>
 8004ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	3301      	adds	r3, #1
 8004ef0:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d135      	bne.n	8004f62 <cdcd_open+0x162>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8004ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef8:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 8004efa:	79fb      	ldrb	r3, [r7, #7]
 8004efc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004efe:	4618      	mov	r0, r3
 8004f00:	f003 fa6a 	bl	80083d8 <usbd_edpt_open>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f083 0301 	eor.w	r3, r3, #1
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d010      	beq.n	8004f32 <cdcd_open+0x132>
 8004f10:	f240 1253 	movw	r2, #339	@ 0x153
 8004f14:	493d      	ldr	r1, [pc, #244]	@ (800500c <cdcd_open+0x20c>)
 8004f16:	483e      	ldr	r0, [pc, #248]	@ (8005010 <cdcd_open+0x210>)
 8004f18:	f006 fb84 	bl	800b624 <iprintf>
 8004f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8005014 <cdcd_open+0x214>)
 8004f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d000      	beq.n	8004f2e <cdcd_open+0x12e>
 8004f2c:	be00      	bkpt	0x0000
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e065      	b.n	8004ffe <cdcd_open+0x1fe>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8004f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f34:	789a      	ldrb	r2, [r3, #2]
 8004f36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f38:	705a      	strb	r2, [r3, #1]
 8004f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f3c:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8004f42:	461a      	mov	r2, r3
 8004f44:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004f48:	4413      	add	r3, r2
 8004f4a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8004f60:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f64:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d13f      	bne.n	8004ff0 <cdcd_open+0x1f0>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8004f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f72:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8004f74:	2b0a      	cmp	r3, #10
 8004f76:	d13b      	bne.n	8004ff0 <cdcd_open+0x1f0>
 8004f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7a:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8004f80:	461a      	mov	r2, r3
 8004f82:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004f86:	4413      	add	r3, r2
 8004f88:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f8e:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8004f9e:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8004fa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fa2:	3303      	adds	r3, #3
 8004fa4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004fa6:	3202      	adds	r2, #2
 8004fa8:	79f8      	ldrb	r0, [r7, #7]
 8004faa:	9201      	str	r2, [sp, #4]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	2302      	movs	r3, #2
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fb4:	f003 f998 	bl	80082e8 <usbd_open_edpt_pair>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f083 0301 	eor.w	r3, r3, #1
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d010      	beq.n	8004fe6 <cdcd_open+0x1e6>
 8004fc4:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 8004fc8:	4910      	ldr	r1, [pc, #64]	@ (800500c <cdcd_open+0x20c>)
 8004fca:	4811      	ldr	r0, [pc, #68]	@ (8005010 <cdcd_open+0x210>)
 8004fcc:	f006 fb2a 	bl	800b624 <iprintf>
 8004fd0:	4b10      	ldr	r3, [pc, #64]	@ (8005014 <cdcd_open+0x214>)
 8004fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d000      	beq.n	8004fe2 <cdcd_open+0x1e2>
 8004fe0:	be00      	bkpt	0x0000
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e00b      	b.n	8004ffe <cdcd_open+0x1fe>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 8004fe6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004fea:	330e      	adds	r3, #14
 8004fec:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 8004ff0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fcf9 	bl	80049ec <_prep_out_transaction>

  return drv_len;
 8004ffa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3760      	adds	r7, #96	@ 0x60
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	200003fc 	.word	0x200003fc
 800500c:	0800cf84 	.word	0x0800cf84
 8005010:	0800c884 	.word	0x0800c884
 8005014:	e000edf0 	.word	0xe000edf0

08005018 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	@ 0x28
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	603a      	str	r2, [r7, #0]
 8005022:	71fb      	strb	r3, [r7, #7]
 8005024:	460b      	mov	r3, r1
 8005026:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b20      	cmp	r3, #32
 8005034:	d001      	beq.n	800503a <cdcd_control_xfer_cb+0x22>
 8005036:	2300      	movs	r3, #0
 8005038:	e0e7      	b.n	800520a <cdcd_control_xfer_cb+0x1f2>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800503a:	2300      	movs	r3, #0
 800503c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005040:	e014      	b.n	800506c <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8005042:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005046:	22a8      	movs	r2, #168	@ 0xa8
 8005048:	fb02 f303 	mul.w	r3, r2, r3
 800504c:	4a71      	ldr	r2, [pc, #452]	@ (8005214 <cdcd_control_xfer_cb+0x1fc>)
 800504e:	4413      	add	r3, r2
 8005050:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	889b      	ldrh	r3, [r3, #4]
 800505c:	b29b      	uxth	r3, r3
 800505e:	429a      	cmp	r2, r3
 8005060:	d009      	beq.n	8005076 <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8005062:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005066:	3301      	adds	r3, #1
 8005068:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800506c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0e6      	beq.n	8005042 <cdcd_control_xfer_cb+0x2a>
 8005074:	e000      	b.n	8005078 <cdcd_control_xfer_cb+0x60>
      break;
 8005076:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8005078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <cdcd_control_xfer_cb+0x6c>
 8005080:	2300      	movs	r3, #0
 8005082:	e0c2      	b.n	800520a <cdcd_control_xfer_cb+0x1f2>

  switch (request->bRequest) {
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	3b20      	subs	r3, #32
 800508a:	2b03      	cmp	r3, #3
 800508c:	f200 80b3 	bhi.w	80051f6 <cdcd_control_xfer_cb+0x1de>
 8005090:	a201      	add	r2, pc, #4	@ (adr r2, 8005098 <cdcd_control_xfer_cb+0x80>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050eb 	.word	0x080050eb
 80050a0:	0800510b 	.word	0x0800510b
 80050a4:	080051bf 	.word	0x080051bf
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 80050a8:	79bb      	ldrb	r3, [r7, #6]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d10b      	bne.n	80050c6 <cdcd_control_xfer_cb+0xae>
        TU_LOG_DRV("  Set Line Coding\r\n");
 80050ae:	485a      	ldr	r0, [pc, #360]	@ (8005218 <cdcd_control_xfer_cb+0x200>)
 80050b0:	f006 fb28 	bl	800b704 <puts>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	f103 0208 	add.w	r2, r3, #8
 80050ba:	79f8      	ldrb	r0, [r7, #7]
 80050bc:	2307      	movs	r3, #7
 80050be:	6839      	ldr	r1, [r7, #0]
 80050c0:	f003 fc32 	bl	8008928 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 80050c4:	e099      	b.n	80051fa <cdcd_control_xfer_cb+0x1e2>
      } else if (stage == CONTROL_STAGE_ACK) {
 80050c6:	79bb      	ldrb	r3, [r7, #6]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	f040 8096 	bne.w	80051fa <cdcd_control_xfer_cb+0x1e2>
        if (tud_cdc_line_coding_cb) {
 80050ce:	4b53      	ldr	r3, [pc, #332]	@ (800521c <cdcd_control_xfer_cb+0x204>)
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8092 	beq.w	80051fa <cdcd_control_xfer_cb+0x1e2>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	f103 0208 	add.w	r2, r3, #8
 80050dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050e0:	4611      	mov	r1, r2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f3af 8000 	nop.w
      break;
 80050e8:	e087      	b.n	80051fa <cdcd_control_xfer_cb+0x1e2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 80050ea:	79bb      	ldrb	r3, [r7, #6]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	f040 8086 	bne.w	80051fe <cdcd_control_xfer_cb+0x1e6>
        TU_LOG_DRV("  Get Line Coding\r\n");
 80050f2:	484b      	ldr	r0, [pc, #300]	@ (8005220 <cdcd_control_xfer_cb+0x208>)
 80050f4:	f006 fb06 	bl	800b704 <puts>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	f103 0208 	add.w	r2, r3, #8
 80050fe:	79f8      	ldrb	r0, [r7, #7]
 8005100:	2307      	movs	r3, #7
 8005102:	6839      	ldr	r1, [r7, #0]
 8005104:	f003 fc10 	bl	8008928 <tud_control_xfer>
      }
      break;
 8005108:	e079      	b.n	80051fe <cdcd_control_xfer_cb+0x1e6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 800510a:	79bb      	ldrb	r3, [r7, #6]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d105      	bne.n	800511c <cdcd_control_xfer_cb+0x104>
        tud_control_status(rhport, request);
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	6839      	ldr	r1, [r7, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f003 fb95 	bl	8008844 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 800511a:	e072      	b.n	8005202 <cdcd_control_xfer_cb+0x1ea>
      } else if (stage == CONTROL_STAGE_ACK) {
 800511c:	79bb      	ldrb	r3, [r7, #6]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d16f      	bne.n	8005202 <cdcd_control_xfer_cb+0x1ea>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	885b      	ldrh	r3, [r3, #2]
 8005126:	b29b      	uxth	r3, r3
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	fa22 f303 	lsr.w	r3, r2, r3
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	bf14      	ite	ne
 800513e:	2301      	movne	r3, #1
 8005140:	2300      	moveq	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	885b      	ldrh	r3, [r3, #2]
 800514a:	b29b      	uxth	r3, r3
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	2301      	movs	r3, #1
 8005150:	75fb      	strb	r3, [r7, #23]
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	bf14      	ite	ne
 8005162:	2301      	movne	r3, #1
 8005164:	2300      	moveq	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	885b      	ldrh	r3, [r3, #2]
 800516e:	b29b      	uxth	r3, r3
 8005170:	b2da      	uxtb	r2, r3
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	f103 021c 	add.w	r2, r3, #28
 800517c:	7ffb      	ldrb	r3, [r7, #31]
 800517e:	2b00      	cmp	r3, #0
 8005180:	bf14      	ite	ne
 8005182:	2301      	movne	r3, #1
 8005184:	2300      	moveq	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f083 0301 	eor.w	r3, r3, #1
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	b2db      	uxtb	r3, r3
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f001 faa5 	bl	80066e6 <tu_fifo_set_overwritable>
        TU_LOG_DRV("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);
 800519c:	7ffb      	ldrb	r3, [r7, #31]
 800519e:	7fba      	ldrb	r2, [r7, #30]
 80051a0:	4619      	mov	r1, r3
 80051a2:	4820      	ldr	r0, [pc, #128]	@ (8005224 <cdcd_control_xfer_cb+0x20c>)
 80051a4:	f006 fa3e 	bl	800b624 <iprintf>
        if (tud_cdc_line_state_cb) {
 80051a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005228 <cdcd_control_xfer_cb+0x210>)
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d029      	beq.n	8005202 <cdcd_control_xfer_cb+0x1ea>
          tud_cdc_line_state_cb(itf, dtr, rts);
 80051ae:	7fba      	ldrb	r2, [r7, #30]
 80051b0:	7ff9      	ldrb	r1, [r7, #31]
 80051b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051b6:	4618      	mov	r0, r3
 80051b8:	f3af 8000 	nop.w
      break;
 80051bc:	e021      	b.n	8005202 <cdcd_control_xfer_cb+0x1ea>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 80051be:	79bb      	ldrb	r3, [r7, #6]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d105      	bne.n	80051d0 <cdcd_control_xfer_cb+0x1b8>
        tud_control_status(rhport, request);
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f003 fb3b 	bl	8008844 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 80051ce:	e01a      	b.n	8005206 <cdcd_control_xfer_cb+0x1ee>
      } else if (stage == CONTROL_STAGE_ACK) {
 80051d0:	79bb      	ldrb	r3, [r7, #6]
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d117      	bne.n	8005206 <cdcd_control_xfer_cb+0x1ee>
        TU_LOG_DRV("  Send Break\r\n");
 80051d6:	4815      	ldr	r0, [pc, #84]	@ (800522c <cdcd_control_xfer_cb+0x214>)
 80051d8:	f006 fa94 	bl	800b704 <puts>
        if (tud_cdc_send_break_cb) {
 80051dc:	4b14      	ldr	r3, [pc, #80]	@ (8005230 <cdcd_control_xfer_cb+0x218>)
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d011      	beq.n	8005206 <cdcd_control_xfer_cb+0x1ee>
          tud_cdc_send_break_cb(itf, request->wValue);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	885b      	ldrh	r3, [r3, #2]
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051ec:	4611      	mov	r1, r2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f3af 8000 	nop.w
      break;
 80051f4:	e007      	b.n	8005206 <cdcd_control_xfer_cb+0x1ee>

    default:
      return false; // stall unsupported request
 80051f6:	2300      	movs	r3, #0
 80051f8:	e007      	b.n	800520a <cdcd_control_xfer_cb+0x1f2>
      break;
 80051fa:	bf00      	nop
 80051fc:	e004      	b.n	8005208 <cdcd_control_xfer_cb+0x1f0>
      break;
 80051fe:	bf00      	nop
 8005200:	e002      	b.n	8005208 <cdcd_control_xfer_cb+0x1f0>
      break;
 8005202:	bf00      	nop
 8005204:	e000      	b.n	8005208 <cdcd_control_xfer_cb+0x1f0>
      break;
 8005206:	bf00      	nop
  }

  return true;
 8005208:	2301      	movs	r3, #1
}
 800520a:	4618      	mov	r0, r3
 800520c:	3728      	adds	r7, #40	@ 0x28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	200003fc 	.word	0x200003fc
 8005218:	0800c89c 	.word	0x0800c89c
 800521c:	00000000 	.word	0x00000000
 8005220:	0800c8b0 	.word	0x0800c8b0
 8005224:	0800c8c4 	.word	0x0800c8c4
 8005228:	00000000 	.word	0x00000000
 800522c:	0800c8f4 	.word	0x0800c8f4
 8005230:	00000000 	.word	0x00000000

08005234 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	4603      	mov	r3, r0
 800523e:	71fb      	strb	r3, [r7, #7]
 8005240:	460b      	mov	r3, r1
 8005242:	71bb      	strb	r3, [r7, #6]
 8005244:	4613      	mov	r3, r2
 8005246:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8005248:	2300      	movs	r3, #0
 800524a:	77fb      	strb	r3, [r7, #31]
 800524c:	e013      	b.n	8005276 <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 800524e:	7ffb      	ldrb	r3, [r7, #31]
 8005250:	22a8      	movs	r2, #168	@ 0xa8
 8005252:	fb02 f303 	mul.w	r3, r2, r3
 8005256:	4a59      	ldr	r2, [pc, #356]	@ (80053bc <cdcd_xfer_cb+0x188>)
 8005258:	4413      	add	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	78db      	ldrb	r3, [r3, #3]
 8005260:	79ba      	ldrb	r2, [r7, #6]
 8005262:	429a      	cmp	r2, r3
 8005264:	d00a      	beq.n	800527c <cdcd_xfer_cb+0x48>
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	789b      	ldrb	r3, [r3, #2]
 800526a:	79ba      	ldrb	r2, [r7, #6]
 800526c:	429a      	cmp	r2, r3
 800526e:	d005      	beq.n	800527c <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8005270:	7ffb      	ldrb	r3, [r7, #31]
 8005272:	3301      	adds	r3, #1
 8005274:	77fb      	strb	r3, [r7, #31]
 8005276:	7ffb      	ldrb	r3, [r7, #31]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0e8      	beq.n	800524e <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 800527c:	7ffb      	ldrb	r3, [r7, #31]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d010      	beq.n	80052a4 <cdcd_xfer_cb+0x70>
 8005282:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8005286:	494e      	ldr	r1, [pc, #312]	@ (80053c0 <cdcd_xfer_cb+0x18c>)
 8005288:	484e      	ldr	r0, [pc, #312]	@ (80053c4 <cdcd_xfer_cb+0x190>)
 800528a:	f006 f9cb 	bl	800b624 <iprintf>
 800528e:	4b4e      	ldr	r3, [pc, #312]	@ (80053c8 <cdcd_xfer_cb+0x194>)
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d000      	beq.n	80052a0 <cdcd_xfer_cb+0x6c>
 800529e:	be00      	bkpt	0x0000
 80052a0:	2300      	movs	r3, #0
 80052a2:	e087      	b.n	80053b4 <cdcd_xfer_cb+0x180>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 80052a4:	7ffb      	ldrb	r3, [r7, #31]
 80052a6:	01db      	lsls	r3, r3, #7
 80052a8:	4a48      	ldr	r2, [pc, #288]	@ (80053cc <cdcd_xfer_cb+0x198>)
 80052aa:	4413      	add	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	78db      	ldrb	r3, [r3, #3]
 80052b2:	79ba      	ldrb	r2, [r7, #6]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d148      	bne.n	800534a <cdcd_xfer_cb+0x116>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	3310      	adds	r3, #16
 80052bc:	6939      	ldr	r1, [r7, #16]
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	b292      	uxth	r2, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 f9ed 	bl	80066a2 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 80052c8:	4b41      	ldr	r3, [pc, #260]	@ (80053d0 <cdcd_xfer_cb+0x19c>)
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d027      	beq.n	800531e <cdcd_xfer_cb+0xea>
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	795b      	ldrb	r3, [r3, #5]
 80052d2:	2bff      	cmp	r3, #255	@ 0xff
 80052d4:	d023      	beq.n	800531e <cdcd_xfer_cb+0xea>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80052d6:	2300      	movs	r3, #0
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	e01c      	b.n	8005316 <cdcd_xfer_cb+0xe2>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	795a      	ldrb	r2, [r3, #5]
 80052e0:	6939      	ldr	r1, [r7, #16]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	440b      	add	r3, r1
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d111      	bne.n	8005310 <cdcd_xfer_cb+0xdc>
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	3310      	adds	r3, #16
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 f8e5 	bl	80064c0 <tu_fifo_empty>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f083 0301 	eor.w	r3, r3, #1
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d006      	beq.n	8005310 <cdcd_xfer_cb+0xdc>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	795a      	ldrb	r2, [r3, #5]
 8005306:	7ffb      	ldrb	r3, [r7, #31]
 8005308:	4611      	mov	r1, r2
 800530a:	4618      	mov	r0, r3
 800530c:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	3301      	adds	r3, #1
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d3de      	bcc.n	80052dc <cdcd_xfer_cb+0xa8>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 800531e:	4b2d      	ldr	r3, [pc, #180]	@ (80053d4 <cdcd_xfer_cb+0x1a0>)
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00e      	beq.n	8005342 <cdcd_xfer_cb+0x10e>
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	3310      	adds	r3, #16
 8005328:	4618      	mov	r0, r3
 800532a:	f001 f8c9 	bl	80064c0 <tu_fifo_empty>
 800532e:	4603      	mov	r3, r0
 8005330:	f083 0301 	eor.w	r3, r3, #1
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <cdcd_xfer_cb+0x10e>
      tud_cdc_rx_cb(itf);
 800533a:	7ffb      	ldrb	r3, [r7, #31]
 800533c:	4618      	mov	r0, r3
 800533e:	f3af 8000 	nop.w
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 8005342:	7ffb      	ldrb	r3, [r7, #31]
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fb51 	bl	80049ec <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	789b      	ldrb	r3, [r3, #2]
 800534e:	79ba      	ldrb	r2, [r7, #6]
 8005350:	429a      	cmp	r2, r3
 8005352:	d12e      	bne.n	80053b2 <cdcd_xfer_cb+0x17e>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 8005354:	4b20      	ldr	r3, [pc, #128]	@ (80053d8 <cdcd_xfer_cb+0x1a4>)
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <cdcd_xfer_cb+0x12e>
      tud_cdc_tx_complete_cb(itf);
 800535a:	7ffb      	ldrb	r3, [r7, #31]
 800535c:	4618      	mov	r0, r3
 800535e:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 8005362:	7ffb      	ldrb	r3, [r7, #31]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff fc27 	bl	8004bb8 <tud_cdc_n_write_flush>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d120      	bne.n	80053b2 <cdcd_xfer_cb+0x17e>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	331c      	adds	r3, #28
 8005374:	4618      	mov	r0, r3
 8005376:	f001 f872 	bl	800645e <tu_fifo_count>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d118      	bne.n	80053b2 <cdcd_xfer_cb+0x17e>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d015      	beq.n	80053b2 <cdcd_xfer_cb+0x17e>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800538c:	2b00      	cmp	r3, #0
 800538e:	d110      	bne.n	80053b2 <cdcd_xfer_cb+0x17e>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	789a      	ldrb	r2, [r3, #2]
 8005394:	79fb      	ldrb	r3, [r7, #7]
 8005396:	4611      	mov	r1, r2
 8005398:	4618      	mov	r0, r3
 800539a:	f003 f871 	bl	8008480 <usbd_edpt_claim>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d006      	beq.n	80053b2 <cdcd_xfer_cb+0x17e>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	7899      	ldrb	r1, [r3, #2]
 80053a8:	79f8      	ldrb	r0, [r7, #7]
 80053aa:	2300      	movs	r3, #0
 80053ac:	2200      	movs	r2, #0
 80053ae:	f003 f8bb 	bl	8008528 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80053b2:	2301      	movs	r3, #1
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3720      	adds	r7, #32
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	200003fc 	.word	0x200003fc
 80053c0:	0800cf90 	.word	0x0800cf90
 80053c4:	0800c884 	.word	0x0800c884
 80053c8:	e000edf0 	.word	0xe000edf0
 80053cc:	200004a4 	.word	0x200004a4
	...

080053dc <tud_hid_set_protocol_cb>:
}

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	460a      	mov	r2, r1
 80053e6:	71fb      	strb	r3, [r7, #7]
 80053e8:	4613      	mov	r3, r2
 80053ea:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) protocol;
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr

080053f6 <tud_hid_set_idle_cb>:

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	4603      	mov	r3, r0
 80053fe:	460a      	mov	r2, r1
 8005400:	71fb      	strb	r3, [r7, #7]
 8005402:	4613      	mov	r3, r2
 8005404:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 8005406:	2301      	movs	r3, #1
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr

08005412 <tud_hid_report_complete_cb>:

TU_ATTR_WEAK void tud_hid_report_complete_cb(uint8_t instance, uint8_t const* report, uint16_t len) {
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	4603      	mov	r3, r0
 800541a:	6039      	str	r1, [r7, #0]
 800541c:	71fb      	strb	r3, [r7, #7]
 800541e:	4613      	mov	r3, r2
 8005420:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report;
  (void) len;
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr

0800542c <tud_hid_report_failed_cb>:

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	603a      	str	r2, [r7, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	4603      	mov	r3, r0
 8005438:	71fb      	strb	r3, [r7, #7]
 800543a:	460b      	mov	r3, r1
 800543c:	71bb      	strb	r3, [r7, #6]
 800543e:	4613      	mov	r3, r2
 8005440:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 800545a:	79fa      	ldrb	r2, [r7, #7]
 800545c:	491b      	ldr	r1, [pc, #108]	@ (80054cc <tud_hid_n_ready+0x80>)
 800545e:	4613      	mov	r3, r2
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	3301      	adds	r3, #1
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	73bb      	strb	r3, [r7, #14]
 800546e:	f001 fb61 	bl	8006b34 <tud_mounted>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d009      	beq.n	800548c <tud_hid_n_ready+0x40>
 8005478:	f001 fb6c 	bl	8006b54 <tud_suspended>
 800547c:	4603      	mov	r3, r0
 800547e:	f083 0301 	eor.w	r3, r3, #1
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <tud_hid_n_ready+0x40>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <tud_hid_n_ready+0x42>
 800548c:	2300      	movs	r3, #0
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8005494:	2b00      	cmp	r3, #0
 8005496:	d010      	beq.n	80054ba <tud_hid_n_ready+0x6e>
 8005498:	7bbb      	ldrb	r3, [r7, #14]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00d      	beq.n	80054ba <tud_hid_n_ready+0x6e>
 800549e:	7bba      	ldrb	r2, [r7, #14]
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	4611      	mov	r1, r2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f003 f8cd 	bl	8008644 <usbd_edpt_busy>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f083 0301 	eor.w	r3, r3, #1
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <tud_hid_n_ready+0x6e>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <tud_hid_n_ready+0x70>
 80054ba:	2300      	movs	r3, #0
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	b2db      	uxtb	r3, r3
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000528 	.word	0x20000528

080054d0 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08e      	sub	sp, #56	@ 0x38
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	603a      	str	r2, [r7, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	4603      	mov	r3, r0
 80054dc:	71fb      	strb	r3, [r7, #7]
 80054de:	460b      	mov	r3, r1
 80054e0:	71bb      	strb	r3, [r7, #6]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <tud_hid_n_report+0x20>
 80054ec:	2300      	movs	r3, #0
 80054ee:	e06e      	b.n	80055ce <tud_hid_n_report+0xfe>
  const uint8_t rhport = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 80054f6:	79fa      	ldrb	r2, [r7, #7]
 80054f8:	4613      	mov	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4a35      	ldr	r2, [pc, #212]	@ (80055d8 <tud_hid_n_report+0x108>)
 8005502:	4413      	add	r3, r2
 8005504:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8005506:	79fa      	ldrb	r2, [r7, #7]
 8005508:	4613      	mov	r3, r2
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4413      	add	r3, r2
 800550e:	019b      	lsls	r3, r3, #6
 8005510:	4a32      	ldr	r2, [pc, #200]	@ (80055dc <tud_hid_n_report+0x10c>)
 8005512:	4413      	add	r3, r2
 8005514:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	785a      	ldrb	r2, [r3, #1]
 800551a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800551e:	4611      	mov	r1, r2
 8005520:	4618      	mov	r0, r3
 8005522:	f002 ffad 	bl	8008480 <usbd_edpt_claim>
 8005526:	4603      	mov	r3, r0
 8005528:	f083 0301 	eor.w	r3, r3, #1
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <tud_hid_n_report+0x66>
 8005532:	2300      	movs	r3, #0
 8005534:	e04b      	b.n	80055ce <tud_hid_n_report+0xfe>

  // prepare data
  if (report_id) {
 8005536:	79bb      	ldrb	r3, [r7, #6]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d022      	beq.n	8005582 <tud_hid_n_report+0xb2>
    p_epbuf->epin[0] = report_id;
 800553c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553e:	79ba      	ldrb	r2, [r7, #6]
 8005540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 8005544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005546:	3340      	adds	r3, #64	@ 0x40
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	88bb      	ldrh	r3, [r7, #4]
 800554c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800554e:	223f      	movs	r2, #63	@ 0x3f
 8005550:	627a      	str	r2, [r7, #36]	@ 0x24
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	623a      	str	r2, [r7, #32]
 8005556:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 8005558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	429a      	cmp	r2, r3
 800555e:	d202      	bcs.n	8005566 <tud_hid_n_report+0x96>
    return -1;
 8005560:	f04f 33ff 	mov.w	r3, #4294967295
 8005564:	e005      	b.n	8005572 <tud_hid_n_report+0xa2>
  memcpy(dest, src, count);
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	6a39      	ldr	r1, [r7, #32]
 800556a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800556c:	f006 fa59 	bl	800ba22 <memcpy>
  return 0;
 8005570:	2300      	movs	r3, #0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <tud_hid_n_report+0xaa>
 8005576:	2300      	movs	r3, #0
 8005578:	e029      	b.n	80055ce <tud_hid_n_report+0xfe>
    len++;
 800557a:	88bb      	ldrh	r3, [r7, #4]
 800557c:	3301      	adds	r3, #1
 800557e:	80bb      	strh	r3, [r7, #4]
 8005580:	e01a      	b.n	80055b8 <tud_hid_n_report+0xe8>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8005582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005584:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8005588:	88bb      	ldrh	r3, [r7, #4]
 800558a:	61ba      	str	r2, [r7, #24]
 800558c:	2240      	movs	r2, #64	@ 0x40
 800558e:	617a      	str	r2, [r7, #20]
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	613a      	str	r2, [r7, #16]
 8005594:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	429a      	cmp	r2, r3
 800559c:	d202      	bcs.n	80055a4 <tud_hid_n_report+0xd4>
    return -1;
 800559e:	f04f 33ff 	mov.w	r3, #4294967295
 80055a2:	e005      	b.n	80055b0 <tud_hid_n_report+0xe0>
  memcpy(dest, src, count);
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	6939      	ldr	r1, [r7, #16]
 80055a8:	69b8      	ldr	r0, [r7, #24]
 80055aa:	f006 fa3a 	bl	800ba22 <memcpy>
  return 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <tud_hid_n_report+0xe8>
 80055b4:	2300      	movs	r3, #0
 80055b6:	e00a      	b.n	80055ce <tud_hid_n_report+0xfe>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 80055b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ba:	7859      	ldrb	r1, [r3, #1]
 80055bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055be:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80055c2:	88bb      	ldrh	r3, [r7, #4]
 80055c4:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80055c8:	f002 ffae 	bl	8008528 <usbd_edpt_xfer>
 80055cc:	4603      	mov	r3, r0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3738      	adds	r7, #56	@ 0x38
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000528 	.word	0x20000528
 80055dc:	20000534 	.word	0x20000534

080055e0 <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	4603      	mov	r3, r0
 80055ea:	71fb      	strb	r3, [r7, #7]
 80055ec:	460b      	mov	r3, r1
 80055ee:	71bb      	strb	r3, [r7, #6]
 80055f0:	4613      	mov	r3, r2
 80055f2:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 80055f4:	797b      	ldrb	r3, [r7, #5]
 80055f6:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d007      	beq.n	8005612 <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	f107 030a 	add.w	r3, r7, #10
 8005608:	6811      	ldr	r1, [r2, #0]
 800560a:	6019      	str	r1, [r3, #0]
 800560c:	8892      	ldrh	r2, [r2, #4]
 800560e:	809a      	strh	r2, [r3, #4]
 8005610:	e007      	b.n	8005622 <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 8005612:	f107 0308 	add.w	r3, r7, #8
 8005616:	3302      	adds	r3, #2
 8005618:	2206      	movs	r2, #6
 800561a:	2100      	movs	r1, #0
 800561c:	4618      	mov	r0, r3
 800561e:	f006 f985 	bl	800b92c <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 8005622:	f107 0208 	add.w	r2, r7, #8
 8005626:	79b9      	ldrb	r1, [r7, #6]
 8005628:	79f8      	ldrb	r0, [r7, #7]
 800562a:	2308      	movs	r3, #8
 800562c:	f7ff ff50 	bl	80054d0 <tud_hid_n_report>
 8005630:	4603      	mov	r3, r0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <tud_hid_n_mouse_report>:

bool tud_hid_n_mouse_report(uint8_t instance, uint8_t report_id,
                            uint8_t buttons, int8_t x, int8_t y, int8_t vertical, int8_t horizontal) {
 800563a:	b590      	push	{r4, r7, lr}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	4604      	mov	r4, r0
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	461a      	mov	r2, r3
 8005648:	4623      	mov	r3, r4
 800564a:	71fb      	strb	r3, [r7, #7]
 800564c:	4603      	mov	r3, r0
 800564e:	71bb      	strb	r3, [r7, #6]
 8005650:	460b      	mov	r3, r1
 8005652:	717b      	strb	r3, [r7, #5]
 8005654:	4613      	mov	r3, r2
 8005656:	713b      	strb	r3, [r7, #4]
  hid_mouse_report_t report = {
 8005658:	797b      	ldrb	r3, [r7, #5]
 800565a:	723b      	strb	r3, [r7, #8]
 800565c:	793b      	ldrb	r3, [r7, #4]
 800565e:	727b      	strb	r3, [r7, #9]
 8005660:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005664:	72bb      	strb	r3, [r7, #10]
 8005666:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800566a:	72fb      	strb	r3, [r7, #11]
 800566c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005670:	733b      	strb	r3, [r7, #12]
    .y = y,
    .wheel = vertical,
    .pan = horizontal
  };

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 8005672:	f107 0208 	add.w	r2, r7, #8
 8005676:	79b9      	ldrb	r1, [r7, #6]
 8005678:	79f8      	ldrb	r0, [r7, #7]
 800567a:	2305      	movs	r3, #5
 800567c:	f7ff ff28 	bl	80054d0 <tud_hid_n_report>
 8005680:	4603      	mov	r3, r0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	bd90      	pop	{r4, r7, pc}

0800568a <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 800568a:	b580      	push	{r7, lr}
 800568c:	af00      	add	r7, sp, #0
  hidd_reset(0);
 800568e:	2000      	movs	r0, #0
 8005690:	f000 f80a 	bl	80056a8 <hidd_reset>
}
 8005694:	bf00      	nop
 8005696:	bd80      	pop	{r7, pc}

08005698 <hidd_deinit>:

bool hidd_deinit(void) {
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  return true;
 800569c:	2301      	movs	r3, #1
}
 800569e:	4618      	mov	r0, r3
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr
	...

080056a8 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 80056b2:	220c      	movs	r2, #12
 80056b4:	2100      	movs	r1, #0
 80056b6:	4803      	ldr	r0, [pc, #12]	@ (80056c4 <hidd_reset+0x1c>)
 80056b8:	f006 f938 	bl	800b92c <memset>
}
 80056bc:	bf00      	nop
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000528 	.word	0x20000528

080056c8 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b094      	sub	sp, #80	@ 0x50
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	4603      	mov	r3, r0
 80056d0:	6039      	str	r1, [r7, #0]
 80056d2:	71fb      	strb	r3, [r7, #7]
 80056d4:	4613      	mov	r3, r2
 80056d6:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	795b      	ldrb	r3, [r3, #5]
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d001      	beq.n	80056e4 <hidd_open+0x1c>
 80056e0:	2300      	movs	r3, #0
 80056e2:	e0e8      	b.n	80058b6 <hidd_open+0x1ee>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	791b      	ldrb	r3, [r3, #4]
 80056e8:	461a      	mov	r2, r3
 80056ea:	00d2      	lsls	r2, r2, #3
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 80056f0:	3312      	adds	r3, #18
 80056f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 80056f6:	88ba      	ldrh	r2, [r7, #4]
 80056f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d20f      	bcs.n	8005720 <hidd_open+0x58>
 8005700:	22e5      	movs	r2, #229	@ 0xe5
 8005702:	496f      	ldr	r1, [pc, #444]	@ (80058c0 <hidd_open+0x1f8>)
 8005704:	486f      	ldr	r0, [pc, #444]	@ (80058c4 <hidd_open+0x1fc>)
 8005706:	f005 ff8d 	bl	800b624 <iprintf>
 800570a:	4b6f      	ldr	r3, [pc, #444]	@ (80058c8 <hidd_open+0x200>)
 800570c:	627b      	str	r3, [r7, #36]	@ 0x24
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d000      	beq.n	800571c <hidd_open+0x54>
 800571a:	be00      	bkpt	0x0000
 800571c:	2300      	movs	r3, #0
 800571e:	e0ca      	b.n	80058b6 <hidd_open+0x1ee>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8005720:	2300      	movs	r3, #0
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005726:	e011      	b.n	800574c <hidd_open+0x84>
    p_hid = &_hidd_itf[hid_id];
 8005728:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800572c:	4613      	mov	r3, r2
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4a65      	ldr	r2, [pc, #404]	@ (80058cc <hidd_open+0x204>)
 8005736:	4413      	add	r3, r2
 8005738:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 800573a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800573c:	785b      	ldrb	r3, [r3, #1]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <hidd_open+0x8e>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8005742:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005746:	3301      	adds	r3, #1
 8005748:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0e9      	beq.n	8005728 <hidd_open+0x60>
 8005754:	e000      	b.n	8005758 <hidd_open+0x90>
      break;
 8005756:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 8005758:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00f      	beq.n	8005780 <hidd_open+0xb8>
 8005760:	22f0      	movs	r2, #240	@ 0xf0
 8005762:	4957      	ldr	r1, [pc, #348]	@ (80058c0 <hidd_open+0x1f8>)
 8005764:	4857      	ldr	r0, [pc, #348]	@ (80058c4 <hidd_open+0x1fc>)
 8005766:	f005 ff5d 	bl	800b624 <iprintf>
 800576a:	4b57      	ldr	r3, [pc, #348]	@ (80058c8 <hidd_open+0x200>)
 800576c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800576e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d000      	beq.n	800577c <hidd_open+0xb4>
 800577a:	be00      	bkpt	0x0000
 800577c:	2300      	movs	r3, #0
 800577e:	e09a      	b.n	80058b6 <hidd_open+0x1ee>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8005780:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8005784:	4613      	mov	r3, r2
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4413      	add	r3, r2
 800578a:	019b      	lsls	r3, r3, #6
 800578c:	4a50      	ldr	r2, [pc, #320]	@ (80058d0 <hidd_open+0x208>)
 800578e:	4413      	add	r3, r2
 8005790:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005798:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80057a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ac:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	3301      	adds	r3, #1
 80057b2:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 80057b4:	2b21      	cmp	r3, #33	@ 0x21
 80057b6:	d00f      	beq.n	80057d8 <hidd_open+0x110>
 80057b8:	22f7      	movs	r2, #247	@ 0xf7
 80057ba:	4941      	ldr	r1, [pc, #260]	@ (80058c0 <hidd_open+0x1f8>)
 80057bc:	4841      	ldr	r0, [pc, #260]	@ (80058c4 <hidd_open+0x1fc>)
 80057be:	f005 ff31 	bl	800b624 <iprintf>
 80057c2:	4b41      	ldr	r3, [pc, #260]	@ (80058c8 <hidd_open+0x200>)
 80057c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d000      	beq.n	80057d4 <hidd_open+0x10c>
 80057d2:	be00      	bkpt	0x0000
 80057d4:	2300      	movs	r3, #0
 80057d6:	e06e      	b.n	80058b6 <hidd_open+0x1ee>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 80057d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057dc:	609a      	str	r2, [r3, #8]
 80057de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e0:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80057f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	7919      	ldrb	r1, [r3, #4]
 80057f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057f8:	3302      	adds	r3, #2
 80057fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057fc:	3201      	adds	r2, #1
 80057fe:	79f8      	ldrb	r0, [r7, #7]
 8005800:	9201      	str	r2, [sp, #4]
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	2303      	movs	r3, #3
 8005806:	460a      	mov	r2, r1
 8005808:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800580a:	f002 fd6d 	bl	80082e8 <usbd_open_edpt_pair>
 800580e:	4603      	mov	r3, r0
 8005810:	f083 0301 	eor.w	r3, r3, #1
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00f      	beq.n	800583a <hidd_open+0x172>
 800581a:	22fc      	movs	r2, #252	@ 0xfc
 800581c:	4928      	ldr	r1, [pc, #160]	@ (80058c0 <hidd_open+0x1f8>)
 800581e:	4829      	ldr	r0, [pc, #164]	@ (80058c4 <hidd_open+0x1fc>)
 8005820:	f005 ff00 	bl	800b624 <iprintf>
 8005824:	4b28      	ldr	r3, [pc, #160]	@ (80058c8 <hidd_open+0x200>)
 8005826:	633b      	str	r3, [r7, #48]	@ 0x30
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d000      	beq.n	8005836 <hidd_open+0x16e>
 8005834:	be00      	bkpt	0x0000
 8005836:	2300      	movs	r3, #0
 8005838:	e03d      	b.n	80058b6 <hidd_open+0x1ee>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	799b      	ldrb	r3, [r3, #6]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d103      	bne.n	800584a <hidd_open+0x182>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	79da      	ldrb	r2, [r3, #7]
 8005846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005848:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 800584a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800584c:	2201      	movs	r2, #1
 800584e:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	789a      	ldrb	r2, [r3, #2]
 8005854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005856:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 8005858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	3307      	adds	r3, #7
 800585e:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	881a      	ldrh	r2, [r3, #0]
 8005864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005866:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 8005868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800586a:	789b      	ldrb	r3, [r3, #2]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d020      	beq.n	80058b2 <hidd_open+0x1ea>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8005870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005872:	7899      	ldrb	r1, [r3, #2]
 8005874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005876:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 800587a:	79f8      	ldrb	r0, [r7, #7]
 800587c:	2340      	movs	r3, #64	@ 0x40
 800587e:	f002 fe53 	bl	8008528 <usbd_edpt_xfer>
 8005882:	4603      	mov	r3, r0
 8005884:	f083 0301 	eor.w	r3, r3, #1
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d011      	beq.n	80058b2 <hidd_open+0x1ea>
 800588e:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 8005892:	490b      	ldr	r1, [pc, #44]	@ (80058c0 <hidd_open+0x1f8>)
 8005894:	480b      	ldr	r0, [pc, #44]	@ (80058c4 <hidd_open+0x1fc>)
 8005896:	f005 fec5 	bl	800b624 <iprintf>
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <hidd_open+0x200>)
 800589c:	637b      	str	r3, [r7, #52]	@ 0x34
 800589e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d000      	beq.n	80058ac <hidd_open+0x1e4>
 80058aa:	be00      	bkpt	0x0000
 80058ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80058b0:	e001      	b.n	80058b6 <hidd_open+0x1ee>
  }

  return drv_len;
 80058b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3748      	adds	r7, #72	@ 0x48
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	0800cfa0 	.word	0x0800cfa0
 80058c4:	0800c904 	.word	0x0800c904
 80058c8:	e000edf0 	.word	0xe000edf0
 80058cc:	20000528 	.word	0x20000528
 80058d0:	20000534 	.word	0x20000534

080058d4 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b094      	sub	sp, #80	@ 0x50
 80058d8:	af02      	add	r7, sp, #8
 80058da:	4603      	mov	r3, r0
 80058dc:	603a      	str	r2, [r7, #0]
 80058de:	71fb      	strb	r3, [r7, #7]
 80058e0:	460b      	mov	r3, r1
 80058e2:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	f003 031f 	and.w	r3, r3, #31
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d001      	beq.n	80058f6 <hidd_control_xfer_cb+0x22>
 80058f2:	2300      	movs	r3, #0
 80058f4:	e1e0      	b.n	8005cb8 <hidd_control_xfer_cb+0x3e4>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	889b      	ldrh	r3, [r3, #4]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8005900:	2300      	movs	r3, #0
 8005902:	77bb      	strb	r3, [r7, #30]
 8005904:	e00f      	b.n	8005926 <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 8005906:	7fba      	ldrb	r2, [r7, #30]
 8005908:	4992      	ldr	r1, [pc, #584]	@ (8005b54 <hidd_control_xfer_cb+0x280>)
 800590a:	4613      	mov	r3, r2
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	440b      	add	r3, r1
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	7ffa      	ldrb	r2, [r7, #31]
 8005918:	429a      	cmp	r2, r3
 800591a:	d101      	bne.n	8005920 <hidd_control_xfer_cb+0x4c>
      return i;
 800591c:	7fbb      	ldrb	r3, [r7, #30]
 800591e:	e006      	b.n	800592e <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8005920:	7fbb      	ldrb	r3, [r7, #30]
 8005922:	3301      	adds	r3, #1
 8005924:	77bb      	strb	r3, [r7, #30]
 8005926:	7fbb      	ldrb	r3, [r7, #30]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0ec      	beq.n	8005906 <hidd_control_xfer_cb+0x32>
  return 0xFF;
 800592c:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 800592e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8005932:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <hidd_control_xfer_cb+0x6a>
 800593a:	2300      	movs	r3, #0
 800593c:	e1bc      	b.n	8005cb8 <hidd_control_xfer_cb+0x3e4>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 800593e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005942:	4613      	mov	r3, r2
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4a82      	ldr	r2, [pc, #520]	@ (8005b54 <hidd_control_xfer_cb+0x280>)
 800594c:	4413      	add	r3, r2
 800594e:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8005950:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005954:	4613      	mov	r3, r2
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	4413      	add	r3, r2
 800595a:	019b      	lsls	r3, r3, #6
 800595c:	4a7e      	ldr	r2, [pc, #504]	@ (8005b58 <hidd_control_xfer_cb+0x284>)
 800595e:	4413      	add	r3, r2
 8005960:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d145      	bne.n	80059fc <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8005970:	79bb      	ldrb	r3, [r7, #6]
 8005972:	2b01      	cmp	r3, #1
 8005974:	f040 819f 	bne.w	8005cb6 <hidd_control_xfer_cb+0x3e2>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	885b      	ldrh	r3, [r3, #2]
 800597c:	b29b      	uxth	r3, r3
 800597e:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005980:	8bbb      	ldrh	r3, [r7, #28]
 8005982:	0a1b      	lsrs	r3, r3, #8
 8005984:	b29b      	uxth	r3, r3
 8005986:	b2db      	uxtb	r3, r3
 8005988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	2b06      	cmp	r3, #6
 8005992:	d11b      	bne.n	80059cc <hidd_control_xfer_cb+0xf8>
 8005994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005998:	2b21      	cmp	r3, #33	@ 0x21
 800599a:	d117      	bne.n	80059cc <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 800599c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <hidd_control_xfer_cb+0xd4>
 80059a4:	2300      	movs	r3, #0
 80059a6:	e187      	b.n	8005cb8 <hidd_control_xfer_cb+0x3e4>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 80059a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	79f8      	ldrb	r0, [r7, #7]
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	f002 ffb7 	bl	8008928 <tud_control_xfer>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f083 0301 	eor.w	r3, r3, #1
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8177 	beq.w	8005cb6 <hidd_control_xfer_cb+0x3e2>
 80059c8:	2300      	movs	r3, #0
 80059ca:	e175      	b.n	8005cb8 <hidd_control_xfer_cb+0x3e4>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	785b      	ldrb	r3, [r3, #1]
 80059d0:	2b06      	cmp	r3, #6
 80059d2:	d111      	bne.n	80059f8 <hidd_control_xfer_cb+0x124>
 80059d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059d8:	2b22      	cmp	r3, #34	@ 0x22
 80059da:	d10d      	bne.n	80059f8 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 80059dc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fa ffff 	bl	80009e4 <tud_hid_descriptor_report_cb>
 80059e6:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 80059e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ea:	889b      	ldrh	r3, [r3, #4]
 80059ec:	79f8      	ldrb	r0, [r7, #7]
 80059ee:	6a3a      	ldr	r2, [r7, #32]
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	f002 ff99 	bl	8008928 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 80059f6:	e15e      	b.n	8005cb6 <hidd_control_xfer_cb+0x3e2>
      } else {
        return false; // stall unsupported request
 80059f8:	2300      	movs	r3, #0
 80059fa:	e15d      	b.n	8005cb8 <hidd_control_xfer_cb+0x3e4>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	f040 8148 	bne.w	8005c9c <hidd_control_xfer_cb+0x3c8>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	785b      	ldrb	r3, [r3, #1]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	2b0a      	cmp	r3, #10
 8005a14:	f200 8140 	bhi.w	8005c98 <hidd_control_xfer_cb+0x3c4>
 8005a18:	a201      	add	r2, pc, #4	@ (adr r2, 8005a20 <hidd_control_xfer_cb+0x14c>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a4d 	.word	0x08005a4d
 8005a24:	08005c37 	.word	0x08005c37
 8005a28:	08005c4d 	.word	0x08005c4d
 8005a2c:	08005c99 	.word	0x08005c99
 8005a30:	08005c99 	.word	0x08005c99
 8005a34:	08005c99 	.word	0x08005c99
 8005a38:	08005c99 	.word	0x08005c99
 8005a3c:	08005c99 	.word	0x08005c99
 8005a40:	08005b2f 	.word	0x08005b2f
 8005a44:	08005bf1 	.word	0x08005bf1
 8005a48:	08005c63 	.word	0x08005c63
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8005a4c:	79bb      	ldrb	r3, [r7, #6]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	f040 8126 	bne.w	8005ca0 <hidd_control_xfer_cb+0x3cc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	885b      	ldrh	r3, [r3, #2]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	82bb      	strh	r3, [r7, #20]
 8005a5c:	8abb      	ldrh	r3, [r7, #20]
 8005a5e:	0a1b      	lsrs	r3, r3, #8
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	885b      	ldrh	r3, [r3, #2]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005a70:	8afb      	ldrh	r3, [r7, #22]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	88db      	ldrh	r3, [r3, #6]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	837b      	strh	r3, [r7, #26]
 8005a84:	2340      	movs	r3, #64	@ 0x40
 8005a86:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005a88:	8b7a      	ldrh	r2, [r7, #26]
 8005a8a:	8b3b      	ldrh	r3, [r7, #24]
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	bf28      	it	cs
 8005a90:	4613      	movcs	r3, r2
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 8005a9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d013      	beq.n	8005ace <hidd_control_xfer_cb+0x1fa>
 8005aa6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d90f      	bls.n	8005ace <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 8005aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ab4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005ab8:	701a      	strb	r2, [r3, #0]
            req_len--;
 8005aba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8005ac4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8005ace:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005ad2:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8005ad6:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8005ada:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ae2:	f7fa fde1 	bl	80006a8 <tud_hid_get_report_cb>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005aee:	4413      	add	r3, r2
 8005af0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8005af4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d110      	bne.n	8005b1e <hidd_control_xfer_cb+0x24a>
 8005afc:	f240 123f 	movw	r2, #319	@ 0x13f
 8005b00:	4916      	ldr	r1, [pc, #88]	@ (8005b5c <hidd_control_xfer_cb+0x288>)
 8005b02:	4817      	ldr	r0, [pc, #92]	@ (8005b60 <hidd_control_xfer_cb+0x28c>)
 8005b04:	f005 fd8e 	bl	800b624 <iprintf>
 8005b08:	4b16      	ldr	r3, [pc, #88]	@ (8005b64 <hidd_control_xfer_cb+0x290>)
 8005b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d000      	beq.n	8005b1a <hidd_control_xfer_cb+0x246>
 8005b18:	be00      	bkpt	0x0000
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e0cc      	b.n	8005cb8 <hidd_control_xfer_cb+0x3e4>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8005b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005b24:	79f8      	ldrb	r0, [r7, #7]
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	f002 fefe 	bl	8008928 <tud_control_xfer>
        }
        break;
 8005b2c:	e0b8      	b.n	8005ca0 <hidd_control_xfer_cb+0x3cc>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8005b2e:	79bb      	ldrb	r3, [r7, #6]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d119      	bne.n	8005b68 <hidd_control_xfer_cb+0x294>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	88db      	ldrh	r3, [r3, #6]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b40      	cmp	r3, #64	@ 0x40
 8005b3c:	d901      	bls.n	8005b42 <hidd_control_xfer_cb+0x26e>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e0ba      	b.n	8005cb8 <hidd_control_xfer_cb+0x3e4>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8005b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	88db      	ldrh	r3, [r3, #6]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	79f8      	ldrb	r0, [r7, #7]
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	f002 feeb 	bl	8008928 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8005b52:	e0a7      	b.n	8005ca4 <hidd_control_xfer_cb+0x3d0>
 8005b54:	20000528 	.word	0x20000528
 8005b58:	20000534 	.word	0x20000534
 8005b5c:	0800cfac 	.word	0x0800cfac
 8005b60:	0800c904 	.word	0x0800c904
 8005b64:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8005b68:	79bb      	ldrb	r3, [r7, #6]
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	f040 809a 	bne.w	8005ca4 <hidd_control_xfer_cb+0x3d0>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	885b      	ldrh	r3, [r3, #2]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005b78:	89bb      	ldrh	r3, [r7, #12]
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	885b      	ldrh	r3, [r3, #2]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005b8c:	89fb      	ldrh	r3, [r7, #14]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	88db      	ldrh	r3, [r3, #6]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	827b      	strh	r3, [r7, #18]
 8005ba0:	2340      	movs	r3, #64	@ 0x40
 8005ba2:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005ba4:	8a7a      	ldrh	r2, [r7, #18]
 8005ba6:	8a3b      	ldrh	r3, [r7, #16]
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	bf28      	it	cs
 8005bac:	4613      	movcs	r3, r2
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 8005bb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00e      	beq.n	8005bd8 <hidd_control_xfer_cb+0x304>
 8005bba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d90b      	bls.n	8005bd8 <hidd_control_xfer_cb+0x304>
 8005bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d105      	bne.n	8005bd8 <hidd_control_xfer_cb+0x304>
            report_buf++;
 8005bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bce:	3301      	adds	r3, #1
 8005bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8005bd2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8005bd8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005bdc:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005be0:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8005be4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bea:	f7fa fd6d 	bl	80006c8 <tud_hid_set_report_cb>
        break;
 8005bee:	e059      	b.n	8005ca4 <hidd_control_xfer_cb+0x3d0>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8005bf0:	79bb      	ldrb	r3, [r7, #6]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d158      	bne.n	8005ca8 <hidd_control_xfer_cb+0x3d4>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	885b      	ldrh	r3, [r3, #2]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005bfe:	897b      	ldrh	r3, [r7, #10]
 8005c00:	0a1b      	lsrs	r3, r3, #8
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c08:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8005c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c0c:	79da      	ldrb	r2, [r3, #7]
 8005c0e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005c12:	4611      	mov	r1, r2
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fbee 	bl	80053f6 <tud_hid_set_idle_cb>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f083 0301 	eor.w	r3, r3, #1
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <hidd_control_xfer_cb+0x356>
 8005c26:	2300      	movs	r3, #0
 8005c28:	e046      	b.n	8005cb8 <hidd_control_xfer_cb+0x3e4>
          tud_control_status(rhport, request);
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f002 fe08 	bl	8008844 <tud_control_status>
        }
        break;
 8005c34:	e038      	b.n	8005ca8 <hidd_control_xfer_cb+0x3d4>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8005c36:	79bb      	ldrb	r3, [r7, #6]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d137      	bne.n	8005cac <hidd_control_xfer_cb+0x3d8>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8005c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c3e:	1dda      	adds	r2, r3, #7
 8005c40:	79f8      	ldrb	r0, [r7, #7]
 8005c42:	2301      	movs	r3, #1
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	f002 fe6f 	bl	8008928 <tud_control_xfer>
        }
        break;
 8005c4a:	e02f      	b.n	8005cac <hidd_control_xfer_cb+0x3d8>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8005c4c:	79bb      	ldrb	r3, [r7, #6]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d12e      	bne.n	8005cb0 <hidd_control_xfer_cb+0x3dc>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8005c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c54:	1d9a      	adds	r2, r3, #6
 8005c56:	79f8      	ldrb	r0, [r7, #7]
 8005c58:	2301      	movs	r3, #1
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	f002 fe64 	bl	8008928 <tud_control_xfer>
        }
        break;
 8005c60:	e026      	b.n	8005cb0 <hidd_control_xfer_cb+0x3dc>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8005c62:	79bb      	ldrb	r3, [r7, #6]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d105      	bne.n	8005c74 <hidd_control_xfer_cb+0x3a0>
          tud_control_status(rhport, request);
 8005c68:	79fb      	ldrb	r3, [r7, #7]
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f002 fde9 	bl	8008844 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8005c72:	e01f      	b.n	8005cb4 <hidd_control_xfer_cb+0x3e0>
        } else if (stage == CONTROL_STAGE_ACK) {
 8005c74:	79bb      	ldrb	r3, [r7, #6]
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d11c      	bne.n	8005cb4 <hidd_control_xfer_cb+0x3e0>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	885b      	ldrh	r3, [r3, #2]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c84:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8005c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c88:	799a      	ldrb	r2, [r3, #6]
 8005c8a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fba3 	bl	80053dc <tud_hid_set_protocol_cb>
        break;
 8005c96:	e00d      	b.n	8005cb4 <hidd_control_xfer_cb+0x3e0>

      default:
        return false; // stall unsupported request
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e00d      	b.n	8005cb8 <hidd_control_xfer_cb+0x3e4>
    }
  } else {
    return false; // stall unsupported request
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e00b      	b.n	8005cb8 <hidd_control_xfer_cb+0x3e4>
        break;
 8005ca0:	bf00      	nop
 8005ca2:	e008      	b.n	8005cb6 <hidd_control_xfer_cb+0x3e2>
        break;
 8005ca4:	bf00      	nop
 8005ca6:	e006      	b.n	8005cb6 <hidd_control_xfer_cb+0x3e2>
        break;
 8005ca8:	bf00      	nop
 8005caa:	e004      	b.n	8005cb6 <hidd_control_xfer_cb+0x3e2>
        break;
 8005cac:	bf00      	nop
 8005cae:	e002      	b.n	8005cb6 <hidd_control_xfer_cb+0x3e2>
        break;
 8005cb0:	bf00      	nop
 8005cb2:	e000      	b.n	8005cb6 <hidd_control_xfer_cb+0x3e2>
        break;
 8005cb4:	bf00      	nop
  }

  return true;
 8005cb6:	2301      	movs	r3, #1
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3748      	adds	r7, #72	@ 0x48
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	@ 0x28
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	4603      	mov	r3, r0
 8005cca:	71fb      	strb	r3, [r7, #7]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	71bb      	strb	r3, [r7, #6]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	77fb      	strb	r3, [r7, #31]
 8005cd8:	e014      	b.n	8005d04 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8005cda:	7ffa      	ldrb	r2, [r7, #31]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4a44      	ldr	r2, [pc, #272]	@ (8005df8 <hidd_xfer_cb+0x138>)
 8005ce6:	4413      	add	r3, r2
 8005ce8:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	789b      	ldrb	r3, [r3, #2]
 8005cee:	79ba      	ldrb	r2, [r7, #6]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d00a      	beq.n	8005d0a <hidd_xfer_cb+0x4a>
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	79ba      	ldrb	r2, [r7, #6]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d005      	beq.n	8005d0a <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8005cfe:	7ffb      	ldrb	r3, [r7, #31]
 8005d00:	3301      	adds	r3, #1
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	7ffb      	ldrb	r3, [r7, #31]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0e7      	beq.n	8005cda <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8005d0a:	7ffb      	ldrb	r3, [r7, #31]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d010      	beq.n	8005d32 <hidd_xfer_cb+0x72>
 8005d10:	f240 128d 	movw	r2, #397	@ 0x18d
 8005d14:	4939      	ldr	r1, [pc, #228]	@ (8005dfc <hidd_xfer_cb+0x13c>)
 8005d16:	483a      	ldr	r0, [pc, #232]	@ (8005e00 <hidd_xfer_cb+0x140>)
 8005d18:	f005 fc84 	bl	800b624 <iprintf>
 8005d1c:	4b39      	ldr	r3, [pc, #228]	@ (8005e04 <hidd_xfer_cb+0x144>)
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d000      	beq.n	8005d2e <hidd_xfer_cb+0x6e>
 8005d2c:	be00      	bkpt	0x0000
 8005d2e:	2300      	movs	r3, #0
 8005d30:	e05d      	b.n	8005dee <hidd_xfer_cb+0x12e>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8005d32:	7ffa      	ldrb	r2, [r7, #31]
 8005d34:	4613      	mov	r3, r2
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	4413      	add	r3, r2
 8005d3a:	019b      	lsls	r3, r3, #6
 8005d3c:	4a32      	ldr	r2, [pc, #200]	@ (8005e08 <hidd_xfer_cb+0x148>)
 8005d3e:	4413      	add	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	785b      	ldrb	r3, [r3, #1]
 8005d46:	79ba      	ldrb	r2, [r7, #6]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d116      	bne.n	8005d7a <hidd_xfer_cb+0xba>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8005d4c:	797b      	ldrb	r3, [r7, #5]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <hidd_xfer_cb+0xa6>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	7ffb      	ldrb	r3, [r7, #31]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff fb57 	bl	8005412 <tud_hid_report_complete_cb>
 8005d64:	e042      	b.n	8005dec <hidd_xfer_cb+0x12c>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	7ff8      	ldrb	r0, [r7, #31]
 8005d72:	2101      	movs	r1, #1
 8005d74:	f7ff fb5a 	bl	800542c <tud_hid_report_failed_cb>
 8005d78:	e038      	b.n	8005dec <hidd_xfer_cb+0x12c>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8005d7a:	797b      	ldrb	r3, [r7, #5]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10c      	bne.n	8005d9a <hidd_xfer_cb+0xda>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	7ff8      	ldrb	r0, [r7, #31]
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	2202      	movs	r2, #2
 8005d92:	2100      	movs	r1, #0
 8005d94:	f7fa fc98 	bl	80006c8 <tud_hid_set_report_cb>
 8005d98:	e008      	b.n	8005dac <hidd_xfer_cb+0xec>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	7ff8      	ldrb	r0, [r7, #31]
 8005da6:	2102      	movs	r1, #2
 8005da8:	f7ff fb40 	bl	800542c <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	7899      	ldrb	r1, [r3, #2]
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8005db6:	79f8      	ldrb	r0, [r7, #7]
 8005db8:	2340      	movs	r3, #64	@ 0x40
 8005dba:	f002 fbb5 	bl	8008528 <usbd_edpt_xfer>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f083 0301 	eor.w	r3, r3, #1
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d010      	beq.n	8005dec <hidd_xfer_cb+0x12c>
 8005dca:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8005dce:	490b      	ldr	r1, [pc, #44]	@ (8005dfc <hidd_xfer_cb+0x13c>)
 8005dd0:	480b      	ldr	r0, [pc, #44]	@ (8005e00 <hidd_xfer_cb+0x140>)
 8005dd2:	f005 fc27 	bl	800b624 <iprintf>
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <hidd_xfer_cb+0x144>)
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d000      	beq.n	8005de8 <hidd_xfer_cb+0x128>
 8005de6:	be00      	bkpt	0x0000
 8005de8:	2300      	movs	r3, #0
 8005dea:	e000      	b.n	8005dee <hidd_xfer_cb+0x12e>
  }

  return true;
 8005dec:	2301      	movs	r3, #1
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3720      	adds	r7, #32
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000528 	.word	0x20000528
 8005dfc:	0800cfc4 	.word	0x0800cfc4
 8005e00:	0800c904 	.word	0x0800c904
 8005e04:	e000edf0 	.word	0xe000edf0
 8005e08:	20000534 	.word	0x20000534

08005e0c <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	4611      	mov	r1, r2
 8005e18:	461a      	mov	r2, r3
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	80fb      	strh	r3, [r7, #6]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e28:	d901      	bls.n	8005e2e <tu_fifo_config+0x22>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e01b      	b.n	8005e66 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	88fa      	ldrh	r2, [r7, #6]
 8005e38:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8005e3a:	88bb      	ldrh	r3, [r7, #4]
 8005e3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005e40:	b299      	uxth	r1, r3
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	88d3      	ldrh	r3, [r2, #6]
 8005e46:	f361 030e 	bfi	r3, r1, #0, #15
 8005e4a:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	79d3      	ldrb	r3, [r2, #7]
 8005e50:	7e39      	ldrb	r1, [r7, #24]
 8005e52:	f361 13c7 	bfi	r3, r1, #7, #1
 8005e56:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8005e64:	2301      	movs	r3, #1
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <_ff_push>:
}
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	88fa      	ldrh	r2, [r7, #6]
 8005e84:	68f9      	ldr	r1, [r7, #12]
 8005e86:	88c9      	ldrh	r1, [r1, #6]
 8005e88:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8005e8c:	b289      	uxth	r1, r1
 8005e8e:	fb01 f202 	mul.w	r2, r1, r2
 8005e92:	1898      	adds	r0, r3, r2
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	88db      	ldrh	r3, [r3, #6]
 8005e98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	68b9      	ldr	r1, [r7, #8]
 8005ea2:	f005 fdbe 	bl	800ba22 <memcpy>
}
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b088      	sub	sp, #32
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	461a      	mov	r2, r3
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	80fb      	strh	r3, [r7, #6]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	889a      	ldrh	r2, [r3, #4]
 8005ec8:	88bb      	ldrh	r3, [r7, #4]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	83fb      	strh	r3, [r7, #30]
  uint16_t const wrap_count = n - lin_count;
 8005ece:	88fa      	ldrh	r2, [r7, #6]
 8005ed0:	8bfb      	ldrh	r3, [r7, #30]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	83bb      	strh	r3, [r7, #28]

  uint16_t lin_bytes = lin_count * f->item_size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	88db      	ldrh	r3, [r3, #6]
 8005eda:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	8bfb      	ldrh	r3, [r7, #30]
 8005ee4:	fb02 f303 	mul.w	r3, r2, r3
 8005ee8:	837b      	strh	r3, [r7, #26]
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	88db      	ldrh	r3, [r3, #6]
 8005eee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	8bbb      	ldrh	r3, [r7, #28]
 8005ef8:	fb02 f303 	mul.w	r3, r2, r3
 8005efc:	833b      	strh	r3, [r7, #24]

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	88ba      	ldrh	r2, [r7, #4]
 8005f04:	68f9      	ldr	r1, [r7, #12]
 8005f06:	88c9      	ldrh	r1, [r1, #6]
 8005f08:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8005f0c:	b289      	uxth	r1, r1
 8005f0e:	fb01 f202 	mul.w	r2, r1, r2
 8005f12:	4413      	add	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]

  switch (copy_mode)
 8005f16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d121      	bne.n	8005f62 <_ff_push_n+0xb4>
  {
    case TU_FIFO_COPY_INC:
      if(n <= lin_count)
 8005f1e:	88fa      	ldrh	r2, [r7, #6]
 8005f20:	8bfb      	ldrh	r3, [r7, #30]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d80d      	bhi.n	8005f42 <_ff_push_n+0x94>
      {
        // Linear only
        memcpy(ff_buf, app_buf, n*f->item_size);
 8005f26:	88fb      	ldrh	r3, [r7, #6]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	88d2      	ldrh	r2, [r2, #6]
 8005f2c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005f30:	b292      	uxth	r2, r2
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	68b9      	ldr	r1, [r7, #8]
 8005f3a:	6978      	ldr	r0, [r7, #20]
 8005f3c:	f005 fd71 	bl	800ba22 <memcpy>

        // Write data wrapped around
        // TU_ASSERT(nWrap_bytes <= f->depth, );
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
      }
      break;
 8005f40:	e010      	b.n	8005f64 <_ff_push_n+0xb6>
        memcpy(ff_buf, app_buf, lin_bytes);
 8005f42:	8b7b      	ldrh	r3, [r7, #26]
 8005f44:	461a      	mov	r2, r3
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	6978      	ldr	r0, [r7, #20]
 8005f4a:	f005 fd6a 	bl	800ba22 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	8b7b      	ldrh	r3, [r7, #26]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	4413      	add	r3, r2
 8005f58:	8b3a      	ldrh	r2, [r7, #24]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	f005 fd61 	bl	800ba22 <memcpy>
      break;
 8005f60:	e000      	b.n	8005f64 <_ff_push_n+0xb6>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8005f62:	bf00      	nop
  }
}
 8005f64:	bf00      	nop
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	4613      	mov	r3, r2
 8005f78:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	88fa      	ldrh	r2, [r7, #6]
 8005f80:	68f9      	ldr	r1, [r7, #12]
 8005f82:	88c9      	ldrh	r1, [r1, #6]
 8005f84:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8005f88:	b289      	uxth	r1, r1
 8005f8a:	fb01 f202 	mul.w	r2, r1, r2
 8005f8e:	1899      	adds	r1, r3, r2
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	88db      	ldrh	r3, [r3, #6]
 8005f94:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68b8      	ldr	r0, [r7, #8]
 8005f9e:	f005 fd40 	bl	800ba22 <memcpy>
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b088      	sub	sp, #32
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	460b      	mov	r3, r1
 8005fba:	80fb      	strh	r3, [r7, #6]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	889a      	ldrh	r2, [r3, #4]
 8005fc4:	88bb      	ldrh	r3, [r7, #4]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	83fb      	strh	r3, [r7, #30]
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8005fca:	88fa      	ldrh	r2, [r7, #6]
 8005fcc:	8bfb      	ldrh	r3, [r7, #30]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	83bb      	strh	r3, [r7, #28]

  uint16_t lin_bytes = lin_count * f->item_size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	88db      	ldrh	r3, [r3, #6]
 8005fd6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	8bfb      	ldrh	r3, [r7, #30]
 8005fe0:	fb02 f303 	mul.w	r3, r2, r3
 8005fe4:	837b      	strh	r3, [r7, #26]
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	88db      	ldrh	r3, [r3, #6]
 8005fea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	8bbb      	ldrh	r3, [r7, #28]
 8005ff4:	fb02 f303 	mul.w	r3, r2, r3
 8005ff8:	833b      	strh	r3, [r7, #24]

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	88ba      	ldrh	r2, [r7, #4]
 8006000:	68f9      	ldr	r1, [r7, #12]
 8006002:	88c9      	ldrh	r1, [r1, #6]
 8006004:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006008:	b289      	uxth	r1, r1
 800600a:	fb01 f202 	mul.w	r2, r1, r2
 800600e:	4413      	add	r3, r2
 8006010:	617b      	str	r3, [r7, #20]

  switch (copy_mode)
 8006012:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006016:	2b00      	cmp	r3, #0
 8006018:	d121      	bne.n	800605e <_ff_pull_n+0xb4>
  {
    case TU_FIFO_COPY_INC:
      if ( n <= lin_count )
 800601a:	88fa      	ldrh	r2, [r7, #6]
 800601c:	8bfb      	ldrh	r3, [r7, #30]
 800601e:	429a      	cmp	r2, r3
 8006020:	d80d      	bhi.n	800603e <_ff_pull_n+0x94>
      {
        // Linear only
        memcpy(app_buf, ff_buf, n*f->item_size);
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	88d2      	ldrh	r2, [r2, #6]
 8006028:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800602c:	b292      	uxth	r2, r2
 800602e:	fb02 f303 	mul.w	r3, r2, r3
 8006032:	461a      	mov	r2, r3
 8006034:	6979      	ldr	r1, [r7, #20]
 8006036:	68b8      	ldr	r0, [r7, #8]
 8006038:	f005 fcf3 	bl	800ba22 <memcpy>
        memcpy(app_buf, ff_buf, lin_bytes);

        // Read data wrapped part
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
      }
    break;
 800603c:	e010      	b.n	8006060 <_ff_pull_n+0xb6>
        memcpy(app_buf, ff_buf, lin_bytes);
 800603e:	8b7b      	ldrh	r3, [r7, #26]
 8006040:	461a      	mov	r2, r3
 8006042:	6979      	ldr	r1, [r7, #20]
 8006044:	68b8      	ldr	r0, [r7, #8]
 8006046:	f005 fcec 	bl	800ba22 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800604a:	8b7b      	ldrh	r3, [r7, #26]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	18d0      	adds	r0, r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	8b3a      	ldrh	r2, [r7, #24]
 8006056:	4619      	mov	r1, r3
 8006058:	f005 fce3 	bl	800ba22 <memcpy>
    break;
 800605c:	e000      	b.n	8006060 <_ff_pull_n+0xb6>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 800605e:	bf00      	nop
  }
}
 8006060:	bf00      	nop
 8006062:	3720      	adds	r7, #32
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	80fb      	strh	r3, [r7, #6]
 8006072:	460b      	mov	r3, r1
 8006074:	80bb      	strh	r3, [r7, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 800607a:	88ba      	ldrh	r2, [r7, #4]
 800607c:	887b      	ldrh	r3, [r7, #2]
 800607e:	4413      	add	r3, r2
 8006080:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8006082:	88ba      	ldrh	r2, [r7, #4]
 8006084:	89fb      	ldrh	r3, [r7, #14]
 8006086:	429a      	cmp	r2, r3
 8006088:	d804      	bhi.n	8006094 <advance_index+0x2c>
 800608a:	89fa      	ldrh	r2, [r7, #14]
 800608c:	88fb      	ldrh	r3, [r7, #6]
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	429a      	cmp	r2, r3
 8006092:	db08      	blt.n	80060a6 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8006094:	88fb      	ldrh	r3, [r7, #6]
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	b29b      	uxth	r3, r3
 800609a:	425b      	negs	r3, r3
 800609c:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800609e:	89fa      	ldrh	r2, [r7, #14]
 80060a0:	89bb      	ldrh	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 80060a6:	89fb      	ldrh	r3, [r7, #14]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr

080060b2 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b08a      	sub	sp, #40	@ 0x28
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	60b9      	str	r1, [r7, #8]
 80060bc:	4611      	mov	r1, r2
 80060be:	461a      	mov	r2, r3
 80060c0:	460b      	mov	r3, r1
 80060c2:	80fb      	strh	r3, [r7, #6]
 80060c4:	4613      	mov	r3, r2
 80060c6:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	889b      	ldrh	r3, [r3, #4]
 80060cc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	843b      	strh	r3, [r7, #32]
 80060d2:	88bb      	ldrh	r3, [r7, #4]
 80060d4:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80060d6:	8c3a      	ldrh	r2, [r7, #32]
 80060d8:	8bfb      	ldrh	r3, [r7, #30]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d304      	bcc.n	80060e8 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80060de:	8c3a      	ldrh	r2, [r7, #32]
 80060e0:	8bfb      	ldrh	r3, [r7, #30]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	e008      	b.n	80060fa <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80060e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	8c39      	ldrh	r1, [r7, #32]
 80060f0:	8bfb      	ldrh	r3, [r7, #30]
 80060f2:	1acb      	subs	r3, r1, r3
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	4413      	add	r3, r2
 80060f8:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80060fa:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 80060fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <_tu_fifo_peek+0x54>
 8006102:	2300      	movs	r3, #0
 8006104:	e037      	b.n	8006176 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	889b      	ldrh	r3, [r3, #4]
 800610a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800610c:	429a      	cmp	r2, r3
 800610e:	d91b      	bls.n	8006148 <_tu_fifo_peek+0x96>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	61bb      	str	r3, [r7, #24]
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	889b      	ldrh	r3, [r3, #4]
 800611c:	8afa      	ldrh	r2, [r7, #22]
 800611e:	429a      	cmp	r2, r3
 8006120:	d305      	bcc.n	800612e <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	889b      	ldrh	r3, [r3, #4]
 8006126:	8afa      	ldrh	r2, [r7, #22]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	82bb      	strh	r3, [r7, #20]
 800612c:	e004      	b.n	8006138 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	889a      	ldrh	r2, [r3, #4]
 8006132:	8afb      	ldrh	r3, [r7, #22]
 8006134:	4413      	add	r3, r2
 8006136:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	8aba      	ldrh	r2, [r7, #20]
 800613c:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800613e:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8006140:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	889b      	ldrh	r3, [r3, #4]
 8006146:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	889b      	ldrh	r3, [r3, #4]
 800614c:	827b      	strh	r3, [r7, #18]
 800614e:	88bb      	ldrh	r3, [r7, #4]
 8006150:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8006152:	e003      	b.n	800615c <_tu_fifo_peek+0xaa>
 8006154:	8a3a      	ldrh	r2, [r7, #16]
 8006156:	8a7b      	ldrh	r3, [r7, #18]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	823b      	strh	r3, [r7, #16]
 800615c:	8a7a      	ldrh	r2, [r7, #18]
 800615e:	8a3b      	ldrh	r3, [r7, #16]
 8006160:	429a      	cmp	r2, r3
 8006162:	d9f7      	bls.n	8006154 <_tu_fifo_peek+0xa2>
  return idx;
 8006164:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006166:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8006168:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800616a:	461a      	mov	r2, r3
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7ff fefc 	bl	8005f6c <_ff_pull>

  return true;
 8006174:	2301      	movs	r3, #1
}
 8006176:	4618      	mov	r0, r3
 8006178:	3728      	adds	r7, #40	@ 0x28
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b08c      	sub	sp, #48	@ 0x30
 8006182:	af02      	add	r7, sp, #8
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	4611      	mov	r1, r2
 800618a:	461a      	mov	r2, r3
 800618c:	460b      	mov	r3, r1
 800618e:	80fb      	strh	r3, [r7, #6]
 8006190:	4613      	mov	r3, r2
 8006192:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	889b      	ldrh	r3, [r3, #4]
 8006198:	847b      	strh	r3, [r7, #34]	@ 0x22
 800619a:	88bb      	ldrh	r3, [r7, #4]
 800619c:	843b      	strh	r3, [r7, #32]
 800619e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80061a0:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80061a2:	8c3a      	ldrh	r2, [r7, #32]
 80061a4:	8bfb      	ldrh	r3, [r7, #30]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d304      	bcc.n	80061b4 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80061aa:	8c3a      	ldrh	r2, [r7, #32]
 80061ac:	8bfb      	ldrh	r3, [r7, #30]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	e008      	b.n	80061c6 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80061b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	8c39      	ldrh	r1, [r7, #32]
 80061bc:	8bfb      	ldrh	r3, [r7, #30]
 80061be:	1acb      	subs	r3, r1, r3
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	4413      	add	r3, r2
 80061c4:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80061c6:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 80061c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <_tu_fifo_peek_n+0x54>
 80061ce:	2300      	movs	r3, #0
 80061d0:	e041      	b.n	8006256 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	889b      	ldrh	r3, [r3, #4]
 80061d6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80061d8:	429a      	cmp	r2, r3
 80061da:	d91b      	bls.n	8006214 <_tu_fifo_peek_n+0x96>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	61bb      	str	r3, [r7, #24]
 80061e0:	88bb      	ldrh	r3, [r7, #4]
 80061e2:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	889b      	ldrh	r3, [r3, #4]
 80061e8:	8afa      	ldrh	r2, [r7, #22]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d305      	bcc.n	80061fa <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	889b      	ldrh	r3, [r3, #4]
 80061f2:	8afa      	ldrh	r2, [r7, #22]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	82bb      	strh	r3, [r7, #20]
 80061f8:	e004      	b.n	8006204 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	889a      	ldrh	r2, [r3, #4]
 80061fe:	8afb      	ldrh	r3, [r7, #22]
 8006200:	4413      	add	r3, r2
 8006202:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	8aba      	ldrh	r2, [r7, #20]
 8006208:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800620a:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800620c:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	889b      	ldrh	r3, [r3, #4]
 8006212:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8006214:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006216:	88fb      	ldrh	r3, [r7, #6]
 8006218:	429a      	cmp	r2, r3
 800621a:	d201      	bcs.n	8006220 <_tu_fifo_peek_n+0xa2>
 800621c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800621e:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	889b      	ldrh	r3, [r3, #4]
 8006224:	827b      	strh	r3, [r7, #18]
 8006226:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006228:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 800622a:	e003      	b.n	8006234 <_tu_fifo_peek_n+0xb6>
 800622c:	8a3a      	ldrh	r2, [r7, #16]
 800622e:	8a7b      	ldrh	r3, [r7, #18]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	823b      	strh	r3, [r7, #16]
 8006234:	8a7a      	ldrh	r2, [r7, #18]
 8006236:	8a3b      	ldrh	r3, [r7, #16]
 8006238:	429a      	cmp	r2, r3
 800623a:	d9f7      	bls.n	800622c <_tu_fifo_peek_n+0xae>
  return idx;
 800623c:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800623e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8006240:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8006242:	88fa      	ldrh	r2, [r7, #6]
 8006244:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	460b      	mov	r3, r1
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f7ff feab 	bl	8005faa <_ff_pull_n>

  return n;
 8006254:	88fb      	ldrh	r3, [r7, #6]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3728      	adds	r7, #40	@ 0x28
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b092      	sub	sp, #72	@ 0x48
 8006262:	af02      	add	r7, sp, #8
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	4611      	mov	r1, r2
 800626a:	461a      	mov	r2, r3
 800626c:	460b      	mov	r3, r1
 800626e:	80fb      	strh	r3, [r7, #6]
 8006270:	4613      	mov	r3, r2
 8006272:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <_tu_fifo_write_n+0x20>
 800627a:	2300      	movs	r3, #0
 800627c:	e0bc      	b.n	80063f8 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	891b      	ldrh	r3, [r3, #8]
 8006282:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	895b      	ldrh	r3, [r3, #10]
 8006288:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	79db      	ldrb	r3, [r3, #7]
 8006292:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006296:	b2db      	uxtb	r3, r3
 8006298:	f083 0301 	eor.w	r3, r3, #1
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d036      	beq.n	8006310 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	889b      	ldrh	r3, [r3, #4]
 80062a6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80062a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80062aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80062ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80062b0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80062b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80062b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80062b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80062b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062ba:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 80062bc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80062be:	8c3b      	ldrh	r3, [r7, #32]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d304      	bcc.n	80062ce <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 80062c4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80062c6:	8c3b      	ldrh	r3, [r7, #32]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	e008      	b.n	80062e0 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80062ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80062d6:	8c3b      	ldrh	r3, [r7, #32]
 80062d8:	1acb      	subs	r3, r1, r3
 80062da:	b29b      	uxth	r3, r3
 80062dc:	4413      	add	r3, r2
 80062de:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80062e0:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 80062e2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80062e4:	8bfb      	ldrh	r3, [r7, #30]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d904      	bls.n	80062f4 <_tu_fifo_write_n+0x96>
 80062ea:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80062ec:	8bfb      	ldrh	r3, [r7, #30]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	e000      	b.n	80062f6 <_tu_fifo_write_n+0x98>
 80062f4:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80062f6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80062f8:	88fb      	ldrh	r3, [r7, #6]
 80062fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80062fc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80062fe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006300:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006302:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006304:	4293      	cmp	r3, r2
 8006306:	bf28      	it	cs
 8006308:	4613      	movcs	r3, r2
 800630a:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 800630c:	80fb      	strh	r3, [r7, #6]
 800630e:	e04b      	b.n	80063a8 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	889b      	ldrh	r3, [r3, #4]
 8006314:	88fa      	ldrh	r2, [r7, #6]
 8006316:	429a      	cmp	r2, r3
 8006318:	d317      	bcc.n	800634a <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 800631a:	797b      	ldrb	r3, [r7, #5]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10e      	bne.n	800633e <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	8892      	ldrh	r2, [r2, #4]
 8006326:	1a9b      	subs	r3, r3, r2
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	88d2      	ldrh	r2, [r2, #6]
 800632c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006330:	b292      	uxth	r2, r2
 8006332:	fb02 f303 	mul.w	r3, r2, r3
 8006336:	461a      	mov	r2, r3
 8006338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633a:	4413      	add	r3, r2
 800633c:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	889b      	ldrh	r3, [r3, #4]
 8006342:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8006344:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006346:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006348:	e02e      	b.n	80063a8 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	889b      	ldrh	r3, [r3, #4]
 800634e:	83bb      	strh	r3, [r7, #28]
 8006350:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006352:	837b      	strh	r3, [r7, #26]
 8006354:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006356:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8006358:	8b7a      	ldrh	r2, [r7, #26]
 800635a:	8b3b      	ldrh	r3, [r7, #24]
 800635c:	429a      	cmp	r2, r3
 800635e:	d304      	bcc.n	800636a <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8006360:	8b7a      	ldrh	r2, [r7, #26]
 8006362:	8b3b      	ldrh	r3, [r7, #24]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	b29b      	uxth	r3, r3
 8006368:	e008      	b.n	800637c <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800636a:	8bbb      	ldrh	r3, [r7, #28]
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	8b79      	ldrh	r1, [r7, #26]
 8006372:	8b3b      	ldrh	r3, [r7, #24]
 8006374:	1acb      	subs	r3, r1, r3
 8006376:	b29b      	uxth	r3, r3
 8006378:	4413      	add	r3, r2
 800637a:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 800637c:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 800637e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006380:	88fb      	ldrh	r3, [r7, #6]
 8006382:	441a      	add	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	889b      	ldrh	r3, [r3, #4]
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	429a      	cmp	r2, r3
 800638c:	db0c      	blt.n	80063a8 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8898      	ldrh	r0, [r3, #4]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	889a      	ldrh	r2, [r3, #4]
 8006396:	88fb      	ldrh	r3, [r7, #6]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	b29a      	uxth	r2, r3
 800639c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800639e:	4619      	mov	r1, r3
 80063a0:	f7ff fe62 	bl	8006068 <advance_index>
 80063a4:	4603      	mov	r3, r0
 80063a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d023      	beq.n	80063f6 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	889b      	ldrh	r3, [r3, #4]
 80063b2:	82fb      	strh	r3, [r7, #22]
 80063b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80063b6:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 80063b8:	e003      	b.n	80063c2 <_tu_fifo_write_n+0x164>
 80063ba:	8aba      	ldrh	r2, [r7, #20]
 80063bc:	8afb      	ldrh	r3, [r7, #22]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	82bb      	strh	r3, [r7, #20]
 80063c2:	8afa      	ldrh	r2, [r7, #22]
 80063c4:	8abb      	ldrh	r3, [r7, #20]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d9f7      	bls.n	80063ba <_tu_fifo_write_n+0x15c>
  return idx;
 80063ca:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80063cc:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 80063ce:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80063d0:	88fa      	ldrh	r2, [r7, #6]
 80063d2:	797b      	ldrb	r3, [r7, #5]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	460b      	mov	r3, r1
 80063d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7ff fd67 	bl	8005eae <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	889b      	ldrh	r3, [r3, #4]
 80063e4:	88fa      	ldrh	r2, [r7, #6]
 80063e6:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff fe3d 	bl	8006068 <advance_index>
 80063ee:	4603      	mov	r3, r0
 80063f0:	461a      	mov	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 80063f6:	88fb      	ldrh	r3, [r7, #6]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3740      	adds	r7, #64	@ 0x40
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af02      	add	r7, sp, #8
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4611      	mov	r1, r2
 800640c:	461a      	mov	r2, r3
 800640e:	460b      	mov	r3, r1
 8006410:	80fb      	strh	r3, [r7, #6]
 8006412:	4613      	mov	r3, r2
 8006414:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	891b      	ldrh	r3, [r3, #8]
 800641a:	b298      	uxth	r0, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	895b      	ldrh	r3, [r3, #10]
 8006420:	b29b      	uxth	r3, r3
 8006422:	88f9      	ldrh	r1, [r7, #6]
 8006424:	797a      	ldrb	r2, [r7, #5]
 8006426:	9201      	str	r2, [sp, #4]
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	4603      	mov	r3, r0
 800642c:	460a      	mov	r2, r1
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f7ff fea4 	bl	800617e <_tu_fifo_peek_n>
 8006436:	4603      	mov	r3, r0
 8006438:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8898      	ldrh	r0, [r3, #4]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	895b      	ldrh	r3, [r3, #10]
 8006442:	b29b      	uxth	r3, r3
 8006444:	88fa      	ldrh	r2, [r7, #6]
 8006446:	4619      	mov	r1, r3
 8006448:	f7ff fe0e 	bl	8006068 <advance_index>
 800644c:	4603      	mov	r3, r0
 800644e:	461a      	mov	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8006454:	88fb      	ldrh	r3, [r7, #6]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 800645e:	b480      	push	{r7}
 8006460:	b087      	sub	sp, #28
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	8899      	ldrh	r1, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	891b      	ldrh	r3, [r3, #8]
 800646e:	b29a      	uxth	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	895b      	ldrh	r3, [r3, #10]
 8006474:	b29b      	uxth	r3, r3
 8006476:	8279      	strh	r1, [r7, #18]
 8006478:	823a      	strh	r2, [r7, #16]
 800647a:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 800647c:	8a3a      	ldrh	r2, [r7, #16]
 800647e:	89fb      	ldrh	r3, [r7, #14]
 8006480:	429a      	cmp	r2, r3
 8006482:	d304      	bcc.n	800648e <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8006484:	8a3a      	ldrh	r2, [r7, #16]
 8006486:	89fb      	ldrh	r3, [r7, #14]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	b29b      	uxth	r3, r3
 800648c:	e008      	b.n	80064a0 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800648e:	8a7b      	ldrh	r3, [r7, #18]
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	8a39      	ldrh	r1, [r7, #16]
 8006496:	89fb      	ldrh	r3, [r7, #14]
 8006498:	1acb      	subs	r3, r1, r3
 800649a:	b29b      	uxth	r3, r3
 800649c:	4413      	add	r3, r2
 800649e:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	8892      	ldrh	r2, [r2, #4]
 80064a4:	82fb      	strh	r3, [r7, #22]
 80064a6:	4613      	mov	r3, r2
 80064a8:	82bb      	strh	r3, [r7, #20]
 80064aa:	8afa      	ldrh	r2, [r7, #22]
 80064ac:	8abb      	ldrh	r3, [r7, #20]
 80064ae:	4293      	cmp	r3, r2
 80064b0:	bf28      	it	cs
 80064b2:	4613      	movcs	r3, r2
 80064b4:	b29b      	uxth	r3, r3
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr

080064c0 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	891b      	ldrh	r3, [r3, #8]
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	895b      	ldrh	r3, [r3, #10]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	429a      	cmp	r2, r3
 80064d6:	bf0c      	ite	eq
 80064d8:	2301      	moveq	r3, #1
 80064da:	2300      	movne	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
}
 80064de:	4618      	mov	r0, r3
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr

080064e8 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	8899      	ldrh	r1, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	891b      	ldrh	r3, [r3, #8]
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	895b      	ldrh	r3, [r3, #10]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	81f9      	strh	r1, [r7, #14]
 8006502:	81ba      	strh	r2, [r7, #12]
 8006504:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8006506:	89ba      	ldrh	r2, [r7, #12]
 8006508:	897b      	ldrh	r3, [r7, #10]
 800650a:	429a      	cmp	r2, r3
 800650c:	d304      	bcc.n	8006518 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800650e:	89ba      	ldrh	r2, [r7, #12]
 8006510:	897b      	ldrh	r3, [r7, #10]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	b29b      	uxth	r3, r3
 8006516:	e008      	b.n	800652a <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006518:	89fb      	ldrh	r3, [r7, #14]
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	89b9      	ldrh	r1, [r7, #12]
 8006520:	897b      	ldrh	r3, [r7, #10]
 8006522:	1acb      	subs	r3, r1, r3
 8006524:	b29b      	uxth	r3, r3
 8006526:	4413      	add	r3, r2
 8006528:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	8892      	ldrh	r2, [r2, #4]
 800652e:	4293      	cmp	r3, r2
 8006530:	bf2c      	ite	cs
 8006532:	2301      	movcs	r3, #1
 8006534:	2300      	movcc	r3, #0
 8006536:	b2db      	uxtb	r3, r3
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	bc80      	pop	{r7}
 8006540:	4770      	bx	lr

08006542 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8006542:	b480      	push	{r7}
 8006544:	b087      	sub	sp, #28
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	8899      	ldrh	r1, [r3, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	891b      	ldrh	r3, [r3, #8]
 8006552:	b29a      	uxth	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	895b      	ldrh	r3, [r3, #10]
 8006558:	b29b      	uxth	r3, r3
 800655a:	82f9      	strh	r1, [r7, #22]
 800655c:	82ba      	strh	r2, [r7, #20]
 800655e:	827b      	strh	r3, [r7, #18]
 8006560:	8afb      	ldrh	r3, [r7, #22]
 8006562:	823b      	strh	r3, [r7, #16]
 8006564:	8abb      	ldrh	r3, [r7, #20]
 8006566:	81fb      	strh	r3, [r7, #14]
 8006568:	8a7b      	ldrh	r3, [r7, #18]
 800656a:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 800656c:	89fa      	ldrh	r2, [r7, #14]
 800656e:	89bb      	ldrh	r3, [r7, #12]
 8006570:	429a      	cmp	r2, r3
 8006572:	d304      	bcc.n	800657e <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8006574:	89fa      	ldrh	r2, [r7, #14]
 8006576:	89bb      	ldrh	r3, [r7, #12]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	b29b      	uxth	r3, r3
 800657c:	e008      	b.n	8006590 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800657e:	8a3b      	ldrh	r3, [r7, #16]
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	89f9      	ldrh	r1, [r7, #14]
 8006586:	89bb      	ldrh	r3, [r7, #12]
 8006588:	1acb      	subs	r3, r1, r3
 800658a:	b29b      	uxth	r3, r3
 800658c:	4413      	add	r3, r2
 800658e:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8006590:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8006592:	8afa      	ldrh	r2, [r7, #22]
 8006594:	897b      	ldrh	r3, [r7, #10]
 8006596:	429a      	cmp	r2, r3
 8006598:	d904      	bls.n	80065a4 <tu_fifo_remaining+0x62>
 800659a:	8afa      	ldrh	r2, [r7, #22]
 800659c:	897b      	ldrh	r3, [r7, #10]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	e000      	b.n	80065a6 <tu_fifo_remaining+0x64>
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bc80      	pop	{r7}
 80065ae:	4770      	bx	lr

080065b0 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	891b      	ldrh	r3, [r3, #8]
 80065be:	b29a      	uxth	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	895b      	ldrh	r3, [r3, #10]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fd72 	bl	80060b2 <_tu_fifo_peek>
 80065ce:	4603      	mov	r3, r0
 80065d0:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	8898      	ldrh	r0, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	895b      	ldrh	r3, [r3, #10]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	7bfa      	ldrb	r2, [r7, #15]
 80065de:	b292      	uxth	r2, r2
 80065e0:	4619      	mov	r1, r3
 80065e2:	f7ff fd41 	bl	8006068 <advance_index>
 80065e6:	4603      	mov	r3, r0
 80065e8:	461a      	mov	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	4613      	mov	r3, r2
 8006604:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8006606:	88fa      	ldrh	r2, [r7, #6]
 8006608:	2300      	movs	r3, #0
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7ff fef7 	bl	8006400 <_tu_fifo_read_n>
 8006612:	4603      	mov	r3, r0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	891b      	ldrh	r3, [r3, #8]
 800662a:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ff5b 	bl	80064e8 <tu_fifo_full>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00c      	beq.n	8006652 <tu_fifo_write+0x36>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	79db      	ldrb	r3, [r3, #7]
 800663c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006640:	b2db      	uxtb	r3, r3
 8006642:	f083 0301 	eor.w	r3, r3, #1
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <tu_fifo_write+0x36>
  {
    ret = false;
 800664c:	2300      	movs	r3, #0
 800664e:	75fb      	strb	r3, [r7, #23]
 8006650:	e022      	b.n	8006698 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	889b      	ldrh	r3, [r3, #4]
 8006656:	823b      	strh	r3, [r7, #16]
 8006658:	8abb      	ldrh	r3, [r7, #20]
 800665a:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 800665c:	e003      	b.n	8006666 <tu_fifo_write+0x4a>
 800665e:	89fa      	ldrh	r2, [r7, #14]
 8006660:	8a3b      	ldrh	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	81fb      	strh	r3, [r7, #14]
 8006666:	8a3a      	ldrh	r2, [r7, #16]
 8006668:	89fb      	ldrh	r3, [r7, #14]
 800666a:	429a      	cmp	r2, r3
 800666c:	d9f7      	bls.n	800665e <tu_fifo_write+0x42>
  return idx;
 800666e:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006670:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8006672:	8a7b      	ldrh	r3, [r7, #18]
 8006674:	461a      	mov	r2, r3
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff fbf9 	bl	8005e70 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	889b      	ldrh	r3, [r3, #4]
 8006682:	8ab9      	ldrh	r1, [r7, #20]
 8006684:	2201      	movs	r2, #1
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff fcee 	bl	8006068 <advance_index>
 800668c:	4603      	mov	r3, r0
 800668e:	461a      	mov	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	811a      	strh	r2, [r3, #8]

    ret = true;
 8006694:	2301      	movs	r3, #1
 8006696:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	4613      	mov	r3, r2
 80066ae:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 80066b0:	88fa      	ldrh	r2, [r7, #6]
 80066b2:	2300      	movs	r3, #0
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f7ff fdd1 	bl	800625e <_tu_fifo_write_n>
 80066bc:	4603      	mov	r3, r0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 80066da:	2301      	movs	r3, #1
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr

080066e6 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	460b      	mov	r3, r1
 80066f0:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	79d3      	ldrb	r3, [r2, #7]
 80066f6:	78f9      	ldrb	r1, [r7, #3]
 80066f8:	f361 13c7 	bfi	r3, r1, #7, #1
 80066fc:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80066fe:	2301      	movs	r3, #1
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	bc80      	pop	{r7}
 8006708:	4770      	bx	lr

0800670a <tu_fifo_advance_write_pointer>:
    @param[in]  n
                Number of items the write pointer moves forward
 */
/******************************************************************************/
void tu_fifo_advance_write_pointer(tu_fifo_t *f, uint16_t n)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b082      	sub	sp, #8
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	460b      	mov	r3, r1
 8006714:	807b      	strh	r3, [r7, #2]
  f->wr_idx = advance_index(f->depth, f->wr_idx, n);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8898      	ldrh	r0, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	891b      	ldrh	r3, [r3, #8]
 800671e:	b29b      	uxth	r3, r3
 8006720:	887a      	ldrh	r2, [r7, #2]
 8006722:	4619      	mov	r1, r3
 8006724:	f7ff fca0 	bl	8006068 <advance_index>
 8006728:	4603      	mov	r3, r0
 800672a:	461a      	mov	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	811a      	strh	r2, [r3, #8]
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <tu_fifo_advance_read_pointer>:
    @param[in]  n
                Number of items the read pointer moves forward
 */
/******************************************************************************/
void tu_fifo_advance_read_pointer(tu_fifo_t *f, uint16_t n)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	807b      	strh	r3, [r7, #2]
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	8898      	ldrh	r0, [r3, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	895b      	ldrh	r3, [r3, #10]
 800674c:	b29b      	uxth	r3, r3
 800674e:	887a      	ldrh	r2, [r7, #2]
 8006750:	4619      	mov	r1, r3
 8006752:	f7ff fc89 	bl	8006068 <advance_index>
 8006756:	4603      	mov	r3, r0
 8006758:	461a      	mov	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	815a      	strh	r2, [r3, #10]
}
 800675e:	bf00      	nop
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <tu_fifo_get_read_info>:
   @param[out]      *info
                    Pointer to struct which holds the desired infos
 */
/******************************************************************************/
void tu_fifo_get_read_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
{
 8006766:	b480      	push	{r7}
 8006768:	b08b      	sub	sp, #44	@ 0x2c
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	6039      	str	r1, [r7, #0]
  // Operate on temporary values in case they change in between
  uint16_t wr_idx = f->wr_idx;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	891b      	ldrh	r3, [r3, #8]
 8006774:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t rd_idx = f->rd_idx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	895b      	ldrh	r3, [r3, #10]
 800677a:	84fb      	strh	r3, [r7, #38]	@ 0x26

  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	889b      	ldrh	r3, [r3, #4]
 8006780:	83bb      	strh	r3, [r7, #28]
 8006782:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006784:	837b      	strh	r3, [r7, #26]
 8006786:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006788:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 800678a:	8b7a      	ldrh	r2, [r7, #26]
 800678c:	8b3b      	ldrh	r3, [r7, #24]
 800678e:	429a      	cmp	r2, r3
 8006790:	d304      	bcc.n	800679c <tu_fifo_get_read_info+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8006792:	8b7a      	ldrh	r2, [r7, #26]
 8006794:	8b3b      	ldrh	r3, [r7, #24]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	b29b      	uxth	r3, r3
 800679a:	e008      	b.n	80067ae <tu_fifo_get_read_info+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800679c:	8bbb      	ldrh	r3, [r7, #28]
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	8b79      	ldrh	r1, [r7, #26]
 80067a4:	8b3b      	ldrh	r3, [r7, #24]
 80067a6:	1acb      	subs	r3, r1, r3
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	4413      	add	r3, r2
 80067ac:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80067ae:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Check overflow and correct if required - may happen in case a DMA wrote too fast
  if (cnt > f->depth)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	889b      	ldrh	r3, [r3, #4]
 80067b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d91b      	bls.n	80067f2 <tu_fifo_get_read_info+0x8c>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80067c0:	827b      	strh	r3, [r7, #18]
  if ( wr_idx >= f->depth )
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	889b      	ldrh	r3, [r3, #4]
 80067c6:	8a7a      	ldrh	r2, [r7, #18]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d305      	bcc.n	80067d8 <tu_fifo_get_read_info+0x72>
    rd_idx = wr_idx - f->depth;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	889b      	ldrh	r3, [r3, #4]
 80067d0:	8a7a      	ldrh	r2, [r7, #18]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	823b      	strh	r3, [r7, #16]
 80067d6:	e004      	b.n	80067e2 <tu_fifo_get_read_info+0x7c>
    rd_idx = wr_idx + f->depth;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	889a      	ldrh	r2, [r3, #4]
 80067dc:	8a7b      	ldrh	r3, [r7, #18]
 80067de:	4413      	add	r3, r2
 80067e0:	823b      	strh	r3, [r7, #16]
  f->rd_idx = rd_idx;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	8a3a      	ldrh	r2, [r7, #16]
 80067e6:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80067e8:	8a3b      	ldrh	r3, [r7, #16]
  {
    _ff_lock(f->mutex_rd);
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80067ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
    _ff_unlock(f->mutex_rd);

    cnt = f->depth;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	889b      	ldrh	r3, [r3, #4]
 80067f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  // Check if fifo is empty
  if (cnt == 0)
 80067f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10c      	bne.n	8006812 <tu_fifo_get_read_info+0xac>
  {
    info->len_lin  = 0;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2200      	movs	r2, #0
 80067fc:	801a      	strh	r2, [r3, #0]
    info->len_wrap = 0;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2200      	movs	r2, #0
 8006802:	805a      	strh	r2, [r3, #2]
    info->ptr_lin  = NULL;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2200      	movs	r2, #0
 8006808:	605a      	str	r2, [r3, #4]
    info->ptr_wrap = NULL;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2200      	movs	r2, #0
 800680e:	609a      	str	r2, [r3, #8]
    return;
 8006810:	e045      	b.n	800689e <tu_fifo_get_read_info+0x138>
  }

  // Get relative pointers
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	889b      	ldrh	r3, [r3, #4]
 8006816:	817b      	strh	r3, [r7, #10]
 8006818:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800681a:	813b      	strh	r3, [r7, #8]
  while ( idx >= depth ) idx -= depth;
 800681c:	e003      	b.n	8006826 <tu_fifo_get_read_info+0xc0>
 800681e:	893a      	ldrh	r2, [r7, #8]
 8006820:	897b      	ldrh	r3, [r7, #10]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	813b      	strh	r3, [r7, #8]
 8006826:	897a      	ldrh	r2, [r7, #10]
 8006828:	893b      	ldrh	r3, [r7, #8]
 800682a:	429a      	cmp	r2, r3
 800682c:	d9f7      	bls.n	800681e <tu_fifo_get_read_info+0xb8>
  return idx;
 800682e:	893b      	ldrh	r3, [r7, #8]
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006830:	843b      	strh	r3, [r7, #32]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	889b      	ldrh	r3, [r3, #4]
 8006836:	81fb      	strh	r3, [r7, #14]
 8006838:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800683a:	81bb      	strh	r3, [r7, #12]
  while ( idx >= depth ) idx -= depth;
 800683c:	e003      	b.n	8006846 <tu_fifo_get_read_info+0xe0>
 800683e:	89ba      	ldrh	r2, [r7, #12]
 8006840:	89fb      	ldrh	r3, [r7, #14]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	81bb      	strh	r3, [r7, #12]
 8006846:	89fa      	ldrh	r2, [r7, #14]
 8006848:	89bb      	ldrh	r3, [r7, #12]
 800684a:	429a      	cmp	r2, r3
 800684c:	d9f7      	bls.n	800683e <tu_fifo_get_read_info+0xd8>
  return idx;
 800684e:	89bb      	ldrh	r3, [r7, #12]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006850:	83fb      	strh	r3, [r7, #30]

  // Copy pointer to buffer to start reading from
  info->ptr_lin = &f->buffer[rd_ptr];
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	8bfb      	ldrh	r3, [r7, #30]
 8006858:	441a      	add	r2, r3
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	605a      	str	r2, [r3, #4]

  // Check if there is a wrap around necessary
  if (wr_ptr > rd_ptr)
 800685e:	8c3a      	ldrh	r2, [r7, #32]
 8006860:	8bfb      	ldrh	r3, [r7, #30]
 8006862:	429a      	cmp	r2, r3
 8006864:	d909      	bls.n	800687a <tu_fifo_get_read_info+0x114>
  {
    // Non wrapping case
    info->len_lin  = cnt;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800686a:	801a      	strh	r2, [r3, #0]

    info->len_wrap = 0;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2200      	movs	r2, #0
 8006870:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = NULL;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2200      	movs	r2, #0
 8006876:	609a      	str	r2, [r3, #8]
 8006878:	e011      	b.n	800689e <tu_fifo_get_read_info+0x138>
  }
  else
  {
    info->len_lin  = f->depth - rd_ptr;   // Also the case if FIFO was full
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	889a      	ldrh	r2, [r3, #4]
 800687e:	8bfb      	ldrh	r3, [r7, #30]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	b29a      	uxth	r2, r3
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	801a      	strh	r2, [r3, #0]

    info->len_wrap = cnt - info->len_lin;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	b29a      	uxth	r2, r3
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = f->buffer;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	609a      	str	r2, [r3, #8]
  }
}
 800689e:	372c      	adds	r7, #44	@ 0x2c
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr

080068a6 <tu_fifo_get_write_info>:
   @param[out]      *info
                    Pointer to struct which holds the desired infos
 */
/******************************************************************************/
void tu_fifo_get_write_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b08b      	sub	sp, #44	@ 0x2c
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
  uint16_t wr_idx = f->wr_idx;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	891b      	ldrh	r3, [r3, #8]
 80068b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t rd_idx = f->rd_idx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	895b      	ldrh	r3, [r3, #10]
 80068ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	889b      	ldrh	r3, [r3, #4]
 80068c0:	83bb      	strh	r3, [r7, #28]
 80068c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068c4:	837b      	strh	r3, [r7, #26]
 80068c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068c8:	833b      	strh	r3, [r7, #24]
 80068ca:	8bbb      	ldrh	r3, [r7, #28]
 80068cc:	82fb      	strh	r3, [r7, #22]
 80068ce:	8b7b      	ldrh	r3, [r7, #26]
 80068d0:	82bb      	strh	r3, [r7, #20]
 80068d2:	8b3b      	ldrh	r3, [r7, #24]
 80068d4:	827b      	strh	r3, [r7, #18]
  if (wr_idx >= rd_idx)
 80068d6:	8aba      	ldrh	r2, [r7, #20]
 80068d8:	8a7b      	ldrh	r3, [r7, #18]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d304      	bcc.n	80068e8 <tu_fifo_get_write_info+0x42>
    return (uint16_t) (wr_idx - rd_idx);
 80068de:	8aba      	ldrh	r2, [r7, #20]
 80068e0:	8a7b      	ldrh	r3, [r7, #18]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	e008      	b.n	80068fa <tu_fifo_get_write_info+0x54>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80068e8:	8afb      	ldrh	r3, [r7, #22]
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	8ab9      	ldrh	r1, [r7, #20]
 80068f0:	8a7b      	ldrh	r3, [r7, #18]
 80068f2:	1acb      	subs	r3, r1, r3
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	4413      	add	r3, r2
 80068f8:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80068fa:	823b      	strh	r3, [r7, #16]
  return (depth > count) ? (depth - count) : 0;
 80068fc:	8bba      	ldrh	r2, [r7, #28]
 80068fe:	8a3b      	ldrh	r3, [r7, #16]
 8006900:	429a      	cmp	r2, r3
 8006902:	d904      	bls.n	800690e <tu_fifo_get_write_info+0x68>
 8006904:	8bba      	ldrh	r2, [r7, #28]
 8006906:	8a3b      	ldrh	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	b29b      	uxth	r3, r3
 800690c:	e000      	b.n	8006910 <tu_fifo_get_write_info+0x6a>
 800690e:	2300      	movs	r3, #0
  uint16_t remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8006910:	847b      	strh	r3, [r7, #34]	@ 0x22

  if (remain == 0)
 8006912:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10c      	bne.n	8006932 <tu_fifo_get_write_info+0x8c>
  {
    info->len_lin  = 0;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2200      	movs	r2, #0
 800691c:	801a      	strh	r2, [r3, #0]
    info->len_wrap = 0;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2200      	movs	r2, #0
 8006922:	805a      	strh	r2, [r3, #2]
    info->ptr_lin  = NULL;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2200      	movs	r2, #0
 8006928:	605a      	str	r2, [r3, #4]
    info->ptr_wrap = NULL;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2200      	movs	r2, #0
 800692e:	609a      	str	r2, [r3, #8]
    return;
 8006930:	e048      	b.n	80069c4 <tu_fifo_get_write_info+0x11e>
  }

  // Get relative pointers
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	889b      	ldrh	r3, [r3, #4]
 8006936:	817b      	strh	r3, [r7, #10]
 8006938:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800693a:	813b      	strh	r3, [r7, #8]
  while ( idx >= depth ) idx -= depth;
 800693c:	e003      	b.n	8006946 <tu_fifo_get_write_info+0xa0>
 800693e:	893a      	ldrh	r2, [r7, #8]
 8006940:	897b      	ldrh	r3, [r7, #10]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	813b      	strh	r3, [r7, #8]
 8006946:	897a      	ldrh	r2, [r7, #10]
 8006948:	893b      	ldrh	r3, [r7, #8]
 800694a:	429a      	cmp	r2, r3
 800694c:	d9f7      	bls.n	800693e <tu_fifo_get_write_info+0x98>
  return idx;
 800694e:	893b      	ldrh	r3, [r7, #8]
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006950:	843b      	strh	r3, [r7, #32]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	889b      	ldrh	r3, [r3, #4]
 8006956:	81fb      	strh	r3, [r7, #14]
 8006958:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800695a:	81bb      	strh	r3, [r7, #12]
  while ( idx >= depth ) idx -= depth;
 800695c:	e003      	b.n	8006966 <tu_fifo_get_write_info+0xc0>
 800695e:	89ba      	ldrh	r2, [r7, #12]
 8006960:	89fb      	ldrh	r3, [r7, #14]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	81bb      	strh	r3, [r7, #12]
 8006966:	89fa      	ldrh	r2, [r7, #14]
 8006968:	89bb      	ldrh	r3, [r7, #12]
 800696a:	429a      	cmp	r2, r3
 800696c:	d9f7      	bls.n	800695e <tu_fifo_get_write_info+0xb8>
  return idx;
 800696e:	89bb      	ldrh	r3, [r7, #12]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006970:	83fb      	strh	r3, [r7, #30]

  // Copy pointer to buffer to start writing to
  info->ptr_lin = &f->buffer[wr_ptr];
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	8c3b      	ldrh	r3, [r7, #32]
 8006978:	441a      	add	r2, r3
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	605a      	str	r2, [r3, #4]

  if (wr_ptr < rd_ptr)
 800697e:	8c3a      	ldrh	r2, [r7, #32]
 8006980:	8bfb      	ldrh	r3, [r7, #30]
 8006982:	429a      	cmp	r2, r3
 8006984:	d20c      	bcs.n	80069a0 <tu_fifo_get_write_info+0xfa>
  {
    // Non wrapping case
    info->len_lin  = rd_ptr-wr_ptr;
 8006986:	8bfa      	ldrh	r2, [r7, #30]
 8006988:	8c3b      	ldrh	r3, [r7, #32]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	b29a      	uxth	r2, r3
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	801a      	strh	r2, [r3, #0]
    info->len_wrap = 0;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2200      	movs	r2, #0
 8006996:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = NULL;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	609a      	str	r2, [r3, #8]
 800699e:	e011      	b.n	80069c4 <tu_fifo_get_write_info+0x11e>
  }
  else
  {
    info->len_lin  = f->depth - wr_ptr;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	889a      	ldrh	r2, [r3, #4]
 80069a4:	8c3b      	ldrh	r3, [r7, #32]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	801a      	strh	r2, [r3, #0]
    info->len_wrap = remain - info->len_lin; // Remaining length - n already was limited to remain or FIFO depth
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = f->buffer;              // Always start of buffer
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	609a      	str	r2, [r3, #8]
  }
}
 80069c4:	372c      	adds	r7, #44	@ 0x2c
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr

080069cc <tu_print_buf>:
  #define tu_printf    CFG_TUSB_DEBUG_PRINTF
#else
  #define tu_printf    printf
#endif

static inline void tu_print_buf(uint8_t const* buf, uint32_t bufsize) {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  for(uint32_t i=0; i<bufsize; i++) tu_printf("%02X ", buf[i]);
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	e00a      	b.n	80069f2 <tu_print_buf+0x26>
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4413      	add	r3, r2
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	4619      	mov	r1, r3
 80069e6:	4808      	ldr	r0, [pc, #32]	@ (8006a08 <tu_print_buf+0x3c>)
 80069e8:	f004 fe1c 	bl	800b624 <iprintf>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d3f0      	bcc.n	80069dc <tu_print_buf+0x10>
  tu_printf("\r\n");
 80069fa:	4804      	ldr	r0, [pc, #16]	@ (8006a0c <tu_print_buf+0x40>)
 80069fc:	f004 fe82 	bl	800b704 <puts>
}
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	0800c91c 	.word	0x0800c91c
 8006a0c:	0800c924 	.word	0x0800c924

08006a10 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4603      	mov	r3, r0
 8006a18:	6039      	str	r1, [r7, #0]
 8006a1a:	71fb      	strb	r3, [r7, #7]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr

08006a2a <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr

08006a3c <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  return NULL;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr

08006a4a <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8006a4a:	b480      	push	{r7}
 8006a4c:	af00      	add	r7, sp, #0
  return NULL;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bc80      	pop	{r7}
 8006a56:	4770      	bx	lr

08006a58 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4603      	mov	r3, r0
 8006a60:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr

08006a6e <tud_vendor_control_xfer_cb>:
}

TU_ATTR_WEAK void tud_resume_cb(void) {
}

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	4603      	mov	r3, r0
 8006a76:	603a      	str	r2, [r7, #0]
 8006a78:	71fb      	strb	r3, [r7, #7]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr

08006a8a <dcd_connect>:
TU_ATTR_WEAK bool dcd_deinit(uint8_t rhport) {
  (void) rhport;
  return false;
}

TU_ATTR_WEAK void dcd_connect(uint8_t rhport) {
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	4603      	mov	r3, r0
 8006a92:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr
	...

08006aa0 <usbd_driver_print_control_complete_name>:
    "Xfer Complete",
    "Func Call"
};

// for usbd_control to print the name of control complete driver
void usbd_driver_print_control_complete_name(usbd_control_xfer_cb_t callback) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	75fb      	strb	r3, [r7, #23]
 8006aac:	e031      	b.n	8006b12 <usbd_driver_print_control_complete_name+0x72>
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8006ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b24 <usbd_driver_print_control_complete_name+0x84>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	7bfa      	ldrb	r2, [r7, #15]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d206      	bcs.n	8006ace <usbd_driver_print_control_complete_name+0x2e>
    driver = &_app_driver[drvid];
 8006ac0:	4b19      	ldr	r3, [pc, #100]	@ (8006b28 <usbd_driver_print_control_complete_name+0x88>)
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	015b      	lsls	r3, r3, #5
 8006ac8:	4413      	add	r3, r2
 8006aca:	60bb      	str	r3, [r7, #8]
 8006acc:	e00d      	b.n	8006aea <usbd_driver_print_control_complete_name+0x4a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006ace:	4b15      	ldr	r3, [pc, #84]	@ (8006b24 <usbd_driver_print_control_complete_name+0x84>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	db07      	blt.n	8006aea <usbd_driver_print_control_complete_name+0x4a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	4a11      	ldr	r2, [pc, #68]	@ (8006b24 <usbd_driver_print_control_complete_name+0x84>)
 8006ade:	7812      	ldrb	r2, [r2, #0]
 8006ae0:	1a9b      	subs	r3, r3, r2
 8006ae2:	015b      	lsls	r3, r3, #5
 8006ae4:	4a11      	ldr	r2, [pc, #68]	@ (8006b2c <usbd_driver_print_control_complete_name+0x8c>)
 8006ae6:	4413      	add	r3, r2
 8006ae8:	60bb      	str	r3, [r7, #8]
  return driver;
 8006aea:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8006aec:	613b      	str	r3, [r7, #16]
    if (driver && driver->control_xfer_cb == callback) {
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <usbd_driver_print_control_complete_name+0x6c>
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d106      	bne.n	8006b0c <usbd_driver_print_control_complete_name+0x6c>
      TU_LOG_USBD("%s control complete\r\n", driver->name);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4619      	mov	r1, r3
 8006b04:	480a      	ldr	r0, [pc, #40]	@ (8006b30 <usbd_driver_print_control_complete_name+0x90>)
 8006b06:	f004 fd8d 	bl	800b624 <iprintf>
      return;
 8006b0a:	e008      	b.n	8006b1e <usbd_driver_print_control_complete_name+0x7e>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	75fb      	strb	r3, [r7, #23]
 8006b12:	4b04      	ldr	r3, [pc, #16]	@ (8006b24 <usbd_driver_print_control_complete_name+0x84>)
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	7dfb      	ldrb	r3, [r7, #23]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	dac7      	bge.n	8006aae <usbd_driver_print_control_complete_name+0xe>
    }
  }
}
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20000630 	.word	0x20000630
 8006b28:	2000062c 	.word	0x2000062c
 8006b2c:	0800cfd4 	.word	0x0800cfd4
 8006b30:	0800c990 	.word	0x0800c990

08006b34 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8006b38:	4b05      	ldr	r3, [pc, #20]	@ (8006b50 <tud_mounted+0x1c>)
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	bf14      	ite	ne
 8006b42:	2301      	movne	r3, #1
 8006b44:	2300      	moveq	r3, #0
 8006b46:	b2db      	uxtb	r3, r3
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr
 8006b50:	200005f4 	.word	0x200005f4

08006b54 <tud_suspended>:

bool tud_suspended(void) {
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8006b58:	4b06      	ldr	r3, [pc, #24]	@ (8006b74 <tud_suspended+0x20>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	bf14      	ite	ne
 8006b66:	2301      	movne	r3, #1
 8006b68:	2300      	moveq	r3, #0
 8006b6a:	b2db      	uxtb	r3, r3
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr
 8006b74:	200005f4 	.word	0x200005f4

08006b78 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8006b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8006bbc <tud_remote_wakeup+0x44>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00d      	beq.n	8006ba6 <tud_remote_wakeup+0x2e>
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bbc <tud_remote_wakeup+0x44>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	f003 0310 	and.w	r3, r3, #16
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d006      	beq.n	8006ba6 <tud_remote_wakeup+0x2e>
 8006b98:	4b08      	ldr	r3, [pc, #32]	@ (8006bbc <tud_remote_wakeup+0x44>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <tud_remote_wakeup+0x32>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e005      	b.n	8006bb6 <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8006baa:	4b05      	ldr	r3, [pc, #20]	@ (8006bc0 <tud_remote_wakeup+0x48>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f002 f976 	bl	8008ea0 <dcd_remote_wakeup>
  return true;
 8006bb4:	2301      	movs	r3, #1
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	200005f4 	.word	0x200005f4
 8006bc0:	20000025 	.word	0x20000025

08006bc4 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8006bc8:	4b05      	ldr	r3, [pc, #20]	@ (8006be0 <tud_inited+0x1c>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2bff      	cmp	r3, #255	@ 0xff
 8006bce:	bf14      	ite	ne
 8006bd0:	2301      	movne	r3, #1
 8006bd2:	2300      	moveq	r3, #0
 8006bd4:	b2db      	uxtb	r3, r3
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	20000025 	.word	0x20000025

08006be4 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08c      	sub	sp, #48	@ 0x30
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	6039      	str	r1, [r7, #0]
 8006bee:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8006bf0:	f7ff ffe8 	bl	8006bc4 <tud_inited>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e0d5      	b.n	8006daa <tud_rhport_init+0x1c6>
  }
  TU_ASSERT(rh_init);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d110      	bne.n	8006c26 <tud_rhport_init+0x42>
 8006c04:	f44f 72e9 	mov.w	r2, #466	@ 0x1d2
 8006c08:	496a      	ldr	r1, [pc, #424]	@ (8006db4 <tud_rhport_init+0x1d0>)
 8006c0a:	486b      	ldr	r0, [pc, #428]	@ (8006db8 <tud_rhport_init+0x1d4>)
 8006c0c:	f004 fd0a 	bl	800b624 <iprintf>
 8006c10:	4b6a      	ldr	r3, [pc, #424]	@ (8006dbc <tud_rhport_init+0x1d8>)
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d000      	beq.n	8006c22 <tud_rhport_init+0x3e>
 8006c20:	be00      	bkpt	0x0000
 8006c22:	2300      	movs	r3, #0
 8006c24:	e0c1      	b.n	8006daa <tud_rhport_init+0x1c6>

  TU_LOG_USBD("USBD init on controller %u, speed = %s\r\n", rhport,
 8006c26:	79f9      	ldrb	r1, [r7, #7]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	785b      	ldrb	r3, [r3, #1]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d101      	bne.n	8006c34 <tud_rhport_init+0x50>
 8006c30:	4b63      	ldr	r3, [pc, #396]	@ (8006dc0 <tud_rhport_init+0x1dc>)
 8006c32:	e000      	b.n	8006c36 <tud_rhport_init+0x52>
 8006c34:	4b63      	ldr	r3, [pc, #396]	@ (8006dc4 <tud_rhport_init+0x1e0>)
 8006c36:	461a      	mov	r2, r3
 8006c38:	4863      	ldr	r0, [pc, #396]	@ (8006dc8 <tud_rhport_init+0x1e4>)
 8006c3a:	f004 fcf3 	bl	800b624 <iprintf>
    rh_init->speed == TUSB_SPEED_HIGH ? "High" : "Full");
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
 8006c3e:	2134      	movs	r1, #52	@ 0x34
 8006c40:	4862      	ldr	r0, [pc, #392]	@ (8006dcc <tud_rhport_init+0x1e8>)
 8006c42:	f004 fcef 	bl	800b624 <iprintf>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
 8006c46:	210c      	movs	r1, #12
 8006c48:	4861      	ldr	r0, [pc, #388]	@ (8006dd0 <tud_rhport_init+0x1ec>)
 8006c4a:	f004 fceb 	bl	800b624 <iprintf>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
 8006c4e:	210c      	movs	r1, #12
 8006c50:	4860      	ldr	r0, [pc, #384]	@ (8006dd4 <tud_rhport_init+0x1f0>)
 8006c52:	f004 fce7 	bl	800b624 <iprintf>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));
 8006c56:	2114      	movs	r1, #20
 8006c58:	485f      	ldr	r0, [pc, #380]	@ (8006dd8 <tud_rhport_init+0x1f4>)
 8006c5a:	f004 fce3 	bl	800b624 <iprintf>

  tu_varclr(&_usbd_dev);
 8006c5e:	2234      	movs	r2, #52	@ 0x34
 8006c60:	2100      	movs	r1, #0
 8006c62:	485e      	ldr	r0, [pc, #376]	@ (8006ddc <tud_rhport_init+0x1f8>)
 8006c64:	f004 fe62 	bl	800b92c <memset>
  _usbd_queued_setup = 0;
 8006c68:	4b5d      	ldr	r3, [pc, #372]	@ (8006de0 <tud_rhport_init+0x1fc>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8006de4 <tud_rhport_init+0x200>)
 8006c70:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	3304      	adds	r3, #4
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fd25 	bl	80066c6 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8006c7c:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8006c7e:	4a5a      	ldr	r2, [pc, #360]	@ (8006de8 <tud_rhport_init+0x204>)
 8006c80:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8006c82:	4b59      	ldr	r3, [pc, #356]	@ (8006de8 <tud_rhport_init+0x204>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d110      	bne.n	8006cac <tud_rhport_init+0xc8>
 8006c8a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8006c8e:	4949      	ldr	r1, [pc, #292]	@ (8006db4 <tud_rhport_init+0x1d0>)
 8006c90:	4849      	ldr	r0, [pc, #292]	@ (8006db8 <tud_rhport_init+0x1d4>)
 8006c92:	f004 fcc7 	bl	800b624 <iprintf>
 8006c96:	4b49      	ldr	r3, [pc, #292]	@ (8006dbc <tud_rhport_init+0x1d8>)
 8006c98:	61fb      	str	r3, [r7, #28]
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d000      	beq.n	8006ca8 <tud_rhport_init+0xc4>
 8006ca6:	be00      	bkpt	0x0000
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e07e      	b.n	8006daa <tud_rhport_init+0x1c6>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8006cac:	4b4f      	ldr	r3, [pc, #316]	@ (8006dec <tud_rhport_init+0x208>)
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <tud_rhport_init+0xda>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8006cb2:	484f      	ldr	r0, [pc, #316]	@ (8006df0 <tud_rhport_init+0x20c>)
 8006cb4:	f3af 8000 	nop.w
 8006cb8:	4603      	mov	r3, r0
 8006cba:	4a4e      	ldr	r2, [pc, #312]	@ (8006df4 <tud_rhport_init+0x210>)
 8006cbc:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006cc4:	e046      	b.n	8006d54 <tud_rhport_init+0x170>
 8006cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cca:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8006cd0:	4b47      	ldr	r3, [pc, #284]	@ (8006df0 <tud_rhport_init+0x20c>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	7cfa      	ldrb	r2, [r7, #19]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d206      	bcs.n	8006ce8 <tud_rhport_init+0x104>
    driver = &_app_driver[drvid];
 8006cda:	4b46      	ldr	r3, [pc, #280]	@ (8006df4 <tud_rhport_init+0x210>)
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	7cfb      	ldrb	r3, [r7, #19]
 8006ce0:	015b      	lsls	r3, r3, #5
 8006ce2:	4413      	add	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	e00d      	b.n	8006d04 <tud_rhport_init+0x120>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006ce8:	4b41      	ldr	r3, [pc, #260]	@ (8006df0 <tud_rhport_init+0x20c>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	7cfb      	ldrb	r3, [r7, #19]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	db07      	blt.n	8006d04 <tud_rhport_init+0x120>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006cf4:	7cfb      	ldrb	r3, [r7, #19]
 8006cf6:	4a3e      	ldr	r2, [pc, #248]	@ (8006df0 <tud_rhport_init+0x20c>)
 8006cf8:	7812      	ldrb	r2, [r2, #0]
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	015b      	lsls	r3, r3, #5
 8006cfe:	4a3e      	ldr	r2, [pc, #248]	@ (8006df8 <tud_rhport_init+0x214>)
 8006d00:	4413      	add	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
  return driver;
 8006d04:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8006d06:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8006d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <tud_rhport_init+0x132>
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d110      	bne.n	8006d38 <tud_rhport_init+0x154>
 8006d16:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 8006d1a:	4926      	ldr	r1, [pc, #152]	@ (8006db4 <tud_rhport_init+0x1d0>)
 8006d1c:	4826      	ldr	r0, [pc, #152]	@ (8006db8 <tud_rhport_init+0x1d4>)
 8006d1e:	f004 fc81 	bl	800b624 <iprintf>
 8006d22:	4b26      	ldr	r3, [pc, #152]	@ (8006dbc <tud_rhport_init+0x1d8>)
 8006d24:	623b      	str	r3, [r7, #32]
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d000      	beq.n	8006d34 <tud_rhport_init+0x150>
 8006d32:	be00      	bkpt	0x0000
 8006d34:	2300      	movs	r3, #0
 8006d36:	e038      	b.n	8006daa <tud_rhport_init+0x1c6>
    TU_LOG_USBD("%s init\r\n", driver->name);
 8006d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	482f      	ldr	r0, [pc, #188]	@ (8006dfc <tud_rhport_init+0x218>)
 8006d40:	f004 fc70 	bl	800b624 <iprintf>
    driver->init();
 8006d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006d4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d4e:	3301      	adds	r3, #1
 8006d50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006d54:	4b26      	ldr	r3, [pc, #152]	@ (8006df0 <tud_rhport_init+0x20c>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	dab1      	bge.n	8006cc6 <tud_rhport_init+0xe2>
  }

  _usbd_rhport = rhport;
 8006d62:	4a27      	ldr	r2, [pc, #156]	@ (8006e00 <tud_rhport_init+0x21c>)
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8006d68:	79fb      	ldrb	r3, [r7, #7]
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f001 ffe1 	bl	8008d34 <dcd_init>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f083 0301 	eor.w	r3, r3, #1
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d010      	beq.n	8006da0 <tud_rhport_init+0x1bc>
 8006d7e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8006d82:	490c      	ldr	r1, [pc, #48]	@ (8006db4 <tud_rhport_init+0x1d0>)
 8006d84:	480c      	ldr	r0, [pc, #48]	@ (8006db8 <tud_rhport_init+0x1d4>)
 8006d86:	f004 fc4d 	bl	800b624 <iprintf>
 8006d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006dbc <tud_rhport_init+0x1d8>)
 8006d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d000      	beq.n	8006d9c <tud_rhport_init+0x1b8>
 8006d9a:	be00      	bkpt	0x0000
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e004      	b.n	8006daa <tud_rhport_init+0x1c6>
  dcd_int_enable(rhport);
 8006da0:	79fb      	ldrb	r3, [r7, #7]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 ff88 	bl	8008cb8 <dcd_int_enable>

  return true;
 8006da8:	2301      	movs	r3, #1
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3730      	adds	r7, #48	@ 0x30
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	0800d038 	.word	0x0800d038
 8006db8:	0800c9a8 	.word	0x0800c9a8
 8006dbc:	e000edf0 	.word	0xe000edf0
 8006dc0:	0800c9c0 	.word	0x0800c9c0
 8006dc4:	0800c9c8 	.word	0x0800c9c8
 8006dc8:	0800c9d0 	.word	0x0800c9d0
 8006dcc:	0800c9fc 	.word	0x0800c9fc
 8006dd0:	0800ca1c 	.word	0x0800ca1c
 8006dd4:	0800ca38 	.word	0x0800ca38
 8006dd8:	0800ca54 	.word	0x0800ca54
 8006ddc:	200005f4 	.word	0x200005f4
 8006de0:	20000628 	.word	0x20000628
 8006de4:	20000028 	.word	0x20000028
 8006de8:	200006f4 	.word	0x200006f4
 8006dec:	00000000 	.word	0x00000000
 8006df0:	20000630 	.word	0x20000630
 8006df4:	2000062c 	.word	0x2000062c
 8006df8:	0800cfd4 	.word	0x0800cfd4
 8006dfc:	0800ca78 	.word	0x0800ca78
 8006e00:	20000025 	.word	0x20000025

08006e04 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006e0e:	2300      	movs	r3, #0
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e03a      	b.n	8006e8a <configuration_reset+0x86>
 8006e14:	7ffb      	ldrb	r3, [r7, #31]
 8006e16:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8006e1c:	4b28      	ldr	r3, [pc, #160]	@ (8006ec0 <configuration_reset+0xbc>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	7cfa      	ldrb	r2, [r7, #19]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d206      	bcs.n	8006e34 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8006e26:	4b27      	ldr	r3, [pc, #156]	@ (8006ec4 <configuration_reset+0xc0>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	7cfb      	ldrb	r3, [r7, #19]
 8006e2c:	015b      	lsls	r3, r3, #5
 8006e2e:	4413      	add	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	e00d      	b.n	8006e50 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006e34:	4b22      	ldr	r3, [pc, #136]	@ (8006ec0 <configuration_reset+0xbc>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	7cfb      	ldrb	r3, [r7, #19]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	db07      	blt.n	8006e50 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006e40:	7cfb      	ldrb	r3, [r7, #19]
 8006e42:	4a1f      	ldr	r2, [pc, #124]	@ (8006ec0 <configuration_reset+0xbc>)
 8006e44:	7812      	ldrb	r2, [r2, #0]
 8006e46:	1a9b      	subs	r3, r3, r2
 8006e48:	015b      	lsls	r3, r3, #5
 8006e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ec8 <configuration_reset+0xc4>)
 8006e4c:	4413      	add	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
  return driver;
 8006e50:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8006e52:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10f      	bne.n	8006e7a <configuration_reset+0x76>
 8006e5a:	f240 2225 	movw	r2, #549	@ 0x225
 8006e5e:	491b      	ldr	r1, [pc, #108]	@ (8006ecc <configuration_reset+0xc8>)
 8006e60:	481b      	ldr	r0, [pc, #108]	@ (8006ed0 <configuration_reset+0xcc>)
 8006e62:	f004 fbdf 	bl	800b624 <iprintf>
 8006e66:	4b1b      	ldr	r3, [pc, #108]	@ (8006ed4 <configuration_reset+0xd0>)
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d01f      	beq.n	8006eb6 <configuration_reset+0xb2>
 8006e76:	be00      	bkpt	0x0000
 8006e78:	e01d      	b.n	8006eb6 <configuration_reset+0xb2>
    driver->reset(rhport);
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	79fa      	ldrb	r2, [r7, #7]
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006e84:	7ffb      	ldrb	r3, [r7, #31]
 8006e86:	3301      	adds	r3, #1
 8006e88:	77fb      	strb	r3, [r7, #31]
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec0 <configuration_reset+0xbc>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	7ffb      	ldrb	r3, [r7, #31]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	dabe      	bge.n	8006e14 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8006e96:	2234      	movs	r2, #52	@ 0x34
 8006e98:	2100      	movs	r1, #0
 8006e9a:	480f      	ldr	r0, [pc, #60]	@ (8006ed8 <configuration_reset+0xd4>)
 8006e9c:	f004 fd46 	bl	800b92c <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8006ea0:	2210      	movs	r2, #16
 8006ea2:	21ff      	movs	r1, #255	@ 0xff
 8006ea4:	480d      	ldr	r0, [pc, #52]	@ (8006edc <configuration_reset+0xd8>)
 8006ea6:	f004 fd41 	bl	800b92c <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8006eaa:	2210      	movs	r2, #16
 8006eac:	21ff      	movs	r1, #255	@ 0xff
 8006eae:	480c      	ldr	r0, [pc, #48]	@ (8006ee0 <configuration_reset+0xdc>)
 8006eb0:	f004 fd3c 	bl	800b92c <memset>
 8006eb4:	e000      	b.n	8006eb8 <configuration_reset+0xb4>
    TU_ASSERT(driver,);
 8006eb6:	bf00      	nop
}
 8006eb8:	3720      	adds	r7, #32
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000630 	.word	0x20000630
 8006ec4:	2000062c 	.word	0x2000062c
 8006ec8:	0800cfd4 	.word	0x0800cfd4
 8006ecc:	0800d048 	.word	0x0800d048
 8006ed0:	0800c9a8 	.word	0x0800c9a8
 8006ed4:	e000edf0 	.word	0xe000edf0
 8006ed8:	200005f4 	.word	0x200005f4
 8006edc:	200005f8 	.word	0x200005f8
 8006ee0:	20000608 	.word	0x20000608

08006ee4 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8006eee:	79fb      	ldrb	r3, [r7, #7]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff ff87 	bl	8006e04 <configuration_reset>
  usbd_control_reset();
 8006ef6:	f001 fd99 	bl	8008a2c <usbd_control_reset>
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8006f04:	b590      	push	{r4, r7, lr}
 8006f06:	b093      	sub	sp, #76	@ 0x4c
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8006f10:	f7ff fe58 	bl	8006bc4 <tud_inited>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f083 0301 	eor.w	r3, r3, #1
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 81fc 	bne.w	800731a <tud_task_ext+0x416>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8006f22:	4bb5      	ldr	r3, [pc, #724]	@ (80071f8 <tud_task_ext+0x2f4>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f28:	f107 030c 	add.w	r3, r7, #12
 8006f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2000      	movs	r0, #0
 8006f38:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff fb35 	bl	80065b0 <tu_fifo_read>
 8006f46:	4603      	mov	r3, r0
 8006f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2001      	movs	r0, #1
 8006f52:	4798      	blx	r3

  return success;
 8006f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f58:	f083 0301 	eor.w	r3, r3, #1
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 81dd 	bne.w	800731e <tud_task_ext+0x41a>

#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
 8006f64:	7b7b      	ldrb	r3, [r7, #13]
 8006f66:	2b06      	cmp	r3, #6
 8006f68:	d102      	bne.n	8006f70 <tud_task_ext+0x6c>
 8006f6a:	48a4      	ldr	r0, [pc, #656]	@ (80071fc <tud_task_ext+0x2f8>)
 8006f6c:	f004 fbca 	bl	800b704 <puts>
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
 8006f70:	7b7b      	ldrb	r3, [r7, #13]
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d805      	bhi.n	8006f82 <tud_task_ext+0x7e>
 8006f76:	7b7b      	ldrb	r3, [r7, #13]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4ba1      	ldr	r3, [pc, #644]	@ (8007200 <tud_task_ext+0x2fc>)
 8006f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f80:	e000      	b.n	8006f84 <tud_task_ext+0x80>
 8006f82:	4ba0      	ldr	r3, [pc, #640]	@ (8007204 <tud_task_ext+0x300>)
 8006f84:	4619      	mov	r1, r3
 8006f86:	48a0      	ldr	r0, [pc, #640]	@ (8007208 <tud_task_ext+0x304>)
 8006f88:	f004 fb4c 	bl	800b624 <iprintf>
#endif

    switch (event.event_id) {
 8006f8c:	7b7b      	ldrb	r3, [r7, #13]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	2b07      	cmp	r3, #7
 8006f92:	f200 81b0 	bhi.w	80072f6 <tud_task_ext+0x3f2>
 8006f96:	a201      	add	r2, pc, #4	@ (adr r2, 8006f9c <tud_task_ext+0x98>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08006fbd 	.word	0x08006fbd
 8006fa0:	08006fdf 	.word	0x08006fdf
 8006fa4:	080072c1 	.word	0x080072c1
 8006fa8:	08007245 	.word	0x08007245
 8006fac:	08007289 	.word	0x08007289
 8006fb0:	08006ff3 	.word	0x08006ff3
 8006fb4:	080070c9 	.word	0x080070c9
 8006fb8:	080072ab 	.word	0x080072ab
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
 8006fbc:	7c3b      	ldrb	r3, [r7, #16]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	4b92      	ldr	r3, [pc, #584]	@ (800720c <tud_task_ext+0x308>)
 8006fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4891      	ldr	r0, [pc, #580]	@ (8007210 <tud_task_ext+0x30c>)
 8006fca:	f004 fb2b 	bl	800b624 <iprintf>
        usbd_reset(event.rhport);
 8006fce:	7b3b      	ldrb	r3, [r7, #12]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff ff87 	bl	8006ee4 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8006fd6:	7c3a      	ldrb	r2, [r7, #16]
 8006fd8:	4b8e      	ldr	r3, [pc, #568]	@ (8007214 <tud_task_ext+0x310>)
 8006fda:	709a      	strb	r2, [r3, #2]
        break;
 8006fdc:	e19c      	b.n	8007318 <tud_task_ext+0x414>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
 8006fde:	4887      	ldr	r0, [pc, #540]	@ (80071fc <tud_task_ext+0x2f8>)
 8006fe0:	f004 fb90 	bl	800b704 <puts>
        usbd_reset(event.rhport);
 8006fe4:	7b3b      	ldrb	r3, [r7, #12]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff ff7c 	bl	8006ee4 <usbd_reset>
        tud_umount_cb();
 8006fec:	f7f9 fac4 	bl	8000578 <tud_umount_cb>
        break;
 8006ff0:	e192      	b.n	8007318 <tud_task_ext+0x414>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8006ff2:	4b89      	ldr	r3, [pc, #548]	@ (8007218 <tud_task_ext+0x314>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d110      	bne.n	800701e <tud_task_ext+0x11a>
 8006ffc:	f240 2265 	movw	r2, #613	@ 0x265
 8007000:	4986      	ldr	r1, [pc, #536]	@ (800721c <tud_task_ext+0x318>)
 8007002:	4887      	ldr	r0, [pc, #540]	@ (8007220 <tud_task_ext+0x31c>)
 8007004:	f004 fb0e 	bl	800b624 <iprintf>
 8007008:	4b86      	ldr	r3, [pc, #536]	@ (8007224 <tud_task_ext+0x320>)
 800700a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800700c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 8184 	beq.w	8007322 <tud_task_ext+0x41e>
 800701a:	be00      	bkpt	0x0000
 800701c:	e181      	b.n	8007322 <tud_task_ext+0x41e>
        _usbd_queued_setup--;
 800701e:	4b7e      	ldr	r3, [pc, #504]	@ (8007218 <tud_task_ext+0x314>)
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b2da      	uxtb	r2, r3
 8007028:	4b7b      	ldr	r3, [pc, #492]	@ (8007218 <tud_task_ext+0x314>)
 800702a:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
 800702c:	f107 030c 	add.w	r3, r7, #12
 8007030:	3304      	adds	r3, #4
 8007032:	2108      	movs	r1, #8
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff fcc9 	bl	80069cc <tu_print_buf>
        if (_usbd_queued_setup) {
 800703a:	4b77      	ldr	r3, [pc, #476]	@ (8007218 <tud_task_ext+0x314>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <tud_task_ext+0x148>
          TU_LOG_USBD("  Skipped since there is other SETUP in queue\r\n");
 8007044:	4878      	ldr	r0, [pc, #480]	@ (8007228 <tud_task_ext+0x324>)
 8007046:	f004 fb5d 	bl	800b704 <puts>
          break;
 800704a:	e165      	b.n	8007318 <tud_task_ext+0x414>
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 800704c:	4a71      	ldr	r2, [pc, #452]	@ (8007214 <tud_task_ext+0x310>)
 800704e:	7813      	ldrb	r3, [r2, #0]
 8007050:	f043 0301 	orr.w	r3, r3, #1
 8007054:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8007056:	4a6f      	ldr	r2, [pc, #444]	@ (8007214 <tud_task_ext+0x310>)
 8007058:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 800705c:	f36f 0300 	bfc	r3, #0, #1
 8007060:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8007064:	4a6b      	ldr	r2, [pc, #428]	@ (8007214 <tud_task_ext+0x310>)
 8007066:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 800706a:	f36f 0382 	bfc	r3, #2, #1
 800706e:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8007072:	4a68      	ldr	r2, [pc, #416]	@ (8007214 <tud_task_ext+0x310>)
 8007074:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8007078:	f36f 0300 	bfc	r3, #0, #1
 800707c:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8007080:	4a64      	ldr	r2, [pc, #400]	@ (8007214 <tud_task_ext+0x310>)
 8007082:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8007086:	f36f 0382 	bfc	r3, #2, #1
 800708a:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 800708e:	7b3a      	ldrb	r2, [r7, #12]
 8007090:	f107 030c 	add.w	r3, r7, #12
 8007094:	3304      	adds	r3, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f000 f973 	bl	8007384 <process_control_request>
 800709e:	4603      	mov	r3, r0
 80070a0:	f083 0301 	eor.w	r3, r3, #1
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 812f 	beq.w	800730a <tud_task_ext+0x406>
          TU_LOG_USBD("  Stall EP0\r\n");
 80070ac:	485f      	ldr	r0, [pc, #380]	@ (800722c <tud_task_ext+0x328>)
 80070ae:	f004 fb29 	bl	800b704 <puts>
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 80070b2:	7b3b      	ldrb	r3, [r7, #12]
 80070b4:	2100      	movs	r1, #0
 80070b6:	4618      	mov	r0, r3
 80070b8:	f003 fc3a 	bl	800a930 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 80070bc:	7b3b      	ldrb	r3, [r7, #12]
 80070be:	2180      	movs	r1, #128	@ 0x80
 80070c0:	4618      	mov	r0, r3
 80070c2:	f003 fc35 	bl	800a930 <dcd_edpt_stall>
        }
        break;
 80070c6:	e120      	b.n	800730a <tud_task_ext+0x406>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80070c8:	7c3b      	ldrb	r3, [r7, #16]
 80070ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80070ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80070d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070de:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 80070e0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80070e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80070ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070f0:	09db      	lsrs	r3, r3, #7
 80070f2:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 80070f4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);
 80070f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	4619      	mov	r1, r3
 8007100:	484b      	ldr	r0, [pc, #300]	@ (8007230 <tud_task_ext+0x32c>)
 8007102:	f004 fa8f 	bl	800b624 <iprintf>

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8007106:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800710a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800710e:	4941      	ldr	r1, [pc, #260]	@ (8007214 <tud_task_ext+0x310>)
 8007110:	0052      	lsls	r2, r2, #1
 8007112:	440a      	add	r2, r1
 8007114:	4413      	add	r3, r2
 8007116:	f103 0220 	add.w	r2, r3, #32
 800711a:	7913      	ldrb	r3, [r2, #4]
 800711c:	f36f 0300 	bfc	r3, #0, #1
 8007120:	7113      	strb	r3, [r2, #4]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8007122:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8007126:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800712a:	493a      	ldr	r1, [pc, #232]	@ (8007214 <tud_task_ext+0x310>)
 800712c:	0052      	lsls	r2, r2, #1
 800712e:	440a      	add	r2, r1
 8007130:	4413      	add	r3, r2
 8007132:	f103 0220 	add.w	r2, r3, #32
 8007136:	7913      	ldrb	r3, [r2, #4]
 8007138:	f36f 0382 	bfc	r3, #2, #1
 800713c:	7113      	strb	r3, [r2, #4]

        if (0 == epnum) {
 800713e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007142:	2b00      	cmp	r3, #0
 8007144:	d107      	bne.n	8007156 <tud_task_ext+0x252>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8007146:	7b38      	ldrb	r0, [r7, #12]
 8007148:	7c7a      	ldrb	r2, [r7, #17]
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007150:	f001 fca0 	bl	8008a94 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8007154:	e0e0      	b.n	8007318 <tud_task_ext+0x414>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8007156:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800715a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800715e:	492d      	ldr	r1, [pc, #180]	@ (8007214 <tud_task_ext+0x310>)
 8007160:	0052      	lsls	r2, r2, #1
 8007162:	440a      	add	r2, r1
 8007164:	4413      	add	r3, r2
 8007166:	3314      	adds	r3, #20
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8007172:	4b30      	ldr	r3, [pc, #192]	@ (8007234 <tud_task_ext+0x330>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800717a:	429a      	cmp	r2, r3
 800717c:	d207      	bcs.n	800718e <tud_task_ext+0x28a>
    driver = &_app_driver[drvid];
 800717e:	4b2e      	ldr	r3, [pc, #184]	@ (8007238 <tud_task_ext+0x334>)
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007186:	015b      	lsls	r3, r3, #5
 8007188:	4413      	add	r3, r2
 800718a:	623b      	str	r3, [r7, #32]
 800718c:	e00f      	b.n	80071ae <tud_task_ext+0x2aa>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800718e:	4b29      	ldr	r3, [pc, #164]	@ (8007234 <tud_task_ext+0x330>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007198:	429a      	cmp	r2, r3
 800719a:	db08      	blt.n	80071ae <tud_task_ext+0x2aa>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800719c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071a0:	4a24      	ldr	r2, [pc, #144]	@ (8007234 <tud_task_ext+0x330>)
 80071a2:	7812      	ldrb	r2, [r2, #0]
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	015b      	lsls	r3, r3, #5
 80071a8:	4a24      	ldr	r2, [pc, #144]	@ (800723c <tud_task_ext+0x338>)
 80071aa:	4413      	add	r3, r2
 80071ac:	623b      	str	r3, [r7, #32]
  return driver;
 80071ae:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 80071b0:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 80071b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d110      	bne.n	80071da <tud_task_ext+0x2d6>
 80071b8:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80071bc:	4917      	ldr	r1, [pc, #92]	@ (800721c <tud_task_ext+0x318>)
 80071be:	4818      	ldr	r0, [pc, #96]	@ (8007220 <tud_task_ext+0x31c>)
 80071c0:	f004 fa30 	bl	800b624 <iprintf>
 80071c4:	4b17      	ldr	r3, [pc, #92]	@ (8007224 <tud_task_ext+0x320>)
 80071c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80a8 	beq.w	8007326 <tud_task_ext+0x422>
 80071d6:	be00      	bkpt	0x0000
 80071d8:	e0a5      	b.n	8007326 <tud_task_ext+0x422>
          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
 80071da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4619      	mov	r1, r3
 80071e0:	4817      	ldr	r0, [pc, #92]	@ (8007240 <tud_task_ext+0x33c>)
 80071e2:	f004 fa1f 	bl	800b624 <iprintf>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 80071e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071e8:	699c      	ldr	r4, [r3, #24]
 80071ea:	7b38      	ldrb	r0, [r7, #12]
 80071ec:	7c7a      	ldrb	r2, [r7, #17]
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80071f4:	47a0      	blx	r4
        break;
 80071f6:	e08f      	b.n	8007318 <tud_task_ext+0x414>
 80071f8:	200006f4 	.word	0x200006f4
 80071fc:	0800c924 	.word	0x0800c924
 8007200:	0800d014 	.word	0x0800d014
 8007204:	0800cab0 	.word	0x0800cab0
 8007208:	0800cabc 	.word	0x0800cabc
 800720c:	0800d150 	.word	0x0800d150
 8007210:	0800cac8 	.word	0x0800cac8
 8007214:	200005f4 	.word	0x200005f4
 8007218:	20000628 	.word	0x20000628
 800721c:	0800d05c 	.word	0x0800d05c
 8007220:	0800c9a8 	.word	0x0800c9a8
 8007224:	e000edf0 	.word	0xe000edf0
 8007228:	0800cad8 	.word	0x0800cad8
 800722c:	0800cb08 	.word	0x0800cb08
 8007230:	0800cb18 	.word	0x0800cb18
 8007234:	20000630 	.word	0x20000630
 8007238:	2000062c 	.word	0x2000062c
 800723c:	0800cfd4 	.word	0x0800cfd4
 8007240:	0800cb34 	.word	0x0800cb34

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8007244:	4b3a      	ldr	r3, [pc, #232]	@ (8007330 <tud_task_ext+0x42c>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d016      	beq.n	8007280 <tud_task_ext+0x37c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
 8007252:	4b37      	ldr	r3, [pc, #220]	@ (8007330 <tud_task_ext+0x42c>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800725a:	b2db      	uxtb	r3, r3
 800725c:	4619      	mov	r1, r3
 800725e:	4835      	ldr	r0, [pc, #212]	@ (8007334 <tud_task_ext+0x430>)
 8007260:	f004 f9e0 	bl	800b624 <iprintf>
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8007264:	4b32      	ldr	r3, [pc, #200]	@ (8007330 <tud_task_ext+0x42c>)
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	bf14      	ite	ne
 8007272:	2301      	movne	r3, #1
 8007274:	2300      	moveq	r3, #0
 8007276:	b2db      	uxtb	r3, r3
 8007278:	4618      	mov	r0, r3
 800727a:	f7f9 f989 	bl	8000590 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 800727e:	e04b      	b.n	8007318 <tud_task_ext+0x414>
          TU_LOG_USBD(" Skipped\r\n");
 8007280:	482d      	ldr	r0, [pc, #180]	@ (8007338 <tud_task_ext+0x434>)
 8007282:	f004 fa3f 	bl	800b704 <puts>
        break;
 8007286:	e047      	b.n	8007318 <tud_task_ext+0x414>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 8007288:	4b29      	ldr	r3, [pc, #164]	@ (8007330 <tud_task_ext+0x42c>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d005      	beq.n	80072a2 <tud_task_ext+0x39e>
          TU_LOG_USBD("\r\n");
 8007296:	4829      	ldr	r0, [pc, #164]	@ (800733c <tud_task_ext+0x438>)
 8007298:	f004 fa34 	bl	800b704 <puts>
          tud_resume_cb();
 800729c:	f7f9 f988 	bl	80005b0 <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80072a0:	e03a      	b.n	8007318 <tud_task_ext+0x414>
          TU_LOG_USBD(" Skipped\r\n");
 80072a2:	4825      	ldr	r0, [pc, #148]	@ (8007338 <tud_task_ext+0x434>)
 80072a4:	f004 fa2e 	bl	800b704 <puts>
        break;
 80072a8:	e036      	b.n	8007318 <tud_task_ext+0x414>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
 80072aa:	4824      	ldr	r0, [pc, #144]	@ (800733c <tud_task_ext+0x438>)
 80072ac:	f004 fa2a 	bl	800b704 <puts>
        if (event.func_call.func) event.func_call.func(event.func_call.param);
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d02b      	beq.n	800730e <tud_task_ext+0x40a>
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4610      	mov	r0, r2
 80072bc:	4798      	blx	r3
        break;
 80072be:	e026      	b.n	800730e <tud_task_ext+0x40a>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 80072c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007330 <tud_task_ext+0x42c>)
 80072c2:	78db      	ldrb	r3, [r3, #3]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	61fb      	str	r3, [r7, #28]
 80072c8:	2300      	movs	r3, #0
 80072ca:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80072cc:	7efb      	ldrb	r3, [r7, #27]
 80072ce:	69fa      	ldr	r2, [r7, #28]
 80072d0:	fa22 f303 	lsr.w	r3, r2, r3
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b00      	cmp	r3, #0
 80072da:	bf14      	ite	ne
 80072dc:	2301      	movne	r3, #1
 80072de:	2300      	moveq	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d015      	beq.n	8007312 <tud_task_ext+0x40e>
          TU_LOG_USBD("\r\n");
 80072e6:	4815      	ldr	r0, [pc, #84]	@ (800733c <tud_task_ext+0x438>)
 80072e8:	f004 fa0c 	bl	800b704 <puts>
          tud_sof_cb(event.sof.frame_count);
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff fb9b 	bl	8006a2a <tud_sof_cb>
        }
      break;
 80072f4:	e00d      	b.n	8007312 <tud_task_ext+0x40e>

      default:
        TU_BREAKPOINT();
 80072f6:	4b12      	ldr	r3, [pc, #72]	@ (8007340 <tud_task_ext+0x43c>)
 80072f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d007      	beq.n	8007316 <tud_task_ext+0x412>
 8007306:	be00      	bkpt	0x0000
        break;
 8007308:	e005      	b.n	8007316 <tud_task_ext+0x412>
        break;
 800730a:	bf00      	nop
 800730c:	e609      	b.n	8006f22 <tud_task_ext+0x1e>
        break;
 800730e:	bf00      	nop
 8007310:	e607      	b.n	8006f22 <tud_task_ext+0x1e>
      break;
 8007312:	bf00      	nop
 8007314:	e605      	b.n	8006f22 <tud_task_ext+0x1e>
        break;
 8007316:	bf00      	nop
  while (1) {
 8007318:	e603      	b.n	8006f22 <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 800731a:	bf00      	nop
 800731c:	e004      	b.n	8007328 <tud_task_ext+0x424>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 800731e:	bf00      	nop
 8007320:	e002      	b.n	8007328 <tud_task_ext+0x424>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8007322:	bf00      	nop
 8007324:	e000      	b.n	8007328 <tud_task_ext+0x424>
          TU_ASSERT(driver,);
 8007326:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 8007328:	374c      	adds	r7, #76	@ 0x4c
 800732a:	46bd      	mov	sp, r7
 800732c:	bd90      	pop	{r4, r7, pc}
 800732e:	bf00      	nop
 8007330:	200005f4 	.word	0x200005f4
 8007334:	0800cb4c 	.word	0x0800cb4c
 8007338:	0800cb64 	.word	0x0800cb64
 800733c:	0800c924 	.word	0x0800c924
 8007340:	e000edf0 	.word	0xe000edf0

08007344 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	4618      	mov	r0, r3
 8007358:	f001 fb74 	bl	8008a44 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4619      	mov	r1, r3
 8007362:	4807      	ldr	r0, [pc, #28]	@ (8007380 <invoke_class_control+0x3c>)
 8007364:	f004 f95e 	bl	800b624 <iprintf>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	7bf8      	ldrb	r0, [r7, #15]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	2101      	movs	r1, #1
 8007372:	4798      	blx	r3
 8007374:	4603      	mov	r3, r0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	0800cb70 	.word	0x0800cb70

08007384 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8007384:	b580      	push	{r7, lr}
 8007386:	b09a      	sub	sp, #104	@ 0x68
 8007388:	af00      	add	r7, sp, #0
 800738a:	4603      	mov	r3, r0
 800738c:	6039      	str	r1, [r7, #0]
 800738e:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8007390:	2000      	movs	r0, #0
 8007392:	f001 fb57 	bl	8008a44 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b60      	cmp	r3, #96	@ 0x60
 80073a2:	d110      	bne.n	80073c6 <process_control_request+0x42>
 80073a4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80073a8:	49a9      	ldr	r1, [pc, #676]	@ (8007650 <process_control_request+0x2cc>)
 80073aa:	48aa      	ldr	r0, [pc, #680]	@ (8007654 <process_control_request+0x2d0>)
 80073ac:	f004 f93a 	bl	800b624 <iprintf>
 80073b0:	4ba9      	ldr	r3, [pc, #676]	@ (8007658 <process_control_request+0x2d4>)
 80073b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80073b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d000      	beq.n	80073c2 <process_control_request+0x3e>
 80073c0:	be00      	bkpt	0x0000
 80073c2:	2300      	movs	r3, #0
 80073c4:	e304      	b.n	80079d0 <process_control_request+0x64c>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b40      	cmp	r3, #64	@ 0x40
 80073d2:	d10a      	bne.n	80073ea <process_control_request+0x66>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80073d4:	48a1      	ldr	r0, [pc, #644]	@ (800765c <process_control_request+0x2d8>)
 80073d6:	f001 fb35 	bl	8008a44 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	2101      	movs	r1, #1
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff fb44 	bl	8006a6e <tud_vendor_control_xfer_cb>
 80073e6:	4603      	mov	r3, r0
 80073e8:	e2f2      	b.n	80079d0 <process_control_request+0x64c>
  }

#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
  if (TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type && p_request->bRequest <= TUSB_REQ_SYNCH_FRAME) {
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d114      	bne.n	8007422 <process_control_request+0x9e>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	785b      	ldrb	r3, [r3, #1]
 80073fc:	2b0c      	cmp	r3, #12
 80073fe:	d810      	bhi.n	8007422 <process_control_request+0x9e>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	785b      	ldrb	r3, [r3, #1]
 8007404:	461a      	mov	r2, r3
 8007406:	4b96      	ldr	r3, [pc, #600]	@ (8007660 <process_control_request+0x2dc>)
 8007408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740c:	4619      	mov	r1, r3
 800740e:	4895      	ldr	r0, [pc, #596]	@ (8007664 <process_control_request+0x2e0>)
 8007410:	f004 f908 	bl	800b624 <iprintf>
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	785b      	ldrb	r3, [r3, #1]
 8007418:	2b06      	cmp	r3, #6
 800741a:	d002      	beq.n	8007422 <process_control_request+0x9e>
 800741c:	4892      	ldr	r0, [pc, #584]	@ (8007668 <process_control_request+0x2e4>)
 800741e:	f004 f971 	bl	800b704 <puts>
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	f000 81e9 	beq.w	8007804 <process_control_request+0x480>
 8007432:	2b02      	cmp	r3, #2
 8007434:	f300 82bf 	bgt.w	80079b6 <process_control_request+0x632>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <process_control_request+0xc0>
 800743c:	2b01      	cmp	r3, #1
 800743e:	f000 8170 	beq.w	8007722 <process_control_request+0x39e>
 8007442:	e2b8      	b.n	80079b6 <process_control_request+0x632>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b20      	cmp	r3, #32
 8007450:	d143      	bne.n	80074da <process_control_request+0x156>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	889b      	ldrh	r3, [r3, #4]
 8007456:	b29b      	uxth	r3, r3
 8007458:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800745a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007462:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007466:	2b0f      	cmp	r3, #15
 8007468:	d901      	bls.n	800746e <process_control_request+0xea>
 800746a:	2300      	movs	r3, #0
 800746c:	e2b0      	b.n	80079d0 <process_control_request+0x64c>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800746e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007472:	4a7e      	ldr	r2, [pc, #504]	@ (800766c <process_control_request+0x2e8>)
 8007474:	4413      	add	r3, r2
 8007476:	791b      	ldrb	r3, [r3, #4]
 8007478:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 800747c:	2300      	movs	r3, #0
 800747e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8007480:	4b7b      	ldr	r3, [pc, #492]	@ (8007670 <process_control_request+0x2ec>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007488:	429a      	cmp	r2, r3
 800748a:	d207      	bcs.n	800749c <process_control_request+0x118>
    driver = &_app_driver[drvid];
 800748c:	4b79      	ldr	r3, [pc, #484]	@ (8007674 <process_control_request+0x2f0>)
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007494:	015b      	lsls	r3, r3, #5
 8007496:	4413      	add	r3, r2
 8007498:	62bb      	str	r3, [r7, #40]	@ 0x28
 800749a:	e00f      	b.n	80074bc <process_control_request+0x138>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800749c:	4b74      	ldr	r3, [pc, #464]	@ (8007670 <process_control_request+0x2ec>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80074a6:	429a      	cmp	r2, r3
 80074a8:	db08      	blt.n	80074bc <process_control_request+0x138>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80074aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80074ae:	4a70      	ldr	r2, [pc, #448]	@ (8007670 <process_control_request+0x2ec>)
 80074b0:	7812      	ldrb	r2, [r2, #0]
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	015b      	lsls	r3, r3, #5
 80074b6:	4a70      	ldr	r2, [pc, #448]	@ (8007678 <process_control_request+0x2f4>)
 80074b8:	4413      	add	r3, r2
 80074ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 80074bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80074be:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 80074c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <process_control_request+0x146>
 80074c6:	2300      	movs	r3, #0
 80074c8:	e282      	b.n	80079d0 <process_control_request+0x64c>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff ff37 	bl	8007344 <invoke_class_control>
 80074d6:	4603      	mov	r3, r0
 80074d8:	e27a      	b.n	80079d0 <process_control_request+0x64c>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <process_control_request+0x17a>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 80074e8:	4b5b      	ldr	r3, [pc, #364]	@ (8007658 <process_control_request+0x2d4>)
 80074ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80074ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d000      	beq.n	80074fa <process_control_request+0x176>
 80074f8:	be00      	bkpt	0x0000
        return false;
 80074fa:	2300      	movs	r3, #0
 80074fc:	e268      	b.n	80079d0 <process_control_request+0x64c>
      }

      switch ( p_request->bRequest ) {
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	2b09      	cmp	r3, #9
 8007504:	f200 8100 	bhi.w	8007708 <process_control_request+0x384>
 8007508:	a201      	add	r2, pc, #4	@ (adr r2, 8007510 <process_control_request+0x18c>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	080076d7 	.word	0x080076d7
 8007514:	080076ad 	.word	0x080076ad
 8007518:	08007709 	.word	0x08007709
 800751c:	08007681 	.word	0x08007681
 8007520:	08007709 	.word	0x08007709
 8007524:	08007539 	.word	0x08007539
 8007528:	08007637 	.word	0x08007637
 800752c:	08007709 	.word	0x08007709
 8007530:	0800755d 	.word	0x0800755d
 8007534:	08007575 	.word	0x08007575
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8007538:	6838      	ldr	r0, [r7, #0]
 800753a:	f001 fa91 	bl	8008a60 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	885b      	ldrh	r3, [r3, #2]
 8007542:	b29b      	uxth	r3, r3
 8007544:	b2da      	uxtb	r2, r3
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	4611      	mov	r1, r2
 800754a:	4618      	mov	r0, r3
 800754c:	f001 fc96 	bl	8008e7c <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8007550:	4a46      	ldr	r2, [pc, #280]	@ (800766c <process_control_request+0x2e8>)
 8007552:	7813      	ldrb	r3, [r2, #0]
 8007554:	f043 0302 	orr.w	r3, r3, #2
 8007558:	7013      	strb	r3, [r2, #0]
        break;
 800755a:	e0e1      	b.n	8007720 <process_control_request+0x39c>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 800755c:	4b43      	ldr	r3, [pc, #268]	@ (800766c <process_control_request+0x2e8>)
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8007564:	f107 0213 	add.w	r2, r7, #19
 8007568:	79f8      	ldrb	r0, [r7, #7]
 800756a:	2301      	movs	r3, #1
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	f001 f9db 	bl	8008928 <tud_control_xfer>
        }
        break;
 8007572:	e0d5      	b.n	8007720 <process_control_request+0x39c>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	885b      	ldrh	r3, [r3, #2]
 8007578:	b29b      	uxth	r3, r3
 800757a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 800757e:	4b3b      	ldr	r3, [pc, #236]	@ (800766c <process_control_request+0x2e8>)
 8007580:	785b      	ldrb	r3, [r3, #1]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007588:	429a      	cmp	r2, r3
 800758a:	d04e      	beq.n	800762a <process_control_request+0x2a6>
            if ( _usbd_dev.cfg_num ) {
 800758c:	4b37      	ldr	r3, [pc, #220]	@ (800766c <process_control_request+0x2e8>)
 800758e:	785b      	ldrb	r3, [r3, #1]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01b      	beq.n	80075ce <process_control_request+0x24a>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);
 8007596:	4b35      	ldr	r3, [pc, #212]	@ (800766c <process_control_request+0x2e8>)
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	b2db      	uxtb	r3, r3
 800759c:	4619      	mov	r1, r3
 800759e:	4837      	ldr	r0, [pc, #220]	@ (800767c <process_control_request+0x2f8>)
 80075a0:	f004 f840 	bl	800b624 <iprintf>

              // disable SOF
              dcd_sof_enable(rhport, false);
 80075a4:	79fb      	ldrb	r3, [r7, #7]
 80075a6:	2100      	movs	r1, #0
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 fc3f 	bl	8008e2c <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f002 fe61 	bl	800a278 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80075b6:	4b2d      	ldr	r3, [pc, #180]	@ (800766c <process_control_request+0x2e8>)
 80075b8:	789b      	ldrb	r3, [r3, #2]
 80075ba:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 80075be:	79fb      	ldrb	r3, [r7, #7]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff fc1f 	bl	8006e04 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80075c6:	4a29      	ldr	r2, [pc, #164]	@ (800766c <process_control_request+0x2e8>)
 80075c8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80075cc:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 80075ce:	4a27      	ldr	r2, [pc, #156]	@ (800766c <process_control_request+0x2e8>)
 80075d0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80075d4:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 80075d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d023      	beq.n	8007626 <process_control_request+0x2a2>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 80075de:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80075e2:	79fb      	ldrb	r3, [r7, #7]
 80075e4:	4611      	mov	r1, r2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 f9fa 	bl	80079e0 <process_set_config>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f083 0301 	eor.w	r3, r3, #1
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d013      	beq.n	8007620 <process_control_request+0x29c>
                TU_MESS_FAILED();
 80075f8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80075fc:	4914      	ldr	r1, [pc, #80]	@ (8007650 <process_control_request+0x2cc>)
 80075fe:	4815      	ldr	r0, [pc, #84]	@ (8007654 <process_control_request+0x2d0>)
 8007600:	f004 f810 	bl	800b624 <iprintf>
                TU_BREAKPOINT();
 8007604:	4b14      	ldr	r3, [pc, #80]	@ (8007658 <process_control_request+0x2d4>)
 8007606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d000      	beq.n	8007616 <process_control_request+0x292>
 8007614:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 8007616:	4b15      	ldr	r3, [pc, #84]	@ (800766c <process_control_request+0x2e8>)
 8007618:	2200      	movs	r2, #0
 800761a:	705a      	strb	r2, [r3, #1]
                return false;
 800761c:	2300      	movs	r3, #0
 800761e:	e1d7      	b.n	80079d0 <process_control_request+0x64c>
              }
              tud_mount_cb();
 8007620:	f7f8 ff9e 	bl	8000560 <tud_mount_cb>
 8007624:	e001      	b.n	800762a <process_control_request+0x2a6>
            } else {
              tud_umount_cb();
 8007626:	f7f8 ffa7 	bl	8000578 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f001 f908 	bl	8008844 <tud_control_status>
        }
        break;
 8007634:	e074      	b.n	8007720 <process_control_request+0x39c>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fb2e 	bl	8007c9c <process_get_descriptor>
 8007640:	4603      	mov	r3, r0
 8007642:	f083 0301 	eor.w	r3, r3, #1
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d068      	beq.n	800771e <process_control_request+0x39a>
 800764c:	2300      	movs	r3, #0
 800764e:	e1bf      	b.n	80079d0 <process_control_request+0x64c>
 8007650:	0800d06c 	.word	0x0800d06c
 8007654:	0800c9a8 	.word	0x0800c9a8
 8007658:	e000edf0 	.word	0xe000edf0
 800765c:	08006a6f 	.word	0x08006a6f
 8007660:	0800d15c 	.word	0x0800d15c
 8007664:	0800cb88 	.word	0x0800cb88
 8007668:	0800c924 	.word	0x0800c924
 800766c:	200005f4 	.word	0x200005f4
 8007670:	20000630 	.word	0x20000630
 8007674:	2000062c 	.word	0x2000062c
 8007678:	0800cfd4 	.word	0x0800cfd4
 800767c:	0800cb90 	.word	0x0800cb90
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	885b      	ldrh	r3, [r3, #2]
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b01      	cmp	r3, #1
 8007688:	d10e      	bne.n	80076a8 <process_control_request+0x324>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
 800768a:	48a2      	ldr	r0, [pc, #648]	@ (8007914 <process_control_request+0x590>)
 800768c:	f004 f83a 	bl	800b704 <puts>
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8007690:	4aa1      	ldr	r2, [pc, #644]	@ (8007918 <process_control_request+0x594>)
 8007692:	7813      	ldrb	r3, [r2, #0]
 8007694:	f043 0308 	orr.w	r3, r3, #8
 8007698:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f001 f8d0 	bl	8008844 <tud_control_status>
            break;
 80076a4:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 80076a6:	e03b      	b.n	8007720 <process_control_request+0x39c>
            default: return false;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e191      	b.n	80079d0 <process_control_request+0x64c>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	885b      	ldrh	r3, [r3, #2]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d001      	beq.n	80076ba <process_control_request+0x336>
 80076b6:	2300      	movs	r3, #0
 80076b8:	e18a      	b.n	80079d0 <process_control_request+0x64c>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");
 80076ba:	4898      	ldr	r0, [pc, #608]	@ (800791c <process_control_request+0x598>)
 80076bc:	f004 f822 	bl	800b704 <puts>

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 80076c0:	4a95      	ldr	r2, [pc, #596]	@ (8007918 <process_control_request+0x594>)
 80076c2:	7813      	ldrb	r3, [r2, #0]
 80076c4:	f36f 03c3 	bfc	r3, #3, #1
 80076c8:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 80076ca:	79fb      	ldrb	r3, [r7, #7]
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f001 f8b8 	bl	8008844 <tud_control_status>
        break;
 80076d4:	e024      	b.n	8007720 <process_control_request+0x39c>

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80076d6:	4b90      	ldr	r3, [pc, #576]	@ (8007918 <process_control_request+0x594>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	4b8c      	ldr	r3, [pc, #560]	@ (8007918 <process_control_request+0x594>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	089b      	lsrs	r3, r3, #2
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4313      	orrs	r3, r2
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 80076f8:	f107 0210 	add.w	r2, r7, #16
 80076fc:	79f8      	ldrb	r0, [r7, #7]
 80076fe:	2302      	movs	r3, #2
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	f001 f911 	bl	8008928 <tud_control_xfer>
          break;
 8007706:	e00b      	b.n	8007720 <process_control_request+0x39c>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8007708:	4b85      	ldr	r3, [pc, #532]	@ (8007920 <process_control_request+0x59c>)
 800770a:	647b      	str	r3, [r7, #68]	@ 0x44
 800770c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d000      	beq.n	800771a <process_control_request+0x396>
 8007718:	be00      	bkpt	0x0000
 800771a:	2300      	movs	r3, #0
 800771c:	e158      	b.n	80079d0 <process_control_request+0x64c>
        break;
 800771e:	bf00      	nop
      }
    break;
 8007720:	e155      	b.n	80079ce <process_control_request+0x64a>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	889b      	ldrh	r3, [r3, #4]
 8007726:	b29b      	uxth	r3, r3
 8007728:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800772a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007732:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007736:	2b0f      	cmp	r3, #15
 8007738:	d901      	bls.n	800773e <process_control_request+0x3ba>
 800773a:	2300      	movs	r3, #0
 800773c:	e148      	b.n	80079d0 <process_control_request+0x64c>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800773e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007742:	4a75      	ldr	r2, [pc, #468]	@ (8007918 <process_control_request+0x594>)
 8007744:	4413      	add	r3, r2
 8007746:	791b      	ldrb	r3, [r3, #4]
 8007748:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 800774c:	2300      	movs	r3, #0
 800774e:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8007750:	4b74      	ldr	r3, [pc, #464]	@ (8007924 <process_control_request+0x5a0>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8007758:	429a      	cmp	r2, r3
 800775a:	d207      	bcs.n	800776c <process_control_request+0x3e8>
    driver = &_app_driver[drvid];
 800775c:	4b72      	ldr	r3, [pc, #456]	@ (8007928 <process_control_request+0x5a4>)
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007764:	015b      	lsls	r3, r3, #5
 8007766:	4413      	add	r3, r2
 8007768:	623b      	str	r3, [r7, #32]
 800776a:	e00f      	b.n	800778c <process_control_request+0x408>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800776c:	4b6d      	ldr	r3, [pc, #436]	@ (8007924 <process_control_request+0x5a0>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007776:	429a      	cmp	r2, r3
 8007778:	db08      	blt.n	800778c <process_control_request+0x408>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800777a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800777e:	4a69      	ldr	r2, [pc, #420]	@ (8007924 <process_control_request+0x5a0>)
 8007780:	7812      	ldrb	r2, [r2, #0]
 8007782:	1a9b      	subs	r3, r3, r2
 8007784:	015b      	lsls	r3, r3, #5
 8007786:	4a69      	ldr	r2, [pc, #420]	@ (800792c <process_control_request+0x5a8>)
 8007788:	4413      	add	r3, r2
 800778a:	623b      	str	r3, [r7, #32]
  return driver;
 800778c:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800778e:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8007790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <process_control_request+0x416>
 8007796:	2300      	movs	r3, #0
 8007798:	e11a      	b.n	80079d0 <process_control_request+0x64c>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff fdcf 	bl	8007344 <invoke_class_control>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f083 0301 	eor.w	r3, r3, #1
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 810c 	beq.w	80079cc <process_control_request+0x648>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <process_control_request+0x442>
 80077c2:	2300      	movs	r3, #0
 80077c4:	e104      	b.n	80079d0 <process_control_request+0x64c>

        switch(p_request->bRequest) {
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	785b      	ldrb	r3, [r3, #1]
 80077ca:	3b0a      	subs	r3, #10
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d816      	bhi.n	80077fe <process_control_request+0x47a>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 80077d0:	2000      	movs	r0, #0
 80077d2:	f001 f937 	bl	8008a44 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	785b      	ldrb	r3, [r3, #1]
 80077da:	2b0a      	cmp	r3, #10
 80077dc:	d109      	bne.n	80077f2 <process_control_request+0x46e>
              uint8_t alternate = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80077e2:	f107 020f 	add.w	r2, r7, #15
 80077e6:	79f8      	ldrb	r0, [r7, #7]
 80077e8:	2301      	movs	r3, #1
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	f001 f89c 	bl	8008928 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 80077f0:	e007      	b.n	8007802 <process_control_request+0x47e>
              tud_control_status(rhport, p_request);
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f001 f824 	bl	8008844 <tud_control_status>
          break;
 80077fc:	e001      	b.n	8007802 <process_control_request+0x47e>

          default: return false;
 80077fe:	2300      	movs	r3, #0
 8007800:	e0e6      	b.n	80079d0 <process_control_request+0x64c>
        }
      }
      break;
 8007802:	e0e3      	b.n	80079cc <process_control_request+0x648>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	889b      	ldrh	r3, [r3, #4]
 8007808:	b29b      	uxth	r3, r3
 800780a:	83bb      	strh	r3, [r7, #28]
 800780c:	8bbb      	ldrh	r3, [r7, #28]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007814:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007818:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800781a:	7fbb      	ldrb	r3, [r7, #30]
 800781c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007820:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8007822:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8007826:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800782a:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800782c:	7ffb      	ldrb	r3, [r7, #31]
 800782e:	09db      	lsrs	r3, r3, #7
 8007830:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8007832:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8007836:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800783a:	2b07      	cmp	r3, #7
 800783c:	d910      	bls.n	8007860 <process_control_request+0x4dc>
 800783e:	f240 3295 	movw	r2, #917	@ 0x395
 8007842:	493b      	ldr	r1, [pc, #236]	@ (8007930 <process_control_request+0x5ac>)
 8007844:	483b      	ldr	r0, [pc, #236]	@ (8007934 <process_control_request+0x5b0>)
 8007846:	f003 feed 	bl	800b624 <iprintf>
 800784a:	4b35      	ldr	r3, [pc, #212]	@ (8007920 <process_control_request+0x59c>)
 800784c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800784e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d000      	beq.n	800785c <process_control_request+0x4d8>
 800785a:	be00      	bkpt	0x0000
 800785c:	2300      	movs	r3, #0
 800785e:	e0b7      	b.n	80079d0 <process_control_request+0x64c>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8007860:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8007864:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8007868:	492b      	ldr	r1, [pc, #172]	@ (8007918 <process_control_request+0x594>)
 800786a:	0052      	lsls	r2, r2, #1
 800786c:	440a      	add	r2, r1
 800786e:	4413      	add	r3, r2
 8007870:	3314      	adds	r3, #20
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 8007876:	2300      	movs	r3, #0
 8007878:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 800787a:	4b2a      	ldr	r3, [pc, #168]	@ (8007924 <process_control_request+0x5a0>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	7efa      	ldrb	r2, [r7, #27]
 8007880:	429a      	cmp	r2, r3
 8007882:	d206      	bcs.n	8007892 <process_control_request+0x50e>
    driver = &_app_driver[drvid];
 8007884:	4b28      	ldr	r3, [pc, #160]	@ (8007928 <process_control_request+0x5a4>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	7efb      	ldrb	r3, [r7, #27]
 800788a:	015b      	lsls	r3, r3, #5
 800788c:	4413      	add	r3, r2
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	e00d      	b.n	80078ae <process_control_request+0x52a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007892:	4b24      	ldr	r3, [pc, #144]	@ (8007924 <process_control_request+0x5a0>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	7efb      	ldrb	r3, [r7, #27]
 800789a:	429a      	cmp	r2, r3
 800789c:	db07      	blt.n	80078ae <process_control_request+0x52a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800789e:	7efb      	ldrb	r3, [r7, #27]
 80078a0:	4a20      	ldr	r2, [pc, #128]	@ (8007924 <process_control_request+0x5a0>)
 80078a2:	7812      	ldrb	r2, [r2, #0]
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	015b      	lsls	r3, r3, #5
 80078a8:	4a20      	ldr	r2, [pc, #128]	@ (800792c <process_control_request+0x5a8>)
 80078aa:	4413      	add	r3, r2
 80078ac:	617b      	str	r3, [r7, #20]
  return driver;
 80078ae:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80078b0:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00c      	beq.n	80078da <process_control_request+0x556>
        // Forward class request to its driver
        TU_VERIFY(driver);
 80078c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <process_control_request+0x546>
 80078c6:	2300      	movs	r3, #0
 80078c8:	e082      	b.n	80079d0 <process_control_request+0x64c>
        return invoke_class_control(rhport, driver, p_request);
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7ff fd37 	bl	8007344 <invoke_class_control>
 80078d6:	4603      	mov	r3, r0
 80078d8:	e07a      	b.n	80079d0 <process_control_request+0x64c>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	785b      	ldrb	r3, [r3, #1]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d02a      	beq.n	8007938 <process_control_request+0x5b4>
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	dc5a      	bgt.n	800799c <process_control_request+0x618>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <process_control_request+0x56c>
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d024      	beq.n	8007938 <process_control_request+0x5b4>
 80078ee:	e055      	b.n	800799c <process_control_request+0x618>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80078f0:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	4611      	mov	r1, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 ff5b 	bl	80087b4 <usbd_edpt_stalled>
 80078fe:	4603      	mov	r3, r0
 8007900:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8007902:	f107 020c 	add.w	r2, r7, #12
 8007906:	79f8      	ldrb	r0, [r7, #7]
 8007908:	2302      	movs	r3, #2
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	f001 f80c 	bl	8008928 <tud_control_xfer>
          }
          break;
 8007910:	e050      	b.n	80079b4 <process_control_request+0x630>
 8007912:	bf00      	nop
 8007914:	0800cbc8 	.word	0x0800cbc8
 8007918:	200005f4 	.word	0x200005f4
 800791c:	0800cbe4 	.word	0x0800cbe4
 8007920:	e000edf0 	.word	0xe000edf0
 8007924:	20000630 	.word	0x20000630
 8007928:	2000062c 	.word	0x2000062c
 800792c:	0800cfd4 	.word	0x0800cfd4
 8007930:	0800d06c 	.word	0x0800d06c
 8007934:	0800c9a8 	.word	0x0800c9a8

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	885b      	ldrh	r3, [r3, #2]
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d112      	bne.n	8007968 <process_control_request+0x5e4>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	785b      	ldrb	r3, [r3, #1]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d107      	bne.n	800795a <process_control_request+0x5d6>
                usbd_edpt_clear_stall(rhport, ep_addr);
 800794a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	4611      	mov	r1, r2
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fee8 	bl	8008728 <usbd_edpt_clear_stall>
 8007958:	e006      	b.n	8007968 <process_control_request+0x5e4>
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 800795a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fe9a 	bl	800869c <usbd_edpt_stall>
              }
            }

            if (driver) {
 8007968:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800796a:	2b00      	cmp	r3, #0
 800796c:	d021      	beq.n	80079b2 <process_control_request+0x62e>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fce5 	bl	8007344 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 800797a:	2000      	movs	r0, #0
 800797c:	f001 f862 	bl	8008a44 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8007980:	4b15      	ldr	r3, [pc, #84]	@ (80079d8 <process_control_request+0x654>)
 8007982:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007986:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d110      	bne.n	80079b2 <process_control_request+0x62e>
 8007990:	79fb      	ldrb	r3, [r7, #7]
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f000 ff55 	bl	8008844 <tud_control_status>
            }
          }
          break;
 800799a:	e00a      	b.n	80079b2 <process_control_request+0x62e>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 800799c:	4b0f      	ldr	r3, [pc, #60]	@ (80079dc <process_control_request+0x658>)
 800799e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d000      	beq.n	80079ae <process_control_request+0x62a>
 80079ac:	be00      	bkpt	0x0000
            return false;
 80079ae:	2300      	movs	r3, #0
 80079b0:	e00e      	b.n	80079d0 <process_control_request+0x64c>
          break;
 80079b2:	bf00      	nop
        }
      }
    }
    break;
 80079b4:	e00b      	b.n	80079ce <process_control_request+0x64a>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 80079b6:	4b09      	ldr	r3, [pc, #36]	@ (80079dc <process_control_request+0x658>)
 80079b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d000      	beq.n	80079c8 <process_control_request+0x644>
 80079c6:	be00      	bkpt	0x0000
      return false;
 80079c8:	2300      	movs	r3, #0
 80079ca:	e001      	b.n	80079d0 <process_control_request+0x64c>
      break;
 80079cc:	bf00      	nop
  }

  return true;
 80079ce:	2301      	movs	r3, #1
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3768      	adds	r7, #104	@ 0x68
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	200005f4 	.word	0x200005f4
 80079dc:	e000edf0 	.word	0xe000edf0

080079e0 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b096      	sub	sp, #88	@ 0x58
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	4603      	mov	r3, r0
 80079e8:	460a      	mov	r2, r1
 80079ea:	71fb      	strb	r3, [r7, #7]
 80079ec:	4613      	mov	r3, r2
 80079ee:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 80079f0:	79bb      	ldrb	r3, [r7, #6]
 80079f2:	3b01      	subs	r3, #1
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7f9 f806 	bl	8000a08 <tud_descriptor_configuration_cb>
 80079fc:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80079fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <process_set_config+0x2c>
 8007a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a06:	785b      	ldrb	r3, [r3, #1]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d010      	beq.n	8007a2e <process_set_config+0x4e>
 8007a0c:	f240 32d6 	movw	r2, #982	@ 0x3d6
 8007a10:	4998      	ldr	r1, [pc, #608]	@ (8007c74 <process_set_config+0x294>)
 8007a12:	4899      	ldr	r0, [pc, #612]	@ (8007c78 <process_set_config+0x298>)
 8007a14:	f003 fe06 	bl	800b624 <iprintf>
 8007a18:	4b98      	ldr	r3, [pc, #608]	@ (8007c7c <process_set_config+0x29c>)
 8007a1a:	623b      	str	r3, [r7, #32]
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d000      	beq.n	8007a2a <process_set_config+0x4a>
 8007a28:	be00      	bkpt	0x0000
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e11e      	b.n	8007c6c <process_set_config+0x28c>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8007a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a30:	79db      	ldrb	r3, [r3, #7]
 8007a32:	115b      	asrs	r3, r3, #5
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	b2d9      	uxtb	r1, r3
 8007a3a:	4a91      	ldr	r2, [pc, #580]	@ (8007c80 <process_set_config+0x2a0>)
 8007a3c:	7813      	ldrb	r3, [r2, #0]
 8007a3e:	f361 1304 	bfi	r3, r1, #4, #1
 8007a42:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8007a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a46:	79db      	ldrb	r3, [r3, #7]
 8007a48:	119b      	asrs	r3, r3, #6
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	b2d9      	uxtb	r1, r3
 8007a50:	4a8b      	ldr	r2, [pc, #556]	@ (8007c80 <process_set_config+0x2a0>)
 8007a52:	7813      	ldrb	r3, [r2, #0]
 8007a54:	f361 1345 	bfi	r3, r1, #5, #1
 8007a58:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8007a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a5c:	3309      	adds	r3, #9
 8007a5e:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8007a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a62:	885b      	ldrh	r3, [r3, #2]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	461a      	mov	r2, r3
 8007a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a6a:	4413      	add	r3, r2
 8007a6c:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 8007a6e:	e0f7      	b.n	8007c60 <process_set_config+0x280>
  {
    uint8_t assoc_itf_count = 1;
 8007a70:	2301      	movs	r3, #1
 8007a72:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8007a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a78:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8007a80:	2b0b      	cmp	r3, #11
 8007a82:	d10f      	bne.n	8007aa4 <process_set_config+0xc4>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8007a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a86:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8007a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a8a:	78db      	ldrb	r3, [r3, #3]
 8007a8c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8007a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a92:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8007aa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aa6:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	d010      	beq.n	8007ad4 <process_set_config+0xf4>
 8007ab2:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8007ab6:	496f      	ldr	r1, [pc, #444]	@ (8007c74 <process_set_config+0x294>)
 8007ab8:	486f      	ldr	r0, [pc, #444]	@ (8007c78 <process_set_config+0x298>)
 8007aba:	f003 fdb3 	bl	800b624 <iprintf>
 8007abe:	4b6f      	ldr	r3, [pc, #444]	@ (8007c7c <process_set_config+0x29c>)
 8007ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d000      	beq.n	8007ad0 <process_set_config+0xf0>
 8007ace:	be00      	bkpt	0x0000
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e0cb      	b.n	8007c6c <process_set_config+0x28c>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8007ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ad6:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8007ad8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8007ae6:	e09b      	b.n	8007c20 <process_set_config+0x240>
 8007ae8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007aec:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8007af2:	4b64      	ldr	r3, [pc, #400]	@ (8007c84 <process_set_config+0x2a4>)
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	7bfa      	ldrb	r2, [r7, #15]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d206      	bcs.n	8007b0a <process_set_config+0x12a>
    driver = &_app_driver[drvid];
 8007afc:	4b62      	ldr	r3, [pc, #392]	@ (8007c88 <process_set_config+0x2a8>)
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	015b      	lsls	r3, r3, #5
 8007b04:	4413      	add	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]
 8007b08:	e00d      	b.n	8007b26 <process_set_config+0x146>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007b0a:	4b5e      	ldr	r3, [pc, #376]	@ (8007c84 <process_set_config+0x2a4>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	db07      	blt.n	8007b26 <process_set_config+0x146>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	4a5a      	ldr	r2, [pc, #360]	@ (8007c84 <process_set_config+0x2a4>)
 8007b1a:	7812      	ldrb	r2, [r2, #0]
 8007b1c:	1a9b      	subs	r3, r3, r2
 8007b1e:	015b      	lsls	r3, r3, #5
 8007b20:	4a5a      	ldr	r2, [pc, #360]	@ (8007c8c <process_set_config+0x2ac>)
 8007b22:	4413      	add	r3, r2
 8007b24:	60bb      	str	r3, [r7, #8]
  return driver;
 8007b26:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8007b28:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d110      	bne.n	8007b52 <process_set_config+0x172>
 8007b30:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 8007b34:	494f      	ldr	r1, [pc, #316]	@ (8007c74 <process_set_config+0x294>)
 8007b36:	4850      	ldr	r0, [pc, #320]	@ (8007c78 <process_set_config+0x298>)
 8007b38:	f003 fd74 	bl	800b624 <iprintf>
 8007b3c:	4b4f      	ldr	r3, [pc, #316]	@ (8007c7c <process_set_config+0x29c>)
 8007b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d000      	beq.n	8007b4e <process_set_config+0x16e>
 8007b4c:	be00      	bkpt	0x0000
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e08c      	b.n	8007c6c <process_set_config+0x28c>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8007b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007b58:	79f8      	ldrb	r0, [r7, #7]
 8007b5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b5c:	4798      	blx	r3
 8007b5e:	4603      	mov	r3, r0
 8007b60:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8007b62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	d956      	bls.n	8007c16 <process_set_config+0x236>
 8007b68:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007b6a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d852      	bhi.n	8007c16 <process_set_config+0x236>
      {
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);
 8007b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4619      	mov	r1, r3
 8007b76:	4846      	ldr	r0, [pc, #280]	@ (8007c90 <process_set_config+0x2b0>)
 8007b78:	f003 fd54 	bl	800b624 <iprintf>

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8007b7c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d107      	bne.n	8007b94 <process_set_config+0x1b4>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8007b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	4a42      	ldr	r2, [pc, #264]	@ (8007c94 <process_set_config+0x2b4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d102      	bne.n	8007b94 <process_set_config+0x1b4>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8007b94:	2300      	movs	r3, #0
 8007b96:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8007b9a:	e02a      	b.n	8007bf2 <process_set_config+0x212>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8007b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b9e:	789a      	ldrb	r2, [r3, #2]
 8007ba0:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8007baa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007bae:	4a34      	ldr	r2, [pc, #208]	@ (8007c80 <process_set_config+0x2a0>)
 8007bb0:	4413      	add	r3, r2
 8007bb2:	791b      	ldrb	r3, [r3, #4]
 8007bb4:	2bff      	cmp	r3, #255	@ 0xff
 8007bb6:	d010      	beq.n	8007bda <process_set_config+0x1fa>
 8007bb8:	f240 4219 	movw	r2, #1049	@ 0x419
 8007bbc:	492d      	ldr	r1, [pc, #180]	@ (8007c74 <process_set_config+0x294>)
 8007bbe:	482e      	ldr	r0, [pc, #184]	@ (8007c78 <process_set_config+0x298>)
 8007bc0:	f003 fd30 	bl	800b624 <iprintf>
 8007bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8007c7c <process_set_config+0x29c>)
 8007bc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d000      	beq.n	8007bd6 <process_set_config+0x1f6>
 8007bd4:	be00      	bkpt	0x0000
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e048      	b.n	8007c6c <process_set_config+0x28c>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8007bda:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007bde:	4a28      	ldr	r2, [pc, #160]	@ (8007c80 <process_set_config+0x2a0>)
 8007be0:	4413      	add	r3, r2
 8007be2:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8007be6:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8007be8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8007bec:	3301      	adds	r3, #1
 8007bee:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8007bf2:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8007bf6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d3ce      	bcc.n	8007b9c <process_set_config+0x1bc>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8007bfe:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007c02:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007c04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c06:	4824      	ldr	r0, [pc, #144]	@ (8007c98 <process_set_config+0x2b8>)
 8007c08:	f003 fafc 	bl	800b204 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8007c0c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c10:	4413      	add	r3, r2
 8007c12:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8007c14:	e00c      	b.n	8007c30 <process_set_config+0x250>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8007c16:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8007c20:	4b18      	ldr	r3, [pc, #96]	@ (8007c84 <process_set_config+0x2a4>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	f6bf af5c 	bge.w	8007ae8 <process_set_config+0x108>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8007c30:	4b14      	ldr	r3, [pc, #80]	@ (8007c84 <process_set_config+0x2a4>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	da10      	bge.n	8007c60 <process_set_config+0x280>
 8007c3e:	f44f 6285 	mov.w	r2, #1064	@ 0x428
 8007c42:	490c      	ldr	r1, [pc, #48]	@ (8007c74 <process_set_config+0x294>)
 8007c44:	480c      	ldr	r0, [pc, #48]	@ (8007c78 <process_set_config+0x298>)
 8007c46:	f003 fced 	bl	800b624 <iprintf>
 8007c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c7c <process_set_config+0x29c>)
 8007c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d000      	beq.n	8007c5c <process_set_config+0x27c>
 8007c5a:	be00      	bkpt	0x0000
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e005      	b.n	8007c6c <process_set_config+0x28c>
  while( p_desc < desc_end )
 8007c60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c64:	429a      	cmp	r2, r3
 8007c66:	f4ff af03 	bcc.w	8007a70 <process_set_config+0x90>
  }

  return true;
 8007c6a:	2301      	movs	r3, #1
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3758      	adds	r7, #88	@ 0x58
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	0800d084 	.word	0x0800d084
 8007c78:	0800c9a8 	.word	0x0800c9a8
 8007c7c:	e000edf0 	.word	0xe000edf0
 8007c80:	200005f4 	.word	0x200005f4
 8007c84:	20000630 	.word	0x20000630
 8007c88:	2000062c 	.word	0x2000062c
 8007c8c:	0800cfd4 	.word	0x0800cfd4
 8007c90:	0800cc00 	.word	0x0800cc00
 8007c94:	08004e01 	.word	0x08004e01
 8007c98:	20000608 	.word	0x20000608

08007c9c <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b094      	sub	sp, #80	@ 0x50
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	6039      	str	r1, [r7, #0]
 8007ca6:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	885b      	ldrh	r3, [r3, #2]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007cb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cb2:	0a1b      	lsrs	r3, r3, #8
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	885b      	ldrh	r3, [r3, #2]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007cc4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8007ccc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	2b0e      	cmp	r3, #14
 8007cd4:	f200 80d8 	bhi.w	8007e88 <process_get_descriptor+0x1ec>
 8007cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce0 <process_get_descriptor+0x44>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007d1d 	.word	0x08007d1d
 8007ce4:	08007d99 	.word	0x08007d99
 8007ce8:	08007e1d 	.word	0x08007e1d
 8007cec:	08007e89 	.word	0x08007e89
 8007cf0:	08007e89 	.word	0x08007e89
 8007cf4:	08007e5d 	.word	0x08007e5d
 8007cf8:	08007d99 	.word	0x08007d99
 8007cfc:	08007e89 	.word	0x08007e89
 8007d00:	08007e89 	.word	0x08007e89
 8007d04:	08007e89 	.word	0x08007e89
 8007d08:	08007e89 	.word	0x08007e89
 8007d0c:	08007e89 	.word	0x08007e89
 8007d10:	08007e89 	.word	0x08007e89
 8007d14:	08007e89 	.word	0x08007e89
 8007d18:	08007d61 	.word	0x08007d61
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");
 8007d1c:	485d      	ldr	r0, [pc, #372]	@ (8007e94 <process_get_descriptor+0x1f8>)
 8007d1e:	f003 fcf1 	bl	800b704 <puts>

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8007d22:	f7f8 fe55 	bl	80009d0 <tud_descriptor_device_cb>
 8007d26:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8007d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d110      	bne.n	8007d50 <process_get_descriptor+0xb4>
 8007d2e:	f240 423a 	movw	r2, #1082	@ 0x43a
 8007d32:	4959      	ldr	r1, [pc, #356]	@ (8007e98 <process_get_descriptor+0x1fc>)
 8007d34:	4859      	ldr	r0, [pc, #356]	@ (8007e9c <process_get_descriptor+0x200>)
 8007d36:	f003 fc75 	bl	800b624 <iprintf>
 8007d3a:	4b59      	ldr	r3, [pc, #356]	@ (8007ea0 <process_get_descriptor+0x204>)
 8007d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d000      	beq.n	8007d4c <process_get_descriptor+0xb0>
 8007d4a:	be00      	bkpt	0x0000
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e09c      	b.n	8007e8a <process_get_descriptor+0x1ee>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8007d50:	79f8      	ldrb	r0, [r7, #7]
 8007d52:	2312      	movs	r3, #18
 8007d54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	f000 fde6 	bl	8008928 <tud_control_xfer>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	e094      	b.n	8007e8a <process_get_descriptor+0x1ee>
      }
    }
    // break; // unreachable

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");
 8007d60:	4850      	ldr	r0, [pc, #320]	@ (8007ea4 <process_get_descriptor+0x208>)
 8007d62:	f003 fccf 	bl	800b704 <puts>

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8007d66:	f7fe fe69 	bl	8006a3c <tud_descriptor_bos_cb>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8007d6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <process_get_descriptor+0xdc>
 8007d74:	2300      	movs	r3, #0
 8007d76:	e088      	b.n	8007e8a <process_get_descriptor+0x1ee>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8007d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d7a:	3302      	adds	r3, #2
 8007d7c:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8007d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007d8c:	79f8      	ldrb	r0, [r7, #7]
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	f000 fdca 	bl	8008928 <tud_control_xfer>
 8007d94:	4603      	mov	r3, r0
 8007d96:	e078      	b.n	8007e8a <process_get_descriptor+0x1ee>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8007d98:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d120      	bne.n	8007de2 <process_get_descriptor+0x146>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
 8007da0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007da4:	4619      	mov	r1, r3
 8007da6:	4840      	ldr	r0, [pc, #256]	@ (8007ea8 <process_get_descriptor+0x20c>)
 8007da8:	f003 fc3c 	bl	800b624 <iprintf>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8007dac:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7f8 fe29 	bl	8000a08 <tud_descriptor_configuration_cb>
 8007db6:	4603      	mov	r3, r0
 8007db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8007dba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d11f      	bne.n	8007e00 <process_get_descriptor+0x164>
 8007dc0:	f240 4261 	movw	r2, #1121	@ 0x461
 8007dc4:	4934      	ldr	r1, [pc, #208]	@ (8007e98 <process_get_descriptor+0x1fc>)
 8007dc6:	4835      	ldr	r0, [pc, #212]	@ (8007e9c <process_get_descriptor+0x200>)
 8007dc8:	f003 fc2c 	bl	800b624 <iprintf>
 8007dcc:	4b34      	ldr	r3, [pc, #208]	@ (8007ea0 <process_get_descriptor+0x204>)
 8007dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d000      	beq.n	8007dde <process_get_descriptor+0x142>
 8007ddc:	be00      	bkpt	0x0000
 8007dde:	2300      	movs	r3, #0
 8007de0:	e053      	b.n	8007e8a <process_get_descriptor+0x1ee>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
 8007de2:	4832      	ldr	r0, [pc, #200]	@ (8007eac <process_get_descriptor+0x210>)
 8007de4:	f003 fc8e 	bl	800b704 <puts>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8007de8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fe fe33 	bl	8006a58 <tud_descriptor_other_speed_configuration_cb>
 8007df2:	4603      	mov	r3, r0
 8007df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8007df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <process_get_descriptor+0x164>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	e044      	b.n	8007e8a <process_get_descriptor+0x1ee>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8007e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e02:	3302      	adds	r3, #2
 8007e04:	61fb      	str	r3, [r7, #28]
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8007e0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e0e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007e10:	79f8      	ldrb	r0, [r7, #7]
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	f000 fd88 	bl	8008928 <tud_control_xfer>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	e036      	b.n	8007e8a <process_get_descriptor+0x1ee>
    }
    // break; // unreachable

    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);
 8007e1c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007e20:	4619      	mov	r1, r3
 8007e22:	4823      	ldr	r0, [pc, #140]	@ (8007eb0 <process_get_descriptor+0x214>)
 8007e24:	f003 fbfe 	bl	800b624 <iprintf>

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	889b      	ldrh	r3, [r3, #4]
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007e32:	4611      	mov	r1, r2
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7f8 fdf5 	bl	8000a24 <tud_descriptor_string_cb>
 8007e3a:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <process_get_descriptor+0x1aa>
 8007e42:	2300      	movs	r3, #0
 8007e44:	e021      	b.n	8007e8a <process_get_descriptor+0x1ee>
 8007e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e48:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8007e4e:	79f8      	ldrb	r0, [r7, #7]
 8007e50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	f000 fd68 	bl	8008928 <tud_control_xfer>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	e016      	b.n	8007e8a <process_get_descriptor+0x1ee>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
 8007e5c:	4815      	ldr	r0, [pc, #84]	@ (8007eb4 <process_get_descriptor+0x218>)
 8007e5e:	f003 fc51 	bl	800b704 <puts>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8007e62:	f7fe fdf2 	bl	8006a4a <tud_descriptor_device_qualifier_cb>
 8007e66:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8007e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <process_get_descriptor+0x1d6>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e00b      	b.n	8007e8a <process_get_descriptor+0x1ee>
 8007e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e74:	617b      	str	r3, [r7, #20]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8007e7a:	79f8      	ldrb	r0, [r7, #7]
 8007e7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	f000 fd52 	bl	8008928 <tud_control_xfer>
 8007e84:	4603      	mov	r3, r0
 8007e86:	e000      	b.n	8007e8a <process_get_descriptor+0x1ee>
    }
    // break; // unreachable

    default: return false;
 8007e88:	2300      	movs	r3, #0
  }
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3750      	adds	r7, #80	@ 0x50
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	0800cc10 	.word	0x0800cc10
 8007e98:	0800d098 	.word	0x0800d098
 8007e9c:	0800c9a8 	.word	0x0800c9a8
 8007ea0:	e000edf0 	.word	0xe000edf0
 8007ea4:	0800cc1c 	.word	0x0800cc1c
 8007ea8:	0800cc24 	.word	0x0800cc24
 8007eac:	0800cc3c 	.word	0x0800cc3c
 8007eb0:	0800cc58 	.word	0x0800cc58
 8007eb4:	0800cc68 	.word	0x0800cc68

08007eb8 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b0a0      	sub	sp, #128	@ 0x80
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	785b      	ldrb	r3, [r3, #1]
 8007ece:	3b02      	subs	r3, #2
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	f200 8184 	bhi.w	80081de <dcd_event_handler+0x326>
 8007ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8007edc <dcd_event_handler+0x24>)
 8007ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007edc:	08007ef1 	.word	0x08007ef1
 8007ee0:	08007f61 	.word	0x08007f61
 8007ee4:	08007f1d 	.word	0x08007f1d
 8007ee8:	08007f3f 	.word	0x08007f3f
 8007eec:	080081c9 	.word	0x080081c9
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8007ef0:	4aad      	ldr	r2, [pc, #692]	@ (80081a8 <dcd_event_handler+0x2f0>)
 8007ef2:	7813      	ldrb	r3, [r2, #0]
 8007ef4:	f36f 0300 	bfc	r3, #0, #1
 8007ef8:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8007efa:	4aab      	ldr	r2, [pc, #684]	@ (80081a8 <dcd_event_handler+0x2f0>)
 8007efc:	7813      	ldrb	r3, [r2, #0]
 8007efe:	f36f 0341 	bfc	r3, #1, #1
 8007f02:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8007f04:	4ba8      	ldr	r3, [pc, #672]	@ (80081a8 <dcd_event_handler+0x2f0>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8007f0a:	4aa7      	ldr	r2, [pc, #668]	@ (80081a8 <dcd_event_handler+0x2f0>)
 8007f0c:	7813      	ldrb	r3, [r2, #0]
 8007f0e:	f36f 0382 	bfc	r3, #2, #1
 8007f12:	7013      	strb	r3, [r2, #0]
      send = true;
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8007f1a:	e169      	b.n	80081f0 <dcd_event_handler+0x338>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8007f1c:	4ba2      	ldr	r3, [pc, #648]	@ (80081a8 <dcd_event_handler+0x2f0>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 815d 	beq.w	80081e6 <dcd_event_handler+0x32e>
        _usbd_dev.suspended = 1;
 8007f2c:	4a9e      	ldr	r2, [pc, #632]	@ (80081a8 <dcd_event_handler+0x2f0>)
 8007f2e:	7813      	ldrb	r3, [r2, #0]
 8007f30:	f043 0304 	orr.w	r3, r3, #4
 8007f34:	7013      	strb	r3, [r2, #0]
        send = true;
 8007f36:	2301      	movs	r3, #1
 8007f38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8007f3c:	e153      	b.n	80081e6 <dcd_event_handler+0x32e>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8007f3e:	4b9a      	ldr	r3, [pc, #616]	@ (80081a8 <dcd_event_handler+0x2f0>)
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 814e 	beq.w	80081ea <dcd_event_handler+0x332>
        _usbd_dev.suspended = 0;
 8007f4e:	4a96      	ldr	r2, [pc, #600]	@ (80081a8 <dcd_event_handler+0x2f0>)
 8007f50:	7813      	ldrb	r3, [r2, #0]
 8007f52:	f36f 0382 	bfc	r3, #2, #1
 8007f56:	7013      	strb	r3, [r2, #0]
        send = true;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8007f5e:	e144      	b.n	80081ea <dcd_event_handler+0x332>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007f60:	2300      	movs	r3, #0
 8007f62:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8007f66:	e039      	b.n	8007fdc <dcd_event_handler+0x124>
 8007f68:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007f6c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8007f74:	4b8d      	ldr	r3, [pc, #564]	@ (80081ac <dcd_event_handler+0x2f4>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d207      	bcs.n	8007f90 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8007f80:	4b8b      	ldr	r3, [pc, #556]	@ (80081b0 <dcd_event_handler+0x2f8>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007f88:	015b      	lsls	r3, r3, #5
 8007f8a:	4413      	add	r3, r2
 8007f8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f8e:	e00f      	b.n	8007fb0 <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007f90:	4b86      	ldr	r3, [pc, #536]	@ (80081ac <dcd_event_handler+0x2f4>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	db08      	blt.n	8007fb0 <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007f9e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007fa2:	4a82      	ldr	r2, [pc, #520]	@ (80081ac <dcd_event_handler+0x2f4>)
 8007fa4:	7812      	ldrb	r2, [r2, #0]
 8007fa6:	1a9b      	subs	r3, r3, r2
 8007fa8:	015b      	lsls	r3, r3, #5
 8007faa:	4a82      	ldr	r2, [pc, #520]	@ (80081b4 <dcd_event_handler+0x2fc>)
 8007fac:	4413      	add	r3, r2
 8007fae:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8007fb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8007fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8007fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00b      	beq.n	8007fd2 <dcd_event_handler+0x11a>
 8007fba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fbc:	69db      	ldr	r3, [r3, #28]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d007      	beq.n	8007fd2 <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8007fc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	7810      	ldrb	r0, [r2, #0]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	6852      	ldr	r2, [r2, #4]
 8007fce:	4611      	mov	r1, r2
 8007fd0:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007fd2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8007fdc:	4b73      	ldr	r3, [pc, #460]	@ (80081ac <dcd_event_handler+0x2f4>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	dabe      	bge.n	8007f68 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8007fea:	4b6f      	ldr	r3, [pc, #444]	@ (80081a8 <dcd_event_handler+0x2f0>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d060      	beq.n	80080ba <dcd_event_handler+0x202>
        _usbd_dev.suspended = 0;
 8007ff8:	4a6b      	ldr	r2, [pc, #428]	@ (80081a8 <dcd_event_handler+0x2f0>)
 8007ffa:	7813      	ldrb	r3, [r2, #0]
 8007ffc:	f36f 0382 	bfc	r3, #2, #1
 8008000:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8008002:	f107 0314 	add.w	r3, r7, #20
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	605a      	str	r2, [r3, #4]
 800800c:	609a      	str	r2, [r3, #8]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	753b      	strb	r3, [r7, #20]
 8008014:	2305      	movs	r3, #5
 8008016:	757b      	strb	r3, [r7, #21]
 8008018:	f107 0314 	add.w	r3, r7, #20
 800801c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008024:	4b64      	ldr	r3, [pc, #400]	@ (80081b8 <dcd_event_handler+0x300>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	667b      	str	r3, [r7, #100]	@ 0x64
 800802a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800802c:	663b      	str	r3, [r7, #96]	@ 0x60
 800802e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008032:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8008036:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800803a:	f083 0301 	eor.w	r3, r3, #1
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d003      	beq.n	800804c <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8008044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2000      	movs	r0, #0
 800804a:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 800804c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800804e:	3304      	adds	r3, #4
 8008050:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fae2 	bl	800661c <tu_fifo_write>
 8008058:	4603      	mov	r3, r0
 800805a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 800805e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008062:	f083 0301 	eor.w	r3, r3, #1
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 800806c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2001      	movs	r0, #1
 8008072:	4798      	blx	r3
  }

  return success;
 8008074:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8008078:	f083 0301 	eor.w	r3, r3, #1
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00f      	beq.n	80080a2 <dcd_event_handler+0x1ea>
 8008082:	f240 1265 	movw	r2, #357	@ 0x165
 8008086:	494d      	ldr	r1, [pc, #308]	@ (80081bc <dcd_event_handler+0x304>)
 8008088:	484d      	ldr	r0, [pc, #308]	@ (80081c0 <dcd_event_handler+0x308>)
 800808a:	f003 facb 	bl	800b624 <iprintf>
 800808e:	4b4d      	ldr	r3, [pc, #308]	@ (80081c4 <dcd_event_handler+0x30c>)
 8008090:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008092:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00c      	beq.n	80080b8 <dcd_event_handler+0x200>
 800809e:	be00      	bkpt	0x0000
 80080a0:	e00a      	b.n	80080b8 <dcd_event_handler+0x200>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 80080a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080a4:	7818      	ldrb	r0, [r3, #0]
 80080a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080a8:	785b      	ldrb	r3, [r3, #1]
 80080aa:	4619      	mov	r1, r3
 80080ac:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80080b0:	461a      	mov	r2, r3
 80080b2:	f7fe fcad 	bl	8006a10 <tud_event_hook_cb>
  return true;
 80080b6:	e000      	b.n	80080ba <dcd_event_handler+0x202>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80080b8:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 80080ba:	4b3b      	ldr	r3, [pc, #236]	@ (80081a8 <dcd_event_handler+0x2f0>)
 80080bc:	78db      	ldrb	r3, [r3, #3]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80080c2:	2300      	movs	r3, #0
 80080c4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80080c8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80080cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80080ce:	fa22 f303 	lsr.w	r3, r2, r3
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bf14      	ite	ne
 80080da:	2301      	movne	r3, #1
 80080dc:	2300      	moveq	r3, #0
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 8084 	beq.w	80081ee <dcd_event_handler+0x336>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 80080e6:	f107 0308 	add.w	r3, r7, #8
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	605a      	str	r2, [r3, #4]
 80080f0:	609a      	str	r2, [r3, #8]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	723b      	strb	r3, [r7, #8]
 80080f8:	2303      	movs	r3, #3
 80080fa:	727b      	strb	r3, [r7, #9]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	f107 0308 	add.w	r3, r7, #8
 8008106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008108:	78fb      	ldrb	r3, [r7, #3]
 800810a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800810e:	4b2a      	ldr	r3, [pc, #168]	@ (80081b8 <dcd_event_handler+0x300>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	647b      	str	r3, [r7, #68]	@ 0x44
 8008114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008116:	643b      	str	r3, [r7, #64]	@ 0x40
 8008118:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800811c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8008120:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008124:	f083 0301 	eor.w	r3, r3, #1
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <dcd_event_handler+0x27e>
    qhdl->interrupt_set(false);
 800812e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2000      	movs	r0, #0
 8008134:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8008136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008138:	3304      	adds	r3, #4
 800813a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fa6d 	bl	800661c <tu_fifo_write>
 8008142:	4603      	mov	r3, r0
 8008144:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8008148:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800814c:	f083 0301 	eor.w	r3, r3, #1
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <dcd_event_handler+0x2a6>
    qhdl->interrupt_set(true);
 8008156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2001      	movs	r0, #1
 800815c:	4798      	blx	r3
  return success;
 800815e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008162:	f083 0301 	eor.w	r3, r3, #1
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00f      	beq.n	800818c <dcd_event_handler+0x2d4>
 800816c:	f240 1265 	movw	r2, #357	@ 0x165
 8008170:	4912      	ldr	r1, [pc, #72]	@ (80081bc <dcd_event_handler+0x304>)
 8008172:	4813      	ldr	r0, [pc, #76]	@ (80081c0 <dcd_event_handler+0x308>)
 8008174:	f003 fa56 	bl	800b624 <iprintf>
 8008178:	4b12      	ldr	r3, [pc, #72]	@ (80081c4 <dcd_event_handler+0x30c>)
 800817a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00c      	beq.n	80081a2 <dcd_event_handler+0x2ea>
 8008188:	be00      	bkpt	0x0000
 800818a:	e00a      	b.n	80081a2 <dcd_event_handler+0x2ea>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800818c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800818e:	7818      	ldrb	r0, [r3, #0]
 8008190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008192:	785b      	ldrb	r3, [r3, #1]
 8008194:	4619      	mov	r1, r3
 8008196:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800819a:	461a      	mov	r2, r3
 800819c:	f7fe fc38 	bl	8006a10 <tud_event_hook_cb>
  return true;
 80081a0:	e000      	b.n	80081a4 <dcd_event_handler+0x2ec>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80081a2:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 80081a4:	e023      	b.n	80081ee <dcd_event_handler+0x336>
 80081a6:	bf00      	nop
 80081a8:	200005f4 	.word	0x200005f4
 80081ac:	20000630 	.word	0x20000630
 80081b0:	2000062c 	.word	0x2000062c
 80081b4:	0800cfd4 	.word	0x0800cfd4
 80081b8:	200006f4 	.word	0x200006f4
 80081bc:	0800d0b0 	.word	0x0800d0b0
 80081c0:	0800c9a8 	.word	0x0800c9a8
 80081c4:	e000edf0 	.word	0xe000edf0

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 80081c8:	4b35      	ldr	r3, [pc, #212]	@ (80082a0 <dcd_event_handler+0x3e8>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	3301      	adds	r3, #1
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	4b33      	ldr	r3, [pc, #204]	@ (80082a0 <dcd_event_handler+0x3e8>)
 80081d4:	701a      	strb	r2, [r3, #0]
      send = true;
 80081d6:	2301      	movs	r3, #1
 80081d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 80081dc:	e008      	b.n	80081f0 <dcd_event_handler+0x338>

    default:
      send = true;
 80081de:	2301      	movs	r3, #1
 80081e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 80081e4:	e004      	b.n	80081f0 <dcd_event_handler+0x338>
      break;
 80081e6:	bf00      	nop
 80081e8:	e002      	b.n	80081f0 <dcd_event_handler+0x338>
      break;
 80081ea:	bf00      	nop
 80081ec:	e000      	b.n	80081f0 <dcd_event_handler+0x338>
      break;
 80081ee:	bf00      	nop
  }

  if (send) {
 80081f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d04f      	beq.n	8008298 <dcd_event_handler+0x3e0>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008202:	4b28      	ldr	r3, [pc, #160]	@ (80082a4 <dcd_event_handler+0x3ec>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800820a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800820c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8008214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008218:	f083 0301 	eor.w	r3, r3, #1
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <dcd_event_handler+0x372>
    qhdl->interrupt_set(false);
 8008222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2000      	movs	r0, #0
 8008228:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 800822a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822c:	3304      	adds	r3, #4
 800822e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe f9f3 	bl	800661c <tu_fifo_write>
 8008236:	4603      	mov	r3, r0
 8008238:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 800823c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008240:	f083 0301 	eor.w	r3, r3, #1
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <dcd_event_handler+0x39a>
    qhdl->interrupt_set(true);
 800824a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2001      	movs	r0, #1
 8008250:	4798      	blx	r3
  return success;
 8008252:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008256:	f083 0301 	eor.w	r3, r3, #1
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00f      	beq.n	8008280 <dcd_event_handler+0x3c8>
 8008260:	f240 1265 	movw	r2, #357	@ 0x165
 8008264:	4910      	ldr	r1, [pc, #64]	@ (80082a8 <dcd_event_handler+0x3f0>)
 8008266:	4811      	ldr	r0, [pc, #68]	@ (80082ac <dcd_event_handler+0x3f4>)
 8008268:	f003 f9dc 	bl	800b624 <iprintf>
 800826c:	4b10      	ldr	r3, [pc, #64]	@ (80082b0 <dcd_event_handler+0x3f8>)
 800826e:	623b      	str	r3, [r7, #32]
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00c      	beq.n	8008296 <dcd_event_handler+0x3de>
 800827c:	be00      	bkpt	0x0000
 800827e:	e00a      	b.n	8008296 <dcd_event_handler+0x3de>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8008280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008282:	7818      	ldrb	r0, [r3, #0]
 8008284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008286:	785b      	ldrb	r3, [r3, #1]
 8008288:	4619      	mov	r1, r3
 800828a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800828e:	461a      	mov	r2, r3
 8008290:	f7fe fbbe 	bl	8006a10 <tud_event_hook_cb>
  return true;
 8008294:	e000      	b.n	8008298 <dcd_event_handler+0x3e0>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008296:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8008298:	bf00      	nop
 800829a:	3780      	adds	r7, #128	@ 0x80
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20000628 	.word	0x20000628
 80082a4:	200006f4 	.word	0x200006f4
 80082a8:	0800d0b0 	.word	0x0800d0b0
 80082ac:	0800c9a8 	.word	0x0800c9a8
 80082b0:	e000edf0 	.word	0xe000edf0

080082b4 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	4603      	mov	r3, r0
 80082bc:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 80082c4:	4b07      	ldr	r3, [pc, #28]	@ (80082e4 <usbd_int_set+0x30>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fcf5 	bl	8008cb8 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 80082ce:	e004      	b.n	80082da <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 80082d0:	4b04      	ldr	r3, [pc, #16]	@ (80082e4 <usbd_int_set+0x30>)
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fd11 	bl	8008cfc <dcd_int_disable>
}
 80082da:	bf00      	nop
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	20000025 	.word	0x20000025

080082e8 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08a      	sub	sp, #40	@ 0x28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6039      	str	r1, [r7, #0]
 80082f0:	4611      	mov	r1, r2
 80082f2:	461a      	mov	r2, r3
 80082f4:	4603      	mov	r3, r0
 80082f6:	71fb      	strb	r3, [r7, #7]
 80082f8:	460b      	mov	r3, r1
 80082fa:	71bb      	strb	r3, [r7, #6]
 80082fc:	4613      	mov	r3, r2
 80082fe:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8008300:	2300      	movs	r3, #0
 8008302:	627b      	str	r3, [r7, #36]	@ 0x24
 8008304:	e059      	b.n	80083ba <usbd_open_edpt_pair+0xd2>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	785b      	ldrb	r3, [r3, #1]
 800830e:	2b05      	cmp	r3, #5
 8008310:	d108      	bne.n	8008324 <usbd_open_edpt_pair+0x3c>
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	78db      	ldrb	r3, [r3, #3]
 8008316:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800831a:	b2db      	uxtb	r3, r3
 800831c:	461a      	mov	r2, r3
 800831e:	797b      	ldrb	r3, [r7, #5]
 8008320:	4293      	cmp	r3, r2
 8008322:	d010      	beq.n	8008346 <usbd_open_edpt_pair+0x5e>
 8008324:	f240 42e7 	movw	r2, #1255	@ 0x4e7
 8008328:	4928      	ldr	r1, [pc, #160]	@ (80083cc <usbd_open_edpt_pair+0xe4>)
 800832a:	4829      	ldr	r0, [pc, #164]	@ (80083d0 <usbd_open_edpt_pair+0xe8>)
 800832c:	f003 f97a 	bl	800b624 <iprintf>
 8008330:	4b28      	ldr	r3, [pc, #160]	@ (80083d4 <usbd_open_edpt_pair+0xec>)
 8008332:	61bb      	str	r3, [r7, #24]
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	d000      	beq.n	8008342 <usbd_open_edpt_pair+0x5a>
 8008340:	be00      	bkpt	0x0000
 8008342:	2300      	movs	r3, #0
 8008344:	e03e      	b.n	80083c4 <usbd_open_edpt_pair+0xdc>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8008346:	79fb      	ldrb	r3, [r7, #7]
 8008348:	6a39      	ldr	r1, [r7, #32]
 800834a:	4618      	mov	r0, r3
 800834c:	f000 f844 	bl	80083d8 <usbd_edpt_open>
 8008350:	4603      	mov	r3, r0
 8008352:	f083 0301 	eor.w	r3, r3, #1
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b00      	cmp	r3, #0
 800835a:	d010      	beq.n	800837e <usbd_open_edpt_pair+0x96>
 800835c:	f44f 629d 	mov.w	r2, #1256	@ 0x4e8
 8008360:	491a      	ldr	r1, [pc, #104]	@ (80083cc <usbd_open_edpt_pair+0xe4>)
 8008362:	481b      	ldr	r0, [pc, #108]	@ (80083d0 <usbd_open_edpt_pair+0xe8>)
 8008364:	f003 f95e 	bl	800b624 <iprintf>
 8008368:	4b1a      	ldr	r3, [pc, #104]	@ (80083d4 <usbd_open_edpt_pair+0xec>)
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	2b00      	cmp	r3, #0
 8008376:	d000      	beq.n	800837a <usbd_open_edpt_pair+0x92>
 8008378:	be00      	bkpt	0x0000
 800837a:	2300      	movs	r3, #0
 800837c:	e022      	b.n	80083c4 <usbd_open_edpt_pair+0xdc>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	789b      	ldrb	r3, [r3, #2]
 8008382:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008384:	7dfb      	ldrb	r3, [r7, #23]
 8008386:	09db      	lsrs	r3, r3, #7
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b01      	cmp	r3, #1
 800838c:	d104      	bne.n	8008398 <usbd_open_edpt_pair+0xb0>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	789a      	ldrb	r2, [r3, #2]
 8008392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	e003      	b.n	80083a0 <usbd_open_edpt_pair+0xb8>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	789a      	ldrb	r2, [r3, #2]
 800839c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839e:	701a      	strb	r2, [r3, #0]
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	461a      	mov	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80083b2:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80083b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b6:	3301      	adds	r3, #1
 80083b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80083ba:	79bb      	ldrb	r3, [r7, #6]
 80083bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083be:	429a      	cmp	r2, r3
 80083c0:	dba1      	blt.n	8008306 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80083c2:	2301      	movs	r3, #1
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3728      	adds	r7, #40	@ 0x28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	0800d0bc 	.word	0x0800d0bc
 80083d0:	0800c9a8 	.word	0x0800c9a8
 80083d4:	e000edf0 	.word	0xe000edf0

080083d8 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	6039      	str	r1, [r7, #0]
 80083e2:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80083e4:	4b21      	ldr	r3, [pc, #132]	@ (800846c <usbd_edpt_open+0x94>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	789b      	ldrb	r3, [r3, #2]
 80083ee:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b07      	cmp	r3, #7
 80083fa:	d910      	bls.n	800841e <usbd_edpt_open+0x46>
 80083fc:	f240 520b 	movw	r2, #1291	@ 0x50b
 8008400:	491b      	ldr	r1, [pc, #108]	@ (8008470 <usbd_edpt_open+0x98>)
 8008402:	481c      	ldr	r0, [pc, #112]	@ (8008474 <usbd_edpt_open+0x9c>)
 8008404:	f003 f90e 	bl	800b624 <iprintf>
 8008408:	4b1b      	ldr	r3, [pc, #108]	@ (8008478 <usbd_edpt_open+0xa0>)
 800840a:	613b      	str	r3, [r7, #16]
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	2b00      	cmp	r3, #0
 8008416:	d000      	beq.n	800841a <usbd_edpt_open+0x42>
 8008418:	be00      	bkpt	0x0000
 800841a:	2300      	movs	r3, #0
 800841c:	e022      	b.n	8008464 <usbd_edpt_open+0x8c>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 800841e:	4b17      	ldr	r3, [pc, #92]	@ (800847c <usbd_edpt_open+0xa4>)
 8008420:	789b      	ldrb	r3, [r3, #2]
 8008422:	4619      	mov	r1, r3
 8008424:	6838      	ldr	r0, [r7, #0]
 8008426:	f002 fe51 	bl	800b0cc <tu_edpt_validate>
 800842a:	4603      	mov	r3, r0
 800842c:	f083 0301 	eor.w	r3, r3, #1
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d010      	beq.n	8008458 <usbd_edpt_open+0x80>
 8008436:	f240 520c 	movw	r2, #1292	@ 0x50c
 800843a:	490d      	ldr	r1, [pc, #52]	@ (8008470 <usbd_edpt_open+0x98>)
 800843c:	480d      	ldr	r0, [pc, #52]	@ (8008474 <usbd_edpt_open+0x9c>)
 800843e:	f003 f8f1 	bl	800b624 <iprintf>
 8008442:	4b0d      	ldr	r3, [pc, #52]	@ (8008478 <usbd_edpt_open+0xa0>)
 8008444:	617b      	str	r3, [r7, #20]
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d000      	beq.n	8008454 <usbd_edpt_open+0x7c>
 8008452:	be00      	bkpt	0x0000
 8008454:	2300      	movs	r3, #0
 8008456:	e005      	b.n	8008464 <usbd_edpt_open+0x8c>

  return dcd_edpt_open(rhport, desc_ep);
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	4618      	mov	r0, r3
 800845e:	f001 fdd3 	bl	800a008 <dcd_edpt_open>
 8008462:	4603      	mov	r3, r0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	20000025 	.word	0x20000025
 8008470:	0800d0d0 	.word	0x0800d0d0
 8008474:	0800c9a8 	.word	0x0800c9a8
 8008478:	e000edf0 	.word	0xe000edf0
 800847c:	200005f4 	.word	0x200005f4

08008480 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	460a      	mov	r2, r1
 800848a:	71fb      	strb	r3, [r7, #7]
 800848c:	4613      	mov	r3, r2
 800848e:	71bb      	strb	r3, [r7, #6]
 8008490:	79bb      	ldrb	r3, [r7, #6]
 8008492:	73bb      	strb	r3, [r7, #14]
 8008494:	7bbb      	ldrb	r3, [r7, #14]
 8008496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800849a:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800849c:	75fb      	strb	r3, [r7, #23]
 800849e:	79bb      	ldrb	r3, [r7, #6]
 80084a0:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	09db      	lsrs	r3, r3, #7
 80084a6:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80084a8:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80084aa:	7dfa      	ldrb	r2, [r7, #23]
 80084ac:	7dbb      	ldrb	r3, [r7, #22]
 80084ae:	0052      	lsls	r2, r2, #1
 80084b0:	4413      	add	r3, r2
 80084b2:	3320      	adds	r3, #32
 80084b4:	4a06      	ldr	r2, [pc, #24]	@ (80084d0 <usbd_edpt_claim+0x50>)
 80084b6:	4413      	add	r3, r2
 80084b8:	3304      	adds	r3, #4
 80084ba:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 80084bc:	2100      	movs	r1, #0
 80084be:	6938      	ldr	r0, [r7, #16]
 80084c0:	f002 fda2 	bl	800b008 <tu_edpt_claim>
 80084c4:	4603      	mov	r3, r0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	200005f4 	.word	0x200005f4

080084d4 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	4603      	mov	r3, r0
 80084dc:	460a      	mov	r2, r1
 80084de:	71fb      	strb	r3, [r7, #7]
 80084e0:	4613      	mov	r3, r2
 80084e2:	71bb      	strb	r3, [r7, #6]
 80084e4:	79bb      	ldrb	r3, [r7, #6]
 80084e6:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084ee:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80084f0:	75fb      	strb	r3, [r7, #23]
 80084f2:	79bb      	ldrb	r3, [r7, #6]
 80084f4:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	09db      	lsrs	r3, r3, #7
 80084fa:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80084fc:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80084fe:	7dfa      	ldrb	r2, [r7, #23]
 8008500:	7dbb      	ldrb	r3, [r7, #22]
 8008502:	0052      	lsls	r2, r2, #1
 8008504:	4413      	add	r3, r2
 8008506:	3320      	adds	r3, #32
 8008508:	4a06      	ldr	r2, [pc, #24]	@ (8008524 <usbd_edpt_release+0x50>)
 800850a:	4413      	add	r3, r2
 800850c:	3304      	adds	r3, #4
 800850e:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8008510:	2100      	movs	r1, #0
 8008512:	6938      	ldr	r0, [r7, #16]
 8008514:	f002 fdb1 	bl	800b07a <tu_edpt_release>
 8008518:	4603      	mov	r3, r0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	200005f4 	.word	0x200005f4

08008528 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	603a      	str	r2, [r7, #0]
 8008530:	461a      	mov	r2, r3
 8008532:	4603      	mov	r3, r0
 8008534:	71fb      	strb	r3, [r7, #7]
 8008536:	460b      	mov	r3, r1
 8008538:	71bb      	strb	r3, [r7, #6]
 800853a:	4613      	mov	r3, r2
 800853c:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800853e:	4b3a      	ldr	r3, [pc, #232]	@ (8008628 <usbd_edpt_xfer+0x100>)
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	71fb      	strb	r3, [r7, #7]
 8008544:	79bb      	ldrb	r3, [r7, #6]
 8008546:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008548:	7abb      	ldrb	r3, [r7, #10]
 800854a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800854e:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008550:	75fb      	strb	r3, [r7, #23]
 8008552:	79bb      	ldrb	r3, [r7, #6]
 8008554:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008556:	7afb      	ldrb	r3, [r7, #11]
 8008558:	09db      	lsrs	r3, r3, #7
 800855a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800855c:	75bb      	strb	r3, [r7, #22]

  // TODO skip ready() check for now since enumeration also use this API
  // TU_VERIFY(tud_ready());

  TU_LOG_USBD("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);
 800855e:	79bb      	ldrb	r3, [r7, #6]
 8008560:	88ba      	ldrh	r2, [r7, #4]
 8008562:	4619      	mov	r1, r3
 8008564:	4831      	ldr	r0, [pc, #196]	@ (800862c <usbd_edpt_xfer+0x104>)
 8008566:	f003 f85d 	bl	800b624 <iprintf>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800856a:	7dfa      	ldrb	r2, [r7, #23]
 800856c:	7dbb      	ldrb	r3, [r7, #22]
 800856e:	4930      	ldr	r1, [pc, #192]	@ (8008630 <usbd_edpt_xfer+0x108>)
 8008570:	0052      	lsls	r2, r2, #1
 8008572:	440a      	add	r2, r1
 8008574:	4413      	add	r3, r2
 8008576:	3320      	adds	r3, #32
 8008578:	791b      	ldrb	r3, [r3, #4]
 800857a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	d010      	beq.n	80085a6 <usbd_edpt_xfer+0x7e>
 8008584:	f240 5239 	movw	r2, #1337	@ 0x539
 8008588:	492a      	ldr	r1, [pc, #168]	@ (8008634 <usbd_edpt_xfer+0x10c>)
 800858a:	482b      	ldr	r0, [pc, #172]	@ (8008638 <usbd_edpt_xfer+0x110>)
 800858c:	f003 f84a 	bl	800b624 <iprintf>
 8008590:	4b2a      	ldr	r3, [pc, #168]	@ (800863c <usbd_edpt_xfer+0x114>)
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	2b00      	cmp	r3, #0
 800859e:	d000      	beq.n	80085a2 <usbd_edpt_xfer+0x7a>
 80085a0:	be00      	bkpt	0x0000
 80085a2:	2300      	movs	r3, #0
 80085a4:	e03b      	b.n	800861e <usbd_edpt_xfer+0xf6>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80085a6:	7dfa      	ldrb	r2, [r7, #23]
 80085a8:	7dbb      	ldrb	r3, [r7, #22]
 80085aa:	4921      	ldr	r1, [pc, #132]	@ (8008630 <usbd_edpt_xfer+0x108>)
 80085ac:	0052      	lsls	r2, r2, #1
 80085ae:	440a      	add	r2, r1
 80085b0:	4413      	add	r3, r2
 80085b2:	f103 0220 	add.w	r2, r3, #32
 80085b6:	7913      	ldrb	r3, [r2, #4]
 80085b8:	f043 0301 	orr.w	r3, r3, #1
 80085bc:	7113      	strb	r3, [r2, #4]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 80085be:	88bb      	ldrh	r3, [r7, #4]
 80085c0:	79b9      	ldrb	r1, [r7, #6]
 80085c2:	79f8      	ldrb	r0, [r7, #7]
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	f002 f975 	bl	800a8b4 <dcd_edpt_xfer>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <usbd_edpt_xfer+0xac>
    return true;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e024      	b.n	800861e <usbd_edpt_xfer+0xf6>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 80085d4:	7dfa      	ldrb	r2, [r7, #23]
 80085d6:	7dbb      	ldrb	r3, [r7, #22]
 80085d8:	4915      	ldr	r1, [pc, #84]	@ (8008630 <usbd_edpt_xfer+0x108>)
 80085da:	0052      	lsls	r2, r2, #1
 80085dc:	440a      	add	r2, r1
 80085de:	4413      	add	r3, r2
 80085e0:	f103 0220 	add.w	r2, r3, #32
 80085e4:	7913      	ldrb	r3, [r2, #4]
 80085e6:	f36f 0300 	bfc	r3, #0, #1
 80085ea:	7113      	strb	r3, [r2, #4]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80085ec:	7dfa      	ldrb	r2, [r7, #23]
 80085ee:	7dbb      	ldrb	r3, [r7, #22]
 80085f0:	490f      	ldr	r1, [pc, #60]	@ (8008630 <usbd_edpt_xfer+0x108>)
 80085f2:	0052      	lsls	r2, r2, #1
 80085f4:	440a      	add	r2, r1
 80085f6:	4413      	add	r3, r2
 80085f8:	f103 0220 	add.w	r2, r3, #32
 80085fc:	7913      	ldrb	r3, [r2, #4]
 80085fe:	f36f 0382 	bfc	r3, #2, #1
 8008602:	7113      	strb	r3, [r2, #4]
    TU_LOG_USBD("FAILED\r\n");
 8008604:	480e      	ldr	r0, [pc, #56]	@ (8008640 <usbd_edpt_xfer+0x118>)
 8008606:	f003 f87d 	bl	800b704 <puts>
    TU_BREAKPOINT();
 800860a:	4b0c      	ldr	r3, [pc, #48]	@ (800863c <usbd_edpt_xfer+0x114>)
 800860c:	613b      	str	r3, [r7, #16]
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d000      	beq.n	800861c <usbd_edpt_xfer+0xf4>
 800861a:	be00      	bkpt	0x0000
    return false;
 800861c:	2300      	movs	r3, #0
  }
}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20000025 	.word	0x20000025
 800862c:	0800cc7c 	.word	0x0800cc7c
 8008630:	200005f4 	.word	0x200005f4
 8008634:	0800d0e0 	.word	0x0800d0e0
 8008638:	0800c9a8 	.word	0x0800c9a8
 800863c:	e000edf0 	.word	0xe000edf0
 8008640:	0800cca0 	.word	0x0800cca0

08008644 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	460a      	mov	r2, r1
 800864e:	71fb      	strb	r3, [r7, #7]
 8008650:	4613      	mov	r3, r2
 8008652:	71bb      	strb	r3, [r7, #6]
 8008654:	79bb      	ldrb	r3, [r7, #6]
 8008656:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008658:	7b3b      	ldrb	r3, [r7, #12]
 800865a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800865e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008660:	73fb      	strb	r3, [r7, #15]
 8008662:	79bb      	ldrb	r3, [r7, #6]
 8008664:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008666:	7b7b      	ldrb	r3, [r7, #13]
 8008668:	09db      	lsrs	r3, r3, #7
 800866a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800866c:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 800866e:	7bfa      	ldrb	r2, [r7, #15]
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	4909      	ldr	r1, [pc, #36]	@ (8008698 <usbd_edpt_busy+0x54>)
 8008674:	0052      	lsls	r2, r2, #1
 8008676:	440a      	add	r2, r1
 8008678:	4413      	add	r3, r2
 800867a:	3320      	adds	r3, #32
 800867c:	791b      	ldrb	r3, [r3, #4]
 800867e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b00      	cmp	r3, #0
 8008686:	bf14      	ite	ne
 8008688:	2301      	movne	r3, #1
 800868a:	2300      	moveq	r3, #0
 800868c:	b2db      	uxtb	r3, r3
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	bc80      	pop	{r7}
 8008696:	4770      	bx	lr
 8008698:	200005f4 	.word	0x200005f4

0800869c <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	460a      	mov	r2, r1
 80086a6:	71fb      	strb	r3, [r7, #7]
 80086a8:	4613      	mov	r3, r2
 80086aa:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80086ac:	4b1b      	ldr	r3, [pc, #108]	@ (800871c <usbd_edpt_stall+0x80>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	71fb      	strb	r3, [r7, #7]
 80086b2:	79bb      	ldrb	r3, [r7, #6]
 80086b4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80086b6:	7b3b      	ldrb	r3, [r7, #12]
 80086b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086bc:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	79bb      	ldrb	r3, [r7, #6]
 80086c2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80086c4:	7b7b      	ldrb	r3, [r7, #13]
 80086c6:	09db      	lsrs	r3, r3, #7
 80086c8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80086ca:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
 80086cc:	79bb      	ldrb	r3, [r7, #6]
 80086ce:	4619      	mov	r1, r3
 80086d0:	4813      	ldr	r0, [pc, #76]	@ (8008720 <usbd_edpt_stall+0x84>)
 80086d2:	f002 ffa7 	bl	800b624 <iprintf>
  dcd_edpt_stall(rhport, ep_addr);
 80086d6:	79ba      	ldrb	r2, [r7, #6]
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	4611      	mov	r1, r2
 80086dc:	4618      	mov	r0, r3
 80086de:	f002 f927 	bl	800a930 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 80086e2:	7bfa      	ldrb	r2, [r7, #15]
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	490f      	ldr	r1, [pc, #60]	@ (8008724 <usbd_edpt_stall+0x88>)
 80086e8:	0052      	lsls	r2, r2, #1
 80086ea:	440a      	add	r2, r1
 80086ec:	4413      	add	r3, r2
 80086ee:	f103 0220 	add.w	r2, r3, #32
 80086f2:	7913      	ldrb	r3, [r2, #4]
 80086f4:	f043 0302 	orr.w	r3, r3, #2
 80086f8:	7113      	strb	r3, [r2, #4]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80086fa:	7bfa      	ldrb	r2, [r7, #15]
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	4909      	ldr	r1, [pc, #36]	@ (8008724 <usbd_edpt_stall+0x88>)
 8008700:	0052      	lsls	r2, r2, #1
 8008702:	440a      	add	r2, r1
 8008704:	4413      	add	r3, r2
 8008706:	f103 0220 	add.w	r2, r3, #32
 800870a:	7913      	ldrb	r3, [r2, #4]
 800870c:	f043 0301 	orr.w	r3, r3, #1
 8008710:	7113      	strb	r3, [r2, #4]
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	20000025 	.word	0x20000025
 8008720:	0800ccdc 	.word	0x0800ccdc
 8008724:	200005f4 	.word	0x200005f4

08008728 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	4603      	mov	r3, r0
 8008730:	460a      	mov	r2, r1
 8008732:	71fb      	strb	r3, [r7, #7]
 8008734:	4613      	mov	r3, r2
 8008736:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008738:	4b1b      	ldr	r3, [pc, #108]	@ (80087a8 <usbd_edpt_clear_stall+0x80>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	71fb      	strb	r3, [r7, #7]
 800873e:	79bb      	ldrb	r3, [r7, #6]
 8008740:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008742:	7b3b      	ldrb	r3, [r7, #12]
 8008744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008748:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800874a:	73fb      	strb	r3, [r7, #15]
 800874c:	79bb      	ldrb	r3, [r7, #6]
 800874e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008750:	7b7b      	ldrb	r3, [r7, #13]
 8008752:	09db      	lsrs	r3, r3, #7
 8008754:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008756:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
 8008758:	79bb      	ldrb	r3, [r7, #6]
 800875a:	4619      	mov	r1, r3
 800875c:	4813      	ldr	r0, [pc, #76]	@ (80087ac <usbd_edpt_clear_stall+0x84>)
 800875e:	f002 ff61 	bl	800b624 <iprintf>
  dcd_edpt_clear_stall(rhport, ep_addr);
 8008762:	79ba      	ldrb	r2, [r7, #6]
 8008764:	79fb      	ldrb	r3, [r7, #7]
 8008766:	4611      	mov	r1, r2
 8008768:	4618      	mov	r0, r3
 800876a:	f002 f965 	bl	800aa38 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800876e:	7bfa      	ldrb	r2, [r7, #15]
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	490f      	ldr	r1, [pc, #60]	@ (80087b0 <usbd_edpt_clear_stall+0x88>)
 8008774:	0052      	lsls	r2, r2, #1
 8008776:	440a      	add	r2, r1
 8008778:	4413      	add	r3, r2
 800877a:	f103 0220 	add.w	r2, r3, #32
 800877e:	7913      	ldrb	r3, [r2, #4]
 8008780:	f36f 0341 	bfc	r3, #1, #1
 8008784:	7113      	strb	r3, [r2, #4]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008786:	7bfa      	ldrb	r2, [r7, #15]
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	4909      	ldr	r1, [pc, #36]	@ (80087b0 <usbd_edpt_clear_stall+0x88>)
 800878c:	0052      	lsls	r2, r2, #1
 800878e:	440a      	add	r2, r1
 8008790:	4413      	add	r3, r2
 8008792:	f103 0220 	add.w	r2, r3, #32
 8008796:	7913      	ldrb	r3, [r2, #4]
 8008798:	f36f 0300 	bfc	r3, #0, #1
 800879c:	7113      	strb	r3, [r2, #4]
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20000025 	.word	0x20000025
 80087ac:	0800ccf0 	.word	0x0800ccf0
 80087b0:	200005f4 	.word	0x200005f4

080087b4 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	4603      	mov	r3, r0
 80087bc:	460a      	mov	r2, r1
 80087be:	71fb      	strb	r3, [r7, #7]
 80087c0:	4613      	mov	r3, r2
 80087c2:	71bb      	strb	r3, [r7, #6]
 80087c4:	79bb      	ldrb	r3, [r7, #6]
 80087c6:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80087c8:	7b3b      	ldrb	r3, [r7, #12]
 80087ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ce:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80087d0:	73fb      	strb	r3, [r7, #15]
 80087d2:	79bb      	ldrb	r3, [r7, #6]
 80087d4:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80087d6:	7b7b      	ldrb	r3, [r7, #13]
 80087d8:	09db      	lsrs	r3, r3, #7
 80087da:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80087dc:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 80087de:	7bfa      	ldrb	r2, [r7, #15]
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
 80087e2:	4909      	ldr	r1, [pc, #36]	@ (8008808 <usbd_edpt_stalled+0x54>)
 80087e4:	0052      	lsls	r2, r2, #1
 80087e6:	440a      	add	r2, r1
 80087e8:	4413      	add	r3, r2
 80087ea:	3320      	adds	r3, #32
 80087ec:	791b      	ldrb	r3, [r3, #4]
 80087ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	bf14      	ite	ne
 80087f8:	2301      	movne	r3, #1
 80087fa:	2300      	moveq	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr
 8008808:	200005f4 	.word	0x200005f4

0800880c <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	6039      	str	r1, [r7, #0]
 8008816:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <status_stage_xact+0x1e>
 8008826:	2300      	movs	r3, #0
 8008828:	e000      	b.n	800882c <status_stage_xact+0x20>
 800882a:	2380      	movs	r3, #128	@ 0x80
 800882c:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800882e:	7bf9      	ldrb	r1, [r7, #15]
 8008830:	79f8      	ldrb	r0, [r7, #7]
 8008832:	2300      	movs	r3, #0
 8008834:	2200      	movs	r2, #0
 8008836:	f7ff fe77 	bl	8008528 <usbd_edpt_xfer>
 800883a:	4603      	mov	r3, r0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	6039      	str	r1, [r7, #0]
 800884e:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 8008850:	4b0b      	ldr	r3, [pc, #44]	@ (8008880 <tud_control_status+0x3c>)
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	6810      	ldr	r0, [r2, #0]
 8008856:	6851      	ldr	r1, [r2, #4]
 8008858:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800885a:	4b09      	ldr	r3, [pc, #36]	@ (8008880 <tud_control_status+0x3c>)
 800885c:	2200      	movs	r2, #0
 800885e:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008860:	4b07      	ldr	r3, [pc, #28]	@ (8008880 <tud_control_status+0x3c>)
 8008862:	2200      	movs	r2, #0
 8008864:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8008866:	4b06      	ldr	r3, [pc, #24]	@ (8008880 <tud_control_status+0x3c>)
 8008868:	2200      	movs	r2, #0
 800886a:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 800886c:	79fb      	ldrb	r3, [r7, #7]
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff ffcb 	bl	800880c <status_stage_xact>
 8008876:	4603      	mov	r3, r0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	200006f8 	.word	0x200006f8

08008884 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800888e:	4b24      	ldr	r3, [pc, #144]	@ (8008920 <data_stage_xact+0x9c>)
 8008890:	899a      	ldrh	r2, [r3, #12]
 8008892:	4b23      	ldr	r3, [pc, #140]	@ (8008920 <data_stage_xact+0x9c>)
 8008894:	89db      	ldrh	r3, [r3, #14]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	b29b      	uxth	r3, r3
 800889a:	837b      	strh	r3, [r7, #26]
 800889c:	2340      	movs	r3, #64	@ 0x40
 800889e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80088a0:	8b7a      	ldrh	r2, [r7, #26]
 80088a2:	8b3b      	ldrh	r3, [r7, #24]
 80088a4:	4293      	cmp	r3, r2
 80088a6:	bf28      	it	cs
 80088a8:	4613      	movcs	r3, r2
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 80088ae:	2300      	movs	r3, #0
 80088b0:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 80088b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008920 <data_stage_xact+0x9c>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d01e      	beq.n	80088fe <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 80088c0:	2380      	movs	r3, #128	@ 0x80
 80088c2:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 80088c4:	8bbb      	ldrh	r3, [r7, #28]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d019      	beq.n	80088fe <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 80088ca:	4b15      	ldr	r3, [pc, #84]	@ (8008920 <data_stage_xact+0x9c>)
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	8bbb      	ldrh	r3, [r7, #28]
 80088d0:	4914      	ldr	r1, [pc, #80]	@ (8008924 <data_stage_xact+0xa0>)
 80088d2:	6179      	str	r1, [r7, #20]
 80088d4:	2140      	movs	r1, #64	@ 0x40
 80088d6:	6139      	str	r1, [r7, #16]
 80088d8:	60fa      	str	r2, [r7, #12]
 80088da:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d202      	bcs.n	80088ea <data_stage_xact+0x66>
    return -1;
 80088e4:	f04f 33ff 	mov.w	r3, #4294967295
 80088e8:	e005      	b.n	80088f6 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	68f9      	ldr	r1, [r7, #12]
 80088ee:	6978      	ldr	r0, [r7, #20]
 80088f0:	f003 f897 	bl	800ba22 <memcpy>
  return 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <data_stage_xact+0x7a>
 80088fa:	2300      	movs	r3, #0
 80088fc:	e00b      	b.n	8008916 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 80088fe:	8bbb      	ldrh	r3, [r7, #28]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <data_stage_xact+0x84>
 8008904:	4a07      	ldr	r2, [pc, #28]	@ (8008924 <data_stage_xact+0xa0>)
 8008906:	e000      	b.n	800890a <data_stage_xact+0x86>
 8008908:	2200      	movs	r2, #0
 800890a:	8bbb      	ldrh	r3, [r7, #28]
 800890c:	7ff9      	ldrb	r1, [r7, #31]
 800890e:	79f8      	ldrb	r0, [r7, #7]
 8008910:	f7ff fe0a 	bl	8008528 <usbd_edpt_xfer>
 8008914:	4603      	mov	r3, r0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3720      	adds	r7, #32
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	200006f8 	.word	0x200006f8
 8008924:	2000070c 	.word	0x2000070c

08008928 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 8008928:	b580      	push	{r7, lr}
 800892a:	b088      	sub	sp, #32
 800892c:	af00      	add	r7, sp, #0
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	607a      	str	r2, [r7, #4]
 8008932:	461a      	mov	r2, r3
 8008934:	4603      	mov	r3, r0
 8008936:	73fb      	strb	r3, [r7, #15]
 8008938:	4613      	mov	r3, r2
 800893a:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 800893c:	4b37      	ldr	r3, [pc, #220]	@ (8008a1c <tud_control_xfer+0xf4>)
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	6810      	ldr	r0, [r2, #0]
 8008942:	6851      	ldr	r1, [r2, #4]
 8008944:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8008946:	4a35      	ldr	r2, [pc, #212]	@ (8008a1c <tud_control_xfer+0xf4>)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 800894c:	4b33      	ldr	r3, [pc, #204]	@ (8008a1c <tud_control_xfer+0xf4>)
 800894e:	2200      	movs	r2, #0
 8008950:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	88db      	ldrh	r3, [r3, #6]
 8008956:	b29a      	uxth	r2, r3
 8008958:	89bb      	ldrh	r3, [r7, #12]
 800895a:	827b      	strh	r3, [r7, #18]
 800895c:	4613      	mov	r3, r2
 800895e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008960:	8a7a      	ldrh	r2, [r7, #18]
 8008962:	8a3b      	ldrh	r3, [r7, #16]
 8008964:	4293      	cmp	r3, r2
 8008966:	bf28      	it	cs
 8008968:	4613      	movcs	r3, r2
 800896a:	b29a      	uxth	r2, r3
 800896c:	4b2b      	ldr	r3, [pc, #172]	@ (8008a1c <tud_control_xfer+0xf4>)
 800896e:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	88db      	ldrh	r3, [r3, #6]
 8008974:	b29b      	uxth	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d030      	beq.n	80089dc <tud_control_xfer+0xb4>
    if (_ctrl_xfer.data_len > 0U) {
 800897a:	4b28      	ldr	r3, [pc, #160]	@ (8008a1c <tud_control_xfer+0xf4>)
 800897c:	899b      	ldrh	r3, [r3, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d012      	beq.n	80089a8 <tud_control_xfer+0x80>
      TU_ASSERT(buffer);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10f      	bne.n	80089a8 <tud_control_xfer+0x80>
 8008988:	2272      	movs	r2, #114	@ 0x72
 800898a:	4925      	ldr	r1, [pc, #148]	@ (8008a20 <tud_control_xfer+0xf8>)
 800898c:	4825      	ldr	r0, [pc, #148]	@ (8008a24 <tud_control_xfer+0xfc>)
 800898e:	f002 fe49 	bl	800b624 <iprintf>
 8008992:	4b25      	ldr	r3, [pc, #148]	@ (8008a28 <tud_control_xfer+0x100>)
 8008994:	61bb      	str	r3, [r7, #24]
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d000      	beq.n	80089a4 <tud_control_xfer+0x7c>
 80089a2:	be00      	bkpt	0x0000
 80089a4:	2300      	movs	r3, #0
 80089a6:	e035      	b.n	8008a14 <tud_control_xfer+0xec>
    }
    TU_ASSERT(data_stage_xact(rhport));
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7ff ff6a 	bl	8008884 <data_stage_xact>
 80089b0:	4603      	mov	r3, r0
 80089b2:	f083 0301 	eor.w	r3, r3, #1
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d02a      	beq.n	8008a12 <tud_control_xfer+0xea>
 80089bc:	2274      	movs	r2, #116	@ 0x74
 80089be:	4918      	ldr	r1, [pc, #96]	@ (8008a20 <tud_control_xfer+0xf8>)
 80089c0:	4818      	ldr	r0, [pc, #96]	@ (8008a24 <tud_control_xfer+0xfc>)
 80089c2:	f002 fe2f 	bl	800b624 <iprintf>
 80089c6:	4b18      	ldr	r3, [pc, #96]	@ (8008a28 <tud_control_xfer+0x100>)
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d000      	beq.n	80089d8 <tud_control_xfer+0xb0>
 80089d6:	be00      	bkpt	0x0000
 80089d8:	2300      	movs	r3, #0
 80089da:	e01b      	b.n	8008a14 <tud_control_xfer+0xec>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	68b9      	ldr	r1, [r7, #8]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff ff13 	bl	800880c <status_stage_xact>
 80089e6:	4603      	mov	r3, r0
 80089e8:	f083 0301 	eor.w	r3, r3, #1
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00f      	beq.n	8008a12 <tud_control_xfer+0xea>
 80089f2:	2276      	movs	r2, #118	@ 0x76
 80089f4:	490a      	ldr	r1, [pc, #40]	@ (8008a20 <tud_control_xfer+0xf8>)
 80089f6:	480b      	ldr	r0, [pc, #44]	@ (8008a24 <tud_control_xfer+0xfc>)
 80089f8:	f002 fe14 	bl	800b624 <iprintf>
 80089fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008a28 <tud_control_xfer+0x100>)
 80089fe:	61fb      	str	r3, [r7, #28]
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d000      	beq.n	8008a0e <tud_control_xfer+0xe6>
 8008a0c:	be00      	bkpt	0x0000
 8008a0e:	2300      	movs	r3, #0
 8008a10:	e000      	b.n	8008a14 <tud_control_xfer+0xec>
  }

  return true;
 8008a12:	2301      	movs	r3, #1
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3720      	adds	r7, #32
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	200006f8 	.word	0x200006f8
 8008a20:	0800d0f0 	.word	0x0800d0f0
 8008a24:	0800cd0c 	.word	0x0800cd0c
 8008a28:	e000edf0 	.word	0xe000edf0

08008a2c <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8008a30:	2214      	movs	r2, #20
 8008a32:	2100      	movs	r1, #0
 8008a34:	4802      	ldr	r0, [pc, #8]	@ (8008a40 <usbd_control_reset+0x14>)
 8008a36:	f002 ff79 	bl	800b92c <memset>
}
 8008a3a:	bf00      	nop
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	200006f8 	.word	0x200006f8

08008a44 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8008a4c:	4a03      	ldr	r2, [pc, #12]	@ (8008a5c <usbd_control_set_complete_callback+0x18>)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6113      	str	r3, [r2, #16]
}
 8008a52:	bf00      	nop
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc80      	pop	{r7}
 8008a5a:	4770      	bx	lr
 8008a5c:	200006f8 	.word	0x200006f8

08008a60 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 8008a68:	4b09      	ldr	r3, [pc, #36]	@ (8008a90 <usbd_control_set_request+0x30>)
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	6810      	ldr	r0, [r2, #0]
 8008a6e:	6851      	ldr	r1, [r2, #4]
 8008a70:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8008a72:	4b07      	ldr	r3, [pc, #28]	@ (8008a90 <usbd_control_set_request+0x30>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008a78:	4b05      	ldr	r3, [pc, #20]	@ (8008a90 <usbd_control_set_request+0x30>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8008a7e:	4b04      	ldr	r3, [pc, #16]	@ (8008a90 <usbd_control_set_request+0x30>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	819a      	strh	r2, [r3, #12]
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bc80      	pop	{r7}
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	200006f8 	.word	0x200006f8

08008a94 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b088      	sub	sp, #32
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	603b      	str	r3, [r7, #0]
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	71fb      	strb	r3, [r7, #7]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	71bb      	strb	r3, [r7, #6]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	717b      	strb	r3, [r7, #5]
 8008aa8:	79bb      	ldrb	r3, [r7, #6]
 8008aaa:	73fb      	strb	r3, [r7, #15]
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	09db      	lsrs	r3, r3, #7
 8008ab0:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 8008ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008ab4:	7812      	ldrb	r2, [r2, #0]
 8008ab6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d023      	beq.n	8008b08 <usbd_control_xfer_cb+0x74>
    TU_ASSERT(0 == xferred_bytes);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00f      	beq.n	8008ae6 <usbd_control_xfer_cb+0x52>
 8008ac6:	229d      	movs	r2, #157	@ 0x9d
 8008ac8:	4957      	ldr	r1, [pc, #348]	@ (8008c28 <usbd_control_xfer_cb+0x194>)
 8008aca:	4858      	ldr	r0, [pc, #352]	@ (8008c2c <usbd_control_xfer_cb+0x198>)
 8008acc:	f002 fdaa 	bl	800b624 <iprintf>
 8008ad0:	4b57      	ldr	r3, [pc, #348]	@ (8008c30 <usbd_control_xfer_cb+0x19c>)
 8008ad2:	613b      	str	r3, [r7, #16]
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d000      	beq.n	8008ae2 <usbd_control_xfer_cb+0x4e>
 8008ae0:	be00      	bkpt	0x0000
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e09a      	b.n	8008c1c <usbd_control_xfer_cb+0x188>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	494e      	ldr	r1, [pc, #312]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 ffce 	bl	8009a8c <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8008af0:	4b4c      	ldr	r3, [pc, #304]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d005      	beq.n	8008b04 <usbd_control_xfer_cb+0x70>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8008af8:	4b4a      	ldr	r3, [pc, #296]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	79f8      	ldrb	r0, [r7, #7]
 8008afe:	4a49      	ldr	r2, [pc, #292]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b00:	2103      	movs	r1, #3
 8008b02:	4798      	blx	r3
    }

    return true;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e089      	b.n	8008c1c <usbd_control_xfer_cb+0x188>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 8008b08:	4b46      	ldr	r3, [pc, #280]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d113      	bne.n	8008b3e <usbd_control_xfer_cb+0xaa>
    TU_VERIFY(_ctrl_xfer.buffer);
 8008b16:	4b43      	ldr	r3, [pc, #268]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <usbd_control_xfer_cb+0x8e>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e07c      	b.n	8008c1c <usbd_control_xfer_cb+0x188>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8008b22:	4b40      	ldr	r3, [pc, #256]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	4942      	ldr	r1, [pc, #264]	@ (8008c34 <usbd_control_xfer_cb+0x1a0>)
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f002 ff79 	bl	800ba22 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
 8008b30:	4b3c      	ldr	r3, [pc, #240]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	2202      	movs	r2, #2
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f002 fbe3 	bl	800b304 <tu_print_mem>
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8008b3e:	4b39      	ldr	r3, [pc, #228]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b40:	89da      	ldrh	r2, [r3, #14]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	4413      	add	r3, r2
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	4b36      	ldr	r3, [pc, #216]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b4c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8008b4e:	4b35      	ldr	r3, [pc, #212]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b50:	689a      	ldr	r2, [r3, #8]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	4413      	add	r3, r2
 8008b56:	4a33      	ldr	r2, [pc, #204]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b58:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 8008b5a:	4b32      	ldr	r3, [pc, #200]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b5c:	88da      	ldrh	r2, [r3, #6]
 8008b5e:	4b31      	ldr	r3, [pc, #196]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b60:	89db      	ldrh	r3, [r3, #14]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d002      	beq.n	8008b6c <usbd_control_xfer_cb+0xd8>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b3f      	cmp	r3, #63	@ 0x3f
 8008b6a:	d83b      	bhi.n	8008be4 <usbd_control_xfer_cb+0x150>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8008b70:	4b2c      	ldr	r3, [pc, #176]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00c      	beq.n	8008b92 <usbd_control_xfer_cb+0xfe>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
 8008b78:	4b2a      	ldr	r3, [pc, #168]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fd ff8f 	bl	8006aa0 <usbd_driver_print_control_complete_name>
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8008b82:	4b28      	ldr	r3, [pc, #160]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	79f8      	ldrb	r0, [r7, #7]
 8008b88:	4a26      	ldr	r2, [pc, #152]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b8a:	2102      	movs	r1, #2
 8008b8c:	4798      	blx	r3
 8008b8e:	4603      	mov	r3, r0
 8008b90:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 8008b92:	7ffb      	ldrb	r3, [r7, #31]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d01a      	beq.n	8008bce <usbd_control_xfer_cb+0x13a>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	4922      	ldr	r1, [pc, #136]	@ (8008c24 <usbd_control_xfer_cb+0x190>)
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff fe35 	bl	800880c <status_stage_xact>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	f083 0301 	eor.w	r3, r3, #1
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d034      	beq.n	8008c18 <usbd_control_xfer_cb+0x184>
 8008bae:	22c5      	movs	r2, #197	@ 0xc5
 8008bb0:	491d      	ldr	r1, [pc, #116]	@ (8008c28 <usbd_control_xfer_cb+0x194>)
 8008bb2:	481e      	ldr	r0, [pc, #120]	@ (8008c2c <usbd_control_xfer_cb+0x198>)
 8008bb4:	f002 fd36 	bl	800b624 <iprintf>
 8008bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8008c30 <usbd_control_xfer_cb+0x19c>)
 8008bba:	617b      	str	r3, [r7, #20]
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0301 	and.w	r3, r3, #1
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d000      	beq.n	8008bca <usbd_control_xfer_cb+0x136>
 8008bc8:	be00      	bkpt	0x0000
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e026      	b.n	8008c1c <usbd_control_xfer_cb+0x188>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8008bce:	79fb      	ldrb	r3, [r7, #7]
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 feac 	bl	800a930 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8008bd8:	79fb      	ldrb	r3, [r7, #7]
 8008bda:	2180      	movs	r1, #128	@ 0x80
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f001 fea7 	bl	800a930 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8008be2:	e019      	b.n	8008c18 <usbd_control_xfer_cb+0x184>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff fe4c 	bl	8008884 <data_stage_xact>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f083 0301 	eor.w	r3, r3, #1
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d010      	beq.n	8008c1a <usbd_control_xfer_cb+0x186>
 8008bf8:	22cd      	movs	r2, #205	@ 0xcd
 8008bfa:	490b      	ldr	r1, [pc, #44]	@ (8008c28 <usbd_control_xfer_cb+0x194>)
 8008bfc:	480b      	ldr	r0, [pc, #44]	@ (8008c2c <usbd_control_xfer_cb+0x198>)
 8008bfe:	f002 fd11 	bl	800b624 <iprintf>
 8008c02:	4b0b      	ldr	r3, [pc, #44]	@ (8008c30 <usbd_control_xfer_cb+0x19c>)
 8008c04:	61bb      	str	r3, [r7, #24]
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d000      	beq.n	8008c14 <usbd_control_xfer_cb+0x180>
 8008c12:	be00      	bkpt	0x0000
 8008c14:	2300      	movs	r3, #0
 8008c16:	e001      	b.n	8008c1c <usbd_control_xfer_cb+0x188>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8008c18:	bf00      	nop
  }

  return true;
 8008c1a:	2301      	movs	r3, #1
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3720      	adds	r7, #32
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	200006f8 	.word	0x200006f8
 8008c28:	0800d104 	.word	0x0800d104
 8008c2c:	0800cd0c 	.word	0x0800cd0c
 8008c30:	e000edf0 	.word	0xe000edf0
 8008c34:	2000070c 	.word	0x2000070c

08008c38 <__NVIC_EnableIRQ>:
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	db0b      	blt.n	8008c62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c4a:	79fb      	ldrb	r3, [r7, #7]
 8008c4c:	f003 021f 	and.w	r2, r3, #31
 8008c50:	4906      	ldr	r1, [pc, #24]	@ (8008c6c <__NVIC_EnableIRQ+0x34>)
 8008c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c56:	095b      	lsrs	r3, r3, #5
 8008c58:	2001      	movs	r0, #1
 8008c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8008c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008c62:	bf00      	nop
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bc80      	pop	{r7}
 8008c6a:	4770      	bx	lr
 8008c6c:	e000e100 	.word	0xe000e100

08008c70 <__NVIC_DisableIRQ>:
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4603      	mov	r3, r0
 8008c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	db12      	blt.n	8008ca8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c82:	79fb      	ldrb	r3, [r7, #7]
 8008c84:	f003 021f 	and.w	r2, r3, #31
 8008c88:	490a      	ldr	r1, [pc, #40]	@ (8008cb4 <__NVIC_DisableIRQ+0x44>)
 8008c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c8e:	095b      	lsrs	r3, r3, #5
 8008c90:	2001      	movs	r0, #1
 8008c92:	fa00 f202 	lsl.w	r2, r0, r2
 8008c96:	3320      	adds	r3, #32
 8008c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008c9c:	f3bf 8f4f 	dsb	sy
}
 8008ca0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008ca2:	f3bf 8f6f 	isb	sy
}
 8008ca6:	bf00      	nop
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	e000e100 	.word	0xe000e100

08008cb8 <dcd_int_enable>:
    #error Unknown arch in USB driver
  #endif
};
enum { FSDEV_IRQ_NUM = TU_ARRAY_SIZE(fsdev_irq) };

void dcd_int_enable(uint8_t rhport) {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("dsb 0xF":::"memory");
 8008cc2:	f3bf 8f4f 	dsb	sy
}
 8008cc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008cc8:	f3bf 8f6f 	isb	sy
}
 8008ccc:	bf00      	nop
    NVIC_EnableIRQ(USB_LP_IRQn);
    NVIC_EnableIRQ(USBWakeUp_RMP_IRQn);
  } else
  #endif
  {
    for (uint8_t i = 0; i < FSDEV_IRQ_NUM; i++) {
 8008cce:	2300      	movs	r3, #0
 8008cd0:	73fb      	strb	r3, [r7, #15]
 8008cd2:	e008      	b.n	8008ce6 <dcd_int_enable+0x2e>
      NVIC_EnableIRQ(fsdev_irq[i]);
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	4a08      	ldr	r2, [pc, #32]	@ (8008cf8 <dcd_int_enable+0x40>)
 8008cd8:	56d3      	ldrsb	r3, [r2, r3]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7ff ffac 	bl	8008c38 <__NVIC_EnableIRQ>
    for (uint8_t i = 0; i < FSDEV_IRQ_NUM; i++) {
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	73fb      	strb	r3, [r7, #15]
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d9f3      	bls.n	8008cd4 <dcd_int_enable+0x1c>
    }
  }
}
 8008cec:	bf00      	nop
 8008cee:	bf00      	nop
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	0800d11c 	.word	0x0800d11c

08008cfc <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ(USB_LP_IRQn);
    NVIC_DisableIRQ(USBWakeUp_RMP_IRQn);
  } else
  #endif
  {
    for (uint8_t i = 0; i < FSDEV_IRQ_NUM; i++) {
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]
 8008d0a:	e008      	b.n	8008d1e <dcd_int_disable+0x22>
      NVIC_DisableIRQ(fsdev_irq[i]);
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	4a08      	ldr	r2, [pc, #32]	@ (8008d30 <dcd_int_disable+0x34>)
 8008d10:	56d3      	ldrsb	r3, [r2, r3]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7ff ffac 	bl	8008c70 <__NVIC_DisableIRQ>
    for (uint8_t i = 0; i < FSDEV_IRQ_NUM; i++) {
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	73fb      	strb	r3, [r7, #15]
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d9f3      	bls.n	8008d0c <dcd_int_disable+0x10>
    }
  }

  // CMSIS has a membar after disabling interrupts
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	0800d11c 	.word	0x0800d11c

08008d34 <dcd_init>:
}

//--------------------------------------------------------------------+
// Controller API
//--------------------------------------------------------------------+
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08a      	sub	sp, #40	@ 0x28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	6039      	str	r1, [r7, #0]
 8008d3e:	71fb      	strb	r3, [r7, #7]
  (void) rh_init;
  // Follow the RM mentions to use a special ordering of PDWN and FRES
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008d40:	2300      	movs	r3, #0
 8008d42:	617b      	str	r3, [r7, #20]
 8008d44:	e003      	b.n	8008d4e <dcd_init+0x1a>
    asm("NOP");
 8008d46:	bf00      	nop
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	617b      	str	r3, [r7, #20]
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d52:	d9f8      	bls.n	8008d46 <dcd_init+0x12>
  }

  // Perform USB peripheral reset
  FSDEV_REG->CNTR = USB_CNTR_FRES | USB_CNTR_PDWN;
 8008d54:	4b33      	ldr	r3, [pc, #204]	@ (8008e24 <dcd_init+0xf0>)
 8008d56:	2203      	movs	r2, #3
 8008d58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	613b      	str	r3, [r7, #16]
 8008d60:	e003      	b.n	8008d6a <dcd_init+0x36>
    asm("NOP");
 8008d62:	bf00      	nop
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	3301      	adds	r3, #1
 8008d68:	613b      	str	r3, [r7, #16]
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d6e:	d9f8      	bls.n	8008d62 <dcd_init+0x2e>
  }

  FSDEV_REG->CNTR &= ~USB_CNTR_PDWN;
 8008d70:	4b2c      	ldr	r3, [pc, #176]	@ (8008e24 <dcd_init+0xf0>)
 8008d72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	4a2a      	ldr	r2, [pc, #168]	@ (8008e24 <dcd_init+0xf0>)
 8008d7a:	f023 0302 	bic.w	r3, r3, #2
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40

  // Wait startup time, for F042 and F070, this is <= 1 us.
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008d84:	2300      	movs	r3, #0
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	e003      	b.n	8008d92 <dcd_init+0x5e>
    asm("NOP");
 8008d8a:	bf00      	nop
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d96:	d9f8      	bls.n	8008d8a <dcd_init+0x56>
  }
  FSDEV_REG->CNTR = 0; // Enable USB
 8008d98:	4b22      	ldr	r3, [pc, #136]	@ (8008e24 <dcd_init+0xf0>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if !defined(FSDEV_BUS_32BIT)
  // BTABLE register does not exist any more on 32-bit bus devices
  FSDEV_REG->BTABLE = FSDEV_BTABLE_BASE;
 8008da0:	4b20      	ldr	r3, [pc, #128]	@ (8008e24 <dcd_init+0xf0>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
#endif

  FSDEV_REG->ISTR = 0; // Clear pending interrupts
 8008da8:	4b1e      	ldr	r3, [pc, #120]	@ (8008e24 <dcd_init+0xf0>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  // Reset endpoints to disabled
  for (uint32_t i = 0; i < FSDEV_EP_COUNT; i++) {
 8008db0:	2300      	movs	r3, #0
 8008db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008db4:	e01b      	b.n	8008dee <dcd_init+0xba>
 8008db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db8:	623b      	str	r3, [r7, #32]
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61fb      	str	r3, [r7, #28]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline uint32_t ep_read(uint32_t ep_id) {
  return FSDEV_REG->ep[ep_id].reg;
}

TU_ATTR_ALWAYS_INLINE static inline void ep_write(uint32_t ep_id, uint32_t value, bool need_exclusive) {
  if (need_exclusive) {
 8008dc2:	7efb      	ldrb	r3, [r7, #27]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <dcd_init+0x9a>
    dcd_int_disable(0);
 8008dc8:	2000      	movs	r0, #0
 8008dca:	f7ff ff97 	bl	8008cfc <dcd_int_disable>
  }

  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8008dce:	4a15      	ldr	r2, [pc, #84]	@ (8008e24 <dcd_init+0xf0>)
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	b299      	uxth	r1, r3
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]

  if (need_exclusive) {
 8008dda:	7efb      	ldrb	r3, [r7, #27]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <dcd_init+0xb2>
    dcd_int_enable(0);
 8008de0:	2000      	movs	r0, #0
 8008de2:	f7ff ff69 	bl	8008cb8 <dcd_int_enable>
  }
}
 8008de6:	bf00      	nop
 8008de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dea:	3301      	adds	r3, #1
 8008dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df0:	2b07      	cmp	r3, #7
 8008df2:	d9e0      	bls.n	8008db6 <dcd_init+0x82>
    // This doesn't clear all bits since some bits are "toggle", but does set the type to DISABLED.
    ep_write(i, 0u, false);
  }

  FSDEV_REG->CNTR |= USB_CNTR_RESETM | USB_CNTR_ESOFM | USB_CNTR_CTRM |
 8008df4:	4b0b      	ldr	r3, [pc, #44]	@ (8008e24 <dcd_init+0xf0>)
 8008df6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	4909      	ldr	r1, [pc, #36]	@ (8008e24 <dcd_init+0xf0>)
 8008dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8008e28 <dcd_init+0xf4>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f8a1 3040 	strh.w	r3, [r1, #64]	@ 0x40
      USB_CNTR_SUSPM | USB_CNTR_WKUPM | USB_CNTR_PMAOVRM;
  handle_bus_reset(rhport);
 8008e08:	79fb      	ldrb	r3, [r7, #7]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 f864 	bl	8008ed8 <handle_bus_reset>

  // Enable pull-up if supported
  dcd_connect(rhport);
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fd fe39 	bl	8006a8a <dcd_connect>

  return true;
 8008e18:	2301      	movs	r3, #1
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3728      	adds	r7, #40	@ 0x28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	40005c00 	.word	0x40005c00
 8008e28:	ffffdd00 	.word	0xffffdd00

08008e2c <dcd_sof_enable>:

void dcd_sof_enable(uint8_t rhport, bool en) {
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	460a      	mov	r2, r1
 8008e36:	71fb      	strb	r3, [r7, #7]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	71bb      	strb	r3, [r7, #6]
  (void)rhport;

  if (en) {
 8008e3c:	79bb      	ldrb	r3, [r7, #6]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <dcd_sof_enable+0x2c>
    FSDEV_REG->CNTR |= USB_CNTR_SOFM;
 8008e42:	4b0d      	ldr	r3, [pc, #52]	@ (8008e78 <dcd_sof_enable+0x4c>)
 8008e44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8008e78 <dcd_sof_enable+0x4c>)
 8008e4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
  } else {
    FSDEV_REG->CNTR &= ~USB_CNTR_SOFM;
  }
}
 8008e56:	e009      	b.n	8008e6c <dcd_sof_enable+0x40>
    FSDEV_REG->CNTR &= ~USB_CNTR_SOFM;
 8008e58:	4b07      	ldr	r3, [pc, #28]	@ (8008e78 <dcd_sof_enable+0x4c>)
 8008e5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	4a05      	ldr	r2, [pc, #20]	@ (8008e78 <dcd_sof_enable+0x4c>)
 8008e62:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bc80      	pop	{r7}
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	40005c00 	.word	0x40005c00

08008e7c <dcd_set_address>:

// Receive Set Address request, mcu port must also include status IN response
void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	460a      	mov	r2, r1
 8008e86:	71fb      	strb	r3, [r7, #7]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	71bb      	strb	r3, [r7, #6]
  (void)dev_addr;

  // Respond with status
  dcd_edpt_xfer(rhport, TUSB_DIR_IN_MASK | 0x00, NULL, 0);
 8008e8c:	79f8      	ldrb	r0, [r7, #7]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	2200      	movs	r2, #0
 8008e92:	2180      	movs	r1, #128	@ 0x80
 8008e94:	f001 fd0e 	bl	800a8b4 <dcd_edpt_xfer>

  // DCD can only set address after status for this request is complete.
  // do it at dcd_edpt0_status_complete()
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	71fb      	strb	r3, [r7, #7]
  (void)rhport;

  FSDEV_REG->CNTR |= USB_CNTR_RESUME;
 8008eaa:	4b09      	ldr	r3, [pc, #36]	@ (8008ed0 <dcd_remote_wakeup+0x30>)
 8008eac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	4a07      	ldr	r2, [pc, #28]	@ (8008ed0 <dcd_remote_wakeup+0x30>)
 8008eb4:	f043 0310 	orr.w	r3, r3, #16
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
  remoteWakeCountdown = 4u; // required to be 1 to 15 ms, ESOF should trigger every 1ms.
 8008ebe:	4b05      	ldr	r3, [pc, #20]	@ (8008ed4 <dcd_remote_wakeup+0x34>)
 8008ec0:	2204      	movs	r2, #4
 8008ec2:	701a      	strb	r2, [r3, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bc80      	pop	{r7}
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	40005c00 	.word	0x40005c00
 8008ed4:	2000086c 	.word	0x2000086c

08008ed8 <handle_bus_reset>:

static void handle_bus_reset(uint8_t rhport) {
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	71fb      	strb	r3, [r7, #7]
  FSDEV_REG->DADDR = 0u; // disable USB Function
 8008ee2:	4b19      	ldr	r3, [pc, #100]	@ (8008f48 <handle_bus_reset+0x70>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  for (uint32_t i = 0; i < FSDEV_EP_COUNT; i++) {
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	e019      	b.n	8008f24 <handle_bus_reset+0x4c>
    // Clear EP allocation status
    ep_alloc_status[i].ep_num = 0xFF;
 8008ef0:	4a16      	ldr	r2, [pc, #88]	@ (8008f4c <handle_bus_reset+0x74>)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	21ff      	movs	r1, #255	@ 0xff
 8008ef6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    ep_alloc_status[i].ep_type = 0xFF;
 8008efa:	4a14      	ldr	r2, [pc, #80]	@ (8008f4c <handle_bus_reset+0x74>)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4413      	add	r3, r2
 8008f02:	22ff      	movs	r2, #255	@ 0xff
 8008f04:	705a      	strb	r2, [r3, #1]
    ep_alloc_status[i].allocated[0] = false;
 8008f06:	4a11      	ldr	r2, [pc, #68]	@ (8008f4c <handle_bus_reset+0x74>)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	2200      	movs	r2, #0
 8008f10:	709a      	strb	r2, [r3, #2]
    ep_alloc_status[i].allocated[1] = false;
 8008f12:	4a0e      	ldr	r2, [pc, #56]	@ (8008f4c <handle_bus_reset+0x74>)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	70da      	strb	r2, [r3, #3]
  for (uint32_t i = 0; i < FSDEV_EP_COUNT; i++) {
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	3301      	adds	r3, #1
 8008f22:	60fb      	str	r3, [r7, #12]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b07      	cmp	r3, #7
 8008f28:	d9e2      	bls.n	8008ef0 <handle_bus_reset+0x18>
  }

  // Reset PMA allocation
  ep_buf_ptr = FSDEV_BTABLE_BASE + 8 * FSDEV_EP_COUNT;
 8008f2a:	4b09      	ldr	r3, [pc, #36]	@ (8008f50 <handle_bus_reset+0x78>)
 8008f2c:	2240      	movs	r2, #64	@ 0x40
 8008f2e:	801a      	strh	r2, [r3, #0]

  edpt0_open(rhport); // open control endpoint (both IN & OUT)
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 ff58 	bl	8009de8 <edpt0_open>

  FSDEV_REG->DADDR = USB_DADDR_EF; // Enable USB Function
 8008f38:	4b03      	ldr	r3, [pc, #12]	@ (8008f48 <handle_bus_reset+0x70>)
 8008f3a:	2280      	movs	r2, #128	@ 0x80
 8008f3c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 8008f40:	bf00      	nop
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	40005c00 	.word	0x40005c00
 8008f4c:	2000084c 	.word	0x2000084c
 8008f50:	2000086e 	.word	0x2000086e

08008f54 <handle_ctr_tx>:

// Handle CTR interrupt for the TX/IN direction
static void handle_ctr_tx(uint32_t ep_id) {
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b092      	sub	sp, #72	@ 0x48
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return FSDEV_REG->ep[ep_id].reg;
 8008f60:	4a50      	ldr	r2, [pc, #320]	@ (80090a4 <handle_ctr_tx+0x150>)
 8008f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f64:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8008f68:	b29b      	uxth	r3, r3
  uint32_t ep_reg = ep_read(ep_id) | USB_EP_CTR_TX | USB_EP_CTR_RX;
 8008f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f72:	647b      	str	r3, [r7, #68]	@ 0x44

  uint8_t const ep_num = ep_reg & USB_EPADDR_FIELD;
 8008f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008f88:	2301      	movs	r3, #1
 8008f8a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  return &xfer_status[epnum][dir];
 8008f8e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008f92:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008f96:	0052      	lsls	r2, r2, #1
 8008f98:	4413      	add	r3, r2
 8008f9a:	011b      	lsls	r3, r3, #4
 8008f9c:	4a42      	ldr	r2, [pc, #264]	@ (80090a8 <handle_ctr_tx+0x154>)
 8008f9e:	4413      	add	r3, r2
  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, TUSB_DIR_IN);
 8008fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fa4:	637b      	str	r3, [r7, #52]	@ 0x34
TU_ATTR_ALWAYS_INLINE static inline void ep_change_dtog(uint32_t* reg, tusb_dir_t dir, uint8_t state) {
  *reg ^= (state << (USB_EP_DTOG_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
}

TU_ATTR_ALWAYS_INLINE static inline bool ep_is_iso(uint32_t reg) {
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 8008fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fb0:	bf0c      	ite	eq
 8008fb2:	2301      	moveq	r3, #1
 8008fb4:	2300      	movne	r3, #0
 8008fb6:	b2db      	uxtb	r3, r3

  if (ep_is_iso(ep_reg)) {
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d03c      	beq.n	8009036 <handle_ctr_tx+0xe2>
    // Ignore spurious interrupts that we don't schedule
    // host can send IN token while there is no data to send, since ISO does not have NAK
    // this will result to zero length packet --> trigger interrupt (which cannot be masked)
    if (!xfer->iso_in_sending) {
 8008fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fbe:	7bdb      	ldrb	r3, [r3, #15]
 8008fc0:	f083 0301 	eor.w	r3, r3, #1
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d167      	bne.n	800909a <handle_ctr_tx+0x146>
      return;
    }
    xfer->iso_in_sending = false;
 8008fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fcc:	2200      	movs	r2, #0
 8008fce:	73da      	strb	r2, [r3, #15]
    uint8_t buf_id = (ep_reg & USB_EP_DTOG_TX) ? 0 : 1;
 8008fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	bf0c      	ite	eq
 8008fda:	2301      	moveq	r3, #1
 8008fdc:	2300      	movne	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fe8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8008fec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	84bb      	strh	r3, [r7, #36]	@ 0x24
#ifdef FSDEV_BUS_32BIT
  uint32_t count_addr = FSDEV_BTABLE->ep32[ep_id][buf_id].count_addr;
  count_addr = (count_addr & ~0x03FF0000u) | ((byte_count & 0x3FFu) << 16);
  FSDEV_BTABLE->ep32[ep_id][buf_id].count_addr = count_addr;
#else
  uint16_t cnt = FSDEV_BTABLE->ep16[ep_id][buf_id].count;
 8008ff4:	492d      	ldr	r1, [pc, #180]	@ (80090ac <handle_ctr_tx+0x158>)
 8008ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ffc:	0052      	lsls	r2, r2, #1
 8008ffe:	4413      	add	r3, r2
 8009000:	00db      	lsls	r3, r3, #3
 8009002:	440b      	add	r3, r1
 8009004:	889b      	ldrh	r3, [r3, #4]
 8009006:	847b      	strh	r3, [r7, #34]	@ 0x22
  cnt = (cnt & ~0x3FFU) | (byte_count & 0x3FFU);
 8009008:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800900a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800900e:	f023 0303 	bic.w	r3, r3, #3
 8009012:	b29a      	uxth	r2, r3
 8009014:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800901a:	b29b      	uxth	r3, r3
 800901c:	4313      	orrs	r3, r2
 800901e:	847b      	strh	r3, [r7, #34]	@ 0x22
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = cnt;
 8009020:	4922      	ldr	r1, [pc, #136]	@ (80090ac <handle_ctr_tx+0x158>)
 8009022:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009028:	0052      	lsls	r2, r2, #1
 800902a:	4413      	add	r3, r2
 800902c:	00db      	lsls	r3, r3, #3
 800902e:	440b      	add	r3, r1
 8009030:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009032:	809a      	strh	r2, [r3, #4]
#endif
}
 8009034:	bf00      	nop
    btable_set_count(ep_id, buf_id, 0);
  }

  if (xfer->total_len != xfer->queued_len) {
 8009036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009038:	891a      	ldrh	r2, [r3, #8]
 800903a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800903c:	895b      	ldrh	r3, [r3, #10]
 800903e:	429a      	cmp	r2, r3
 8009040:	d006      	beq.n	8009050 <handle_ctr_tx+0xfc>
    dcd_transmit_packet(xfer, ep_id);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	b29b      	uxth	r3, r3
 8009046:	4619      	mov	r1, r3
 8009048:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800904a:	f001 f969 	bl	800a320 <dcd_transmit_packet>
 800904e:	e025      	b.n	800909c <handle_ctr_tx+0x148>
  } else {
    dcd_event_xfer_complete(0, ep_num | TUSB_DIR_IN_MASK, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 8009050:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009054:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009058:	b2da      	uxtb	r2, r3
 800905a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800905c:	895b      	ldrh	r3, [r3, #10]
 800905e:	2100      	movs	r1, #0
 8009060:	f887 1021 	strb.w	r1, [r7, #33]	@ 0x21
 8009064:	f887 2020 	strb.w	r2, [r7, #32]
 8009068:	61fb      	str	r3, [r7, #28]
 800906a:	2300      	movs	r3, #0
 800906c:	76fb      	strb	r3, [r7, #27]
 800906e:	2301      	movs	r3, #1
 8009070:	76bb      	strb	r3, [r7, #26]
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009072:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009076:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8009078:	2307      	movs	r3, #7
 800907a:	737b      	strb	r3, [r7, #13]
  event.xfer_complete.ep_addr = ep_addr;
 800907c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009080:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 8009086:	7efb      	ldrb	r3, [r7, #27]
 8009088:	747b      	strb	r3, [r7, #17]
  dcd_event_handler(&event, in_isr);
 800908a:	7eba      	ldrb	r2, [r7, #26]
 800908c:	f107 030c 	add.w	r3, r7, #12
 8009090:	4611      	mov	r1, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe ff10 	bl	8007eb8 <dcd_event_handler>
}
 8009098:	e000      	b.n	800909c <handle_ctr_tx+0x148>
      return;
 800909a:	bf00      	nop
  }
}
 800909c:	3748      	adds	r7, #72	@ 0x48
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	40005c00 	.word	0x40005c00
 80090a8:	2000074c 	.word	0x2000074c
 80090ac:	40006000 	.word	0x40006000

080090b0 <handle_ctr_setup>:

static void handle_ctr_setup(uint32_t ep_id) {
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b0a2      	sub	sp, #136	@ 0x88
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090bc:	2301      	movs	r3, #1
 80090be:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  count = FSDEV_BTABLE->ep16[ep_id][buf_id].count;
 80090c2:	497b      	ldr	r1, [pc, #492]	@ (80092b0 <handle_ctr_setup+0x200>)
 80090c4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80090c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80090ca:	0052      	lsls	r2, r2, #1
 80090cc:	4413      	add	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	440b      	add	r3, r1
 80090d2:	889b      	ldrh	r3, [r3, #4]
 80090d4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  return count & 0x3FFU;
 80090d8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80090dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090e0:	b29b      	uxth	r3, r3
  uint16_t rx_count = btable_get_count(ep_id, BTABLE_BUF_RX);
 80090e2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80090ea:	2301      	movs	r3, #1
 80090ec:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
  return FSDEV_BTABLE->ep16[ep_id][buf_id].addr;
 80090f0:	496f      	ldr	r1, [pc, #444]	@ (80092b0 <handle_ctr_setup+0x200>)
 80090f2:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80090f6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80090f8:	0052      	lsls	r2, r2, #1
 80090fa:	4413      	add	r3, r2
 80090fc:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8009100:	b29b      	uxth	r3, r3
  uint16_t rx_addr = btable_get_addr(ep_id, BTABLE_BUF_RX);
 8009102:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
  uint8_t setup_packet[8] TU_ATTR_ALIGNED(4);

  dcd_read_packet_memory(setup_packet, rx_addr, rx_count);
 8009106:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800910a:	f8b7 1084 	ldrh.w	r1, [r7, #132]	@ 0x84
 800910e:	f107 0318 	add.w	r3, r7, #24
 8009112:	4618      	mov	r0, r3
 8009114:	f001 fd9f 	bl	800ac56 <dcd_read_packet_memory>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800911c:	2300      	movs	r3, #0
 800911e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
  uint32_t reg = FSDEV_REG->ep[ep_id].reg;
 8009122:	4a64      	ldr	r2, [pc, #400]	@ (80092b4 <handle_ctr_setup+0x204>)
 8009124:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009126:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800912a:	b29b      	uxth	r3, r3
 800912c:	677b      	str	r3, [r7, #116]	@ 0x74
  reg |= USB_EP_CTR_TX | USB_EP_CTR_RX;
 800912e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009138:	677b      	str	r3, [r7, #116]	@ 0x74
  reg &= USB_EPREG_MASK;
 800913a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800913c:	f648 738f 	movw	r3, #36751	@ 0x8f8f
 8009140:	4013      	ands	r3, r2
 8009142:	677b      	str	r3, [r7, #116]	@ 0x74
  reg &= ~(1 << (USB_EP_CTR_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009144:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8009148:	2b01      	cmp	r3, #1
 800914a:	d102      	bne.n	8009152 <handle_ctr_setup+0xa2>
 800914c:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 8009150:	e001      	b.n	8009156 <handle_ctr_setup+0xa6>
 8009152:	f46f 4300 	mvn.w	r3, #32768	@ 0x8000
 8009156:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009158:	4013      	ands	r3, r2
 800915a:	677b      	str	r3, [r7, #116]	@ 0x74
 800915c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800915e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009160:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009162:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009164:	2300      	movs	r3, #0
 8009166:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  if (need_exclusive) {
 800916a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <handle_ctr_setup+0xc8>
    dcd_int_disable(0);
 8009172:	2000      	movs	r0, #0
 8009174:	f7ff fdc2 	bl	8008cfc <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8009178:	4a4e      	ldr	r2, [pc, #312]	@ (80092b4 <handle_ctr_setup+0x204>)
 800917a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800917c:	b299      	uxth	r1, r3
 800917e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009180:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009184:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <handle_ctr_setup+0xe2>
    dcd_int_enable(0);
 800918c:	2000      	movs	r0, #0
 800918e:	f7ff fd93 	bl	8008cb8 <dcd_int_enable>
}
 8009192:	bf00      	nop
}
 8009194:	bf00      	nop

  // Clear CTR RX if another setup packet arrived before this, it will be discarded
  ep_write_clear_ctr(ep_id, TUSB_DIR_OUT);

  // Setup packet should always be 8 bytes. If not, we probably missed the packet
  if (rx_count == 8) {
 8009196:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800919a:	2b08      	cmp	r3, #8
 800919c:	d11c      	bne.n	80091d8 <handle_ctr_setup+0x128>
 800919e:	2300      	movs	r3, #0
 80091a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80091a4:	f107 0318 	add.w	r3, r7, #24
 80091a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80091aa:	2301      	movs	r3, #1
 80091ac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  event.rhport = rhport;
 80091b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091b4:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 80091b6:	2306      	movs	r3, #6
 80091b8:	727b      	strb	r3, [r7, #9]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 80091ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80091bc:	f107 030c 	add.w	r3, r7, #12
 80091c0:	6810      	ldr	r0, [r2, #0]
 80091c2:	6851      	ldr	r1, [r2, #4]
 80091c4:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 80091c6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80091ca:	f107 0308 	add.w	r3, r7, #8
 80091ce:	4611      	mov	r1, r2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fe fe71 	bl	8007eb8 <dcd_event_handler>
}
 80091d6:	e067      	b.n	80092a8 <handle_ctr_setup+0x1f8>
    dcd_event_setup_received(0, (uint8_t*) setup_packet, true);
    // Hardware should reset EP0 RX/TX to NAK and both toggle to 1
  } else {
    // Missed setup packet !!!
    TU_BREAKPOINT();
 80091d8:	4b37      	ldr	r3, [pc, #220]	@ (80092b8 <handle_ctr_setup+0x208>)
 80091da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d000      	beq.n	80091ee <handle_ctr_setup+0x13e>
 80091ec:	be00      	bkpt	0x0000
 80091ee:	2300      	movs	r3, #0
 80091f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091f2:	2301      	movs	r3, #1
 80091f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80091f8:	2308      	movs	r3, #8
 80091fa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80091fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009202:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009206:	f107 0317 	add.w	r3, r7, #23
 800920a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800920c:	f107 0316 	add.w	r3, r7, #22
 8009210:	63bb      	str	r3, [r7, #56]	@ 0x38
/* Aligned buffer size according to hardware */
TU_ATTR_ALWAYS_INLINE static inline uint16_t pma_align_buffer_size(uint16_t size, uint8_t* blsize, uint8_t* num_block) {
  /* The STM32 full speed USB peripheral supports only a limited set of
   * buffer sizes given by the RX buffer entry format in the USB_BTABLE. */
  uint16_t block_in_bytes;
  if (size > 62) {
 8009212:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009216:	2b3e      	cmp	r3, #62	@ 0x3e
 8009218:	d914      	bls.n	8009244 <handle_ctr_setup+0x194>
    block_in_bytes = 32;
 800921a:	2320      	movs	r3, #32
 800921c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    *blsize = 1;
 800921e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009220:	2201      	movs	r2, #1
 8009222:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 8009224:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009228:	633b      	str	r3, [r7, #48]	@ 0x30
 800922a:	2320      	movs	r3, #32
 800922c:	62fb      	str	r3, [r7, #44]	@ 0x2c
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800922e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009232:	4413      	add	r3, r2
 8009234:	1e5a      	subs	r2, r3, #1
 8009236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009238:	fbb2 f3f3 	udiv	r3, r2, r3
 800923c:	b2da      	uxtb	r2, r3
 800923e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009240:	701a      	strb	r2, [r3, #0]
 8009242:	e013      	b.n	800926c <handle_ctr_setup+0x1bc>
  } else {
    block_in_bytes = 2;
 8009244:	2302      	movs	r3, #2
 8009246:	86fb      	strh	r3, [r7, #54]	@ 0x36
    *blsize = 0;
 8009248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800924a:	2200      	movs	r2, #0
 800924c:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800924e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009252:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009254:	2302      	movs	r3, #2
 8009256:	627b      	str	r3, [r7, #36]	@ 0x24
 8009258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800925a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925c:	4413      	add	r3, r2
 800925e:	1e5a      	subs	r2, r3, #1
 8009260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009262:	fbb2 f3f3 	udiv	r3, r2, r3
 8009266:	b2da      	uxtb	r2, r3
 8009268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926a:	701a      	strb	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline void btable_set_rx_bufsize(uint32_t ep_id, uint8_t buf_id, uint16_t wCount) {
  uint8_t blsize, num_block;
  (void) pma_align_buffer_size(wCount, &blsize, &num_block);

  /* Encode into register. When BLSIZE==1, we need to subtract 1 block count */
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	03db      	lsls	r3, r3, #15
 8009270:	b21a      	sxth	r2, r3
 8009272:	7dbb      	ldrb	r3, [r7, #22]
 8009274:	4619      	mov	r1, r3
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	1acb      	subs	r3, r1, r3
 800927a:	029b      	lsls	r3, r3, #10
 800927c:	b21b      	sxth	r3, r3
 800927e:	4313      	orrs	r3, r2
 8009280:	b21b      	sxth	r3, r3
 8009282:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (bl_nb == 0) {
 8009284:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009286:	2b00      	cmp	r3, #0
 8009288:	d102      	bne.n	8009290 <handle_ctr_setup+0x1e0>
    // zlp but 0 is invalid value, set blsize to 1 (32 bytes)
    // Note: lower value can cause PMAOVR on setup with ch32v203
    bl_nb = 1 << 15;
 800928a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800928e:	847b      	strh	r3, [r7, #34]	@ 0x22
#ifdef FSDEV_BUS_32BIT
  uint32_t count_addr = FSDEV_BTABLE->ep32[ep_id][buf_id].count_addr;
  count_addr = (bl_nb << 16) | (count_addr & 0x0000FFFFu);
  FSDEV_BTABLE->ep32[ep_id][buf_id].count_addr = count_addr;
#else
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 8009290:	4907      	ldr	r1, [pc, #28]	@ (80092b0 <handle_ctr_setup+0x200>)
 8009292:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009298:	0052      	lsls	r2, r2, #1
 800929a:	4413      	add	r3, r2
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	440b      	add	r3, r1
 80092a0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80092a2:	809a      	strh	r2, [r3, #4]
#endif

}
 80092a4:	bf00      	nop
}
 80092a6:	bf00      	nop
    edpt0_prepare_setup();
  }
}
 80092a8:	bf00      	nop
 80092aa:	3788      	adds	r7, #136	@ 0x88
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	40006000 	.word	0x40006000
 80092b4:	40005c00 	.word	0x40005c00
 80092b8:	e000edf0 	.word	0xe000edf0

080092bc <handle_ctr_rx>:

// Handle CTR interrupt for the RX/OUT direction
static void handle_ctr_rx(uint32_t ep_id) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	b0b2      	sub	sp, #200	@ 0xc8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  return FSDEV_REG->ep[ep_id].reg;
 80092ca:	4aca      	ldr	r2, [pc, #808]	@ (80095f4 <handle_ctr_rx+0x338>)
 80092cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80092d0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80092d4:	b29b      	uxth	r3, r3
  uint32_t ep_reg = ep_read(ep_id) | USB_EP_CTR_TX | USB_EP_CTR_RX;
 80092d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092de:	623b      	str	r3, [r7, #32]
  uint8_t const ep_num = ep_reg & USB_EPADDR_FIELD;
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f003 030f 	and.w	r3, r3, #15
 80092e8:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
  bool const is_iso = ep_is_iso(ep_reg);
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 80092f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80092f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80092fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092fe:	bf0c      	ite	eq
 8009300:	2301      	moveq	r3, #1
 8009302:	2300      	movne	r3, #0
 8009304:	b2db      	uxtb	r3, r3
 8009306:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
 800930a:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800930e:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
 8009312:	2300      	movs	r3, #0
 8009314:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
  return &xfer_status[epnum][dir];
 8009318:	f897 20b9 	ldrb.w	r2, [r7, #185]	@ 0xb9
 800931c:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8009320:	0052      	lsls	r2, r2, #1
 8009322:	4413      	add	r3, r2
 8009324:	011b      	lsls	r3, r3, #4
 8009326:	4ab4      	ldr	r2, [pc, #720]	@ (80095f8 <handle_ctr_rx+0x33c>)
 8009328:	4413      	add	r3, r2
  xfer_ctl_t* xfer = xfer_ctl_ptr(ep_num, TUSB_DIR_OUT);
 800932a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

  uint8_t buf_id;
  if (is_iso) {
 800932e:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00a      	beq.n	800934c <handle_ctr_rx+0x90>
    buf_id = (ep_reg & USB_EP_DTOG_RX) ? 0 : 1; // ISO are double buffered
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800933c:	2b00      	cmp	r3, #0
 800933e:	bf0c      	ite	eq
 8009340:	2301      	moveq	r3, #1
 8009342:	2300      	movne	r3, #0
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 800934a:	e002      	b.n	8009352 <handle_ctr_rx+0x96>
  } else {
    buf_id = BTABLE_BUF_RX;
 800934c:	2301      	movs	r3, #1
 800934e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009358:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800935c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  count = FSDEV_BTABLE->ep16[ep_id][buf_id].count;
 8009360:	49a6      	ldr	r1, [pc, #664]	@ (80095fc <handle_ctr_rx+0x340>)
 8009362:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8009366:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800936a:	0052      	lsls	r2, r2, #1
 800936c:	4413      	add	r3, r2
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	440b      	add	r3, r1
 8009372:	889b      	ldrh	r3, [r3, #4]
 8009374:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
  return count & 0x3FFU;
 8009378:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 800937c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009380:	b29b      	uxth	r3, r3
  }
  uint16_t const rx_count = btable_get_count(ep_id, buf_id);
 8009382:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800938c:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8009390:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
  return FSDEV_BTABLE->ep16[ep_id][buf_id].addr;
 8009394:	4999      	ldr	r1, [pc, #612]	@ (80095fc <handle_ctr_rx+0x340>)
 8009396:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800939a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800939e:	0052      	lsls	r2, r2, #1
 80093a0:	4413      	add	r3, r2
 80093a2:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80093a6:	b29b      	uxth	r3, r3
  uint16_t pma_addr = (uint16_t) btable_get_addr(ep_id, buf_id);
 80093a8:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc

  if (xfer->ff) {
 80093ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <handle_ctr_rx+0x110>
    dcd_read_packet_memory_ff(xfer->ff, pma_addr, rx_count);
 80093b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093c0:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	@ 0xbc
 80093c4:	4618      	mov	r0, r3
 80093c6:	f001 fd3a 	bl	800ae3e <dcd_read_packet_memory_ff>
 80093ca:	e00d      	b.n	80093e8 <handle_ctr_rx+0x12c>
  } else {
    dcd_read_packet_memory(xfer->buffer + xfer->queued_len, pma_addr, rx_count);
 80093cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80093d6:	8952      	ldrh	r2, [r2, #10]
 80093d8:	4413      	add	r3, r2
 80093da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093de:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	@ 0xbc
 80093e2:	4618      	mov	r0, r3
 80093e4:	f001 fc37 	bl	800ac56 <dcd_read_packet_memory>
  }
  xfer->queued_len += rx_count;
 80093e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093ec:	895a      	ldrh	r2, [r3, #10]
 80093ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80093f2:	4413      	add	r3, r2
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093fa:	815a      	strh	r2, [r3, #10]

  if ((rx_count < xfer->max_packet_size) || (xfer->queued_len >= xfer->total_len)) {
 80093fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009400:	899b      	ldrh	r3, [r3, #12]
 8009402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009406:	429a      	cmp	r2, r3
 8009408:	d308      	bcc.n	800941c <handle_ctr_rx+0x160>
 800940a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800940e:	895a      	ldrh	r2, [r3, #10]
 8009410:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009414:	891b      	ldrh	r3, [r3, #8]
 8009416:	429a      	cmp	r2, r3
 8009418:	f0c0 80a2 	bcc.w	8009560 <handle_ctr_rx+0x2a4>
    // all bytes received or short packet

    // For ch32v203: reset rx bufsize to mps to prevent race condition to cause PMAOVR (occurs with msc write10)
    btable_set_rx_bufsize(ep_id, BTABLE_BUF_RX, xfer->max_packet_size);
 800941c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009420:	899a      	ldrh	r2, [r3, #12]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009428:	2301      	movs	r3, #1
 800942a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800942e:	4613      	mov	r3, r2
 8009430:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8009434:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009438:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800943c:	f107 031f 	add.w	r3, r7, #31
 8009440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009444:	f107 031e 	add.w	r3, r7, #30
 8009448:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (size > 62) {
 800944c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009450:	2b3e      	cmp	r3, #62	@ 0x3e
 8009452:	d917      	bls.n	8009484 <handle_ctr_rx+0x1c8>
    block_in_bytes = 32;
 8009454:	2320      	movs	r3, #32
 8009456:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    *blsize = 1;
 800945a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800945e:	2201      	movs	r2, #1
 8009460:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 8009462:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009466:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009468:	2320      	movs	r3, #32
 800946a:	677b      	str	r3, [r7, #116]	@ 0x74
 800946c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800946e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009470:	4413      	add	r3, r2
 8009472:	1e5a      	subs	r2, r3, #1
 8009474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009476:	fbb2 f3f3 	udiv	r3, r2, r3
 800947a:	b2da      	uxtb	r2, r3
 800947c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009480:	701a      	strb	r2, [r3, #0]
 8009482:	e016      	b.n	80094b2 <handle_ctr_rx+0x1f6>
    block_in_bytes = 2;
 8009484:	2302      	movs	r3, #2
 8009486:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    *blsize = 0;
 800948a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800948e:	2200      	movs	r2, #0
 8009490:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 8009492:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009496:	673b      	str	r3, [r7, #112]	@ 0x70
 8009498:	2302      	movs	r3, #2
 800949a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800949c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800949e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094a0:	4413      	add	r3, r2
 80094a2:	1e5a      	subs	r2, r3, #1
 80094a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80094b0:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 80094b2:	7ffb      	ldrb	r3, [r7, #31]
 80094b4:	03db      	lsls	r3, r3, #15
 80094b6:	b21a      	sxth	r2, r3
 80094b8:	7fbb      	ldrb	r3, [r7, #30]
 80094ba:	4619      	mov	r1, r3
 80094bc:	7ffb      	ldrb	r3, [r7, #31]
 80094be:	1acb      	subs	r3, r1, r3
 80094c0:	029b      	lsls	r3, r3, #10
 80094c2:	b21b      	sxth	r3, r3
 80094c4:	4313      	orrs	r3, r2
 80094c6:	b21b      	sxth	r3, r3
 80094c8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
  if (bl_nb == 0) {
 80094cc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d103      	bne.n	80094dc <handle_ctr_rx+0x220>
    bl_nb = 1 << 15;
 80094d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094d8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 80094dc:	4947      	ldr	r1, [pc, #284]	@ (80095fc <handle_ctr_rx+0x340>)
 80094de:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80094e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80094e6:	0052      	lsls	r2, r2, #1
 80094e8:	4413      	add	r3, r2
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	440b      	add	r3, r1
 80094ee:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 80094f2:	809a      	strh	r2, [r3, #4]
}
 80094f4:	bf00      	nop

    dcd_event_xfer_complete(0, ep_num, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 80094f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80094fa:	895b      	ldrh	r3, [r3, #10]
 80094fc:	461a      	mov	r2, r3
 80094fe:	2300      	movs	r3, #0
 8009500:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8009504:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8009508:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 800950c:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8009510:	2300      	movs	r3, #0
 8009512:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8009516:	2301      	movs	r3, #1
 8009518:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
  event.rhport = rhport;
 800951c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8009520:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8009522:	2307      	movs	r3, #7
 8009524:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8009526:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800952a:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800952c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009530:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8009532:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8009536:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8009538:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800953c:	f107 0310 	add.w	r3, r7, #16
 8009540:	4611      	mov	r1, r2
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe fcb8 	bl	8007eb8 <dcd_event_handler>
}
 8009548:	bf00      	nop

    // ch32 seems to unconditionally accept ZLP on EP0 OUT, which can incorrectly use queued_len of previous
    // transfer. So reset total_len and queued_len to 0.
    xfer->total_len = xfer->queued_len = 0;
 800954a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800954e:	2200      	movs	r2, #0
 8009550:	815a      	strh	r2, [r3, #10]
 8009552:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009556:	895a      	ldrh	r2, [r3, #10]
 8009558:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800955c:	811a      	strh	r2, [r3, #8]
 800955e:	e0bc      	b.n	80096da <handle_ctr_rx+0x41e>
  } else {
    // Set endpoint active again for receiving more data. Note that isochronous endpoints stay active always
    if (!is_iso) {
 8009560:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8009564:	f083 0301 	eor.w	r3, r3, #1
 8009568:	b2db      	uxtb	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	d07a      	beq.n	8009664 <handle_ctr_rx+0x3a8>
      uint16_t const cnt = tu_min16(xfer->total_len - xfer->queued_len, xfer->max_packet_size);
 800956e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009572:	891a      	ldrh	r2, [r3, #8]
 8009574:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009578:	895b      	ldrh	r3, [r3, #10]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	b29a      	uxth	r2, r3
 800957e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009582:	899b      	ldrh	r3, [r3, #12]
 8009584:	87ba      	strh	r2, [r7, #60]	@ 0x3c
 8009586:	877b      	strh	r3, [r7, #58]	@ 0x3a
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8009588:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800958a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800958c:	4293      	cmp	r3, r2
 800958e:	bf28      	it	cs
 8009590:	4613      	movcs	r3, r2
 8009592:	b29b      	uxth	r3, r3
 8009594:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	667b      	str	r3, [r7, #100]	@ 0x64
 800959c:	2301      	movs	r3, #1
 800959e:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 80095a2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 80095a6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80095aa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80095ae:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80095b2:	f107 030f 	add.w	r3, r7, #15
 80095b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095b8:	f107 030e 	add.w	r3, r7, #14
 80095bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (size > 62) {
 80095be:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80095c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80095c4:	d91c      	bls.n	8009600 <handle_ctr_rx+0x344>
    block_in_bytes = 32;
 80095c6:	2320      	movs	r3, #32
 80095c8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    *blsize = 1;
 80095cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095ce:	2201      	movs	r2, #1
 80095d0:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 80095d2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80095d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095d8:	2320      	movs	r3, #32
 80095da:	64bb      	str	r3, [r7, #72]	@ 0x48
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 80095dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095e0:	4413      	add	r3, r2
 80095e2:	1e5a      	subs	r2, r3, #1
 80095e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095ee:	701a      	strb	r2, [r3, #0]
 80095f0:	e01b      	b.n	800962a <handle_ctr_rx+0x36e>
 80095f2:	bf00      	nop
 80095f4:	40005c00 	.word	0x40005c00
 80095f8:	2000074c 	.word	0x2000074c
 80095fc:	40006000 	.word	0x40006000
    block_in_bytes = 2;
 8009600:	2302      	movs	r3, #2
 8009602:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    *blsize = 0;
 8009606:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009608:	2200      	movs	r2, #0
 800960a:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800960c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8009610:	647b      	str	r3, [r7, #68]	@ 0x44
 8009612:	2302      	movs	r3, #2
 8009614:	643b      	str	r3, [r7, #64]	@ 0x40
 8009616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800961a:	4413      	add	r3, r2
 800961c:	1e5a      	subs	r2, r3, #1
 800961e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009620:	fbb2 f3f3 	udiv	r3, r2, r3
 8009624:	b2da      	uxtb	r2, r3
 8009626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009628:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	03db      	lsls	r3, r3, #15
 800962e:	b21a      	sxth	r2, r3
 8009630:	7bbb      	ldrb	r3, [r7, #14]
 8009632:	4619      	mov	r1, r3
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	1acb      	subs	r3, r1, r3
 8009638:	029b      	lsls	r3, r3, #10
 800963a:	b21b      	sxth	r3, r3
 800963c:	4313      	orrs	r3, r2
 800963e:	b21b      	sxth	r3, r3
 8009640:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (bl_nb == 0) {
 8009642:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009644:	2b00      	cmp	r3, #0
 8009646:	d102      	bne.n	800964e <handle_ctr_rx+0x392>
    bl_nb = 1 << 15;
 8009648:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800964c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 800964e:	4925      	ldr	r1, [pc, #148]	@ (80096e4 <handle_ctr_rx+0x428>)
 8009650:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009654:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009656:	0052      	lsls	r2, r2, #1
 8009658:	4413      	add	r3, r2
 800965a:	00db      	lsls	r3, r3, #3
 800965c:	440b      	add	r3, r1
 800965e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8009660:	809a      	strh	r2, [r3, #4]
}
 8009662:	bf00      	nop
      btable_set_rx_bufsize(ep_id, BTABLE_BUF_RX, cnt);
    }
    ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(TUSB_DIR_OUT); // will change RX Status, reserved other toggle bits
 8009664:	6a3a      	ldr	r2, [r7, #32]
 8009666:	f64b 738f 	movw	r3, #49039	@ 0xbf8f
 800966a:	4013      	ands	r3, r2
 800966c:	623b      	str	r3, [r7, #32]
 800966e:	f107 0320 	add.w	r3, r7, #32
 8009672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009674:	2300      	movs	r3, #0
 8009676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800967a:	2303      	movs	r3, #3
 800967c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8009688:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800968c:	2a01      	cmp	r2, #1
 800968e:	d101      	bne.n	8009694 <handle_ctr_rx+0x3d8>
 8009690:	2204      	movs	r2, #4
 8009692:	e000      	b.n	8009696 <handle_ctr_rx+0x3da>
 8009694:	220c      	movs	r2, #12
 8009696:	fa01 f202 	lsl.w	r2, r1, r2
 800969a:	405a      	eors	r2, r3
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969e:	601a      	str	r2, [r3, #0]
}
 80096a0:	bf00      	nop
    ep_change_status(&ep_reg, TUSB_DIR_OUT, EP_STAT_VALID);
    ep_write(ep_id, ep_reg, false);
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80096a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80096aa:	2300      	movs	r3, #0
 80096ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (need_exclusive) {
 80096b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <handle_ctr_rx+0x402>
    dcd_int_disable(0);
 80096b8:	2000      	movs	r0, #0
 80096ba:	f7ff fb1f 	bl	8008cfc <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 80096be:	4a0a      	ldr	r2, [pc, #40]	@ (80096e8 <handle_ctr_rx+0x42c>)
 80096c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c2:	b299      	uxth	r1, r3
 80096c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 80096ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d002      	beq.n	80096d8 <handle_ctr_rx+0x41c>
    dcd_int_enable(0);
 80096d2:	2000      	movs	r0, #0
 80096d4:	f7ff faf0 	bl	8008cb8 <dcd_int_enable>
}
 80096d8:	bf00      	nop
  }
}
 80096da:	bf00      	nop
 80096dc:	37c8      	adds	r7, #200	@ 0xc8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	40006000 	.word	0x40006000
 80096e8:	40005c00 	.word	0x40005c00

080096ec <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport) {
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b0a4      	sub	sp, #144	@ 0x90
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	71fb      	strb	r3, [r7, #7]
  uint32_t int_status = FSDEV_REG->ISTR;
 80096f6:	4bbd      	ldr	r3, [pc, #756]	@ (80099ec <dcd_int_handler+0x300>)
 80096f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* Put SOF flag at the beginning of ISR in case to get least amount of jitter if it is used for timing purposes */
  if (int_status & USB_ISTR_SOF) {
 8009702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009706:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800970a:	2b00      	cmp	r3, #0
 800970c:	d021      	beq.n	8009752 <dcd_int_handler+0x66>
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_SOF;
 800970e:	4bb7      	ldr	r3, [pc, #732]	@ (80099ec <dcd_int_handler+0x300>)
 8009710:	f64f 52ff 	movw	r2, #65023	@ 0xfdff
 8009714:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    dcd_event_sof(0, FSDEV_REG->FNR & USB_FNR_FN, true);
 8009718:	4bb4      	ldr	r3, [pc, #720]	@ (80099ec <dcd_int_handler+0x300>)
 800971a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800971e:	b29b      	uxth	r3, r3
 8009720:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009724:	2200      	movs	r2, #0
 8009726:	f887 207f 	strb.w	r2, [r7, #127]	@ 0x7f
 800972a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800972c:	2301      	movs	r3, #1
 800972e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009732:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009736:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 8009738:	2303      	movs	r3, #3
 800973a:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800973c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800973e:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8009740:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8009744:	f107 0308 	add.w	r3, r7, #8
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe fbb4 	bl	8007eb8 <dcd_event_handler>
}
 8009750:	bf00      	nop
  }

  if (int_status & USB_ISTR_RESET) {
 8009752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800975a:	2b00      	cmp	r3, #0
 800975c:	d023      	beq.n	80097a6 <dcd_int_handler+0xba>
    // USBRST is start of reset.
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_RESET;
 800975e:	4ba3      	ldr	r3, [pc, #652]	@ (80099ec <dcd_int_handler+0x300>)
 8009760:	f64f 32ff 	movw	r2, #64511	@ 0xfbff
 8009764:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    handle_bus_reset(rhport);
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff fbb4 	bl	8008ed8 <handle_bus_reset>
 8009770:	2300      	movs	r3, #0
 8009772:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8009776:	2300      	movs	r3, #0
 8009778:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800977c:	2301      	movs	r3, #1
 800977e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
  event.rhport = rhport;
 8009782:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8009786:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_BUS_RESET;
 8009788:	2301      	movs	r3, #1
 800978a:	757b      	strb	r3, [r7, #21]
  event.bus_reset.speed = speed;
 800978c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8009790:	763b      	strb	r3, [r7, #24]
  dcd_event_handler(&event, in_isr);
 8009792:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8009796:	f107 0314 	add.w	r3, r7, #20
 800979a:	4611      	mov	r1, r2
 800979c:	4618      	mov	r0, r3
 800979e:	f7fe fb8b 	bl	8007eb8 <dcd_event_handler>
}
 80097a2:	bf00      	nop
    dcd_event_bus_reset(0, TUSB_SPEED_FULL, true);
    return; // Don't do the rest of the things here; perhaps they've been cleared?
 80097a4:	e16a      	b.n	8009a7c <dcd_int_handler+0x390>
  }

  if (int_status & USB_ISTR_WKUP) {
 80097a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d032      	beq.n	8009818 <dcd_int_handler+0x12c>
    FSDEV_REG->CNTR &= ~USB_CNTR_LPMODE;
 80097b2:	4b8e      	ldr	r3, [pc, #568]	@ (80099ec <dcd_int_handler+0x300>)
 80097b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	4a8c      	ldr	r2, [pc, #560]	@ (80099ec <dcd_int_handler+0x300>)
 80097bc:	f023 0304 	bic.w	r3, r3, #4
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    FSDEV_REG->CNTR &= ~USB_CNTR_FSUSP;
 80097c6:	4b89      	ldr	r3, [pc, #548]	@ (80099ec <dcd_int_handler+0x300>)
 80097c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	4a87      	ldr	r2, [pc, #540]	@ (80099ec <dcd_int_handler+0x300>)
 80097d0:	f023 0308 	bic.w	r3, r3, #8
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40

    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_WKUP;
 80097da:	4b84      	ldr	r3, [pc, #528]	@ (80099ec <dcd_int_handler+0x300>)
 80097dc:	f64e 72ff 	movw	r2, #61439	@ 0xefff
 80097e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 80097e4:	2300      	movs	r3, #0
 80097e6:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 80097ea:	2305      	movs	r3, #5
 80097ec:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 80097f0:	2301      	movs	r3, #1
 80097f2:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
  event.rhport = rhport;
 80097f6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80097fa:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 80097fe:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8009802:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 8009806:	f897 2071 	ldrb.w	r2, [r7, #113]	@ 0x71
 800980a:	f107 0320 	add.w	r3, r7, #32
 800980e:	4611      	mov	r1, r2
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fb51 	bl	8007eb8 <dcd_event_handler>
}
 8009816:	bf00      	nop
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
  }

  if (int_status & USB_ISTR_SUSP) {
 8009818:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800981c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009820:	2b00      	cmp	r3, #0
 8009822:	d032      	beq.n	800988a <dcd_int_handler+0x19e>
    /* Suspend is asserted for both suspend and unplug events. without Vbus monitoring,
     * these events cannot be differentiated, so we only trigger suspend. */

    /* Force low-power mode in the macrocell */
    FSDEV_REG->CNTR |= USB_CNTR_FSUSP;
 8009824:	4b71      	ldr	r3, [pc, #452]	@ (80099ec <dcd_int_handler+0x300>)
 8009826:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800982a:	b29b      	uxth	r3, r3
 800982c:	4a6f      	ldr	r2, [pc, #444]	@ (80099ec <dcd_int_handler+0x300>)
 800982e:	f043 0308 	orr.w	r3, r3, #8
 8009832:	b29b      	uxth	r3, r3
 8009834:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    FSDEV_REG->CNTR |= USB_CNTR_LPMODE;
 8009838:	4b6c      	ldr	r3, [pc, #432]	@ (80099ec <dcd_int_handler+0x300>)
 800983a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800983e:	b29b      	uxth	r3, r3
 8009840:	4a6a      	ldr	r2, [pc, #424]	@ (80099ec <dcd_int_handler+0x300>)
 8009842:	f043 0304 	orr.w	r3, r3, #4
 8009846:	b29b      	uxth	r3, r3
 8009848:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_SUSP;
 800984c:	4b67      	ldr	r3, [pc, #412]	@ (80099ec <dcd_int_handler+0x300>)
 800984e:	f24f 72ff 	movw	r2, #63487	@ 0xf7ff
 8009852:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8009856:	2300      	movs	r3, #0
 8009858:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 800985c:	2304      	movs	r3, #4
 800985e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8009862:	2301      	movs	r3, #1
 8009864:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
  event.rhport = rhport;
 8009868:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800986c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 8009870:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009874:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 8009878:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800987c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009880:	4611      	mov	r1, r2
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe fb18 	bl	8007eb8 <dcd_event_handler>
}
 8009888:	bf00      	nop
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
  }

  if (int_status & USB_ISTR_ESOF) {
 800988a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800988e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 80d4 	beq.w	8009a40 <dcd_int_handler+0x354>
    if (remoteWakeCountdown == 1u) {
 8009898:	4b55      	ldr	r3, [pc, #340]	@ (80099f0 <dcd_int_handler+0x304>)
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d109      	bne.n	80098b4 <dcd_int_handler+0x1c8>
      FSDEV_REG->CNTR &= ~USB_CNTR_RESUME;
 80098a0:	4b52      	ldr	r3, [pc, #328]	@ (80099ec <dcd_int_handler+0x300>)
 80098a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	4a50      	ldr	r2, [pc, #320]	@ (80099ec <dcd_int_handler+0x300>)
 80098aa:	f023 0310 	bic.w	r3, r3, #16
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    }
    if (remoteWakeCountdown > 0u) {
 80098b4:	4b4e      	ldr	r3, [pc, #312]	@ (80099f0 <dcd_int_handler+0x304>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d005      	beq.n	80098c8 <dcd_int_handler+0x1dc>
      remoteWakeCountdown--;
 80098bc:	4b4c      	ldr	r3, [pc, #304]	@ (80099f0 <dcd_int_handler+0x304>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	4b4a      	ldr	r3, [pc, #296]	@ (80099f0 <dcd_int_handler+0x304>)
 80098c6:	701a      	strb	r2, [r3, #0]
    }
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_ESOF;
 80098c8:	4b48      	ldr	r3, [pc, #288]	@ (80099ec <dcd_int_handler+0x300>)
 80098ca:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80098ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  // loop to handle all pending CTR interrupts
  while (FSDEV_REG->ISTR & USB_ISTR_CTR) {
 80098d2:	e0b5      	b.n	8009a40 <dcd_int_handler+0x354>
    // skip DIR bit, and use CTR TX/RX instead, since there is chance we have both TX/RX completed in one interrupt
    uint32_t const ep_id = FSDEV_REG->ISTR & USB_ISTR_EP_ID;
 80098d4:	4b45      	ldr	r3, [pc, #276]	@ (80099ec <dcd_int_handler+0x300>)
 80098d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80098da:	b29b      	uxth	r3, r3
 80098dc:	f003 030f 	and.w	r3, r3, #15
 80098e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  return FSDEV_REG->ep[ep_id].reg;
 80098ea:	4a40      	ldr	r2, [pc, #256]	@ (80099ec <dcd_int_handler+0x300>)
 80098ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098ee:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80098f2:	b29b      	uxth	r3, r3
    uint32_t const ep_reg = ep_read(ep_id);
 80098f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (ep_reg & USB_EP_CTR_RX) {
 80098f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80098fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d04e      	beq.n	80099a2 <dcd_int_handler+0x2b6>
      while (cycle_count > 0U) {
        cycle_count--; // each count take 3 cycles (1 for sub, jump, and compare)
      }
      #endif

      if (ep_reg & USB_EP_SETUP) {
 8009904:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800990c:	2b00      	cmp	r3, #0
 800990e:	d004      	beq.n	800991a <dcd_int_handler+0x22e>
        handle_ctr_setup(ep_id); // CTR will be clear after copied setup packet
 8009910:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8009914:	f7ff fbcc 	bl	80090b0 <handle_ctr_setup>
 8009918:	e043      	b.n	80099a2 <dcd_int_handler+0x2b6>
 800991a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800991e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009920:	2300      	movs	r3, #0
 8009922:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
  uint32_t reg = FSDEV_REG->ep[ep_id].reg;
 8009926:	4a31      	ldr	r2, [pc, #196]	@ (80099ec <dcd_int_handler+0x300>)
 8009928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800992a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800992e:	b29b      	uxth	r3, r3
 8009930:	65fb      	str	r3, [r7, #92]	@ 0x5c
  reg |= USB_EP_CTR_TX | USB_EP_CTR_RX;
 8009932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800993c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  reg &= USB_EPREG_MASK;
 800993e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009940:	f648 738f 	movw	r3, #36751	@ 0x8f8f
 8009944:	4013      	ands	r3, r2
 8009946:	65fb      	str	r3, [r7, #92]	@ 0x5c
  reg &= ~(1 << (USB_EP_CTR_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009948:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800994c:	2b01      	cmp	r3, #1
 800994e:	d102      	bne.n	8009956 <dcd_int_handler+0x26a>
 8009950:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 8009954:	e001      	b.n	800995a <dcd_int_handler+0x26e>
 8009956:	f46f 4300 	mvn.w	r3, #32768	@ 0x8000
 800995a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800995c:	4013      	ands	r3, r2
 800995e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009962:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009964:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009966:	657b      	str	r3, [r7, #84]	@ 0x54
 8009968:	2300      	movs	r3, #0
 800996a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  if (need_exclusive) {
 800996e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <dcd_int_handler+0x290>
    dcd_int_disable(0);
 8009976:	2000      	movs	r0, #0
 8009978:	f7ff f9c0 	bl	8008cfc <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800997c:	4a1b      	ldr	r2, [pc, #108]	@ (80099ec <dcd_int_handler+0x300>)
 800997e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009980:	b299      	uxth	r1, r3
 8009982:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009984:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009988:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <dcd_int_handler+0x2aa>
    dcd_int_enable(0);
 8009990:	2000      	movs	r0, #0
 8009992:	f7ff f991 	bl	8008cb8 <dcd_int_enable>
}
 8009996:	bf00      	nop
}
 8009998:	bf00      	nop
      } else {
        ep_write_clear_ctr(ep_id, TUSB_DIR_OUT);
        handle_ctr_rx(ep_id);
 800999a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800999e:	f7ff fc8d 	bl	80092bc <handle_ctr_rx>
      }
    }

    if (ep_reg & USB_EP_CTR_TX) {
 80099a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80099a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d048      	beq.n	8009a40 <dcd_int_handler+0x354>
 80099ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099b4:	2301      	movs	r3, #1
 80099b6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint32_t reg = FSDEV_REG->ep[ep_id].reg;
 80099ba:	4a0c      	ldr	r2, [pc, #48]	@ (80099ec <dcd_int_handler+0x300>)
 80099bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099be:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	647b      	str	r3, [r7, #68]	@ 0x44
  reg |= USB_EP_CTR_TX | USB_EP_CTR_RX;
 80099c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099d0:	647b      	str	r3, [r7, #68]	@ 0x44
  reg &= USB_EPREG_MASK;
 80099d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099d4:	f648 738f 	movw	r3, #36751	@ 0x8f8f
 80099d8:	4013      	ands	r3, r2
 80099da:	647b      	str	r3, [r7, #68]	@ 0x44
  reg &= ~(1 << (USB_EP_CTR_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 80099dc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d107      	bne.n	80099f4 <dcd_int_handler+0x308>
 80099e4:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 80099e8:	e006      	b.n	80099f8 <dcd_int_handler+0x30c>
 80099ea:	bf00      	nop
 80099ec:	40005c00 	.word	0x40005c00
 80099f0:	2000086c 	.word	0x2000086c
 80099f4:	f46f 4300 	mvn.w	r3, #32768	@ 0x8000
 80099f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099fa:	4013      	ands	r3, r2
 80099fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80099fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a00:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a06:	2300      	movs	r3, #0
 8009a08:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (need_exclusive) {
 8009a0c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <dcd_int_handler+0x32e>
    dcd_int_disable(0);
 8009a14:	2000      	movs	r0, #0
 8009a16:	f7ff f971 	bl	8008cfc <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8009a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8009a84 <dcd_int_handler+0x398>)
 8009a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a1e:	b299      	uxth	r1, r3
 8009a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a22:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009a26:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <dcd_int_handler+0x348>
    dcd_int_enable(0);
 8009a2e:	2000      	movs	r0, #0
 8009a30:	f7ff f942 	bl	8008cb8 <dcd_int_enable>
}
 8009a34:	bf00      	nop
}
 8009a36:	bf00      	nop
      ep_write_clear_ctr(ep_id, TUSB_DIR_IN);
      handle_ctr_tx(ep_id);
 8009a38:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8009a3c:	f7ff fa8a 	bl	8008f54 <handle_ctr_tx>
  while (FSDEV_REG->ISTR & USB_ISTR_CTR) {
 8009a40:	4b10      	ldr	r3, [pc, #64]	@ (8009a84 <dcd_int_handler+0x398>)
 8009a42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	b21b      	sxth	r3, r3
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f6ff af42 	blt.w	80098d4 <dcd_int_handler+0x1e8>
    }
  }

  if (int_status & USB_ISTR_PMAOVR) {
 8009a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00f      	beq.n	8009a7c <dcd_int_handler+0x390>
    TU_BREAKPOINT();
 8009a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a88 <dcd_int_handler+0x39c>)
 8009a5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d000      	beq.n	8009a72 <dcd_int_handler+0x386>
 8009a70:	be00      	bkpt	0x0000
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_PMAOVR;
 8009a72:	4b04      	ldr	r3, [pc, #16]	@ (8009a84 <dcd_int_handler+0x398>)
 8009a74:	f64b 72ff 	movw	r2, #49151	@ 0xbfff
 8009a78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 8009a7c:	3790      	adds	r7, #144	@ 0x90
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	40005c00 	.word	0x40005c00
 8009a88:	e000edf0 	.word	0xe000edf0

08009a8c <dcd_edpt0_status_complete>:
// Endpoint API
//--------------------------------------------------------------------+

// Invoked when a control transfer's status stage is complete.
// May help DCD to prepare for next control transfer, this API is optional.
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const *request) {
 8009a8c:	b480      	push	{r7}
 8009a8e:	b08f      	sub	sp, #60	@ 0x3c
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	6039      	str	r1, [r7, #0]
 8009a96:	71fb      	strb	r3, [r7, #7]
  (void)rhport;

  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	f003 031f 	and.w	r3, r3, #31
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d117      	bne.n	8009ad6 <dcd_edpt0_status_complete+0x4a>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009aae:	b2db      	uxtb	r3, r3
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d110      	bne.n	8009ad6 <dcd_edpt0_status_complete+0x4a>
      request->bRequest == TUSB_REQ_SET_ADDRESS) {
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	785b      	ldrb	r3, [r3, #1]
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8009ab8:	2b05      	cmp	r3, #5
 8009aba:	d10c      	bne.n	8009ad6 <dcd_edpt0_status_complete+0x4a>
    uint8_t const dev_addr = (uint8_t)request->wValue;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	885b      	ldrh	r3, [r3, #2]
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    FSDEV_REG->DADDR = (USB_DADDR_EF | dev_addr);
 8009ac6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009aca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8009b90 <dcd_edpt0_status_complete+0x104>)
 8009ad2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ada:	2301      	movs	r3, #1
 8009adc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009ae0:	2308      	movs	r3, #8
 8009ae2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009ae4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009ae6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009ae8:	f107 0309 	add.w	r3, r7, #9
 8009aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aee:	f107 0308 	add.w	r3, r7, #8
 8009af2:	623b      	str	r3, [r7, #32]
  if (size > 62) {
 8009af4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009af6:	2b3e      	cmp	r3, #62	@ 0x3e
 8009af8:	d913      	bls.n	8009b22 <dcd_edpt0_status_complete+0x96>
    block_in_bytes = 32;
 8009afa:	2320      	movs	r3, #32
 8009afc:	83fb      	strh	r3, [r7, #30]
    *blsize = 1;
 8009afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b00:	2201      	movs	r2, #1
 8009b02:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 8009b04:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009b06:	61bb      	str	r3, [r7, #24]
 8009b08:	2320      	movs	r3, #32
 8009b0a:	617b      	str	r3, [r7, #20]
 8009b0c:	69ba      	ldr	r2, [r7, #24]
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	4413      	add	r3, r2
 8009b12:	1e5a      	subs	r2, r3, #1
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	701a      	strb	r2, [r3, #0]
 8009b20:	e012      	b.n	8009b48 <dcd_edpt0_status_complete+0xbc>
    block_in_bytes = 2;
 8009b22:	2302      	movs	r3, #2
 8009b24:	83fb      	strh	r3, [r7, #30]
    *blsize = 0;
 8009b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b28:	2200      	movs	r2, #0
 8009b2a:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 8009b2c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009b2e:	613b      	str	r3, [r7, #16]
 8009b30:	2302      	movs	r3, #2
 8009b32:	60fb      	str	r3, [r7, #12]
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	4413      	add	r3, r2
 8009b3a:	1e5a      	subs	r2, r3, #1
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 8009b48:	7a7b      	ldrb	r3, [r7, #9]
 8009b4a:	03db      	lsls	r3, r3, #15
 8009b4c:	b21a      	sxth	r2, r3
 8009b4e:	7a3b      	ldrb	r3, [r7, #8]
 8009b50:	4619      	mov	r1, r3
 8009b52:	7a7b      	ldrb	r3, [r7, #9]
 8009b54:	1acb      	subs	r3, r1, r3
 8009b56:	029b      	lsls	r3, r3, #10
 8009b58:	b21b      	sxth	r3, r3
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	b21b      	sxth	r3, r3
 8009b5e:	817b      	strh	r3, [r7, #10]
  if (bl_nb == 0) {
 8009b60:	897b      	ldrh	r3, [r7, #10]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d102      	bne.n	8009b6c <dcd_edpt0_status_complete+0xe0>
    bl_nb = 1 << 15;
 8009b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b6a:	817b      	strh	r3, [r7, #10]
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 8009b6c:	4909      	ldr	r1, [pc, #36]	@ (8009b94 <dcd_edpt0_status_complete+0x108>)
 8009b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b74:	0052      	lsls	r2, r2, #1
 8009b76:	4413      	add	r3, r2
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	440b      	add	r3, r1
 8009b7c:	897a      	ldrh	r2, [r7, #10]
 8009b7e:	809a      	strh	r2, [r3, #4]
}
 8009b80:	bf00      	nop
}
 8009b82:	bf00      	nop
  }

  edpt0_prepare_setup();
}
 8009b84:	bf00      	nop
 8009b86:	373c      	adds	r7, #60	@ 0x3c
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bc80      	pop	{r7}
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	40005c00 	.word	0x40005c00
 8009b94:	40006000 	.word	0x40006000

08009b98 <dcd_pma_alloc>:
 * Allocate a section of PMA
 * In case of double buffering, high 16bit is the address of 2nd buffer
 * During failure, TU_ASSERT is used. If this happens, rework/reallocate memory manually.
 */
static uint32_t dcd_pma_alloc(uint16_t len, bool dbuf)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08e      	sub	sp, #56	@ 0x38
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	460a      	mov	r2, r1
 8009ba2:	80fb      	strh	r3, [r7, #6]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	717b      	strb	r3, [r7, #5]
 8009ba8:	88fb      	ldrh	r3, [r7, #6]
 8009baa:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009bac:	f107 030b 	add.w	r3, r7, #11
 8009bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bb2:	f107 030a 	add.w	r3, r7, #10
 8009bb6:	623b      	str	r3, [r7, #32]
  if (size > 62) {
 8009bb8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009bba:	2b3e      	cmp	r3, #62	@ 0x3e
 8009bbc:	d913      	bls.n	8009be6 <dcd_pma_alloc+0x4e>
    block_in_bytes = 32;
 8009bbe:	2320      	movs	r3, #32
 8009bc0:	83fb      	strh	r3, [r7, #30]
    *blsize = 1;
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 8009bc8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009bca:	61bb      	str	r3, [r7, #24]
 8009bcc:	2320      	movs	r3, #32
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	69ba      	ldr	r2, [r7, #24]
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	1e5a      	subs	r2, r3, #1
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	701a      	strb	r2, [r3, #0]
 8009be4:	e012      	b.n	8009c0c <dcd_pma_alloc+0x74>
    block_in_bytes = 2;
 8009be6:	2302      	movs	r3, #2
 8009be8:	83fb      	strh	r3, [r7, #30]
    *blsize = 0;
 8009bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bec:	2200      	movs	r2, #0
 8009bee:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 8009bf0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009bf2:	613b      	str	r3, [r7, #16]
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	1e5a      	subs	r2, r3, #1
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	701a      	strb	r2, [r3, #0]
  return (*num_block) * block_in_bytes;
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	8bfb      	ldrh	r3, [r7, #30]
 8009c14:	fb02 f303 	mul.w	r3, r2, r3
 8009c18:	b29b      	uxth	r3, r3
  uint8_t blsize, num_block;
  uint16_t aligned_len = pma_align_buffer_size(len, &blsize, &num_block);
 8009c1a:	867b      	strh	r3, [r7, #50]	@ 0x32
  (void) blsize;
  (void) num_block;

  uint32_t addr = ep_buf_ptr;
 8009c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8009c88 <dcd_pma_alloc+0xf0>)
 8009c1e:	881b      	ldrh	r3, [r3, #0]
 8009c20:	637b      	str	r3, [r7, #52]	@ 0x34
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + aligned_len); // increment buffer pointer
 8009c22:	4b19      	ldr	r3, [pc, #100]	@ (8009c88 <dcd_pma_alloc+0xf0>)
 8009c24:	881a      	ldrh	r2, [r3, #0]
 8009c26:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009c28:	4413      	add	r3, r2
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	4b16      	ldr	r3, [pc, #88]	@ (8009c88 <dcd_pma_alloc+0xf0>)
 8009c2e:	801a      	strh	r2, [r3, #0]

  if (dbuf) {
 8009c30:	797b      	ldrb	r3, [r7, #5]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00c      	beq.n	8009c50 <dcd_pma_alloc+0xb8>
    addr |= ((uint32_t)ep_buf_ptr) << 16;
 8009c36:	4b14      	ldr	r3, [pc, #80]	@ (8009c88 <dcd_pma_alloc+0xf0>)
 8009c38:	881b      	ldrh	r3, [r3, #0]
 8009c3a:	041b      	lsls	r3, r3, #16
 8009c3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	637b      	str	r3, [r7, #52]	@ 0x34
    ep_buf_ptr = (uint16_t)(ep_buf_ptr + aligned_len); // increment buffer pointer
 8009c42:	4b11      	ldr	r3, [pc, #68]	@ (8009c88 <dcd_pma_alloc+0xf0>)
 8009c44:	881a      	ldrh	r2, [r3, #0]
 8009c46:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009c48:	4413      	add	r3, r2
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8009c88 <dcd_pma_alloc+0xf0>)
 8009c4e:	801a      	strh	r2, [r3, #0]
  }

  // Verify packet buffer is not overflowed
  TU_ASSERT(ep_buf_ptr <= FSDEV_PMA_SIZE, 0xFFFF);
 8009c50:	4b0d      	ldr	r3, [pc, #52]	@ (8009c88 <dcd_pma_alloc+0xf0>)
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c58:	d911      	bls.n	8009c7e <dcd_pma_alloc+0xe6>
 8009c5a:	f240 12fd 	movw	r2, #509	@ 0x1fd
 8009c5e:	490b      	ldr	r1, [pc, #44]	@ (8009c8c <dcd_pma_alloc+0xf4>)
 8009c60:	480b      	ldr	r0, [pc, #44]	@ (8009c90 <dcd_pma_alloc+0xf8>)
 8009c62:	f001 fcdf 	bl	800b624 <iprintf>
 8009c66:	4b0b      	ldr	r3, [pc, #44]	@ (8009c94 <dcd_pma_alloc+0xfc>)
 8009c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d000      	beq.n	8009c78 <dcd_pma_alloc+0xe0>
 8009c76:	be00      	bkpt	0x0000
 8009c78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c7c:	e000      	b.n	8009c80 <dcd_pma_alloc+0xe8>

  return addr;
 8009c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3738      	adds	r7, #56	@ 0x38
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	2000086e 	.word	0x2000086e
 8009c8c:	0800d120 	.word	0x0800d120
 8009c90:	0800cd24 	.word	0x0800cd24
 8009c94:	e000edf0 	.word	0xe000edf0

08009c98 <dcd_ep_alloc>:

/***
 * Allocate hardware endpoint
 */
static uint8_t dcd_ep_alloc(uint8_t ep_addr, uint8_t ep_type)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	460a      	mov	r2, r1
 8009ca2:	71fb      	strb	r3, [r7, #7]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	71bb      	strb	r3, [r7, #6]
 8009ca8:	79fb      	ldrb	r3, [r7, #7]
 8009caa:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cb2:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009cb4:	75bb      	strb	r3, [r7, #22]
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
 8009cbc:	09db      	lsrs	r3, r3, #7
 8009cbe:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009cc0:	757b      	strb	r3, [r7, #21]

  for (uint8_t i = 0; i < FSDEV_EP_COUNT; i++) {
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	75fb      	strb	r3, [r7, #23]
 8009cc6:	e070      	b.n	8009daa <dcd_ep_alloc+0x112>
    // Check if already allocated
    if (ep_alloc_status[i].allocated[dir] &&
 8009cc8:	7dfa      	ldrb	r2, [r7, #23]
 8009cca:	7d7b      	ldrb	r3, [r7, #21]
 8009ccc:	4942      	ldr	r1, [pc, #264]	@ (8009dd8 <dcd_ep_alloc+0x140>)
 8009cce:	0092      	lsls	r2, r2, #2
 8009cd0:	440a      	add	r2, r1
 8009cd2:	4413      	add	r3, r2
 8009cd4:	3302      	adds	r3, #2
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d010      	beq.n	8009cfe <dcd_ep_alloc+0x66>
        ep_alloc_status[i].ep_type == ep_type &&
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	4a3e      	ldr	r2, [pc, #248]	@ (8009dd8 <dcd_ep_alloc+0x140>)
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	785b      	ldrb	r3, [r3, #1]
    if (ep_alloc_status[i].allocated[dir] &&
 8009ce6:	79ba      	ldrb	r2, [r7, #6]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d108      	bne.n	8009cfe <dcd_ep_alloc+0x66>
        ep_alloc_status[i].ep_num == epnum) {
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
 8009cee:	4a3a      	ldr	r2, [pc, #232]	@ (8009dd8 <dcd_ep_alloc+0x140>)
 8009cf0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
        ep_alloc_status[i].ep_type == ep_type &&
 8009cf4:	7dba      	ldrb	r2, [r7, #22]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d101      	bne.n	8009cfe <dcd_ep_alloc+0x66>
      return i;
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	e068      	b.n	8009dd0 <dcd_ep_alloc+0x138>
    }

    // If EP of current direction is not allocated
    // Except for ISO endpoint, both direction should be free
    if (!ep_alloc_status[i].allocated[dir] &&
 8009cfe:	7dfa      	ldrb	r2, [r7, #23]
 8009d00:	7d7b      	ldrb	r3, [r7, #21]
 8009d02:	4935      	ldr	r1, [pc, #212]	@ (8009dd8 <dcd_ep_alloc+0x140>)
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	440a      	add	r2, r1
 8009d08:	4413      	add	r3, r2
 8009d0a:	3302      	adds	r3, #2
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	f083 0301 	eor.w	r3, r3, #1
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d045      	beq.n	8009da4 <dcd_ep_alloc+0x10c>
 8009d18:	79bb      	ldrb	r3, [r7, #6]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d110      	bne.n	8009d40 <dcd_ep_alloc+0xa8>
        (ep_type != TUSB_XFER_ISOCHRONOUS || !ep_alloc_status[i].allocated[dir ^ 1])) {
 8009d1e:	7dfb      	ldrb	r3, [r7, #23]
 8009d20:	7d7a      	ldrb	r2, [r7, #21]
 8009d22:	f082 0201 	eor.w	r2, r2, #1
 8009d26:	b2d2      	uxtb	r2, r2
 8009d28:	4611      	mov	r1, r2
 8009d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8009dd8 <dcd_ep_alloc+0x140>)
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	440b      	add	r3, r1
 8009d32:	3302      	adds	r3, #2
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	f083 0301 	eor.w	r3, r3, #1
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d031      	beq.n	8009da4 <dcd_ep_alloc+0x10c>
      // Check if EP number is the same
      if (ep_alloc_status[i].ep_num == 0xFF || ep_alloc_status[i].ep_num == epnum) {
 8009d40:	7dfb      	ldrb	r3, [r7, #23]
 8009d42:	4a25      	ldr	r2, [pc, #148]	@ (8009dd8 <dcd_ep_alloc+0x140>)
 8009d44:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8009d48:	2bff      	cmp	r3, #255	@ 0xff
 8009d4a:	d006      	beq.n	8009d5a <dcd_ep_alloc+0xc2>
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	4a22      	ldr	r2, [pc, #136]	@ (8009dd8 <dcd_ep_alloc+0x140>)
 8009d50:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8009d54:	7dba      	ldrb	r2, [r7, #22]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d124      	bne.n	8009da4 <dcd_ep_alloc+0x10c>
        // One EP pair has to be the same type
        if (ep_alloc_status[i].ep_type == 0xFF || ep_alloc_status[i].ep_type == ep_type) {
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	4a1e      	ldr	r2, [pc, #120]	@ (8009dd8 <dcd_ep_alloc+0x140>)
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	785b      	ldrb	r3, [r3, #1]
 8009d64:	2bff      	cmp	r3, #255	@ 0xff
 8009d66:	d007      	beq.n	8009d78 <dcd_ep_alloc+0xe0>
 8009d68:	7dfb      	ldrb	r3, [r7, #23]
 8009d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8009dd8 <dcd_ep_alloc+0x140>)
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	785b      	ldrb	r3, [r3, #1]
 8009d72:	79ba      	ldrb	r2, [r7, #6]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d115      	bne.n	8009da4 <dcd_ep_alloc+0x10c>
          ep_alloc_status[i].ep_num = epnum;
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
 8009d7a:	4917      	ldr	r1, [pc, #92]	@ (8009dd8 <dcd_ep_alloc+0x140>)
 8009d7c:	7dba      	ldrb	r2, [r7, #22]
 8009d7e:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
          ep_alloc_status[i].ep_type = ep_type;
 8009d82:	7dfb      	ldrb	r3, [r7, #23]
 8009d84:	4a14      	ldr	r2, [pc, #80]	@ (8009dd8 <dcd_ep_alloc+0x140>)
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	4413      	add	r3, r2
 8009d8a:	79ba      	ldrb	r2, [r7, #6]
 8009d8c:	705a      	strb	r2, [r3, #1]
          ep_alloc_status[i].allocated[dir] = true;
 8009d8e:	7dfa      	ldrb	r2, [r7, #23]
 8009d90:	7d7b      	ldrb	r3, [r7, #21]
 8009d92:	4911      	ldr	r1, [pc, #68]	@ (8009dd8 <dcd_ep_alloc+0x140>)
 8009d94:	0092      	lsls	r2, r2, #2
 8009d96:	440a      	add	r2, r1
 8009d98:	4413      	add	r3, r2
 8009d9a:	3302      	adds	r3, #2
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	701a      	strb	r2, [r3, #0]

          return i;
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
 8009da2:	e015      	b.n	8009dd0 <dcd_ep_alloc+0x138>
  for (uint8_t i = 0; i < FSDEV_EP_COUNT; i++) {
 8009da4:	7dfb      	ldrb	r3, [r7, #23]
 8009da6:	3301      	adds	r3, #1
 8009da8:	75fb      	strb	r3, [r7, #23]
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	2b07      	cmp	r3, #7
 8009dae:	d98b      	bls.n	8009cc8 <dcd_ep_alloc+0x30>
      }
    }
  }

  // Allocation failed
  TU_ASSERT(0);
 8009db0:	f240 2225 	movw	r2, #549	@ 0x225
 8009db4:	4909      	ldr	r1, [pc, #36]	@ (8009ddc <dcd_ep_alloc+0x144>)
 8009db6:	480a      	ldr	r0, [pc, #40]	@ (8009de0 <dcd_ep_alloc+0x148>)
 8009db8:	f001 fc34 	bl	800b624 <iprintf>
 8009dbc:	4b09      	ldr	r3, [pc, #36]	@ (8009de4 <dcd_ep_alloc+0x14c>)
 8009dbe:	613b      	str	r3, [r7, #16]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d000      	beq.n	8009dce <dcd_ep_alloc+0x136>
 8009dcc:	be00      	bkpt	0x0000
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	2000084c 	.word	0x2000084c
 8009ddc:	0800d130 	.word	0x0800d130
 8009de0:	0800cd24 	.word	0x0800cd24
 8009de4:	e000edf0 	.word	0xe000edf0

08009de8 <edpt0_open>:

void edpt0_open(uint8_t rhport) {
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b09c      	sub	sp, #112	@ 0x70
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	4603      	mov	r3, r0
 8009df0:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dcd_ep_alloc(0x0, TUSB_XFER_CONTROL);
 8009df2:	2100      	movs	r1, #0
 8009df4:	2000      	movs	r0, #0
 8009df6:	f7ff ff4f 	bl	8009c98 <dcd_ep_alloc>
  dcd_ep_alloc(0x80, TUSB_XFER_CONTROL);
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	2080      	movs	r0, #128	@ 0x80
 8009dfe:	f7ff ff4b 	bl	8009c98 <dcd_ep_alloc>

  xfer_status[0][0].max_packet_size = CFG_TUD_ENDPOINT0_SIZE;
 8009e02:	4b7e      	ldr	r3, [pc, #504]	@ (8009ffc <edpt0_open+0x214>)
 8009e04:	2240      	movs	r2, #64	@ 0x40
 8009e06:	819a      	strh	r2, [r3, #12]
  xfer_status[0][0].ep_idx = 0;
 8009e08:	4b7c      	ldr	r3, [pc, #496]	@ (8009ffc <edpt0_open+0x214>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	739a      	strb	r2, [r3, #14]

  xfer_status[0][1].max_packet_size = CFG_TUD_ENDPOINT0_SIZE;
 8009e0e:	4b7b      	ldr	r3, [pc, #492]	@ (8009ffc <edpt0_open+0x214>)
 8009e10:	2240      	movs	r2, #64	@ 0x40
 8009e12:	839a      	strh	r2, [r3, #28]
  xfer_status[0][1].ep_idx = 0;
 8009e14:	4b79      	ldr	r3, [pc, #484]	@ (8009ffc <edpt0_open+0x214>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	779a      	strb	r2, [r3, #30]

  uint16_t pma_addr0 = dcd_pma_alloc(CFG_TUD_ENDPOINT0_SIZE, false);
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	2040      	movs	r0, #64	@ 0x40
 8009e1e:	f7ff febb 	bl	8009b98 <dcd_pma_alloc>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t pma_addr1 = dcd_pma_alloc(CFG_TUD_ENDPOINT0_SIZE, false);
 8009e28:	2100      	movs	r1, #0
 8009e2a:	2040      	movs	r0, #64	@ 0x40
 8009e2c:	f7ff feb4 	bl	8009b98 <dcd_pma_alloc>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8009e36:	2300      	movs	r3, #0
 8009e38:	617b      	str	r3, [r7, #20]
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	74fb      	strb	r3, [r7, #19]
 8009e3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009e42:	823b      	strh	r3, [r7, #16]
  FSDEV_BTABLE->ep16[ep_id][buf_id].addr = addr;
 8009e44:	496e      	ldr	r1, [pc, #440]	@ (800a000 <edpt0_open+0x218>)
 8009e46:	7cfb      	ldrb	r3, [r7, #19]
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	0052      	lsls	r2, r2, #1
 8009e4c:	4413      	add	r3, r2
 8009e4e:	8a3a      	ldrh	r2, [r7, #16]
 8009e50:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
}
 8009e54:	bf00      	nop
 8009e56:	2300      	movs	r3, #0
 8009e58:	61fb      	str	r3, [r7, #28]
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	76fb      	strb	r3, [r7, #27]
 8009e5e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e62:	833b      	strh	r3, [r7, #24]
  FSDEV_BTABLE->ep16[ep_id][buf_id].addr = addr;
 8009e64:	4966      	ldr	r1, [pc, #408]	@ (800a000 <edpt0_open+0x218>)
 8009e66:	7efb      	ldrb	r3, [r7, #27]
 8009e68:	69fa      	ldr	r2, [r7, #28]
 8009e6a:	0052      	lsls	r2, r2, #1
 8009e6c:	4413      	add	r3, r2
 8009e6e:	8b3a      	ldrh	r2, [r7, #24]
 8009e70:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
}
 8009e74:	bf00      	nop
 8009e76:	2300      	movs	r3, #0
 8009e78:	623b      	str	r3, [r7, #32]
  return FSDEV_REG->ep[ep_id].reg;
 8009e7a:	4a62      	ldr	r2, [pc, #392]	@ (800a004 <edpt0_open+0x21c>)
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8009e82:	b29b      	uxth	r3, r3

  btable_set_addr(0, BTABLE_BUF_RX, pma_addr0);
  btable_set_addr(0, BTABLE_BUF_TX, pma_addr1);

  uint32_t ep_reg = ep_read(0) & ~USB_EPREG_MASK; // only get toggle bits
 8009e84:	f423 430f 	bic.w	r3, r3, #36608	@ 0x8f00
 8009e88:	f023 038f 	bic.w	r3, r3, #143	@ 0x8f
 8009e8c:	60fb      	str	r3, [r7, #12]
  ep_reg |= USB_EP_CONTROL;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009e94:	60fb      	str	r3, [r7, #12]
 8009e96:	f107 030c 	add.w	r3, r7, #12
 8009e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8009eb0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009eb4:	2a01      	cmp	r2, #1
 8009eb6:	d101      	bne.n	8009ebc <edpt0_open+0xd4>
 8009eb8:	2204      	movs	r2, #4
 8009eba:	e000      	b.n	8009ebe <edpt0_open+0xd6>
 8009ebc:	220c      	movs	r2, #12
 8009ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8009ec2:	405a      	eors	r2, r3
 8009ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec6:	601a      	str	r2, [r3, #0]
}
 8009ec8:	bf00      	nop
 8009eca:	f107 030c 	add.w	r3, r7, #12
 8009ece:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009ed6:	2302      	movs	r3, #2
 8009ed8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8009ee4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8009ee8:	2a01      	cmp	r2, #1
 8009eea:	d101      	bne.n	8009ef0 <edpt0_open+0x108>
 8009eec:	2204      	movs	r2, #4
 8009eee:	e000      	b.n	8009ef2 <edpt0_open+0x10a>
 8009ef0:	220c      	movs	r2, #12
 8009ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8009ef6:	405a      	eors	r2, r3
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efa:	601a      	str	r2, [r3, #0]
}
 8009efc:	bf00      	nop
 8009efe:	2300      	movs	r3, #0
 8009f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f02:	2301      	movs	r3, #1
 8009f04:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8009f08:	2308      	movs	r3, #8
 8009f0a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8009f0e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8009f12:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009f16:	f107 030b 	add.w	r3, r7, #11
 8009f1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f1c:	f107 030a 	add.w	r3, r7, #10
 8009f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (size > 62) {
 8009f22:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009f26:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f28:	d915      	bls.n	8009f56 <edpt0_open+0x16e>
    block_in_bytes = 32;
 8009f2a:	2320      	movs	r3, #32
 8009f2c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    *blsize = 1;
 8009f30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f32:	2201      	movs	r2, #1
 8009f34:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 8009f36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009f3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f3c:	2320      	movs	r3, #32
 8009f3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f44:	4413      	add	r3, r2
 8009f46:	1e5a      	subs	r2, r3, #1
 8009f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f52:	701a      	strb	r2, [r3, #0]
 8009f54:	e014      	b.n	8009f80 <edpt0_open+0x198>
    block_in_bytes = 2;
 8009f56:	2302      	movs	r3, #2
 8009f58:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    *blsize = 0;
 8009f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f5e:	2200      	movs	r2, #0
 8009f60:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 8009f62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f68:	2302      	movs	r3, #2
 8009f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f70:	4413      	add	r3, r2
 8009f72:	1e5a      	subs	r2, r3, #1
 8009f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f7e:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 8009f80:	7afb      	ldrb	r3, [r7, #11]
 8009f82:	03db      	lsls	r3, r3, #15
 8009f84:	b21a      	sxth	r2, r3
 8009f86:	7abb      	ldrb	r3, [r7, #10]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	7afb      	ldrb	r3, [r7, #11]
 8009f8c:	1acb      	subs	r3, r1, r3
 8009f8e:	029b      	lsls	r3, r3, #10
 8009f90:	b21b      	sxth	r3, r3
 8009f92:	4313      	orrs	r3, r2
 8009f94:	b21b      	sxth	r3, r3
 8009f96:	86fb      	strh	r3, [r7, #54]	@ 0x36
  if (bl_nb == 0) {
 8009f98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d102      	bne.n	8009fa4 <edpt0_open+0x1bc>
    bl_nb = 1 << 15;
 8009f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fa2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 8009fa4:	4916      	ldr	r1, [pc, #88]	@ (800a000 <edpt0_open+0x218>)
 8009fa6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009faa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009fac:	0052      	lsls	r2, r2, #1
 8009fae:	4413      	add	r3, r2
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	440b      	add	r3, r1
 8009fb4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009fb6:	809a      	strh	r2, [r3, #4]
}
 8009fb8:	bf00      	nop
}
 8009fba:	bf00      	nop
  ep_change_status(&ep_reg, TUSB_DIR_IN, EP_STAT_NAK);
  ep_change_status(&ep_reg, TUSB_DIR_OUT, EP_STAT_NAK);
  // no need to explicitly set DTOG bits since we aren't masked DTOG bit

  edpt0_prepare_setup(); // prepare for setup packet
  ep_write(0, ep_reg, false);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009fc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
  if (need_exclusive) {
 8009fca:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d002      	beq.n	8009fd8 <edpt0_open+0x1f0>
    dcd_int_disable(0);
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	f7fe fe92 	bl	8008cfc <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8009fd8:	4a0a      	ldr	r2, [pc, #40]	@ (800a004 <edpt0_open+0x21c>)
 8009fda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fdc:	b299      	uxth	r1, r3
 8009fde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fe0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009fe4:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <edpt0_open+0x20a>
    dcd_int_enable(0);
 8009fec:	2000      	movs	r0, #0
 8009fee:	f7fe fe63 	bl	8008cb8 <dcd_int_enable>
}
 8009ff2:	bf00      	nop
}
 8009ff4:	bf00      	nop
 8009ff6:	3770      	adds	r7, #112	@ 0x70
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	2000074c 	.word	0x2000074c
 800a000:	40006000 	.word	0x40006000
 800a004:	40005c00 	.word	0x40005c00

0800a008 <dcd_edpt_open>:

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const *desc_ep) {
 800a008:	b580      	push	{r7, lr}
 800a00a:	b096      	sub	sp, #88	@ 0x58
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4603      	mov	r3, r0
 800a010:	6039      	str	r1, [r7, #0]
 800a012:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  uint8_t const ep_addr = desc_ep->bEndpointAddress;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	789b      	ldrb	r3, [r3, #2]
 800a018:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800a01c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a020:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a024:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800a028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a02c:	b2db      	uxtb	r3, r3
  uint8_t const ep_num = tu_edpt_number(ep_addr);
 800a02e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 800a032:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a036:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a03a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a03e:	09db      	lsrs	r3, r3, #7
 800a040:	b2db      	uxtb	r3, r3
  tusb_dir_t const dir = tu_edpt_dir(ep_addr);
 800a042:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800a04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a04c:	889b      	ldrh	r3, [r3, #4]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a054:	b29b      	uxth	r3, r3
  const uint16_t packet_size = tu_edpt_packet_size(desc_ep);
 800a056:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
  uint8_t const ep_idx = dcd_ep_alloc(ep_addr, desc_ep->bmAttributes.xfer);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	78db      	ldrb	r3, [r3, #3]
 800a05e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a062:	b2db      	uxtb	r3, r3
 800a064:	461a      	mov	r2, r3
 800a066:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a06a:	4611      	mov	r1, r2
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7ff fe13 	bl	8009c98 <dcd_ep_alloc>
 800a072:	4603      	mov	r3, r0
 800a074:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
  TU_ASSERT(ep_idx < FSDEV_EP_COUNT);
 800a078:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800a07c:	2b07      	cmp	r3, #7
 800a07e:	d910      	bls.n	800a0a2 <dcd_edpt_open+0x9a>
 800a080:	f240 224b 	movw	r2, #587	@ 0x24b
 800a084:	4976      	ldr	r1, [pc, #472]	@ (800a260 <dcd_edpt_open+0x258>)
 800a086:	4877      	ldr	r0, [pc, #476]	@ (800a264 <dcd_edpt_open+0x25c>)
 800a088:	f001 facc 	bl	800b624 <iprintf>
 800a08c:	4b76      	ldr	r3, [pc, #472]	@ (800a268 <dcd_edpt_open+0x260>)
 800a08e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0301 	and.w	r3, r3, #1
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d000      	beq.n	800a09e <dcd_edpt_open+0x96>
 800a09c:	be00      	bkpt	0x0000
 800a09e:	2300      	movs	r3, #0
 800a0a0:	e0d9      	b.n	800a256 <dcd_edpt_open+0x24e>

  uint32_t ep_reg = ep_read(ep_idx) & ~USB_EPREG_MASK;
 800a0a2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800a0a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return FSDEV_REG->ep[ep_id].reg;
 800a0a8:	4a70      	ldr	r2, [pc, #448]	@ (800a26c <dcd_edpt_open+0x264>)
 800a0aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ac:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	f423 430f 	bic.w	r3, r3, #36608	@ 0x8f00
 800a0b6:	f023 038f 	bic.w	r3, r3, #143	@ 0x8f
 800a0ba:	60fb      	str	r3, [r7, #12]
 800a0bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a0c0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a0c4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a0c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0cc:	b2db      	uxtb	r3, r3
  ep_reg |= tu_edpt_number(ep_addr) | USB_EP_CTR_TX | USB_EP_CTR_RX;
 800a0ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	60fb      	str	r3, [r7, #12]

  // Set type
  switch (desc_ep->bmAttributes.xfer) {
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	78db      	ldrb	r3, [r3, #3]
 800a0e2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d002      	beq.n	800a0f2 <dcd_edpt_open+0xea>
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d003      	beq.n	800a0f8 <dcd_edpt_open+0xf0>
 800a0f0:	e007      	b.n	800a102 <dcd_edpt_open+0xfa>
    case TUSB_XFER_BULK:
      ep_reg |= USB_EP_BULK;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	60fb      	str	r3, [r7, #12]
      break;
 800a0f6:	e015      	b.n	800a124 <dcd_edpt_open+0x11c>
    case TUSB_XFER_INTERRUPT:
      ep_reg |= USB_EP_INTERRUPT;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800a0fe:	60fb      	str	r3, [r7, #12]
      break;
 800a100:	e010      	b.n	800a124 <dcd_edpt_open+0x11c>

    default:
      // Note: ISO endpoint should use alloc / active functions
      TU_ASSERT(false);
 800a102:	f240 225b 	movw	r2, #603	@ 0x25b
 800a106:	4956      	ldr	r1, [pc, #344]	@ (800a260 <dcd_edpt_open+0x258>)
 800a108:	4856      	ldr	r0, [pc, #344]	@ (800a264 <dcd_edpt_open+0x25c>)
 800a10a:	f001 fa8b 	bl	800b624 <iprintf>
 800a10e:	4b56      	ldr	r3, [pc, #344]	@ (800a268 <dcd_edpt_open+0x260>)
 800a110:	647b      	str	r3, [r7, #68]	@ 0x44
 800a112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0301 	and.w	r3, r3, #1
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d000      	beq.n	800a120 <dcd_edpt_open+0x118>
 800a11e:	be00      	bkpt	0x0000
 800a120:	2300      	movs	r3, #0
 800a122:	e098      	b.n	800a256 <dcd_edpt_open+0x24e>
  }

  /* Create a packet memory buffer area. */
  uint16_t pma_addr = dcd_pma_alloc(packet_size, false);
 800a124:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800a128:	2100      	movs	r1, #0
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7ff fd34 	bl	8009b98 <dcd_pma_alloc>
 800a130:	4603      	mov	r3, r0
 800a132:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  btable_set_addr(ep_idx, dir == TUSB_DIR_IN ? BTABLE_BUF_TX : BTABLE_BUF_RX, pma_addr);
 800a136:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800a13a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800a13e:	2a01      	cmp	r2, #1
 800a140:	bf14      	ite	ne
 800a142:	2201      	movne	r2, #1
 800a144:	2200      	moveq	r2, #0
 800a146:	b2d2      	uxtb	r2, r2
 800a148:	623b      	str	r3, [r7, #32]
 800a14a:	4613      	mov	r3, r2
 800a14c:	77fb      	strb	r3, [r7, #31]
 800a14e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a152:	83bb      	strh	r3, [r7, #28]
  FSDEV_BTABLE->ep16[ep_id][buf_id].addr = addr;
 800a154:	4946      	ldr	r1, [pc, #280]	@ (800a270 <dcd_edpt_open+0x268>)
 800a156:	7ffb      	ldrb	r3, [r7, #31]
 800a158:	6a3a      	ldr	r2, [r7, #32]
 800a15a:	0052      	lsls	r2, r2, #1
 800a15c:	4413      	add	r3, r2
 800a15e:	8bba      	ldrh	r2, [r7, #28]
 800a160:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
}
 800a164:	bf00      	nop
 800a166:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800a16a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800a16e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800a172:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  return &xfer_status[epnum][dir];
 800a176:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800a17a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a17e:	0052      	lsls	r2, r2, #1
 800a180:	4413      	add	r3, r2
 800a182:	011b      	lsls	r3, r3, #4
 800a184:	4a3b      	ldr	r2, [pc, #236]	@ (800a274 <dcd_edpt_open+0x26c>)
 800a186:	4413      	add	r3, r2

  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 800a188:	64bb      	str	r3, [r7, #72]	@ 0x48
  xfer->max_packet_size = packet_size;
 800a18a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a18c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 800a190:	819a      	strh	r2, [r3, #12]
  xfer->ep_idx = ep_idx;
 800a192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a194:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 800a198:	739a      	strb	r2, [r3, #14]
 800a19a:	f107 030c 	add.w	r3, r7, #12
 800a19e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1a0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800a1a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800a1b6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a1ba:	2a01      	cmp	r2, #1
 800a1bc:	d101      	bne.n	800a1c2 <dcd_edpt_open+0x1ba>
 800a1be:	2204      	movs	r2, #4
 800a1c0:	e000      	b.n	800a1c4 <dcd_edpt_open+0x1bc>
 800a1c2:	220c      	movs	r2, #12
 800a1c4:	fa01 f202 	lsl.w	r2, r1, r2
 800a1c8:	405a      	eors	r2, r3
 800a1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1cc:	601a      	str	r2, [r3, #0]
}
 800a1ce:	bf00      	nop
 800a1d0:	f107 030c 	add.w	r3, r7, #12
 800a1d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1d6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800a1da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  *reg ^= (state << (USB_EP_DTOG_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800a1ec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a1f0:	2a01      	cmp	r2, #1
 800a1f2:	d101      	bne.n	800a1f8 <dcd_edpt_open+0x1f0>
 800a1f4:	2206      	movs	r2, #6
 800a1f6:	e000      	b.n	800a1fa <dcd_edpt_open+0x1f2>
 800a1f8:	220e      	movs	r2, #14
 800a1fa:	fa01 f202 	lsl.w	r2, r1, r2
 800a1fe:	405a      	eors	r2, r3
 800a200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a202:	601a      	str	r2, [r3, #0]
}
 800a204:	bf00      	nop

  ep_change_status(&ep_reg, dir, EP_STAT_NAK);
  ep_change_dtog(&ep_reg, dir, 0);

  // reserve other direction toggle bits
  if (dir == TUSB_DIR_IN) {
 800a206:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d104      	bne.n	800a218 <dcd_edpt_open+0x210>
    ep_reg &= ~(USB_EPRX_STAT | USB_EP_DTOG_RX);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a214:	60fb      	str	r3, [r7, #12]
 800a216:	e003      	b.n	800a220 <dcd_edpt_open+0x218>
  } else {
    ep_reg &= ~(USB_EPTX_STAT | USB_EP_DTOG_TX);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a21e:	60fb      	str	r3, [r7, #12]
  }

  ep_write(ep_idx, ep_reg, true);
 800a220:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	61ba      	str	r2, [r7, #24]
 800a228:	617b      	str	r3, [r7, #20]
 800a22a:	2301      	movs	r3, #1
 800a22c:	74fb      	strb	r3, [r7, #19]
  if (need_exclusive) {
 800a22e:	7cfb      	ldrb	r3, [r7, #19]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <dcd_edpt_open+0x232>
    dcd_int_disable(0);
 800a234:	2000      	movs	r0, #0
 800a236:	f7fe fd61 	bl	8008cfc <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800a23a:	4a0c      	ldr	r2, [pc, #48]	@ (800a26c <dcd_edpt_open+0x264>)
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	b299      	uxth	r1, r3
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800a246:	7cfb      	ldrb	r3, [r7, #19]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d002      	beq.n	800a252 <dcd_edpt_open+0x24a>
    dcd_int_enable(0);
 800a24c:	2000      	movs	r0, #0
 800a24e:	f7fe fd33 	bl	8008cb8 <dcd_int_enable>
}
 800a252:	bf00      	nop

  return true;
 800a254:	2301      	movs	r3, #1
}
 800a256:	4618      	mov	r0, r3
 800a258:	3758      	adds	r7, #88	@ 0x58
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	0800d140 	.word	0x0800d140
 800a264:	0800cd24 	.word	0x0800cd24
 800a268:	e000edf0 	.word	0xe000edf0
 800a26c:	40005c00 	.word	0x40005c00
 800a270:	40006000 	.word	0x40006000
 800a274:	2000074c 	.word	0x2000074c

0800a278 <dcd_edpt_close_all>:

void dcd_edpt_close_all(uint8_t rhport) {
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	4603      	mov	r3, r0
 800a280:	71fb      	strb	r3, [r7, #7]
  dcd_int_disable(rhport);
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	4618      	mov	r0, r3
 800a286:	f7fe fd39 	bl	8008cfc <dcd_int_disable>

  for (uint32_t i = 1; i < FSDEV_EP_COUNT; i++) {
 800a28a:	2301      	movs	r3, #1
 800a28c:	617b      	str	r3, [r7, #20]
 800a28e:	e032      	b.n	800a2f6 <dcd_edpt_close_all+0x7e>
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	613b      	str	r3, [r7, #16]
 800a294:	2300      	movs	r3, #0
 800a296:	60fb      	str	r3, [r7, #12]
 800a298:	2300      	movs	r3, #0
 800a29a:	72fb      	strb	r3, [r7, #11]
  if (need_exclusive) {
 800a29c:	7afb      	ldrb	r3, [r7, #11]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d002      	beq.n	800a2a8 <dcd_edpt_close_all+0x30>
    dcd_int_disable(0);
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	f7fe fd2a 	bl	8008cfc <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800a2a8:	4a1a      	ldr	r2, [pc, #104]	@ (800a314 <dcd_edpt_close_all+0x9c>)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	b299      	uxth	r1, r3
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800a2b4:	7afb      	ldrb	r3, [r7, #11]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d002      	beq.n	800a2c0 <dcd_edpt_close_all+0x48>
    dcd_int_enable(0);
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	f7fe fcfc 	bl	8008cb8 <dcd_int_enable>
}
 800a2c0:	bf00      	nop
    // Reset endpoint
    ep_write(i, 0, false);
    // Clear EP allocation status
    ep_alloc_status[i].ep_num = 0xFF;
 800a2c2:	4a15      	ldr	r2, [pc, #84]	@ (800a318 <dcd_edpt_close_all+0xa0>)
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	21ff      	movs	r1, #255	@ 0xff
 800a2c8:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    ep_alloc_status[i].ep_type = 0xFF;
 800a2cc:	4a12      	ldr	r2, [pc, #72]	@ (800a318 <dcd_edpt_close_all+0xa0>)
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	22ff      	movs	r2, #255	@ 0xff
 800a2d6:	705a      	strb	r2, [r3, #1]
    ep_alloc_status[i].allocated[0] = false;
 800a2d8:	4a0f      	ldr	r2, [pc, #60]	@ (800a318 <dcd_edpt_close_all+0xa0>)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4413      	add	r3, r2
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	709a      	strb	r2, [r3, #2]
    ep_alloc_status[i].allocated[1] = false;
 800a2e4:	4a0c      	ldr	r2, [pc, #48]	@ (800a318 <dcd_edpt_close_all+0xa0>)
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	70da      	strb	r2, [r3, #3]
  for (uint32_t i = 1; i < FSDEV_EP_COUNT; i++) {
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	617b      	str	r3, [r7, #20]
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	2b07      	cmp	r3, #7
 800a2fa:	d9c9      	bls.n	800a290 <dcd_edpt_close_all+0x18>
  }

  dcd_int_enable(rhport);
 800a2fc:	79fb      	ldrb	r3, [r7, #7]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fe fcda 	bl	8008cb8 <dcd_int_enable>

  // Reset PMA allocation
  ep_buf_ptr = FSDEV_BTABLE_BASE + 8 * CFG_TUD_ENDPPOINT_MAX + 2 * CFG_TUD_ENDPOINT0_SIZE;
 800a304:	4b05      	ldr	r3, [pc, #20]	@ (800a31c <dcd_edpt_close_all+0xa4>)
 800a306:	22c0      	movs	r2, #192	@ 0xc0
 800a308:	801a      	strh	r2, [r3, #0]
}
 800a30a:	bf00      	nop
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	40005c00 	.word	0x40005c00
 800a318:	2000084c 	.word	0x2000084c
 800a31c:	2000086e 	.word	0x2000086e

0800a320 <dcd_transmit_packet>:

  return true;
}

// Currently, single-buffered, and only 64 bytes at a time (max)
static void dcd_transmit_packet(xfer_ctl_t *xfer, uint16_t ep_ix) {
 800a320:	b580      	push	{r7, lr}
 800a322:	b092      	sub	sp, #72	@ 0x48
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	807b      	strh	r3, [r7, #2]
  uint16_t len = tu_min16(xfer->total_len - xfer->queued_len, xfer->max_packet_size);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	891a      	ldrh	r2, [r3, #8]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	895b      	ldrh	r3, [r3, #10]
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	b29a      	uxth	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	899b      	ldrh	r3, [r3, #12]
 800a33c:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800a33e:	86bb      	strh	r3, [r7, #52]	@ 0x34
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a340:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a342:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a344:	4293      	cmp	r3, r2
 800a346:	bf28      	it	cs
 800a348:	4613      	movcs	r3, r2
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  uint32_t ep_reg = ep_read(ep_ix) | USB_EP_CTR_TX | USB_EP_CTR_RX; // reserve CTR
 800a350:	887b      	ldrh	r3, [r7, #2]
 800a352:	63bb      	str	r3, [r7, #56]	@ 0x38
  return FSDEV_REG->ep[ep_id].reg;
 800a354:	4a61      	ldr	r2, [pc, #388]	@ (800a4dc <dcd_transmit_packet+0x1bc>)
 800a356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a358:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a366:	60bb      	str	r3, [r7, #8]

  bool const is_iso = ep_is_iso(ep_reg);
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 800a36c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a36e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a376:	bf0c      	ite	eq
 800a378:	2301      	moveq	r3, #1
 800a37a:	2300      	movne	r3, #0
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  uint8_t buf_id;
  if (is_iso) {
 800a382:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a386:	2b00      	cmp	r3, #0
 800a388:	d007      	beq.n	800a39a <dcd_transmit_packet+0x7a>
    buf_id = (ep_reg & USB_EP_DTOG_TX) ? 1 : 0;
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	099b      	lsrs	r3, r3, #6
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a398:	e002      	b.n	800a3a0 <dcd_transmit_packet+0x80>
  } else {
    buf_id = BTABLE_BUF_TX;
 800a39a:	2300      	movs	r3, #0
 800a39c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }
  uint16_t addr_ptr = (uint16_t) btable_get_addr(ep_ix, buf_id);
 800a3a0:	887b      	ldrh	r3, [r7, #2]
 800a3a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a3a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  return FSDEV_BTABLE->ep16[ep_id][buf_id].addr;
 800a3ac:	494c      	ldr	r1, [pc, #304]	@ (800a4e0 <dcd_transmit_packet+0x1c0>)
 800a3ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a3b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3b4:	0052      	lsls	r2, r2, #1
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

  if (xfer->ff) {
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d009      	beq.n	800a3de <dcd_transmit_packet+0xbe>
    dcd_write_packet_memory_ff(xfer->ff, addr_ptr, len);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800a3d2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 fc8d 	bl	800acf6 <dcd_write_packet_memory_ff>
 800a3dc:	e00b      	b.n	800a3f6 <dcd_transmit_packet+0xd6>
  } else {
    dcd_write_packet_memory(addr_ptr, &(xfer->buffer[xfer->queued_len]), len);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	8952      	ldrh	r2, [r2, #10]
 800a3e6:	1899      	adds	r1, r3, r2
 800a3e8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800a3ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f000 fbd9 	bl	800aba8 <dcd_write_packet_memory>
  }
  xfer->queued_len += len;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	895a      	ldrh	r2, [r3, #10]
 800a3fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a3fe:	4413      	add	r3, r2
 800a400:	b29a      	uxth	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	815a      	strh	r2, [r3, #10]

  btable_set_count(ep_ix, buf_id, len);
 800a406:	887b      	ldrh	r3, [r7, #2]
 800a408:	623b      	str	r3, [r7, #32]
 800a40a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a40e:	77fb      	strb	r3, [r7, #31]
 800a410:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a414:	83bb      	strh	r3, [r7, #28]
  uint16_t cnt = FSDEV_BTABLE->ep16[ep_id][buf_id].count;
 800a416:	4932      	ldr	r1, [pc, #200]	@ (800a4e0 <dcd_transmit_packet+0x1c0>)
 800a418:	7ffb      	ldrb	r3, [r7, #31]
 800a41a:	6a3a      	ldr	r2, [r7, #32]
 800a41c:	0052      	lsls	r2, r2, #1
 800a41e:	4413      	add	r3, r2
 800a420:	00db      	lsls	r3, r3, #3
 800a422:	440b      	add	r3, r1
 800a424:	889b      	ldrh	r3, [r3, #4]
 800a426:	837b      	strh	r3, [r7, #26]
  cnt = (cnt & ~0x3FFU) | (byte_count & 0x3FFU);
 800a428:	8b7b      	ldrh	r3, [r7, #26]
 800a42a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800a42e:	f023 0303 	bic.w	r3, r3, #3
 800a432:	b29a      	uxth	r2, r3
 800a434:	8bbb      	ldrh	r3, [r7, #28]
 800a436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	4313      	orrs	r3, r2
 800a43e:	837b      	strh	r3, [r7, #26]
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = cnt;
 800a440:	4927      	ldr	r1, [pc, #156]	@ (800a4e0 <dcd_transmit_packet+0x1c0>)
 800a442:	7ffb      	ldrb	r3, [r7, #31]
 800a444:	6a3a      	ldr	r2, [r7, #32]
 800a446:	0052      	lsls	r2, r2, #1
 800a448:	4413      	add	r3, r2
 800a44a:	00db      	lsls	r3, r3, #3
 800a44c:	440b      	add	r3, r1
 800a44e:	8b7a      	ldrh	r2, [r7, #26]
 800a450:	809a      	strh	r2, [r3, #4]
}
 800a452:	bf00      	nop
 800a454:	f107 0308 	add.w	r3, r7, #8
 800a458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a45a:	2301      	movs	r3, #1
 800a45c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a460:	2303      	movs	r3, #3
 800a462:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800a46e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a472:	2a01      	cmp	r2, #1
 800a474:	d101      	bne.n	800a47a <dcd_transmit_packet+0x15a>
 800a476:	2204      	movs	r2, #4
 800a478:	e000      	b.n	800a47c <dcd_transmit_packet+0x15c>
 800a47a:	220c      	movs	r2, #12
 800a47c:	fa01 f202 	lsl.w	r2, r1, r2
 800a480:	405a      	eors	r2, r3
 800a482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a484:	601a      	str	r2, [r3, #0]
}
 800a486:	bf00      	nop
  ep_change_status(&ep_reg, TUSB_DIR_IN, EP_STAT_VALID);

  if (is_iso) {
 800a488:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <dcd_transmit_packet+0x176>
    xfer->iso_in_sending = true;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	73da      	strb	r2, [r3, #15]
  }
  ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(TUSB_DIR_IN); // only change TX Status, reserve other toggle bits
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	f648 73bf 	movw	r3, #36799	@ 0x8fbf
 800a49c:	4013      	ands	r3, r2
 800a49e:	60bb      	str	r3, [r7, #8]
  ep_write(ep_ix, ep_reg, true);
 800a4a0:	887a      	ldrh	r2, [r7, #2]
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	617a      	str	r2, [r7, #20]
 800a4a6:	613b      	str	r3, [r7, #16]
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	73fb      	strb	r3, [r7, #15]
  if (need_exclusive) {
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d002      	beq.n	800a4b8 <dcd_transmit_packet+0x198>
    dcd_int_disable(0);
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	f7fe fc22 	bl	8008cfc <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800a4b8:	4a08      	ldr	r2, [pc, #32]	@ (800a4dc <dcd_transmit_packet+0x1bc>)
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	b299      	uxth	r1, r3
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d002      	beq.n	800a4d0 <dcd_transmit_packet+0x1b0>
    dcd_int_enable(0);
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	f7fe fbf4 	bl	8008cb8 <dcd_int_enable>
}
 800a4d0:	bf00      	nop
}
 800a4d2:	bf00      	nop
 800a4d4:	3748      	adds	r7, #72	@ 0x48
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	40005c00 	.word	0x40005c00
 800a4e0:	40006000 	.word	0x40006000

0800a4e4 <edpt_xfer>:

static bool edpt_xfer(uint8_t rhport, uint8_t ep_num, tusb_dir_t dir) {
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b0b2      	sub	sp, #200	@ 0xc8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	71fb      	strb	r3, [r7, #7]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	71bb      	strb	r3, [r7, #6]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	717b      	strb	r3, [r7, #5]
 800a4f6:	79bb      	ldrb	r3, [r7, #6]
 800a4f8:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 800a4fc:	797b      	ldrb	r3, [r7, #5]
 800a4fe:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
  return &xfer_status[epnum][dir];
 800a502:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 800a506:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 800a50a:	0052      	lsls	r2, r2, #1
 800a50c:	4413      	add	r3, r2
 800a50e:	011b      	lsls	r3, r3, #4
 800a510:	4aae      	ldr	r2, [pc, #696]	@ (800a7cc <edpt_xfer+0x2e8>)
 800a512:	4413      	add	r3, r2
  (void) rhport;

  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 800a514:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint8_t const ep_idx = xfer->ep_idx;
 800a518:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a51c:	7b9b      	ldrb	r3, [r3, #14]
 800a51e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

  if (dir == TUSB_DIR_IN) {
 800a522:	797b      	ldrb	r3, [r7, #5]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d108      	bne.n	800a53a <edpt_xfer+0x56>
    dcd_transmit_packet(xfer, ep_idx);
 800a528:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	4619      	mov	r1, r3
 800a530:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 800a534:	f7ff fef4 	bl	800a320 <dcd_transmit_packet>
 800a538:	e1b3      	b.n	800a8a2 <edpt_xfer+0x3be>
  } else {
    uint32_t ep_reg = ep_read(ep_idx) | USB_EP_CTR_TX | USB_EP_CTR_RX; // reserve CTR
 800a53a:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800a53e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return FSDEV_REG->ep[ep_id].reg;
 800a542:	4aa3      	ldr	r2, [pc, #652]	@ (800a7d0 <edpt_xfer+0x2ec>)
 800a544:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a548:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a556:	617b      	str	r3, [r7, #20]
    ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(dir);
 800a558:	797b      	ldrb	r3, [r7, #5]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d102      	bne.n	800a564 <edpt_xfer+0x80>
 800a55e:	f648 72bf 	movw	r2, #36799	@ 0x8fbf
 800a562:	e001      	b.n	800a568 <edpt_xfer+0x84>
 800a564:	f64b 728f 	movw	r2, #49039	@ 0xbf8f
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	4013      	ands	r3, r2
 800a56c:	617b      	str	r3, [r7, #20]

    uint16_t cnt = tu_min16(xfer->total_len, xfer->max_packet_size);
 800a56e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a572:	891a      	ldrh	r2, [r3, #8]
 800a574:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a578:	899b      	ldrh	r3, [r3, #12]
 800a57a:	f8a7 20b2 	strh.w	r2, [r7, #178]	@ 0xb2
 800a57e:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
 800a582:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 800a586:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800a58a:	4293      	cmp	r3, r2
 800a58c:	bf28      	it	cs
 800a58e:	4613      	movcs	r3, r2
 800a590:	b29b      	uxth	r3, r3
 800a592:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0

    if (ep_is_iso(ep_reg)) {
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 800a59c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a5a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a5a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5a8:	bf0c      	ite	eq
 800a5aa:	2301      	moveq	r3, #1
 800a5ac:	2300      	movne	r3, #0
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 80dc 	beq.w	800a76e <edpt_xfer+0x28a>
      btable_set_rx_bufsize(ep_idx, 0, cnt);
 800a5b6:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800a5ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a5be:	2300      	movs	r3, #0
 800a5c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800a5c4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 800a5c8:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 800a5cc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800a5d0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 800a5d4:	f107 0311 	add.w	r3, r7, #17
 800a5d8:	677b      	str	r3, [r7, #116]	@ 0x74
 800a5da:	f107 0310 	add.w	r3, r7, #16
 800a5de:	673b      	str	r3, [r7, #112]	@ 0x70
  if (size > 62) {
 800a5e0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a5e4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5e6:	d915      	bls.n	800a614 <edpt_xfer+0x130>
    block_in_bytes = 32;
 800a5e8:	2320      	movs	r3, #32
 800a5ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    *blsize = 1;
 800a5ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 800a5f4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a5f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a5fa:	2320      	movs	r3, #32
 800a5fc:	667b      	str	r3, [r7, #100]	@ 0x64
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800a5fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a602:	4413      	add	r3, r2
 800a604:	1e5a      	subs	r2, r3, #1
 800a606:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a608:	fbb2 f3f3 	udiv	r3, r2, r3
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a610:	701a      	strb	r2, [r3, #0]
 800a612:	e014      	b.n	800a63e <edpt_xfer+0x15a>
    block_in_bytes = 2;
 800a614:	2302      	movs	r3, #2
 800a616:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    *blsize = 0;
 800a61a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a61c:	2200      	movs	r2, #0
 800a61e:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800a620:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a624:	663b      	str	r3, [r7, #96]	@ 0x60
 800a626:	2302      	movs	r3, #2
 800a628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a62a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a62c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a62e:	4413      	add	r3, r2
 800a630:	1e5a      	subs	r2, r3, #1
 800a632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a634:	fbb2 f3f3 	udiv	r3, r2, r3
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a63c:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 800a63e:	7c7b      	ldrb	r3, [r7, #17]
 800a640:	03db      	lsls	r3, r3, #15
 800a642:	b21a      	sxth	r2, r3
 800a644:	7c3b      	ldrb	r3, [r7, #16]
 800a646:	4619      	mov	r1, r3
 800a648:	7c7b      	ldrb	r3, [r7, #17]
 800a64a:	1acb      	subs	r3, r1, r3
 800a64c:	029b      	lsls	r3, r3, #10
 800a64e:	b21b      	sxth	r3, r3
 800a650:	4313      	orrs	r3, r2
 800a652:	b21b      	sxth	r3, r3
 800a654:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  if (bl_nb == 0) {
 800a658:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d103      	bne.n	800a668 <edpt_xfer+0x184>
    bl_nb = 1 << 15;
 800a660:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a664:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 800a668:	495a      	ldr	r1, [pc, #360]	@ (800a7d4 <edpt_xfer+0x2f0>)
 800a66a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800a66e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a672:	0052      	lsls	r2, r2, #1
 800a674:	4413      	add	r3, r2
 800a676:	00db      	lsls	r3, r3, #3
 800a678:	440b      	add	r3, r1
 800a67a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800a67e:	809a      	strh	r2, [r3, #4]
}
 800a680:	bf00      	nop
      btable_set_rx_bufsize(ep_idx, 1, cnt);
 800a682:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800a686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a68a:	2301      	movs	r3, #1
 800a68c:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 800a690:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 800a694:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
 800a698:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 800a69c:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800a6a0:	f107 030f 	add.w	r3, r7, #15
 800a6a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a6a8:	f107 030e 	add.w	r3, r7, #14
 800a6ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (size > 62) {
 800a6b0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a6b4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6b6:	d91c      	bls.n	800a6f2 <edpt_xfer+0x20e>
    block_in_bytes = 32;
 800a6b8:	2320      	movs	r3, #32
 800a6ba:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    *blsize = 1;
 800a6be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 800a6c6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a6ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6ce:	2320      	movs	r3, #32
 800a6d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a6d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a6d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6dc:	4413      	add	r3, r2
 800a6de:	1e5a      	subs	r2, r3, #1
 800a6e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a6ee:	701a      	strb	r2, [r3, #0]
 800a6f0:	e01b      	b.n	800a72a <edpt_xfer+0x246>
    block_in_bytes = 2;
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    *blsize = 0;
 800a6f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800a700:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a704:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a708:	2302      	movs	r3, #2
 800a70a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a70e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800a712:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a716:	4413      	add	r3, r2
 800a718:	1e5a      	subs	r2, r3, #1
 800a71a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a71e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a722:	b2da      	uxtb	r2, r3
 800a724:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a728:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
 800a72c:	03db      	lsls	r3, r3, #15
 800a72e:	b21a      	sxth	r2, r3
 800a730:	7bbb      	ldrb	r3, [r7, #14]
 800a732:	4619      	mov	r1, r3
 800a734:	7bfb      	ldrb	r3, [r7, #15]
 800a736:	1acb      	subs	r3, r1, r3
 800a738:	029b      	lsls	r3, r3, #10
 800a73a:	b21b      	sxth	r3, r3
 800a73c:	4313      	orrs	r3, r2
 800a73e:	b21b      	sxth	r3, r3
 800a740:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  if (bl_nb == 0) {
 800a744:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d103      	bne.n	800a754 <edpt_xfer+0x270>
    bl_nb = 1 << 15;
 800a74c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a750:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 800a754:	491f      	ldr	r1, [pc, #124]	@ (800a7d4 <edpt_xfer+0x2f0>)
 800a756:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800a75a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a75e:	0052      	lsls	r2, r2, #1
 800a760:	4413      	add	r3, r2
 800a762:	00db      	lsls	r3, r3, #3
 800a764:	440b      	add	r3, r1
 800a766:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800a76a:	809a      	strh	r2, [r3, #4]
}
 800a76c:	e066      	b.n	800a83c <edpt_xfer+0x358>
    } else {
      btable_set_rx_bufsize(ep_idx, BTABLE_BUF_RX, cnt);
 800a76e:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800a772:	657b      	str	r3, [r7, #84]	@ 0x54
 800a774:	2301      	movs	r3, #1
 800a776:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800a77a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 800a77e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800a782:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800a786:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a78a:	f107 0313 	add.w	r3, r7, #19
 800a78e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a790:	f107 0312 	add.w	r3, r7, #18
 800a794:	647b      	str	r3, [r7, #68]	@ 0x44
  if (size > 62) {
 800a796:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a79a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a79c:	d91c      	bls.n	800a7d8 <edpt_xfer+0x2f4>
    block_in_bytes = 32;
 800a79e:	2320      	movs	r3, #32
 800a7a0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    *blsize = 1;
 800a7a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 800a7aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7b0:	2320      	movs	r3, #32
 800a7b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a7b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b8:	4413      	add	r3, r2
 800a7ba:	1e5a      	subs	r2, r3, #1
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7c6:	701a      	strb	r2, [r3, #0]
 800a7c8:	e01b      	b.n	800a802 <edpt_xfer+0x31e>
 800a7ca:	bf00      	nop
 800a7cc:	2000074c 	.word	0x2000074c
 800a7d0:	40005c00 	.word	0x40005c00
 800a7d4:	40006000 	.word	0x40006000
    block_in_bytes = 2;
 800a7d8:	2302      	movs	r3, #2
 800a7da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    *blsize = 0;
 800a7de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800a7e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a7e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7ea:	2302      	movs	r3, #2
 800a7ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f2:	4413      	add	r3, r2
 800a7f4:	1e5a      	subs	r2, r3, #1
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a800:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 800a802:	7cfb      	ldrb	r3, [r7, #19]
 800a804:	03db      	lsls	r3, r3, #15
 800a806:	b21a      	sxth	r2, r3
 800a808:	7cbb      	ldrb	r3, [r7, #18]
 800a80a:	4619      	mov	r1, r3
 800a80c:	7cfb      	ldrb	r3, [r7, #19]
 800a80e:	1acb      	subs	r3, r1, r3
 800a810:	029b      	lsls	r3, r3, #10
 800a812:	b21b      	sxth	r3, r3
 800a814:	4313      	orrs	r3, r2
 800a816:	b21b      	sxth	r3, r3
 800a818:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  if (bl_nb == 0) {
 800a81a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d102      	bne.n	800a826 <edpt_xfer+0x342>
    bl_nb = 1 << 15;
 800a820:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a824:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 800a826:	4921      	ldr	r1, [pc, #132]	@ (800a8ac <edpt_xfer+0x3c8>)
 800a828:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800a82c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a82e:	0052      	lsls	r2, r2, #1
 800a830:	4413      	add	r3, r2
 800a832:	00db      	lsls	r3, r3, #3
 800a834:	440b      	add	r3, r1
 800a836:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a838:	809a      	strh	r2, [r3, #4]
}
 800a83a:	bf00      	nop
 800a83c:	f107 0314 	add.w	r3, r7, #20
 800a840:	61fb      	str	r3, [r7, #28]
 800a842:	797b      	ldrb	r3, [r7, #5]
 800a844:	76fb      	strb	r3, [r7, #27]
 800a846:	2303      	movs	r3, #3
 800a848:	76bb      	strb	r3, [r7, #26]
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	7eb9      	ldrb	r1, [r7, #26]
 800a850:	7efa      	ldrb	r2, [r7, #27]
 800a852:	2a01      	cmp	r2, #1
 800a854:	d101      	bne.n	800a85a <edpt_xfer+0x376>
 800a856:	2204      	movs	r2, #4
 800a858:	e000      	b.n	800a85c <edpt_xfer+0x378>
 800a85a:	220c      	movs	r2, #12
 800a85c:	fa01 f202 	lsl.w	r2, r1, r2
 800a860:	405a      	eors	r2, r3
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	601a      	str	r2, [r3, #0]
}
 800a866:	bf00      	nop
    }

    ep_change_status(&ep_reg, dir, EP_STAT_VALID);
    ep_write(ep_idx, ep_reg, true);
 800a868:	f897 20c3 	ldrb.w	r2, [r7, #195]	@ 0xc3
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a870:	627b      	str	r3, [r7, #36]	@ 0x24
 800a872:	2301      	movs	r3, #1
 800a874:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (need_exclusive) {
 800a878:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <edpt_xfer+0x3a2>
    dcd_int_disable(0);
 800a880:	2000      	movs	r0, #0
 800a882:	f7fe fa3b 	bl	8008cfc <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800a886:	4a0a      	ldr	r2, [pc, #40]	@ (800a8b0 <edpt_xfer+0x3cc>)
 800a888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88a:	b299      	uxth	r1, r3
 800a88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800a892:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <edpt_xfer+0x3bc>
    dcd_int_enable(0);
 800a89a:	2000      	movs	r0, #0
 800a89c:	f7fe fa0c 	bl	8008cb8 <dcd_int_enable>
}
 800a8a0:	bf00      	nop
  }

  return true;
 800a8a2:	2301      	movs	r3, #1
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	37c8      	adds	r7, #200	@ 0xc8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	40006000 	.word	0x40006000
 800a8b0:	40005c00 	.word	0x40005c00

0800a8b4 <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t *buffer, uint16_t total_bytes) {
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b086      	sub	sp, #24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	603a      	str	r2, [r7, #0]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	4603      	mov	r3, r0
 800a8c0:	71fb      	strb	r3, [r7, #7]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	71bb      	strb	r3, [r7, #6]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	80bb      	strh	r3, [r7, #4]
 800a8ca:	79bb      	ldrb	r3, [r7, #6]
 800a8cc:	733b      	strb	r3, [r7, #12]
 800a8ce:	7b3b      	ldrb	r3, [r7, #12]
 800a8d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8d4:	b2db      	uxtb	r3, r3
  uint8_t const ep_num = tu_edpt_number(ep_addr);
 800a8d6:	75fb      	strb	r3, [r7, #23]
 800a8d8:	79bb      	ldrb	r3, [r7, #6]
 800a8da:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a8dc:	7b7b      	ldrb	r3, [r7, #13]
 800a8de:	09db      	lsrs	r3, r3, #7
 800a8e0:	b2db      	uxtb	r3, r3
  tusb_dir_t const dir = tu_edpt_dir(ep_addr);
 800a8e2:	75bb      	strb	r3, [r7, #22]
 800a8e4:	7dfb      	ldrb	r3, [r7, #23]
 800a8e6:	73fb      	strb	r3, [r7, #15]
 800a8e8:	7dbb      	ldrb	r3, [r7, #22]
 800a8ea:	73bb      	strb	r3, [r7, #14]
  return &xfer_status[epnum][dir];
 800a8ec:	7bfa      	ldrb	r2, [r7, #15]
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
 800a8f0:	0052      	lsls	r2, r2, #1
 800a8f2:	4413      	add	r3, r2
 800a8f4:	011b      	lsls	r3, r3, #4
 800a8f6:	4a0d      	ldr	r2, [pc, #52]	@ (800a92c <dcd_edpt_xfer+0x78>)
 800a8f8:	4413      	add	r3, r2
  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 800a8fa:	613b      	str	r3, [r7, #16]

  xfer->buffer = buffer;
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	2200      	movs	r2, #0
 800a906:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	88ba      	ldrh	r2, [r7, #4]
 800a90c:	811a      	strh	r2, [r3, #8]
  xfer->queued_len = 0;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	2200      	movs	r2, #0
 800a912:	815a      	strh	r2, [r3, #10]

  return edpt_xfer(rhport, ep_num, dir);
 800a914:	7dba      	ldrb	r2, [r7, #22]
 800a916:	7df9      	ldrb	r1, [r7, #23]
 800a918:	79fb      	ldrb	r3, [r7, #7]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7ff fde2 	bl	800a4e4 <edpt_xfer>
 800a920:	4603      	mov	r3, r0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3718      	adds	r7, #24
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	2000074c 	.word	0x2000074c

0800a930 <dcd_edpt_stall>:
  xfer->queued_len = 0;

  return edpt_xfer(rhport, ep_num, dir);
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800a930:	b580      	push	{r7, lr}
 800a932:	b08e      	sub	sp, #56	@ 0x38
 800a934:	af00      	add	r7, sp, #0
 800a936:	4603      	mov	r3, r0
 800a938:	460a      	mov	r2, r1
 800a93a:	71fb      	strb	r3, [r7, #7]
 800a93c:	4613      	mov	r3, r2
 800a93e:	71bb      	strb	r3, [r7, #6]
 800a940:	79bb      	ldrb	r3, [r7, #6]
 800a942:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a946:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a94a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a94e:	b2db      	uxtb	r3, r3
  (void)rhport;
  uint8_t const ep_num = tu_edpt_number(ep_addr);
 800a950:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a954:	79bb      	ldrb	r3, [r7, #6]
 800a956:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a95a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a95e:	09db      	lsrs	r3, r3, #7
 800a960:	b2db      	uxtb	r3, r3
  tusb_dir_t const dir = tu_edpt_dir(ep_addr);
 800a962:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800a966:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a96a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a96e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a972:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return &xfer_status[epnum][dir];
 800a976:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a97a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a97e:	0052      	lsls	r2, r2, #1
 800a980:	4413      	add	r3, r2
 800a982:	011b      	lsls	r3, r3, #4
 800a984:	4a2a      	ldr	r2, [pc, #168]	@ (800aa30 <dcd_edpt_stall+0x100>)
 800a986:	4413      	add	r3, r2
  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 800a988:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t const ep_idx = xfer->ep_idx;
 800a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98c:	7b9b      	ldrb	r3, [r3, #14]
 800a98e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  uint32_t ep_reg = ep_read(ep_idx) | USB_EP_CTR_TX | USB_EP_CTR_RX; // reserve CTR bits
 800a992:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a996:	62bb      	str	r3, [r7, #40]	@ 0x28
  return FSDEV_REG->ep[ep_id].reg;
 800a998:	4a26      	ldr	r2, [pc, #152]	@ (800aa34 <dcd_edpt_stall+0x104>)
 800a99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a99c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9aa:	60fb      	str	r3, [r7, #12]
  ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(dir);
 800a9ac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d102      	bne.n	800a9ba <dcd_edpt_stall+0x8a>
 800a9b4:	f648 72bf 	movw	r2, #36799	@ 0x8fbf
 800a9b8:	e001      	b.n	800a9be <dcd_edpt_stall+0x8e>
 800a9ba:	f64b 728f 	movw	r2, #49039	@ 0xbf8f
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	60fb      	str	r3, [r7, #12]
 800a9c4:	f107 030c 	add.w	r3, r7, #12
 800a9c8:	617b      	str	r3, [r7, #20]
 800a9ca:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a9ce:	74fb      	strb	r3, [r7, #19]
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	74bb      	strb	r3, [r7, #18]
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	7cb9      	ldrb	r1, [r7, #18]
 800a9da:	7cfa      	ldrb	r2, [r7, #19]
 800a9dc:	2a01      	cmp	r2, #1
 800a9de:	d101      	bne.n	800a9e4 <dcd_edpt_stall+0xb4>
 800a9e0:	2204      	movs	r2, #4
 800a9e2:	e000      	b.n	800a9e6 <dcd_edpt_stall+0xb6>
 800a9e4:	220c      	movs	r2, #12
 800a9e6:	fa01 f202 	lsl.w	r2, r1, r2
 800a9ea:	405a      	eors	r2, r3
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	601a      	str	r2, [r3, #0]
}
 800a9f0:	bf00      	nop
  ep_change_status(&ep_reg, dir, EP_STAT_STALL);

  ep_write(ep_idx, ep_reg, true);
 800a9f2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	623a      	str	r2, [r7, #32]
 800a9fa:	61fb      	str	r3, [r7, #28]
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	76fb      	strb	r3, [r7, #27]
  if (need_exclusive) {
 800aa00:	7efb      	ldrb	r3, [r7, #27]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d002      	beq.n	800aa0c <dcd_edpt_stall+0xdc>
    dcd_int_disable(0);
 800aa06:	2000      	movs	r0, #0
 800aa08:	f7fe f978 	bl	8008cfc <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800aa0c:	4a09      	ldr	r2, [pc, #36]	@ (800aa34 <dcd_edpt_stall+0x104>)
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	b299      	uxth	r1, r3
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800aa18:	7efb      	ldrb	r3, [r7, #27]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <dcd_edpt_stall+0xf4>
    dcd_int_enable(0);
 800aa1e:	2000      	movs	r0, #0
 800aa20:	f7fe f94a 	bl	8008cb8 <dcd_int_enable>
}
 800aa24:	bf00      	nop
}
 800aa26:	bf00      	nop
 800aa28:	3738      	adds	r7, #56	@ 0x38
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	2000074c 	.word	0x2000074c
 800aa34:	40005c00 	.word	0x40005c00

0800aa38 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b090      	sub	sp, #64	@ 0x40
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	4603      	mov	r3, r0
 800aa40:	460a      	mov	r2, r1
 800aa42:	71fb      	strb	r3, [r7, #7]
 800aa44:	4613      	mov	r3, r2
 800aa46:	71bb      	strb	r3, [r7, #6]
 800aa48:	79bb      	ldrb	r3, [r7, #6]
 800aa4a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800aa4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800aa52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa56:	b2db      	uxtb	r3, r3
  (void)rhport;

  uint8_t const ep_num = tu_edpt_number(ep_addr);
 800aa58:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800aa5c:	79bb      	ldrb	r3, [r7, #6]
 800aa5e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800aa62:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800aa66:	09db      	lsrs	r3, r3, #7
 800aa68:	b2db      	uxtb	r3, r3
  tusb_dir_t const dir = tu_edpt_dir(ep_addr);
 800aa6a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800aa6e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aa72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800aa76:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800aa7a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  return &xfer_status[epnum][dir];
 800aa7e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800aa82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa86:	0052      	lsls	r2, r2, #1
 800aa88:	4413      	add	r3, r2
 800aa8a:	011b      	lsls	r3, r3, #4
 800aa8c:	4a44      	ldr	r2, [pc, #272]	@ (800aba0 <dcd_edpt_clear_stall+0x168>)
 800aa8e:	4413      	add	r3, r2
  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 800aa90:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const ep_idx = xfer->ep_idx;
 800aa92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa94:	7b9b      	ldrb	r3, [r3, #14]
 800aa96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  uint32_t ep_reg = ep_read(ep_idx) | USB_EP_CTR_TX | USB_EP_CTR_RX; // reserve CTR bits
 800aa9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aa9e:	633b      	str	r3, [r7, #48]	@ 0x30
  return FSDEV_REG->ep[ep_id].reg;
 800aaa0:	4a40      	ldr	r2, [pc, #256]	@ (800aba4 <dcd_edpt_clear_stall+0x16c>)
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aaae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aab2:	60bb      	str	r3, [r7, #8]
  ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(dir) | EP_DTOG_MASK(dir);
 800aab4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d102      	bne.n	800aac2 <dcd_edpt_clear_stall+0x8a>
 800aabc:	f648 72bf 	movw	r2, #36799	@ 0x8fbf
 800aac0:	e001      	b.n	800aac6 <dcd_edpt_clear_stall+0x8e>
 800aac2:	f64b 728f 	movw	r2, #49039	@ 0xbf8f
 800aac6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d101      	bne.n	800aad2 <dcd_edpt_clear_stall+0x9a>
 800aace:	2340      	movs	r3, #64	@ 0x40
 800aad0:	e001      	b.n	800aad6 <dcd_edpt_clear_stall+0x9e>
 800aad2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aad6:	431a      	orrs	r2, r3
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	4013      	ands	r3, r2
 800aadc:	60bb      	str	r3, [r7, #8]

  if (!ep_is_iso(ep_reg)) {
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 800aae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aaec:	bf0c      	ite	eq
 800aaee:	2301      	moveq	r3, #1
 800aaf0:	2300      	movne	r3, #0
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	f083 0301 	eor.w	r3, r3, #1
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d01a      	beq.n	800ab34 <dcd_edpt_clear_stall+0xfc>
 800aafe:	f107 0308 	add.w	r3, r7, #8
 800ab02:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab04:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ab08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800ab12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 800ab1a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800ab1e:	2a01      	cmp	r2, #1
 800ab20:	d101      	bne.n	800ab26 <dcd_edpt_clear_stall+0xee>
 800ab22:	2204      	movs	r2, #4
 800ab24:	e000      	b.n	800ab28 <dcd_edpt_clear_stall+0xf0>
 800ab26:	220c      	movs	r2, #12
 800ab28:	fa01 f202 	lsl.w	r2, r1, r2
 800ab2c:	405a      	eors	r2, r3
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab30:	601a      	str	r2, [r3, #0]
}
 800ab32:	bf00      	nop
 800ab34:	f107 0308 	add.w	r3, r7, #8
 800ab38:	613b      	str	r3, [r7, #16]
 800ab3a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ab3e:	73fb      	strb	r3, [r7, #15]
 800ab40:	2300      	movs	r3, #0
 800ab42:	73bb      	strb	r3, [r7, #14]
  *reg ^= (state << (USB_EP_DTOG_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	7bb9      	ldrb	r1, [r7, #14]
 800ab4a:	7bfa      	ldrb	r2, [r7, #15]
 800ab4c:	2a01      	cmp	r2, #1
 800ab4e:	d101      	bne.n	800ab54 <dcd_edpt_clear_stall+0x11c>
 800ab50:	2206      	movs	r2, #6
 800ab52:	e000      	b.n	800ab56 <dcd_edpt_clear_stall+0x11e>
 800ab54:	220e      	movs	r2, #14
 800ab56:	fa01 f202 	lsl.w	r2, r1, r2
 800ab5a:	405a      	eors	r2, r3
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	601a      	str	r2, [r3, #0]
}
 800ab60:	bf00      	nop
    ep_change_status(&ep_reg, dir, EP_STAT_NAK);
  }
  ep_change_dtog(&ep_reg, dir, 0); // Reset to DATA0
  ep_write(ep_idx, ep_reg, true);
 800ab62:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	61fa      	str	r2, [r7, #28]
 800ab6a:	61bb      	str	r3, [r7, #24]
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	75fb      	strb	r3, [r7, #23]
  if (need_exclusive) {
 800ab70:	7dfb      	ldrb	r3, [r7, #23]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d002      	beq.n	800ab7c <dcd_edpt_clear_stall+0x144>
    dcd_int_disable(0);
 800ab76:	2000      	movs	r0, #0
 800ab78:	f7fe f8c0 	bl	8008cfc <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800ab7c:	4a09      	ldr	r2, [pc, #36]	@ (800aba4 <dcd_edpt_clear_stall+0x16c>)
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	b299      	uxth	r1, r3
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800ab88:	7dfb      	ldrb	r3, [r7, #23]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <dcd_edpt_clear_stall+0x15c>
    dcd_int_enable(0);
 800ab8e:	2000      	movs	r0, #0
 800ab90:	f7fe f892 	bl	8008cb8 <dcd_int_enable>
}
 800ab94:	bf00      	nop
}
 800ab96:	bf00      	nop
 800ab98:	3740      	adds	r7, #64	@ 0x40
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	2000074c 	.word	0x2000074c
 800aba4:	40005c00 	.word	0x40005c00

0800aba8 <dcd_write_packet_memory>:
//--------------------------------------------------------------------+

// Write to packet memory area (PMA) from user memory
// - Packet memory must be either strictly 16-bit or 32-bit depending on FSDEV_BUS_32BIT
// - Uses unaligned for RAM (since M0 cannot access unaligned address)
static bool dcd_write_packet_memory(uint16_t dst, const void *__restrict src, uint16_t nbytes) {
 800aba8:	b480      	push	{r7}
 800abaa:	b089      	sub	sp, #36	@ 0x24
 800abac:	af00      	add	r7, sp, #0
 800abae:	4603      	mov	r3, r0
 800abb0:	6039      	str	r1, [r7, #0]
 800abb2:	80fb      	strh	r3, [r7, #6]
 800abb4:	4613      	mov	r3, r2
 800abb6:	80bb      	strh	r3, [r7, #4]
  if (nbytes == 0) return true;
 800abb8:	88bb      	ldrh	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <dcd_write_packet_memory+0x1a>
 800abbe:	2301      	movs	r3, #1
 800abc0:	e044      	b.n	800ac4c <dcd_write_packet_memory+0xa4>
  uint32_t n_write = nbytes / FSDEV_BUS_SIZE;
 800abc2:	88bb      	ldrh	r3, [r7, #4]
 800abc4:	085b      	lsrs	r3, r3, #1
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	61fb      	str	r3, [r7, #28]

  fsdev_pma_buf_t* pma_buf = PMA_BUF_AT(dst);
 800abca:	88fb      	ldrh	r3, [r7, #6]
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800abd2:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 800abd6:	61bb      	str	r3, [r7, #24]
  const uint8_t *src8 = src;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	617b      	str	r3, [r7, #20]

  while (n_write--) {
 800abdc:	e00b      	b.n	800abf6 <dcd_write_packet_memory+0x4e>
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	60bb      	str	r3, [r7, #8]
  return *((uint16_t const *) mem);
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	881a      	ldrh	r2, [r3, #0]
    pma_buf->value = fsdevbus_unaligned_read(src8);
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	801a      	strh	r2, [r3, #0]
    src8 += FSDEV_BUS_SIZE;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	3302      	adds	r3, #2
 800abee:	617b      	str	r3, [r7, #20]
    pma_buf++;
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	3304      	adds	r3, #4
 800abf4:	61bb      	str	r3, [r7, #24]
  while (n_write--) {
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	1e5a      	subs	r2, r3, #1
 800abfa:	61fa      	str	r2, [r7, #28]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1ee      	bne.n	800abde <dcd_write_packet_memory+0x36>
  }

  // odd bytes e.g 1 for 16-bit or 1-3 for 32-bit
  uint16_t odd = nbytes & (FSDEV_BUS_SIZE - 1);
 800ac00:	88bb      	ldrh	r3, [r7, #4]
 800ac02:	f003 0301 	and.w	r3, r3, #1
 800ac06:	81fb      	strh	r3, [r7, #14]
  if (odd) {
 800ac08:	89fb      	ldrh	r3, [r7, #14]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d01d      	beq.n	800ac4a <dcd_write_packet_memory+0xa2>
    fsdev_bus_t temp = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	827b      	strh	r3, [r7, #18]
    for(uint16_t i = 0; i < odd; i++) {
 800ac12:	2300      	movs	r3, #0
 800ac14:	823b      	strh	r3, [r7, #16]
 800ac16:	e011      	b.n	800ac3c <dcd_write_packet_memory+0x94>
      temp |= *src8++ << (i * 8);
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	1c5a      	adds	r2, r3, #1
 800ac1c:	617a      	str	r2, [r7, #20]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	461a      	mov	r2, r3
 800ac22:	8a3b      	ldrh	r3, [r7, #16]
 800ac24:	00db      	lsls	r3, r3, #3
 800ac26:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2a:	b21a      	sxth	r2, r3
 800ac2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	b21b      	sxth	r3, r3
 800ac34:	827b      	strh	r3, [r7, #18]
    for(uint16_t i = 0; i < odd; i++) {
 800ac36:	8a3b      	ldrh	r3, [r7, #16]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	823b      	strh	r3, [r7, #16]
 800ac3c:	8a3a      	ldrh	r2, [r7, #16]
 800ac3e:	89fb      	ldrh	r3, [r7, #14]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d3e9      	bcc.n	800ac18 <dcd_write_packet_memory+0x70>
    }
    pma_buf->value = temp;
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	8a7a      	ldrh	r2, [r7, #18]
 800ac48:	801a      	strh	r2, [r3, #0]
  }

  return true;
 800ac4a:	2301      	movs	r3, #1
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3724      	adds	r7, #36	@ 0x24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bc80      	pop	{r7}
 800ac54:	4770      	bx	lr

0800ac56 <dcd_read_packet_memory>:

// Read from packet memory area (PMA) to user memory.
// - Packet memory must be either strictly 16-bit or 32-bit depending on FSDEV_BUS_32BIT
// - Uses unaligned for RAM (since M0 cannot access unaligned address)
static bool dcd_read_packet_memory(void *__restrict dst, uint16_t src, uint16_t nbytes) {
 800ac56:	b480      	push	{r7}
 800ac58:	b089      	sub	sp, #36	@ 0x24
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	460b      	mov	r3, r1
 800ac60:	807b      	strh	r3, [r7, #2]
 800ac62:	4613      	mov	r3, r2
 800ac64:	803b      	strh	r3, [r7, #0]
  if (nbytes == 0) return true;
 800ac66:	883b      	ldrh	r3, [r7, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d101      	bne.n	800ac70 <dcd_read_packet_memory+0x1a>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e03d      	b.n	800acec <dcd_read_packet_memory+0x96>
  uint32_t n_read = nbytes / FSDEV_BUS_SIZE;
 800ac70:	883b      	ldrh	r3, [r7, #0]
 800ac72:	085b      	lsrs	r3, r3, #1
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	61fb      	str	r3, [r7, #28]

  fsdev_pma_buf_t* pma_buf = PMA_BUF_AT(src);
 800ac78:	887b      	ldrh	r3, [r7, #2]
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac80:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 800ac84:	61bb      	str	r3, [r7, #24]
  uint8_t *dst8 = (uint8_t *)dst;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	617b      	str	r3, [r7, #20]

  while (n_read--) {
 800ac8a:	e010      	b.n	800acae <dcd_read_packet_memory+0x58>
    fsdevbus_unaligned_write(dst8, (fsdev_bus_t ) pma_buf->value);
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	60fb      	str	r3, [r7, #12]
 800ac96:	4613      	mov	r3, r2
 800ac98:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write16(void *mem, uint16_t value) {
  *((uint16_t *) mem) = value;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	897a      	ldrh	r2, [r7, #10]
 800ac9e:	801a      	strh	r2, [r3, #0]
}
 800aca0:	bf00      	nop
    dst8 += FSDEV_BUS_SIZE;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	3302      	adds	r3, #2
 800aca6:	617b      	str	r3, [r7, #20]
    pma_buf++;
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	3304      	adds	r3, #4
 800acac:	61bb      	str	r3, [r7, #24]
  while (n_read--) {
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	1e5a      	subs	r2, r3, #1
 800acb2:	61fa      	str	r2, [r7, #28]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1e9      	bne.n	800ac8c <dcd_read_packet_memory+0x36>
  }

  // odd bytes e.g 1 for 16-bit or 1-3 for 32-bit
  uint16_t odd = nbytes & (FSDEV_BUS_SIZE - 1);
 800acb8:	883b      	ldrh	r3, [r7, #0]
 800acba:	f003 0301 	and.w	r3, r3, #1
 800acbe:	827b      	strh	r3, [r7, #18]
  if (odd) {
 800acc0:	8a7b      	ldrh	r3, [r7, #18]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d011      	beq.n	800acea <dcd_read_packet_memory+0x94>
    fsdev_bus_t temp = pma_buf->value;
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	823b      	strh	r3, [r7, #16]
    while (odd--) {
 800accc:	e008      	b.n	800ace0 <dcd_read_packet_memory+0x8a>
      *dst8++ = (uint8_t) (temp & 0xfful);
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	1c5a      	adds	r2, r3, #1
 800acd2:	617a      	str	r2, [r7, #20]
 800acd4:	8a3a      	ldrh	r2, [r7, #16]
 800acd6:	b2d2      	uxtb	r2, r2
 800acd8:	701a      	strb	r2, [r3, #0]
      temp >>= 8;
 800acda:	8a3b      	ldrh	r3, [r7, #16]
 800acdc:	0a1b      	lsrs	r3, r3, #8
 800acde:	823b      	strh	r3, [r7, #16]
    while (odd--) {
 800ace0:	8a7b      	ldrh	r3, [r7, #18]
 800ace2:	1e5a      	subs	r2, r3, #1
 800ace4:	827a      	strh	r2, [r7, #18]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1f1      	bne.n	800acce <dcd_read_packet_memory+0x78>
    }
  }

  return true;
 800acea:	2301      	movs	r3, #1
}
 800acec:	4618      	mov	r0, r3
 800acee:	3724      	adds	r7, #36	@ 0x24
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bc80      	pop	{r7}
 800acf4:	4770      	bx	lr

0800acf6 <dcd_write_packet_memory_ff>:

// Write to PMA from FIFO
static bool dcd_write_packet_memory_ff(tu_fifo_t *ff, uint16_t dst, uint16_t wNBytes) {
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b08e      	sub	sp, #56	@ 0x38
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	460b      	mov	r3, r1
 800ad00:	807b      	strh	r3, [r7, #2]
 800ad02:	4613      	mov	r3, r2
 800ad04:	803b      	strh	r3, [r7, #0]
  if (wNBytes == 0) return true;
 800ad06:	883b      	ldrh	r3, [r7, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d101      	bne.n	800ad10 <dcd_write_packet_memory_ff+0x1a>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e092      	b.n	800ae36 <dcd_write_packet_memory_ff+0x140>

  // Since we copy from a ring buffer FIFO, a wrap might occur making it necessary to conduct two copies
  tu_fifo_buffer_info_t info;
  tu_fifo_get_read_info(ff, &info);
 800ad10:	f107 0310 	add.w	r3, r7, #16
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7fb fd25 	bl	8006766 <tu_fifo_get_read_info>

  uint16_t cnt_lin = tu_min16(wNBytes, info.len_lin);
 800ad1c:	8a3a      	ldrh	r2, [r7, #16]
 800ad1e:	883b      	ldrh	r3, [r7, #0]
 800ad20:	843b      	strh	r3, [r7, #32]
 800ad22:	4613      	mov	r3, r2
 800ad24:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800ad26:	8c3a      	ldrh	r2, [r7, #32]
 800ad28:	8bfb      	ldrh	r3, [r7, #30]
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	bf28      	it	cs
 800ad2e:	4613      	movcs	r3, r2
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint16_t cnt_wrap = tu_min16(wNBytes - cnt_lin, info.len_wrap);
 800ad34:	883a      	ldrh	r2, [r7, #0]
 800ad36:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	8a7b      	ldrh	r3, [r7, #18]
 800ad3e:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800ad40:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ad42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ad44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ad46:	4293      	cmp	r3, r2
 800ad48:	bf28      	it	cs
 800ad4a:	4613      	movcs	r3, r2
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t const cnt_total = cnt_lin + cnt_wrap;
 800ad50:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800ad52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad54:	4413      	add	r3, r2
 800ad56:	857b      	strh	r3, [r7, #42]	@ 0x2a

  // We want to read from the FIFO and write it into the PMA, if LIN part is ODD and has WRAPPED part,
  // last lin byte will be combined with wrapped part To ensure PMA is always access aligned
  uint16_t lin_even = cnt_lin & ~(FSDEV_BUS_SIZE - 1);
 800ad58:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ad5a:	f023 0301 	bic.w	r3, r3, #1
 800ad5e:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t lin_odd = cnt_lin & (FSDEV_BUS_SIZE - 1);
 800ad60:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint8_t const *src8 = (uint8_t const*) info.ptr_lin;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	633b      	str	r3, [r7, #48]	@ 0x30

  // write even linear part
  dcd_write_packet_memory(dst, src8, lin_even);
 800ad6c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ad6e:	887b      	ldrh	r3, [r7, #2]
 800ad70:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7ff ff18 	bl	800aba8 <dcd_write_packet_memory>
  dst += lin_even;
 800ad78:	887a      	ldrh	r2, [r7, #2]
 800ad7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad7c:	4413      	add	r3, r2
 800ad7e:	807b      	strh	r3, [r7, #2]
  src8 += lin_even;
 800ad80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad84:	4413      	add	r3, r2
 800ad86:	633b      	str	r3, [r7, #48]	@ 0x30

  if (lin_odd == 0) {
 800ad88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d102      	bne.n	800ad94 <dcd_write_packet_memory_ff+0x9e>
    src8 = (uint8_t const*) info.ptr_wrap;
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad92:	e044      	b.n	800ae1e <dcd_write_packet_memory_ff+0x128>
  } else {
    // Combine last linear bytes + first wrapped bytes to form fsdev bus width data
    fsdev_bus_t temp = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	81fb      	strh	r3, [r7, #14]
    uint16_t i;
    for(i = 0; i < lin_odd; i++) {
 800ad98:	2300      	movs	r3, #0
 800ad9a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800ad9c:	e012      	b.n	800adc4 <dcd_write_packet_memory_ff+0xce>
      temp |= *src8++ << (i * 8);
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada0:	1c5a      	adds	r2, r3, #1
 800ada2:	633a      	str	r2, [r7, #48]	@ 0x30
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	461a      	mov	r2, r3
 800ada8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800adaa:	00db      	lsls	r3, r3, #3
 800adac:	fa02 f303 	lsl.w	r3, r2, r3
 800adb0:	b21a      	sxth	r2, r3
 800adb2:	89fb      	ldrh	r3, [r7, #14]
 800adb4:	b21b      	sxth	r3, r3
 800adb6:	4313      	orrs	r3, r2
 800adb8:	b21b      	sxth	r3, r3
 800adba:	b29b      	uxth	r3, r3
 800adbc:	81fb      	strh	r3, [r7, #14]
    for(i = 0; i < lin_odd; i++) {
 800adbe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800adc0:	3301      	adds	r3, #1
 800adc2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800adc4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800adc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800adc8:	429a      	cmp	r2, r3
 800adca:	d3e8      	bcc.n	800ad9e <dcd_write_packet_memory_ff+0xa8>
    }

    src8 = (uint8_t const*) info.ptr_wrap;
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	633b      	str	r3, [r7, #48]	@ 0x30
    for(; i < FSDEV_BUS_SIZE && cnt_wrap > 0; i++, cnt_wrap--) {
 800add0:	e015      	b.n	800adfe <dcd_write_packet_memory_ff+0x108>
      temp |= *src8++ << (i * 8);
 800add2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	633a      	str	r2, [r7, #48]	@ 0x30
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800adde:	00db      	lsls	r3, r3, #3
 800ade0:	fa02 f303 	lsl.w	r3, r2, r3
 800ade4:	b21a      	sxth	r2, r3
 800ade6:	89fb      	ldrh	r3, [r7, #14]
 800ade8:	b21b      	sxth	r3, r3
 800adea:	4313      	orrs	r3, r2
 800adec:	b21b      	sxth	r3, r3
 800adee:	b29b      	uxth	r3, r3
 800adf0:	81fb      	strh	r3, [r7, #14]
    for(; i < FSDEV_BUS_SIZE && cnt_wrap > 0; i++, cnt_wrap--) {
 800adf2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800adf4:	3301      	adds	r3, #1
 800adf6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800adf8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800adfa:	3b01      	subs	r3, #1
 800adfc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800adfe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d802      	bhi.n	800ae0a <dcd_write_packet_memory_ff+0x114>
 800ae04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e3      	bne.n	800add2 <dcd_write_packet_memory_ff+0xdc>
    }

    dcd_write_packet_memory(dst, &temp, FSDEV_BUS_SIZE);
 800ae0a:	f107 010e 	add.w	r1, r7, #14
 800ae0e:	887b      	ldrh	r3, [r7, #2]
 800ae10:	2202      	movs	r2, #2
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7ff fec8 	bl	800aba8 <dcd_write_packet_memory>
    dst += FSDEV_BUS_SIZE;
 800ae18:	887b      	ldrh	r3, [r7, #2]
 800ae1a:	3302      	adds	r3, #2
 800ae1c:	807b      	strh	r3, [r7, #2]
  }

  // write the rest of the wrapped part
  dcd_write_packet_memory(dst, src8, cnt_wrap);
 800ae1e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ae20:	887b      	ldrh	r3, [r7, #2]
 800ae22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7ff febf 	bl	800aba8 <dcd_write_packet_memory>

  tu_fifo_advance_read_pointer(ff, cnt_total);
 800ae2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7fb fc82 	bl	8006738 <tu_fifo_advance_read_pointer>
  return true;
 800ae34:	2301      	movs	r3, #1
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3738      	adds	r7, #56	@ 0x38
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <dcd_read_packet_memory_ff>:

// Read from PMA to FIFO
static bool dcd_read_packet_memory_ff(tu_fifo_t *ff, uint16_t src, uint16_t wNBytes) {
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b08e      	sub	sp, #56	@ 0x38
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	460b      	mov	r3, r1
 800ae48:	807b      	strh	r3, [r7, #2]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	803b      	strh	r3, [r7, #0]
  if (wNBytes == 0) return true;
 800ae4e:	883b      	ldrh	r3, [r7, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <dcd_read_packet_memory_ff+0x1a>
 800ae54:	2301      	movs	r3, #1
 800ae56:	e084      	b.n	800af62 <dcd_read_packet_memory_ff+0x124>

  // Since we copy into a ring buffer FIFO, a wrap might occur making it necessary to conduct two copies
  // Check for first linear part
  tu_fifo_buffer_info_t info;
  tu_fifo_get_write_info(ff, &info); // We want to read from the FIFO
 800ae58:	f107 0310 	add.w	r3, r7, #16
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7fb fd21 	bl	80068a6 <tu_fifo_get_write_info>

  uint16_t cnt_lin = tu_min16(wNBytes, info.len_lin);
 800ae64:	8a3a      	ldrh	r2, [r7, #16]
 800ae66:	883b      	ldrh	r3, [r7, #0]
 800ae68:	843b      	strh	r3, [r7, #32]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	83fb      	strh	r3, [r7, #30]
 800ae6e:	8c3a      	ldrh	r2, [r7, #32]
 800ae70:	8bfb      	ldrh	r3, [r7, #30]
 800ae72:	4293      	cmp	r3, r2
 800ae74:	bf28      	it	cs
 800ae76:	4613      	movcs	r3, r2
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint16_t cnt_wrap = tu_min16(wNBytes - cnt_lin, info.len_wrap);
 800ae7c:	883a      	ldrh	r2, [r7, #0]
 800ae7e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	8a7b      	ldrh	r3, [r7, #18]
 800ae86:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800ae88:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ae8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ae8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	bf28      	it	cs
 800ae92:	4613      	movcs	r3, r2
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t cnt_total = cnt_lin + cnt_wrap;
 800ae98:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800ae9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae9c:	4413      	add	r3, r2
 800ae9e:	857b      	strh	r3, [r7, #42]	@ 0x2a

  // We want to read from the FIFO and write it into the PMA, if LIN part is ODD and has WRAPPED part,
  // last lin byte will be combined with wrapped part To ensure PMA is always access aligned

  uint16_t lin_even = cnt_lin & ~(FSDEV_BUS_SIZE - 1);
 800aea0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800aea2:	f023 0301 	bic.w	r3, r3, #1
 800aea6:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t lin_odd = cnt_lin & (FSDEV_BUS_SIZE - 1);
 800aea8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint8_t *dst8 = (uint8_t *) info.ptr_lin;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	633b      	str	r3, [r7, #48]	@ 0x30

  // read even linear part
  dcd_read_packet_memory(dst8, src, lin_even);
 800aeb4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aeb6:	887b      	ldrh	r3, [r7, #2]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aebc:	f7ff fecb 	bl	800ac56 <dcd_read_packet_memory>
  dst8 += lin_even;
 800aec0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aec4:	4413      	add	r3, r2
 800aec6:	633b      	str	r3, [r7, #48]	@ 0x30
  src += lin_even;
 800aec8:	887a      	ldrh	r2, [r7, #2]
 800aeca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aecc:	4413      	add	r3, r2
 800aece:	807b      	strh	r3, [r7, #2]

  if (lin_odd == 0) {
 800aed0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d102      	bne.n	800aedc <dcd_read_packet_memory_ff+0x9e>
    dst8 = (uint8_t *) info.ptr_wrap;
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	633b      	str	r3, [r7, #48]	@ 0x30
 800aeda:	e036      	b.n	800af4a <dcd_read_packet_memory_ff+0x10c>
  } else {
    // Combine last linear bytes + first wrapped bytes to form fsdev bus width data
    fsdev_bus_t temp;
    dcd_read_packet_memory(&temp, src, FSDEV_BUS_SIZE);
 800aedc:	8879      	ldrh	r1, [r7, #2]
 800aede:	f107 030e 	add.w	r3, r7, #14
 800aee2:	2202      	movs	r2, #2
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7ff feb6 	bl	800ac56 <dcd_read_packet_memory>
    src += FSDEV_BUS_SIZE;
 800aeea:	887b      	ldrh	r3, [r7, #2]
 800aeec:	3302      	adds	r3, #2
 800aeee:	807b      	strh	r3, [r7, #2]

    uint16_t i;
    for (i = 0; i < lin_odd; i++) {
 800aef0:	2300      	movs	r3, #0
 800aef2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800aef4:	e00c      	b.n	800af10 <dcd_read_packet_memory_ff+0xd2>
      *dst8++ = (uint8_t) (temp & 0xfful);
 800aef6:	89f9      	ldrh	r1, [r7, #14]
 800aef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefa:	1c5a      	adds	r2, r3, #1
 800aefc:	633a      	str	r2, [r7, #48]	@ 0x30
 800aefe:	b2ca      	uxtb	r2, r1
 800af00:	701a      	strb	r2, [r3, #0]
      temp >>= 8;
 800af02:	89fb      	ldrh	r3, [r7, #14]
 800af04:	0a1b      	lsrs	r3, r3, #8
 800af06:	b29b      	uxth	r3, r3
 800af08:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < lin_odd; i++) {
 800af0a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800af0c:	3301      	adds	r3, #1
 800af0e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800af10:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800af12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800af14:	429a      	cmp	r2, r3
 800af16:	d3ee      	bcc.n	800aef6 <dcd_read_packet_memory_ff+0xb8>
    }

    dst8 = (uint8_t *) info.ptr_wrap;
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	633b      	str	r3, [r7, #48]	@ 0x30
    for (; i < FSDEV_BUS_SIZE && cnt_wrap > 0; i++, cnt_wrap--) {
 800af1c:	e00f      	b.n	800af3e <dcd_read_packet_memory_ff+0x100>
      *dst8++ = (uint8_t) (temp & 0xfful);
 800af1e:	89f9      	ldrh	r1, [r7, #14]
 800af20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af22:	1c5a      	adds	r2, r3, #1
 800af24:	633a      	str	r2, [r7, #48]	@ 0x30
 800af26:	b2ca      	uxtb	r2, r1
 800af28:	701a      	strb	r2, [r3, #0]
      temp >>= 8;
 800af2a:	89fb      	ldrh	r3, [r7, #14]
 800af2c:	0a1b      	lsrs	r3, r3, #8
 800af2e:	b29b      	uxth	r3, r3
 800af30:	81fb      	strh	r3, [r7, #14]
    for (; i < FSDEV_BUS_SIZE && cnt_wrap > 0; i++, cnt_wrap--) {
 800af32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800af34:	3301      	adds	r3, #1
 800af36:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800af38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af3a:	3b01      	subs	r3, #1
 800af3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800af3e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800af40:	2b01      	cmp	r3, #1
 800af42:	d802      	bhi.n	800af4a <dcd_read_packet_memory_ff+0x10c>
 800af44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1e9      	bne.n	800af1e <dcd_read_packet_memory_ff+0xe0>
    }
  }

  // read the rest of the wrapped part
  dcd_read_packet_memory(dst8, src, cnt_wrap);
 800af4a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800af4c:	887b      	ldrh	r3, [r7, #2]
 800af4e:	4619      	mov	r1, r3
 800af50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af52:	f7ff fe80 	bl	800ac56 <dcd_read_packet_memory>

  tu_fifo_advance_write_pointer(ff, cnt_total);
 800af56:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800af58:	4619      	mov	r1, r3
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7fb fbd5 	bl	800670a <tu_fifo_advance_write_pointer>
  return true;
 800af60:	2301      	movs	r3, #1
}
 800af62:	4618      	mov	r0, r3
 800af64:	3738      	adds	r7, #56	@ 0x38
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
	...

0800af6c <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	4603      	mov	r3, r0
 800af74:	6039      	str	r1, [r7, #0]
 800af76:	71fb      	strb	r3, [r7, #7]
    return true;
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800af78:	79fb      	ldrb	r3, [r7, #7]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d803      	bhi.n	800af86 <tusb_rhport_init+0x1a>
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10f      	bne.n	800afa6 <tusb_rhport_init+0x3a>
 800af86:	225a      	movs	r2, #90	@ 0x5a
 800af88:	491b      	ldr	r1, [pc, #108]	@ (800aff8 <tusb_rhport_init+0x8c>)
 800af8a:	481c      	ldr	r0, [pc, #112]	@ (800affc <tusb_rhport_init+0x90>)
 800af8c:	f000 fb4a 	bl	800b624 <iprintf>
 800af90:	4b1b      	ldr	r3, [pc, #108]	@ (800b000 <tusb_rhport_init+0x94>)
 800af92:	60bb      	str	r3, [r7, #8]
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d000      	beq.n	800afa2 <tusb_rhport_init+0x36>
 800afa0:	be00      	bkpt	0x0000
 800afa2:	2300      	movs	r3, #0
 800afa4:	e024      	b.n	800aff0 <tusb_rhport_init+0x84>
  _tusb_rhport_role[rhport] = rh_init->role;
 800afa6:	79fb      	ldrb	r3, [r7, #7]
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	7811      	ldrb	r1, [r2, #0]
 800afac:	4a15      	ldr	r2, [pc, #84]	@ (800b004 <tusb_rhport_init+0x98>)
 800afae:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d11a      	bne.n	800afee <tusb_rhport_init+0x82>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800afb8:	79fb      	ldrb	r3, [r7, #7]
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fb fe11 	bl	8006be4 <tud_rhport_init>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f083 0301 	eor.w	r3, r3, #1
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00f      	beq.n	800afee <tusb_rhport_init+0x82>
 800afce:	225f      	movs	r2, #95	@ 0x5f
 800afd0:	4909      	ldr	r1, [pc, #36]	@ (800aff8 <tusb_rhport_init+0x8c>)
 800afd2:	480a      	ldr	r0, [pc, #40]	@ (800affc <tusb_rhport_init+0x90>)
 800afd4:	f000 fb26 	bl	800b624 <iprintf>
 800afd8:	4b09      	ldr	r3, [pc, #36]	@ (800b000 <tusb_rhport_init+0x94>)
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d000      	beq.n	800afea <tusb_rhport_init+0x7e>
 800afe8:	be00      	bkpt	0x0000
 800afea:	2300      	movs	r3, #0
 800afec:	e000      	b.n	800aff0 <tusb_rhport_init+0x84>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800afee:	2301      	movs	r3, #1
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3710      	adds	r7, #16
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	0800d190 	.word	0x0800d190
 800affc:	0800cd3c 	.word	0x0800cd3c
 800b000:	e000edf0 	.word	0xe000edf0
 800b004:	20000870 	.word	0x20000870

0800b008 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d106      	bne.n	800b02e <tu_edpt_claim+0x26>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <tu_edpt_claim+0x2a>
 800b02e:	2300      	movs	r3, #0
 800b030:	e01e      	b.n	800b070 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d108      	bne.n	800b052 <tu_edpt_claim+0x4a>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d101      	bne.n	800b052 <tu_edpt_claim+0x4a>
 800b04e:	2301      	movs	r3, #1
 800b050:	e000      	b.n	800b054 <tu_edpt_claim+0x4c>
 800b052:	2300      	movs	r3, #0
 800b054:	73fb      	strb	r3, [r7, #15]
 800b056:	7bfb      	ldrb	r3, [r7, #15]
 800b058:	f003 0301 	and.w	r3, r3, #1
 800b05c:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d004      	beq.n	800b06e <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	7813      	ldrb	r3, [r2, #0]
 800b068:	f043 0304 	orr.w	r3, r3, #4
 800b06c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3714      	adds	r7, #20
 800b074:	46bd      	mov	sp, r7
 800b076:	bc80      	pop	{r7}
 800b078:	4770      	bx	lr

0800b07a <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800b07a:	b480      	push	{r7}
 800b07c:	b085      	sub	sp, #20
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d108      	bne.n	800b0a4 <tu_edpt_release+0x2a>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <tu_edpt_release+0x2a>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e000      	b.n	800b0a6 <tu_edpt_release+0x2c>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	73fb      	strb	r3, [r7, #15]
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d004      	beq.n	800b0c0 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	7813      	ldrb	r3, [r2, #0]
 800b0ba:	f36f 0382 	bfc	r3, #2, #1
 800b0be:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bc80      	pop	{r7}
 800b0ca:	4770      	bx	lr

0800b0cc <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed) {
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b08a      	sub	sp, #40	@ 0x28
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	70fb      	strb	r3, [r7, #3]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	889b      	ldrh	r3, [r3, #4]
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0e6:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800b0e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	789b      	ldrb	r3, [r3, #2]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	483f      	ldr	r0, [pc, #252]	@ (800b1f4 <tu_edpt_validate+0x128>)
 800b0f6:	f000 fa95 	bl	800b624 <iprintf>

  switch (desc_ep->bmAttributes.xfer) {
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	78db      	ldrb	r3, [r3, #3]
 800b0fe:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b102:	b2db      	uxtb	r3, r3
 800b104:	2b03      	cmp	r3, #3
 800b106:	d04d      	beq.n	800b1a4 <tu_edpt_validate+0xd8>
 800b108:	2b03      	cmp	r3, #3
 800b10a:	dc67      	bgt.n	800b1dc <tu_edpt_validate+0x110>
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d002      	beq.n	800b116 <tu_edpt_validate+0x4a>
 800b110:	2b02      	cmp	r3, #2
 800b112:	d01d      	beq.n	800b150 <tu_edpt_validate+0x84>
 800b114:	e062      	b.n	800b1dc <tu_edpt_validate+0x110>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800b116:	78fb      	ldrb	r3, [r7, #3]
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d102      	bne.n	800b122 <tu_edpt_validate+0x56>
 800b11c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b120:	e001      	b.n	800b126 <tu_edpt_validate+0x5a>
 800b122:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800b126:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 800b128:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b12a:	8afb      	ldrh	r3, [r7, #22]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d957      	bls.n	800b1e0 <tu_edpt_validate+0x114>
 800b130:	22d1      	movs	r2, #209	@ 0xd1
 800b132:	4931      	ldr	r1, [pc, #196]	@ (800b1f8 <tu_edpt_validate+0x12c>)
 800b134:	4831      	ldr	r0, [pc, #196]	@ (800b1fc <tu_edpt_validate+0x130>)
 800b136:	f000 fa75 	bl	800b624 <iprintf>
 800b13a:	4b31      	ldr	r3, [pc, #196]	@ (800b200 <tu_edpt_validate+0x134>)
 800b13c:	613b      	str	r3, [r7, #16]
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b00      	cmp	r3, #0
 800b148:	d000      	beq.n	800b14c <tu_edpt_validate+0x80>
 800b14a:	be00      	bkpt	0x0000
 800b14c:	2300      	movs	r3, #0
 800b14e:	e04d      	b.n	800b1ec <tu_edpt_validate+0x120>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	2b02      	cmp	r3, #2
 800b154:	d113      	bne.n	800b17e <tu_edpt_validate+0xb2>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800b156:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b15c:	d042      	beq.n	800b1e4 <tu_edpt_validate+0x118>
 800b15e:	22d8      	movs	r2, #216	@ 0xd8
 800b160:	4925      	ldr	r1, [pc, #148]	@ (800b1f8 <tu_edpt_validate+0x12c>)
 800b162:	4826      	ldr	r0, [pc, #152]	@ (800b1fc <tu_edpt_validate+0x130>)
 800b164:	f000 fa5e 	bl	800b624 <iprintf>
 800b168:	4b25      	ldr	r3, [pc, #148]	@ (800b200 <tu_edpt_validate+0x134>)
 800b16a:	61bb      	str	r3, [r7, #24]
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	d000      	beq.n	800b17a <tu_edpt_validate+0xae>
 800b178:	be00      	bkpt	0x0000
 800b17a:	2300      	movs	r3, #0
 800b17c:	e036      	b.n	800b1ec <tu_edpt_validate+0x120>
      } else {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 800b17e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b180:	2b40      	cmp	r3, #64	@ 0x40
 800b182:	d92f      	bls.n	800b1e4 <tu_edpt_validate+0x118>
 800b184:	22db      	movs	r2, #219	@ 0xdb
 800b186:	491c      	ldr	r1, [pc, #112]	@ (800b1f8 <tu_edpt_validate+0x12c>)
 800b188:	481c      	ldr	r0, [pc, #112]	@ (800b1fc <tu_edpt_validate+0x130>)
 800b18a:	f000 fa4b 	bl	800b624 <iprintf>
 800b18e:	4b1c      	ldr	r3, [pc, #112]	@ (800b200 <tu_edpt_validate+0x134>)
 800b190:	61fb      	str	r3, [r7, #28]
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f003 0301 	and.w	r3, r3, #1
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d000      	beq.n	800b1a0 <tu_edpt_validate+0xd4>
 800b19e:	be00      	bkpt	0x0000
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	e023      	b.n	800b1ec <tu_edpt_validate+0x120>
      }
      break;

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d102      	bne.n	800b1b0 <tu_edpt_validate+0xe4>
 800b1aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1ae:	e000      	b.n	800b1b2 <tu_edpt_validate+0xe6>
 800b1b0:	2340      	movs	r3, #64	@ 0x40
 800b1b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800b1b4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b1b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d915      	bls.n	800b1e8 <tu_edpt_validate+0x11c>
 800b1bc:	22e1      	movs	r2, #225	@ 0xe1
 800b1be:	490e      	ldr	r1, [pc, #56]	@ (800b1f8 <tu_edpt_validate+0x12c>)
 800b1c0:	480e      	ldr	r0, [pc, #56]	@ (800b1fc <tu_edpt_validate+0x130>)
 800b1c2:	f000 fa2f 	bl	800b624 <iprintf>
 800b1c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b200 <tu_edpt_validate+0x134>)
 800b1c8:	623b      	str	r3, [r7, #32]
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 0301 	and.w	r3, r3, #1
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d000      	beq.n	800b1d8 <tu_edpt_validate+0x10c>
 800b1d6:	be00      	bkpt	0x0000
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e007      	b.n	800b1ec <tu_edpt_validate+0x120>
      break;
    }

    default:
      return false;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	e005      	b.n	800b1ec <tu_edpt_validate+0x120>
      break;
 800b1e0:	bf00      	nop
 800b1e2:	e002      	b.n	800b1ea <tu_edpt_validate+0x11e>
      break;
 800b1e4:	bf00      	nop
 800b1e6:	e000      	b.n	800b1ea <tu_edpt_validate+0x11e>
      break;
 800b1e8:	bf00      	nop
  }

  return true;
 800b1ea:	2301      	movs	r3, #1
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3728      	adds	r7, #40	@ 0x28
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	0800cd54 	.word	0x0800cd54
 800b1f8:	0800d1a4 	.word	0x0800d1a4
 800b1fc:	0800cd3c 	.word	0x0800cd3c
 800b200:	e000edf0 	.word	0xe000edf0

0800b204 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800b204:	b580      	push	{r7, lr}
 800b206:	b08c      	sub	sp, #48	@ 0x30
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	4611      	mov	r1, r2
 800b210:	461a      	mov	r2, r3
 800b212:	460b      	mov	r3, r1
 800b214:	80fb      	strh	r3, [r7, #6]
 800b216:	4613      	mov	r3, r2
 800b218:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800b21e:	88fb      	ldrh	r3, [r7, #6]
 800b220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b222:	4413      	add	r3, r2
 800b224:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800b226:	e02e      	b.n	800b286 <tu_edpt_bind_driver+0x82>
 800b228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22a:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800b22c:	6a3b      	ldr	r3, [r7, #32]
 800b22e:	3301      	adds	r3, #1
 800b230:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800b232:	2b05      	cmp	r3, #5
 800b234:	d11d      	bne.n	800b272 <tu_edpt_bind_driver+0x6e>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800b236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b238:	789b      	ldrb	r3, [r3, #2]
 800b23a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
 800b23e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b242:	797a      	ldrb	r2, [r7, #5]
 800b244:	4619      	mov	r1, r3
 800b246:	4814      	ldr	r0, [pc, #80]	@ (800b298 <tu_edpt_bind_driver+0x94>)
 800b248:	f000 f9ec 	bl	800b624 <iprintf>
 800b24c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b250:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b252:	7fbb      	ldrb	r3, [r7, #30]
 800b254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b258:	b2db      	uxtb	r3, r3
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800b25a:	005b      	lsls	r3, r3, #1
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	4413      	add	r3, r2
 800b260:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b264:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b266:	7ffa      	ldrb	r2, [r7, #31]
 800b268:	09d2      	lsrs	r2, r2, #7
 800b26a:	b2d2      	uxtb	r2, r2
 800b26c:	4611      	mov	r1, r2
 800b26e:	797a      	ldrb	r2, [r7, #5]
 800b270:	545a      	strb	r2, [r3, r1]
 800b272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b274:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	461a      	mov	r2, r3
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800b284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800b286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d3cc      	bcc.n	800b228 <tu_edpt_bind_driver+0x24>
  }
}
 800b28e:	bf00      	nop
 800b290:	bf00      	nop
 800b292:	3730      	adds	r7, #48	@ 0x30
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	0800cd74 	.word	0x0800cd74

0800b29c <dump_str_line>:
char const* const tu_str_xfer_result[] = {
    "OK", "FAILED", "STALLED", "TIMEOUT"
};
#endif

static void dump_str_line(uint8_t const* buf, uint16_t count) {
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	807b      	strh	r3, [r7, #2]
  tu_printf("  |");
 800b2a8:	4813      	ldr	r0, [pc, #76]	@ (800b2f8 <dump_str_line+0x5c>)
 800b2aa:	f000 f9bb 	bl	800b624 <iprintf>
  // each line is 16 bytes
  for (uint16_t i = 0; i < count; i++) {
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	81fb      	strh	r3, [r7, #14]
 800b2b2:	e016      	b.n	800b2e2 <dump_str_line+0x46>
    int ch = buf[i];
 800b2b4:	89fb      	ldrh	r3, [r7, #14]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	60bb      	str	r3, [r7, #8]
    tu_printf("%c", isprint(ch) ? ch : '.');
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	4a0e      	ldr	r2, [pc, #56]	@ (800b2fc <dump_str_line+0x60>)
 800b2c4:	4413      	add	r3, r2
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <dump_str_line+0x38>
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	e000      	b.n	800b2d6 <dump_str_line+0x3a>
 800b2d4:	232e      	movs	r3, #46	@ 0x2e
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f000 f9b6 	bl	800b648 <putchar>
  for (uint16_t i = 0; i < count; i++) {
 800b2dc:	89fb      	ldrh	r3, [r7, #14]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	81fb      	strh	r3, [r7, #14]
 800b2e2:	89fa      	ldrh	r2, [r7, #14]
 800b2e4:	887b      	ldrh	r3, [r7, #2]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d3e4      	bcc.n	800b2b4 <dump_str_line+0x18>
  }
  tu_printf("|\r\n");
 800b2ea:	4805      	ldr	r0, [pc, #20]	@ (800b300 <dump_str_line+0x64>)
 800b2ec:	f000 fa0a 	bl	800b704 <puts>
}
 800b2f0:	bf00      	nop
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	0800ce7c 	.word	0x0800ce7c
 800b2fc:	0800d1b5 	.word	0x0800d1b5
 800b300:	0800ce80 	.word	0x0800ce80

0800b304 <tu_print_mem>:
/* Print out memory contents
 *  - buf   : buffer
 *  - count : number of item
 *  - indent: prefix spaces on every line
 */
void tu_print_mem(void const* buf, uint32_t count, uint8_t indent) {
 800b304:	b580      	push	{r7, lr}
 800b306:	b094      	sub	sp, #80	@ 0x50
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	4613      	mov	r3, r2
 800b310:	71fb      	strb	r3, [r7, #7]
  uint8_t const size = 1; // fixed 1 byte for now
 800b312:	2301      	movs	r3, #1
 800b314:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (!buf || !count) {
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d002      	beq.n	800b324 <tu_print_mem+0x20>
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d103      	bne.n	800b32c <tu_print_mem+0x28>
    tu_printf("NULL\r\n");
 800b324:	485b      	ldr	r0, [pc, #364]	@ (800b494 <tu_print_mem+0x190>)
 800b326:	f000 f9ed 	bl	800b704 <puts>
 800b32a:	e0b0      	b.n	800b48e <tu_print_mem+0x18a>
    return;
  }

  uint8_t const* buf8 = (uint8_t const*) buf;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  char format[] = "%00X";
 800b330:	4a59      	ldr	r2, [pc, #356]	@ (800b498 <tu_print_mem+0x194>)
 800b332:	f107 0318 	add.w	r3, r7, #24
 800b336:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b33a:	6018      	str	r0, [r3, #0]
 800b33c:	3304      	adds	r3, #4
 800b33e:	7019      	strb	r1, [r3, #0]
  format[2] += (uint8_t) (2 * size); // 1 byte = 2 hex digits
 800b340:	7eba      	ldrb	r2, [r7, #26]
 800b342:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	4413      	add	r3, r2
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	76bb      	strb	r3, [r7, #26]
  const uint8_t item_per_line = 16 / size;
 800b350:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b354:	2210      	movs	r2, #16
 800b356:	fb92 f3f3 	sdiv	r3, r2, r3
 800b35a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

  for (unsigned int i = 0; i < count; i++) {
 800b35e:	2300      	movs	r3, #0
 800b360:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b362:	e056      	b.n	800b412 <tu_print_mem+0x10e>
    unsigned int value = 0;
 800b364:	2300      	movs	r3, #0
 800b366:	617b      	str	r3, [r7, #20]

    if (i % item_per_line == 0) {
 800b368:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800b36c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b36e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b372:	fb01 f202 	mul.w	r2, r1, r2
 800b376:	1a9b      	subs	r3, r3, r2
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d123      	bne.n	800b3c4 <tu_print_mem+0xc0>
      // Print Ascii
      if (i != 0) dump_str_line(buf8 - 16, 16);
 800b37c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d005      	beq.n	800b38e <tu_print_mem+0x8a>
 800b382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b384:	3b10      	subs	r3, #16
 800b386:	2110      	movs	r1, #16
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff ff87 	bl	800b29c <dump_str_line>
      for (uint8_t s = 0; s < indent; s++) tu_printf(" ");
 800b38e:	2300      	movs	r3, #0
 800b390:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b394:	e007      	b.n	800b3a6 <tu_print_mem+0xa2>
 800b396:	2020      	movs	r0, #32
 800b398:	f000 f956 	bl	800b648 <putchar>
 800b39c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b3a6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800b3aa:	79fb      	ldrb	r3, [r7, #7]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d3f2      	bcc.n	800b396 <tu_print_mem+0x92>
      // print offset or absolute address
      tu_printf("%04X: ", 16 * i / item_per_line);
 800b3b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3b2:	011a      	lsls	r2, r3, #4
 800b3b4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b3b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3bc:	4619      	mov	r1, r3
 800b3be:	4837      	ldr	r0, [pc, #220]	@ (800b49c <tu_print_mem+0x198>)
 800b3c0:	f000 f930 	bl	800b624 <iprintf>
    }

    tu_memcpy_s(&value, sizeof(value), buf8, size);
 800b3c4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b3c8:	f107 0214 	add.w	r2, r7, #20
 800b3cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3ce:	2204      	movs	r2, #4
 800b3d0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b3d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3d4:	627a      	str	r2, [r7, #36]	@ 0x24
 800b3d6:	623b      	str	r3, [r7, #32]
}

// This is a backport of memcpy_s from c11
TU_ATTR_ALWAYS_INLINE static inline int tu_memcpy_s(void *dest, size_t destsz, const void *src, size_t count) {
  // TODO may check if desst and src is not NULL
  if ( count > destsz ) {
 800b3d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3da:	6a3b      	ldr	r3, [r7, #32]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d305      	bcc.n	800b3ec <tu_print_mem+0xe8>
    return -1;
  }
  memcpy(dest, src, count);
 800b3e0:	6a3a      	ldr	r2, [r7, #32]
 800b3e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b3e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b3e6:	f000 fb1c 	bl	800ba22 <memcpy>
  return 0;
 800b3ea:	e000      	b.n	800b3ee <tu_print_mem+0xea>
    return -1;
 800b3ec:	bf00      	nop
    buf8 += size;
 800b3ee:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b3f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3f4:	4413      	add	r3, r2
 800b3f6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    tu_printf(" ");
 800b3f8:	2020      	movs	r0, #32
 800b3fa:	f000 f925 	bl	800b648 <putchar>
    tu_printf(format, value);
 800b3fe:	697a      	ldr	r2, [r7, #20]
 800b400:	f107 0318 	add.w	r3, r7, #24
 800b404:	4611      	mov	r1, r2
 800b406:	4618      	mov	r0, r3
 800b408:	f000 f90c 	bl	800b624 <iprintf>
  for (unsigned int i = 0; i < count; i++) {
 800b40c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b40e:	3301      	adds	r3, #1
 800b410:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	429a      	cmp	r2, r3
 800b418:	d3a4      	bcc.n	800b364 <tu_print_mem+0x60>
  }

  // fill up last row to 16 for printing ascii
  const uint32_t remain = count % 16;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	f003 030f 	and.w	r3, r3, #15
 800b420:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t nback = (uint8_t) (remain ? remain : 16);
 800b422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <tu_print_mem+0x12a>
 800b428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	e000      	b.n	800b430 <tu_print_mem+0x12c>
 800b42e:	2310      	movs	r3, #16
 800b430:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (remain) {
 800b434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b436:	2b00      	cmp	r3, #0
 800b438:	d01d      	beq.n	800b476 <tu_print_mem+0x172>
    for (uint32_t i = 0; i < 16 - remain; i++) {
 800b43a:	2300      	movs	r3, #0
 800b43c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b43e:	e014      	b.n	800b46a <tu_print_mem+0x166>
      tu_printf(" ");
 800b440:	2020      	movs	r0, #32
 800b442:	f000 f901 	bl	800b648 <putchar>
      for (int j = 0; j < 2 * size; j++) tu_printf(" ");
 800b446:	2300      	movs	r3, #0
 800b448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b44a:	e005      	b.n	800b458 <tu_print_mem+0x154>
 800b44c:	2020      	movs	r0, #32
 800b44e:	f000 f8fb 	bl	800b648 <putchar>
 800b452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b454:	3301      	adds	r3, #1
 800b456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b458:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b460:	429a      	cmp	r2, r3
 800b462:	dbf3      	blt.n	800b44c <tu_print_mem+0x148>
    for (uint32_t i = 0; i < 16 - remain; i++) {
 800b464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b466:	3301      	adds	r3, #1
 800b468:	643b      	str	r3, [r7, #64]	@ 0x40
 800b46a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b46c:	f1c3 0310 	rsb	r3, r3, #16
 800b470:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b472:	429a      	cmp	r2, r3
 800b474:	d3e4      	bcc.n	800b440 <tu_print_mem+0x13c>
    }
  }

  dump_str_line(buf8 - nback, nback);
 800b476:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b47a:	425b      	negs	r3, r3
 800b47c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b47e:	4413      	add	r3, r2
 800b480:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800b484:	b292      	uxth	r2, r2
 800b486:	4611      	mov	r1, r2
 800b488:	4618      	mov	r0, r3
 800b48a:	f7ff ff07 	bl	800b29c <dump_str_line>
}
 800b48e:	3750      	adds	r7, #80	@ 0x50
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	0800ce84 	.word	0x0800ce84
 800b498:	0800ce94 	.word	0x0800ce94
 800b49c:	0800ce8c 	.word	0x0800ce8c

0800b4a0 <std>:
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	b510      	push	{r4, lr}
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b4aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4ae:	6083      	str	r3, [r0, #8]
 800b4b0:	8181      	strh	r1, [r0, #12]
 800b4b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b4b4:	81c2      	strh	r2, [r0, #14]
 800b4b6:	6183      	str	r3, [r0, #24]
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	2208      	movs	r2, #8
 800b4bc:	305c      	adds	r0, #92	@ 0x5c
 800b4be:	f000 fa35 	bl	800b92c <memset>
 800b4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b4f8 <std+0x58>)
 800b4c4:	6224      	str	r4, [r4, #32]
 800b4c6:	6263      	str	r3, [r4, #36]	@ 0x24
 800b4c8:	4b0c      	ldr	r3, [pc, #48]	@ (800b4fc <std+0x5c>)
 800b4ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b500 <std+0x60>)
 800b4ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b4d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b504 <std+0x64>)
 800b4d2:	6323      	str	r3, [r4, #48]	@ 0x30
 800b4d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b508 <std+0x68>)
 800b4d6:	429c      	cmp	r4, r3
 800b4d8:	d006      	beq.n	800b4e8 <std+0x48>
 800b4da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b4de:	4294      	cmp	r4, r2
 800b4e0:	d002      	beq.n	800b4e8 <std+0x48>
 800b4e2:	33d0      	adds	r3, #208	@ 0xd0
 800b4e4:	429c      	cmp	r4, r3
 800b4e6:	d105      	bne.n	800b4f4 <std+0x54>
 800b4e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4f0:	f000 ba94 	b.w	800ba1c <__retarget_lock_init_recursive>
 800b4f4:	bd10      	pop	{r4, pc}
 800b4f6:	bf00      	nop
 800b4f8:	0800b77d 	.word	0x0800b77d
 800b4fc:	0800b79f 	.word	0x0800b79f
 800b500:	0800b7d7 	.word	0x0800b7d7
 800b504:	0800b7fb 	.word	0x0800b7fb
 800b508:	20000874 	.word	0x20000874

0800b50c <stdio_exit_handler>:
 800b50c:	4a02      	ldr	r2, [pc, #8]	@ (800b518 <stdio_exit_handler+0xc>)
 800b50e:	4903      	ldr	r1, [pc, #12]	@ (800b51c <stdio_exit_handler+0x10>)
 800b510:	4803      	ldr	r0, [pc, #12]	@ (800b520 <stdio_exit_handler+0x14>)
 800b512:	f000 b869 	b.w	800b5e8 <_fwalk_sglue>
 800b516:	bf00      	nop
 800b518:	20000038 	.word	0x20000038
 800b51c:	0800c581 	.word	0x0800c581
 800b520:	20000048 	.word	0x20000048

0800b524 <cleanup_stdio>:
 800b524:	6841      	ldr	r1, [r0, #4]
 800b526:	4b0c      	ldr	r3, [pc, #48]	@ (800b558 <cleanup_stdio+0x34>)
 800b528:	b510      	push	{r4, lr}
 800b52a:	4299      	cmp	r1, r3
 800b52c:	4604      	mov	r4, r0
 800b52e:	d001      	beq.n	800b534 <cleanup_stdio+0x10>
 800b530:	f001 f826 	bl	800c580 <_fflush_r>
 800b534:	68a1      	ldr	r1, [r4, #8]
 800b536:	4b09      	ldr	r3, [pc, #36]	@ (800b55c <cleanup_stdio+0x38>)
 800b538:	4299      	cmp	r1, r3
 800b53a:	d002      	beq.n	800b542 <cleanup_stdio+0x1e>
 800b53c:	4620      	mov	r0, r4
 800b53e:	f001 f81f 	bl	800c580 <_fflush_r>
 800b542:	68e1      	ldr	r1, [r4, #12]
 800b544:	4b06      	ldr	r3, [pc, #24]	@ (800b560 <cleanup_stdio+0x3c>)
 800b546:	4299      	cmp	r1, r3
 800b548:	d004      	beq.n	800b554 <cleanup_stdio+0x30>
 800b54a:	4620      	mov	r0, r4
 800b54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b550:	f001 b816 	b.w	800c580 <_fflush_r>
 800b554:	bd10      	pop	{r4, pc}
 800b556:	bf00      	nop
 800b558:	20000874 	.word	0x20000874
 800b55c:	200008dc 	.word	0x200008dc
 800b560:	20000944 	.word	0x20000944

0800b564 <global_stdio_init.part.0>:
 800b564:	b510      	push	{r4, lr}
 800b566:	4b0b      	ldr	r3, [pc, #44]	@ (800b594 <global_stdio_init.part.0+0x30>)
 800b568:	4c0b      	ldr	r4, [pc, #44]	@ (800b598 <global_stdio_init.part.0+0x34>)
 800b56a:	4a0c      	ldr	r2, [pc, #48]	@ (800b59c <global_stdio_init.part.0+0x38>)
 800b56c:	4620      	mov	r0, r4
 800b56e:	601a      	str	r2, [r3, #0]
 800b570:	2104      	movs	r1, #4
 800b572:	2200      	movs	r2, #0
 800b574:	f7ff ff94 	bl	800b4a0 <std>
 800b578:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b57c:	2201      	movs	r2, #1
 800b57e:	2109      	movs	r1, #9
 800b580:	f7ff ff8e 	bl	800b4a0 <std>
 800b584:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b588:	2202      	movs	r2, #2
 800b58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b58e:	2112      	movs	r1, #18
 800b590:	f7ff bf86 	b.w	800b4a0 <std>
 800b594:	200009ac 	.word	0x200009ac
 800b598:	20000874 	.word	0x20000874
 800b59c:	0800b50d 	.word	0x0800b50d

0800b5a0 <__sfp_lock_acquire>:
 800b5a0:	4801      	ldr	r0, [pc, #4]	@ (800b5a8 <__sfp_lock_acquire+0x8>)
 800b5a2:	f000 ba3c 	b.w	800ba1e <__retarget_lock_acquire_recursive>
 800b5a6:	bf00      	nop
 800b5a8:	200009b5 	.word	0x200009b5

0800b5ac <__sfp_lock_release>:
 800b5ac:	4801      	ldr	r0, [pc, #4]	@ (800b5b4 <__sfp_lock_release+0x8>)
 800b5ae:	f000 ba37 	b.w	800ba20 <__retarget_lock_release_recursive>
 800b5b2:	bf00      	nop
 800b5b4:	200009b5 	.word	0x200009b5

0800b5b8 <__sinit>:
 800b5b8:	b510      	push	{r4, lr}
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	f7ff fff0 	bl	800b5a0 <__sfp_lock_acquire>
 800b5c0:	6a23      	ldr	r3, [r4, #32]
 800b5c2:	b11b      	cbz	r3, 800b5cc <__sinit+0x14>
 800b5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5c8:	f7ff bff0 	b.w	800b5ac <__sfp_lock_release>
 800b5cc:	4b04      	ldr	r3, [pc, #16]	@ (800b5e0 <__sinit+0x28>)
 800b5ce:	6223      	str	r3, [r4, #32]
 800b5d0:	4b04      	ldr	r3, [pc, #16]	@ (800b5e4 <__sinit+0x2c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1f5      	bne.n	800b5c4 <__sinit+0xc>
 800b5d8:	f7ff ffc4 	bl	800b564 <global_stdio_init.part.0>
 800b5dc:	e7f2      	b.n	800b5c4 <__sinit+0xc>
 800b5de:	bf00      	nop
 800b5e0:	0800b525 	.word	0x0800b525
 800b5e4:	200009ac 	.word	0x200009ac

0800b5e8 <_fwalk_sglue>:
 800b5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ec:	4607      	mov	r7, r0
 800b5ee:	4688      	mov	r8, r1
 800b5f0:	4614      	mov	r4, r2
 800b5f2:	2600      	movs	r6, #0
 800b5f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5f8:	f1b9 0901 	subs.w	r9, r9, #1
 800b5fc:	d505      	bpl.n	800b60a <_fwalk_sglue+0x22>
 800b5fe:	6824      	ldr	r4, [r4, #0]
 800b600:	2c00      	cmp	r4, #0
 800b602:	d1f7      	bne.n	800b5f4 <_fwalk_sglue+0xc>
 800b604:	4630      	mov	r0, r6
 800b606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b60a:	89ab      	ldrh	r3, [r5, #12]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d907      	bls.n	800b620 <_fwalk_sglue+0x38>
 800b610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b614:	3301      	adds	r3, #1
 800b616:	d003      	beq.n	800b620 <_fwalk_sglue+0x38>
 800b618:	4629      	mov	r1, r5
 800b61a:	4638      	mov	r0, r7
 800b61c:	47c0      	blx	r8
 800b61e:	4306      	orrs	r6, r0
 800b620:	3568      	adds	r5, #104	@ 0x68
 800b622:	e7e9      	b.n	800b5f8 <_fwalk_sglue+0x10>

0800b624 <iprintf>:
 800b624:	b40f      	push	{r0, r1, r2, r3}
 800b626:	b507      	push	{r0, r1, r2, lr}
 800b628:	4906      	ldr	r1, [pc, #24]	@ (800b644 <iprintf+0x20>)
 800b62a:	ab04      	add	r3, sp, #16
 800b62c:	6808      	ldr	r0, [r1, #0]
 800b62e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b632:	6881      	ldr	r1, [r0, #8]
 800b634:	9301      	str	r3, [sp, #4]
 800b636:	f000 fc79 	bl	800bf2c <_vfiprintf_r>
 800b63a:	b003      	add	sp, #12
 800b63c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b640:	b004      	add	sp, #16
 800b642:	4770      	bx	lr
 800b644:	20000044 	.word	0x20000044

0800b648 <putchar>:
 800b648:	4b02      	ldr	r3, [pc, #8]	@ (800b654 <putchar+0xc>)
 800b64a:	4601      	mov	r1, r0
 800b64c:	6818      	ldr	r0, [r3, #0]
 800b64e:	6882      	ldr	r2, [r0, #8]
 800b650:	f001 b81f 	b.w	800c692 <_putc_r>
 800b654:	20000044 	.word	0x20000044

0800b658 <_puts_r>:
 800b658:	6a03      	ldr	r3, [r0, #32]
 800b65a:	b570      	push	{r4, r5, r6, lr}
 800b65c:	4605      	mov	r5, r0
 800b65e:	460e      	mov	r6, r1
 800b660:	6884      	ldr	r4, [r0, #8]
 800b662:	b90b      	cbnz	r3, 800b668 <_puts_r+0x10>
 800b664:	f7ff ffa8 	bl	800b5b8 <__sinit>
 800b668:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b66a:	07db      	lsls	r3, r3, #31
 800b66c:	d405      	bmi.n	800b67a <_puts_r+0x22>
 800b66e:	89a3      	ldrh	r3, [r4, #12]
 800b670:	0598      	lsls	r0, r3, #22
 800b672:	d402      	bmi.n	800b67a <_puts_r+0x22>
 800b674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b676:	f000 f9d2 	bl	800ba1e <__retarget_lock_acquire_recursive>
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	0719      	lsls	r1, r3, #28
 800b67e:	d502      	bpl.n	800b686 <_puts_r+0x2e>
 800b680:	6923      	ldr	r3, [r4, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d135      	bne.n	800b6f2 <_puts_r+0x9a>
 800b686:	4621      	mov	r1, r4
 800b688:	4628      	mov	r0, r5
 800b68a:	f000 f8f9 	bl	800b880 <__swsetup_r>
 800b68e:	b380      	cbz	r0, 800b6f2 <_puts_r+0x9a>
 800b690:	f04f 35ff 	mov.w	r5, #4294967295
 800b694:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b696:	07da      	lsls	r2, r3, #31
 800b698:	d405      	bmi.n	800b6a6 <_puts_r+0x4e>
 800b69a:	89a3      	ldrh	r3, [r4, #12]
 800b69c:	059b      	lsls	r3, r3, #22
 800b69e:	d402      	bmi.n	800b6a6 <_puts_r+0x4e>
 800b6a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6a2:	f000 f9bd 	bl	800ba20 <__retarget_lock_release_recursive>
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	bd70      	pop	{r4, r5, r6, pc}
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	da04      	bge.n	800b6b8 <_puts_r+0x60>
 800b6ae:	69a2      	ldr	r2, [r4, #24]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	dc17      	bgt.n	800b6e4 <_puts_r+0x8c>
 800b6b4:	290a      	cmp	r1, #10
 800b6b6:	d015      	beq.n	800b6e4 <_puts_r+0x8c>
 800b6b8:	6823      	ldr	r3, [r4, #0]
 800b6ba:	1c5a      	adds	r2, r3, #1
 800b6bc:	6022      	str	r2, [r4, #0]
 800b6be:	7019      	strb	r1, [r3, #0]
 800b6c0:	68a3      	ldr	r3, [r4, #8]
 800b6c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	60a3      	str	r3, [r4, #8]
 800b6ca:	2900      	cmp	r1, #0
 800b6cc:	d1ed      	bne.n	800b6aa <_puts_r+0x52>
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	da11      	bge.n	800b6f6 <_puts_r+0x9e>
 800b6d2:	4622      	mov	r2, r4
 800b6d4:	210a      	movs	r1, #10
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f000 f893 	bl	800b802 <__swbuf_r>
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d0d7      	beq.n	800b690 <_puts_r+0x38>
 800b6e0:	250a      	movs	r5, #10
 800b6e2:	e7d7      	b.n	800b694 <_puts_r+0x3c>
 800b6e4:	4622      	mov	r2, r4
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f000 f88b 	bl	800b802 <__swbuf_r>
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d1e7      	bne.n	800b6c0 <_puts_r+0x68>
 800b6f0:	e7ce      	b.n	800b690 <_puts_r+0x38>
 800b6f2:	3e01      	subs	r6, #1
 800b6f4:	e7e4      	b.n	800b6c0 <_puts_r+0x68>
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	1c5a      	adds	r2, r3, #1
 800b6fa:	6022      	str	r2, [r4, #0]
 800b6fc:	220a      	movs	r2, #10
 800b6fe:	701a      	strb	r2, [r3, #0]
 800b700:	e7ee      	b.n	800b6e0 <_puts_r+0x88>
	...

0800b704 <puts>:
 800b704:	4b02      	ldr	r3, [pc, #8]	@ (800b710 <puts+0xc>)
 800b706:	4601      	mov	r1, r0
 800b708:	6818      	ldr	r0, [r3, #0]
 800b70a:	f7ff bfa5 	b.w	800b658 <_puts_r>
 800b70e:	bf00      	nop
 800b710:	20000044 	.word	0x20000044

0800b714 <sniprintf>:
 800b714:	b40c      	push	{r2, r3}
 800b716:	b530      	push	{r4, r5, lr}
 800b718:	4b17      	ldr	r3, [pc, #92]	@ (800b778 <sniprintf+0x64>)
 800b71a:	1e0c      	subs	r4, r1, #0
 800b71c:	681d      	ldr	r5, [r3, #0]
 800b71e:	b09d      	sub	sp, #116	@ 0x74
 800b720:	da08      	bge.n	800b734 <sniprintf+0x20>
 800b722:	238b      	movs	r3, #139	@ 0x8b
 800b724:	f04f 30ff 	mov.w	r0, #4294967295
 800b728:	602b      	str	r3, [r5, #0]
 800b72a:	b01d      	add	sp, #116	@ 0x74
 800b72c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b730:	b002      	add	sp, #8
 800b732:	4770      	bx	lr
 800b734:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b738:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b73c:	bf0c      	ite	eq
 800b73e:	4623      	moveq	r3, r4
 800b740:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b744:	9304      	str	r3, [sp, #16]
 800b746:	9307      	str	r3, [sp, #28]
 800b748:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b74c:	9002      	str	r0, [sp, #8]
 800b74e:	9006      	str	r0, [sp, #24]
 800b750:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b754:	4628      	mov	r0, r5
 800b756:	ab21      	add	r3, sp, #132	@ 0x84
 800b758:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b75a:	a902      	add	r1, sp, #8
 800b75c:	9301      	str	r3, [sp, #4]
 800b75e:	f000 fac1 	bl	800bce4 <_svfiprintf_r>
 800b762:	1c43      	adds	r3, r0, #1
 800b764:	bfbc      	itt	lt
 800b766:	238b      	movlt	r3, #139	@ 0x8b
 800b768:	602b      	strlt	r3, [r5, #0]
 800b76a:	2c00      	cmp	r4, #0
 800b76c:	d0dd      	beq.n	800b72a <sniprintf+0x16>
 800b76e:	2200      	movs	r2, #0
 800b770:	9b02      	ldr	r3, [sp, #8]
 800b772:	701a      	strb	r2, [r3, #0]
 800b774:	e7d9      	b.n	800b72a <sniprintf+0x16>
 800b776:	bf00      	nop
 800b778:	20000044 	.word	0x20000044

0800b77c <__sread>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	460c      	mov	r4, r1
 800b780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b784:	f000 f8fc 	bl	800b980 <_read_r>
 800b788:	2800      	cmp	r0, #0
 800b78a:	bfab      	itete	ge
 800b78c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b78e:	89a3      	ldrhlt	r3, [r4, #12]
 800b790:	181b      	addge	r3, r3, r0
 800b792:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b796:	bfac      	ite	ge
 800b798:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b79a:	81a3      	strhlt	r3, [r4, #12]
 800b79c:	bd10      	pop	{r4, pc}

0800b79e <__swrite>:
 800b79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a2:	461f      	mov	r7, r3
 800b7a4:	898b      	ldrh	r3, [r1, #12]
 800b7a6:	4605      	mov	r5, r0
 800b7a8:	05db      	lsls	r3, r3, #23
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	4616      	mov	r6, r2
 800b7ae:	d505      	bpl.n	800b7bc <__swrite+0x1e>
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b8:	f000 f8d0 	bl	800b95c <_lseek_r>
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	4632      	mov	r2, r6
 800b7c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7c4:	81a3      	strh	r3, [r4, #12]
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	463b      	mov	r3, r7
 800b7ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d2:	f000 b8e7 	b.w	800b9a4 <_write_r>

0800b7d6 <__sseek>:
 800b7d6:	b510      	push	{r4, lr}
 800b7d8:	460c      	mov	r4, r1
 800b7da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7de:	f000 f8bd 	bl	800b95c <_lseek_r>
 800b7e2:	1c43      	adds	r3, r0, #1
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	bf15      	itete	ne
 800b7e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b7ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b7ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b7f2:	81a3      	strheq	r3, [r4, #12]
 800b7f4:	bf18      	it	ne
 800b7f6:	81a3      	strhne	r3, [r4, #12]
 800b7f8:	bd10      	pop	{r4, pc}

0800b7fa <__sclose>:
 800b7fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7fe:	f000 b89d 	b.w	800b93c <_close_r>

0800b802 <__swbuf_r>:
 800b802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b804:	460e      	mov	r6, r1
 800b806:	4614      	mov	r4, r2
 800b808:	4605      	mov	r5, r0
 800b80a:	b118      	cbz	r0, 800b814 <__swbuf_r+0x12>
 800b80c:	6a03      	ldr	r3, [r0, #32]
 800b80e:	b90b      	cbnz	r3, 800b814 <__swbuf_r+0x12>
 800b810:	f7ff fed2 	bl	800b5b8 <__sinit>
 800b814:	69a3      	ldr	r3, [r4, #24]
 800b816:	60a3      	str	r3, [r4, #8]
 800b818:	89a3      	ldrh	r3, [r4, #12]
 800b81a:	071a      	lsls	r2, r3, #28
 800b81c:	d501      	bpl.n	800b822 <__swbuf_r+0x20>
 800b81e:	6923      	ldr	r3, [r4, #16]
 800b820:	b943      	cbnz	r3, 800b834 <__swbuf_r+0x32>
 800b822:	4621      	mov	r1, r4
 800b824:	4628      	mov	r0, r5
 800b826:	f000 f82b 	bl	800b880 <__swsetup_r>
 800b82a:	b118      	cbz	r0, 800b834 <__swbuf_r+0x32>
 800b82c:	f04f 37ff 	mov.w	r7, #4294967295
 800b830:	4638      	mov	r0, r7
 800b832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b834:	6823      	ldr	r3, [r4, #0]
 800b836:	6922      	ldr	r2, [r4, #16]
 800b838:	b2f6      	uxtb	r6, r6
 800b83a:	1a98      	subs	r0, r3, r2
 800b83c:	6963      	ldr	r3, [r4, #20]
 800b83e:	4637      	mov	r7, r6
 800b840:	4283      	cmp	r3, r0
 800b842:	dc05      	bgt.n	800b850 <__swbuf_r+0x4e>
 800b844:	4621      	mov	r1, r4
 800b846:	4628      	mov	r0, r5
 800b848:	f000 fe9a 	bl	800c580 <_fflush_r>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d1ed      	bne.n	800b82c <__swbuf_r+0x2a>
 800b850:	68a3      	ldr	r3, [r4, #8]
 800b852:	3b01      	subs	r3, #1
 800b854:	60a3      	str	r3, [r4, #8]
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	6022      	str	r2, [r4, #0]
 800b85c:	701e      	strb	r6, [r3, #0]
 800b85e:	6962      	ldr	r2, [r4, #20]
 800b860:	1c43      	adds	r3, r0, #1
 800b862:	429a      	cmp	r2, r3
 800b864:	d004      	beq.n	800b870 <__swbuf_r+0x6e>
 800b866:	89a3      	ldrh	r3, [r4, #12]
 800b868:	07db      	lsls	r3, r3, #31
 800b86a:	d5e1      	bpl.n	800b830 <__swbuf_r+0x2e>
 800b86c:	2e0a      	cmp	r6, #10
 800b86e:	d1df      	bne.n	800b830 <__swbuf_r+0x2e>
 800b870:	4621      	mov	r1, r4
 800b872:	4628      	mov	r0, r5
 800b874:	f000 fe84 	bl	800c580 <_fflush_r>
 800b878:	2800      	cmp	r0, #0
 800b87a:	d0d9      	beq.n	800b830 <__swbuf_r+0x2e>
 800b87c:	e7d6      	b.n	800b82c <__swbuf_r+0x2a>
	...

0800b880 <__swsetup_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4b29      	ldr	r3, [pc, #164]	@ (800b928 <__swsetup_r+0xa8>)
 800b884:	4605      	mov	r5, r0
 800b886:	6818      	ldr	r0, [r3, #0]
 800b888:	460c      	mov	r4, r1
 800b88a:	b118      	cbz	r0, 800b894 <__swsetup_r+0x14>
 800b88c:	6a03      	ldr	r3, [r0, #32]
 800b88e:	b90b      	cbnz	r3, 800b894 <__swsetup_r+0x14>
 800b890:	f7ff fe92 	bl	800b5b8 <__sinit>
 800b894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b898:	0719      	lsls	r1, r3, #28
 800b89a:	d422      	bmi.n	800b8e2 <__swsetup_r+0x62>
 800b89c:	06da      	lsls	r2, r3, #27
 800b89e:	d407      	bmi.n	800b8b0 <__swsetup_r+0x30>
 800b8a0:	2209      	movs	r2, #9
 800b8a2:	602a      	str	r2, [r5, #0]
 800b8a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ac:	81a3      	strh	r3, [r4, #12]
 800b8ae:	e033      	b.n	800b918 <__swsetup_r+0x98>
 800b8b0:	0758      	lsls	r0, r3, #29
 800b8b2:	d512      	bpl.n	800b8da <__swsetup_r+0x5a>
 800b8b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8b6:	b141      	cbz	r1, 800b8ca <__swsetup_r+0x4a>
 800b8b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8bc:	4299      	cmp	r1, r3
 800b8be:	d002      	beq.n	800b8c6 <__swsetup_r+0x46>
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f000 f8bd 	bl	800ba40 <_free_r>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8ca:	89a3      	ldrh	r3, [r4, #12]
 800b8cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b8d0:	81a3      	strh	r3, [r4, #12]
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	6063      	str	r3, [r4, #4]
 800b8d6:	6923      	ldr	r3, [r4, #16]
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	f043 0308 	orr.w	r3, r3, #8
 800b8e0:	81a3      	strh	r3, [r4, #12]
 800b8e2:	6923      	ldr	r3, [r4, #16]
 800b8e4:	b94b      	cbnz	r3, 800b8fa <__swsetup_r+0x7a>
 800b8e6:	89a3      	ldrh	r3, [r4, #12]
 800b8e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b8ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8f0:	d003      	beq.n	800b8fa <__swsetup_r+0x7a>
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	f000 fe90 	bl	800c61a <__smakebuf_r>
 800b8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8fe:	f013 0201 	ands.w	r2, r3, #1
 800b902:	d00a      	beq.n	800b91a <__swsetup_r+0x9a>
 800b904:	2200      	movs	r2, #0
 800b906:	60a2      	str	r2, [r4, #8]
 800b908:	6962      	ldr	r2, [r4, #20]
 800b90a:	4252      	negs	r2, r2
 800b90c:	61a2      	str	r2, [r4, #24]
 800b90e:	6922      	ldr	r2, [r4, #16]
 800b910:	b942      	cbnz	r2, 800b924 <__swsetup_r+0xa4>
 800b912:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b916:	d1c5      	bne.n	800b8a4 <__swsetup_r+0x24>
 800b918:	bd38      	pop	{r3, r4, r5, pc}
 800b91a:	0799      	lsls	r1, r3, #30
 800b91c:	bf58      	it	pl
 800b91e:	6962      	ldrpl	r2, [r4, #20]
 800b920:	60a2      	str	r2, [r4, #8]
 800b922:	e7f4      	b.n	800b90e <__swsetup_r+0x8e>
 800b924:	2000      	movs	r0, #0
 800b926:	e7f7      	b.n	800b918 <__swsetup_r+0x98>
 800b928:	20000044 	.word	0x20000044

0800b92c <memset>:
 800b92c:	4603      	mov	r3, r0
 800b92e:	4402      	add	r2, r0
 800b930:	4293      	cmp	r3, r2
 800b932:	d100      	bne.n	800b936 <memset+0xa>
 800b934:	4770      	bx	lr
 800b936:	f803 1b01 	strb.w	r1, [r3], #1
 800b93a:	e7f9      	b.n	800b930 <memset+0x4>

0800b93c <_close_r>:
 800b93c:	b538      	push	{r3, r4, r5, lr}
 800b93e:	2300      	movs	r3, #0
 800b940:	4d05      	ldr	r5, [pc, #20]	@ (800b958 <_close_r+0x1c>)
 800b942:	4604      	mov	r4, r0
 800b944:	4608      	mov	r0, r1
 800b946:	602b      	str	r3, [r5, #0]
 800b948:	f7f4 ffd5 	bl	80008f6 <_close>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	d102      	bne.n	800b956 <_close_r+0x1a>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	b103      	cbz	r3, 800b956 <_close_r+0x1a>
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	bd38      	pop	{r3, r4, r5, pc}
 800b958:	200009b0 	.word	0x200009b0

0800b95c <_lseek_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4604      	mov	r4, r0
 800b960:	4608      	mov	r0, r1
 800b962:	4611      	mov	r1, r2
 800b964:	2200      	movs	r2, #0
 800b966:	4d05      	ldr	r5, [pc, #20]	@ (800b97c <_lseek_r+0x20>)
 800b968:	602a      	str	r2, [r5, #0]
 800b96a:	461a      	mov	r2, r3
 800b96c:	f7f4 ffe7 	bl	800093e <_lseek>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	d102      	bne.n	800b97a <_lseek_r+0x1e>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	b103      	cbz	r3, 800b97a <_lseek_r+0x1e>
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	bd38      	pop	{r3, r4, r5, pc}
 800b97c:	200009b0 	.word	0x200009b0

0800b980 <_read_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4604      	mov	r4, r0
 800b984:	4608      	mov	r0, r1
 800b986:	4611      	mov	r1, r2
 800b988:	2200      	movs	r2, #0
 800b98a:	4d05      	ldr	r5, [pc, #20]	@ (800b9a0 <_read_r+0x20>)
 800b98c:	602a      	str	r2, [r5, #0]
 800b98e:	461a      	mov	r2, r3
 800b990:	f7f4 ff94 	bl	80008bc <_read>
 800b994:	1c43      	adds	r3, r0, #1
 800b996:	d102      	bne.n	800b99e <_read_r+0x1e>
 800b998:	682b      	ldr	r3, [r5, #0]
 800b99a:	b103      	cbz	r3, 800b99e <_read_r+0x1e>
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	bd38      	pop	{r3, r4, r5, pc}
 800b9a0:	200009b0 	.word	0x200009b0

0800b9a4 <_write_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	4608      	mov	r0, r1
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	4d05      	ldr	r5, [pc, #20]	@ (800b9c4 <_write_r+0x20>)
 800b9b0:	602a      	str	r2, [r5, #0]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	f7f4 fc3c 	bl	8000230 <_write>
 800b9b8:	1c43      	adds	r3, r0, #1
 800b9ba:	d102      	bne.n	800b9c2 <_write_r+0x1e>
 800b9bc:	682b      	ldr	r3, [r5, #0]
 800b9be:	b103      	cbz	r3, 800b9c2 <_write_r+0x1e>
 800b9c0:	6023      	str	r3, [r4, #0]
 800b9c2:	bd38      	pop	{r3, r4, r5, pc}
 800b9c4:	200009b0 	.word	0x200009b0

0800b9c8 <__errno>:
 800b9c8:	4b01      	ldr	r3, [pc, #4]	@ (800b9d0 <__errno+0x8>)
 800b9ca:	6818      	ldr	r0, [r3, #0]
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	20000044 	.word	0x20000044

0800b9d4 <__libc_init_array>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	2600      	movs	r6, #0
 800b9d8:	4d0c      	ldr	r5, [pc, #48]	@ (800ba0c <__libc_init_array+0x38>)
 800b9da:	4c0d      	ldr	r4, [pc, #52]	@ (800ba10 <__libc_init_array+0x3c>)
 800b9dc:	1b64      	subs	r4, r4, r5
 800b9de:	10a4      	asrs	r4, r4, #2
 800b9e0:	42a6      	cmp	r6, r4
 800b9e2:	d109      	bne.n	800b9f8 <__libc_init_array+0x24>
 800b9e4:	f000 ff1a 	bl	800c81c <_init>
 800b9e8:	2600      	movs	r6, #0
 800b9ea:	4d0a      	ldr	r5, [pc, #40]	@ (800ba14 <__libc_init_array+0x40>)
 800b9ec:	4c0a      	ldr	r4, [pc, #40]	@ (800ba18 <__libc_init_array+0x44>)
 800b9ee:	1b64      	subs	r4, r4, r5
 800b9f0:	10a4      	asrs	r4, r4, #2
 800b9f2:	42a6      	cmp	r6, r4
 800b9f4:	d105      	bne.n	800ba02 <__libc_init_array+0x2e>
 800b9f6:	bd70      	pop	{r4, r5, r6, pc}
 800b9f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9fc:	4798      	blx	r3
 800b9fe:	3601      	adds	r6, #1
 800ba00:	e7ee      	b.n	800b9e0 <__libc_init_array+0xc>
 800ba02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba06:	4798      	blx	r3
 800ba08:	3601      	adds	r6, #1
 800ba0a:	e7f2      	b.n	800b9f2 <__libc_init_array+0x1e>
 800ba0c:	0800d2f4 	.word	0x0800d2f4
 800ba10:	0800d2f4 	.word	0x0800d2f4
 800ba14:	0800d2f4 	.word	0x0800d2f4
 800ba18:	0800d2f8 	.word	0x0800d2f8

0800ba1c <__retarget_lock_init_recursive>:
 800ba1c:	4770      	bx	lr

0800ba1e <__retarget_lock_acquire_recursive>:
 800ba1e:	4770      	bx	lr

0800ba20 <__retarget_lock_release_recursive>:
 800ba20:	4770      	bx	lr

0800ba22 <memcpy>:
 800ba22:	440a      	add	r2, r1
 800ba24:	4291      	cmp	r1, r2
 800ba26:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba2a:	d100      	bne.n	800ba2e <memcpy+0xc>
 800ba2c:	4770      	bx	lr
 800ba2e:	b510      	push	{r4, lr}
 800ba30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba34:	4291      	cmp	r1, r2
 800ba36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba3a:	d1f9      	bne.n	800ba30 <memcpy+0xe>
 800ba3c:	bd10      	pop	{r4, pc}
	...

0800ba40 <_free_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4605      	mov	r5, r0
 800ba44:	2900      	cmp	r1, #0
 800ba46:	d040      	beq.n	800baca <_free_r+0x8a>
 800ba48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba4c:	1f0c      	subs	r4, r1, #4
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	bfb8      	it	lt
 800ba52:	18e4      	addlt	r4, r4, r3
 800ba54:	f000 f8de 	bl	800bc14 <__malloc_lock>
 800ba58:	4a1c      	ldr	r2, [pc, #112]	@ (800bacc <_free_r+0x8c>)
 800ba5a:	6813      	ldr	r3, [r2, #0]
 800ba5c:	b933      	cbnz	r3, 800ba6c <_free_r+0x2c>
 800ba5e:	6063      	str	r3, [r4, #4]
 800ba60:	6014      	str	r4, [r2, #0]
 800ba62:	4628      	mov	r0, r5
 800ba64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba68:	f000 b8da 	b.w	800bc20 <__malloc_unlock>
 800ba6c:	42a3      	cmp	r3, r4
 800ba6e:	d908      	bls.n	800ba82 <_free_r+0x42>
 800ba70:	6820      	ldr	r0, [r4, #0]
 800ba72:	1821      	adds	r1, r4, r0
 800ba74:	428b      	cmp	r3, r1
 800ba76:	bf01      	itttt	eq
 800ba78:	6819      	ldreq	r1, [r3, #0]
 800ba7a:	685b      	ldreq	r3, [r3, #4]
 800ba7c:	1809      	addeq	r1, r1, r0
 800ba7e:	6021      	streq	r1, [r4, #0]
 800ba80:	e7ed      	b.n	800ba5e <_free_r+0x1e>
 800ba82:	461a      	mov	r2, r3
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	b10b      	cbz	r3, 800ba8c <_free_r+0x4c>
 800ba88:	42a3      	cmp	r3, r4
 800ba8a:	d9fa      	bls.n	800ba82 <_free_r+0x42>
 800ba8c:	6811      	ldr	r1, [r2, #0]
 800ba8e:	1850      	adds	r0, r2, r1
 800ba90:	42a0      	cmp	r0, r4
 800ba92:	d10b      	bne.n	800baac <_free_r+0x6c>
 800ba94:	6820      	ldr	r0, [r4, #0]
 800ba96:	4401      	add	r1, r0
 800ba98:	1850      	adds	r0, r2, r1
 800ba9a:	4283      	cmp	r3, r0
 800ba9c:	6011      	str	r1, [r2, #0]
 800ba9e:	d1e0      	bne.n	800ba62 <_free_r+0x22>
 800baa0:	6818      	ldr	r0, [r3, #0]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	4408      	add	r0, r1
 800baa6:	6010      	str	r0, [r2, #0]
 800baa8:	6053      	str	r3, [r2, #4]
 800baaa:	e7da      	b.n	800ba62 <_free_r+0x22>
 800baac:	d902      	bls.n	800bab4 <_free_r+0x74>
 800baae:	230c      	movs	r3, #12
 800bab0:	602b      	str	r3, [r5, #0]
 800bab2:	e7d6      	b.n	800ba62 <_free_r+0x22>
 800bab4:	6820      	ldr	r0, [r4, #0]
 800bab6:	1821      	adds	r1, r4, r0
 800bab8:	428b      	cmp	r3, r1
 800baba:	bf01      	itttt	eq
 800babc:	6819      	ldreq	r1, [r3, #0]
 800babe:	685b      	ldreq	r3, [r3, #4]
 800bac0:	1809      	addeq	r1, r1, r0
 800bac2:	6021      	streq	r1, [r4, #0]
 800bac4:	6063      	str	r3, [r4, #4]
 800bac6:	6054      	str	r4, [r2, #4]
 800bac8:	e7cb      	b.n	800ba62 <_free_r+0x22>
 800baca:	bd38      	pop	{r3, r4, r5, pc}
 800bacc:	200009bc 	.word	0x200009bc

0800bad0 <sbrk_aligned>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	4e0f      	ldr	r6, [pc, #60]	@ (800bb10 <sbrk_aligned+0x40>)
 800bad4:	460c      	mov	r4, r1
 800bad6:	6831      	ldr	r1, [r6, #0]
 800bad8:	4605      	mov	r5, r0
 800bada:	b911      	cbnz	r1, 800bae2 <sbrk_aligned+0x12>
 800badc:	f000 fe4a 	bl	800c774 <_sbrk_r>
 800bae0:	6030      	str	r0, [r6, #0]
 800bae2:	4621      	mov	r1, r4
 800bae4:	4628      	mov	r0, r5
 800bae6:	f000 fe45 	bl	800c774 <_sbrk_r>
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	d103      	bne.n	800baf6 <sbrk_aligned+0x26>
 800baee:	f04f 34ff 	mov.w	r4, #4294967295
 800baf2:	4620      	mov	r0, r4
 800baf4:	bd70      	pop	{r4, r5, r6, pc}
 800baf6:	1cc4      	adds	r4, r0, #3
 800baf8:	f024 0403 	bic.w	r4, r4, #3
 800bafc:	42a0      	cmp	r0, r4
 800bafe:	d0f8      	beq.n	800baf2 <sbrk_aligned+0x22>
 800bb00:	1a21      	subs	r1, r4, r0
 800bb02:	4628      	mov	r0, r5
 800bb04:	f000 fe36 	bl	800c774 <_sbrk_r>
 800bb08:	3001      	adds	r0, #1
 800bb0a:	d1f2      	bne.n	800baf2 <sbrk_aligned+0x22>
 800bb0c:	e7ef      	b.n	800baee <sbrk_aligned+0x1e>
 800bb0e:	bf00      	nop
 800bb10:	200009b8 	.word	0x200009b8

0800bb14 <_malloc_r>:
 800bb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb18:	1ccd      	adds	r5, r1, #3
 800bb1a:	f025 0503 	bic.w	r5, r5, #3
 800bb1e:	3508      	adds	r5, #8
 800bb20:	2d0c      	cmp	r5, #12
 800bb22:	bf38      	it	cc
 800bb24:	250c      	movcc	r5, #12
 800bb26:	2d00      	cmp	r5, #0
 800bb28:	4606      	mov	r6, r0
 800bb2a:	db01      	blt.n	800bb30 <_malloc_r+0x1c>
 800bb2c:	42a9      	cmp	r1, r5
 800bb2e:	d904      	bls.n	800bb3a <_malloc_r+0x26>
 800bb30:	230c      	movs	r3, #12
 800bb32:	6033      	str	r3, [r6, #0]
 800bb34:	2000      	movs	r0, #0
 800bb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc10 <_malloc_r+0xfc>
 800bb3e:	f000 f869 	bl	800bc14 <__malloc_lock>
 800bb42:	f8d8 3000 	ldr.w	r3, [r8]
 800bb46:	461c      	mov	r4, r3
 800bb48:	bb44      	cbnz	r4, 800bb9c <_malloc_r+0x88>
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f7ff ffbf 	bl	800bad0 <sbrk_aligned>
 800bb52:	1c43      	adds	r3, r0, #1
 800bb54:	4604      	mov	r4, r0
 800bb56:	d158      	bne.n	800bc0a <_malloc_r+0xf6>
 800bb58:	f8d8 4000 	ldr.w	r4, [r8]
 800bb5c:	4627      	mov	r7, r4
 800bb5e:	2f00      	cmp	r7, #0
 800bb60:	d143      	bne.n	800bbea <_malloc_r+0xd6>
 800bb62:	2c00      	cmp	r4, #0
 800bb64:	d04b      	beq.n	800bbfe <_malloc_r+0xea>
 800bb66:	6823      	ldr	r3, [r4, #0]
 800bb68:	4639      	mov	r1, r7
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	eb04 0903 	add.w	r9, r4, r3
 800bb70:	f000 fe00 	bl	800c774 <_sbrk_r>
 800bb74:	4581      	cmp	r9, r0
 800bb76:	d142      	bne.n	800bbfe <_malloc_r+0xea>
 800bb78:	6821      	ldr	r1, [r4, #0]
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	1a6d      	subs	r5, r5, r1
 800bb7e:	4629      	mov	r1, r5
 800bb80:	f7ff ffa6 	bl	800bad0 <sbrk_aligned>
 800bb84:	3001      	adds	r0, #1
 800bb86:	d03a      	beq.n	800bbfe <_malloc_r+0xea>
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	442b      	add	r3, r5
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb92:	685a      	ldr	r2, [r3, #4]
 800bb94:	bb62      	cbnz	r2, 800bbf0 <_malloc_r+0xdc>
 800bb96:	f8c8 7000 	str.w	r7, [r8]
 800bb9a:	e00f      	b.n	800bbbc <_malloc_r+0xa8>
 800bb9c:	6822      	ldr	r2, [r4, #0]
 800bb9e:	1b52      	subs	r2, r2, r5
 800bba0:	d420      	bmi.n	800bbe4 <_malloc_r+0xd0>
 800bba2:	2a0b      	cmp	r2, #11
 800bba4:	d917      	bls.n	800bbd6 <_malloc_r+0xc2>
 800bba6:	1961      	adds	r1, r4, r5
 800bba8:	42a3      	cmp	r3, r4
 800bbaa:	6025      	str	r5, [r4, #0]
 800bbac:	bf18      	it	ne
 800bbae:	6059      	strne	r1, [r3, #4]
 800bbb0:	6863      	ldr	r3, [r4, #4]
 800bbb2:	bf08      	it	eq
 800bbb4:	f8c8 1000 	streq.w	r1, [r8]
 800bbb8:	5162      	str	r2, [r4, r5]
 800bbba:	604b      	str	r3, [r1, #4]
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	f000 f82f 	bl	800bc20 <__malloc_unlock>
 800bbc2:	f104 000b 	add.w	r0, r4, #11
 800bbc6:	1d23      	adds	r3, r4, #4
 800bbc8:	f020 0007 	bic.w	r0, r0, #7
 800bbcc:	1ac2      	subs	r2, r0, r3
 800bbce:	bf1c      	itt	ne
 800bbd0:	1a1b      	subne	r3, r3, r0
 800bbd2:	50a3      	strne	r3, [r4, r2]
 800bbd4:	e7af      	b.n	800bb36 <_malloc_r+0x22>
 800bbd6:	6862      	ldr	r2, [r4, #4]
 800bbd8:	42a3      	cmp	r3, r4
 800bbda:	bf0c      	ite	eq
 800bbdc:	f8c8 2000 	streq.w	r2, [r8]
 800bbe0:	605a      	strne	r2, [r3, #4]
 800bbe2:	e7eb      	b.n	800bbbc <_malloc_r+0xa8>
 800bbe4:	4623      	mov	r3, r4
 800bbe6:	6864      	ldr	r4, [r4, #4]
 800bbe8:	e7ae      	b.n	800bb48 <_malloc_r+0x34>
 800bbea:	463c      	mov	r4, r7
 800bbec:	687f      	ldr	r7, [r7, #4]
 800bbee:	e7b6      	b.n	800bb5e <_malloc_r+0x4a>
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	42a3      	cmp	r3, r4
 800bbf6:	d1fb      	bne.n	800bbf0 <_malloc_r+0xdc>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	6053      	str	r3, [r2, #4]
 800bbfc:	e7de      	b.n	800bbbc <_malloc_r+0xa8>
 800bbfe:	230c      	movs	r3, #12
 800bc00:	4630      	mov	r0, r6
 800bc02:	6033      	str	r3, [r6, #0]
 800bc04:	f000 f80c 	bl	800bc20 <__malloc_unlock>
 800bc08:	e794      	b.n	800bb34 <_malloc_r+0x20>
 800bc0a:	6005      	str	r5, [r0, #0]
 800bc0c:	e7d6      	b.n	800bbbc <_malloc_r+0xa8>
 800bc0e:	bf00      	nop
 800bc10:	200009bc 	.word	0x200009bc

0800bc14 <__malloc_lock>:
 800bc14:	4801      	ldr	r0, [pc, #4]	@ (800bc1c <__malloc_lock+0x8>)
 800bc16:	f7ff bf02 	b.w	800ba1e <__retarget_lock_acquire_recursive>
 800bc1a:	bf00      	nop
 800bc1c:	200009b4 	.word	0x200009b4

0800bc20 <__malloc_unlock>:
 800bc20:	4801      	ldr	r0, [pc, #4]	@ (800bc28 <__malloc_unlock+0x8>)
 800bc22:	f7ff befd 	b.w	800ba20 <__retarget_lock_release_recursive>
 800bc26:	bf00      	nop
 800bc28:	200009b4 	.word	0x200009b4

0800bc2c <__ssputs_r>:
 800bc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc30:	461f      	mov	r7, r3
 800bc32:	688e      	ldr	r6, [r1, #8]
 800bc34:	4682      	mov	sl, r0
 800bc36:	42be      	cmp	r6, r7
 800bc38:	460c      	mov	r4, r1
 800bc3a:	4690      	mov	r8, r2
 800bc3c:	680b      	ldr	r3, [r1, #0]
 800bc3e:	d82d      	bhi.n	800bc9c <__ssputs_r+0x70>
 800bc40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc48:	d026      	beq.n	800bc98 <__ssputs_r+0x6c>
 800bc4a:	6965      	ldr	r5, [r4, #20]
 800bc4c:	6909      	ldr	r1, [r1, #16]
 800bc4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc52:	eba3 0901 	sub.w	r9, r3, r1
 800bc56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc5a:	1c7b      	adds	r3, r7, #1
 800bc5c:	444b      	add	r3, r9
 800bc5e:	106d      	asrs	r5, r5, #1
 800bc60:	429d      	cmp	r5, r3
 800bc62:	bf38      	it	cc
 800bc64:	461d      	movcc	r5, r3
 800bc66:	0553      	lsls	r3, r2, #21
 800bc68:	d527      	bpl.n	800bcba <__ssputs_r+0x8e>
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	f7ff ff52 	bl	800bb14 <_malloc_r>
 800bc70:	4606      	mov	r6, r0
 800bc72:	b360      	cbz	r0, 800bcce <__ssputs_r+0xa2>
 800bc74:	464a      	mov	r2, r9
 800bc76:	6921      	ldr	r1, [r4, #16]
 800bc78:	f7ff fed3 	bl	800ba22 <memcpy>
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bc82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc86:	81a3      	strh	r3, [r4, #12]
 800bc88:	6126      	str	r6, [r4, #16]
 800bc8a:	444e      	add	r6, r9
 800bc8c:	6026      	str	r6, [r4, #0]
 800bc8e:	463e      	mov	r6, r7
 800bc90:	6165      	str	r5, [r4, #20]
 800bc92:	eba5 0509 	sub.w	r5, r5, r9
 800bc96:	60a5      	str	r5, [r4, #8]
 800bc98:	42be      	cmp	r6, r7
 800bc9a:	d900      	bls.n	800bc9e <__ssputs_r+0x72>
 800bc9c:	463e      	mov	r6, r7
 800bc9e:	4632      	mov	r2, r6
 800bca0:	4641      	mov	r1, r8
 800bca2:	6820      	ldr	r0, [r4, #0]
 800bca4:	f000 fd29 	bl	800c6fa <memmove>
 800bca8:	2000      	movs	r0, #0
 800bcaa:	68a3      	ldr	r3, [r4, #8]
 800bcac:	1b9b      	subs	r3, r3, r6
 800bcae:	60a3      	str	r3, [r4, #8]
 800bcb0:	6823      	ldr	r3, [r4, #0]
 800bcb2:	4433      	add	r3, r6
 800bcb4:	6023      	str	r3, [r4, #0]
 800bcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcba:	462a      	mov	r2, r5
 800bcbc:	f000 fd78 	bl	800c7b0 <_realloc_r>
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d1e0      	bne.n	800bc88 <__ssputs_r+0x5c>
 800bcc6:	4650      	mov	r0, sl
 800bcc8:	6921      	ldr	r1, [r4, #16]
 800bcca:	f7ff feb9 	bl	800ba40 <_free_r>
 800bcce:	230c      	movs	r3, #12
 800bcd0:	f8ca 3000 	str.w	r3, [sl]
 800bcd4:	89a3      	ldrh	r3, [r4, #12]
 800bcd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcde:	81a3      	strh	r3, [r4, #12]
 800bce0:	e7e9      	b.n	800bcb6 <__ssputs_r+0x8a>
	...

0800bce4 <_svfiprintf_r>:
 800bce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce8:	4698      	mov	r8, r3
 800bcea:	898b      	ldrh	r3, [r1, #12]
 800bcec:	4607      	mov	r7, r0
 800bcee:	061b      	lsls	r3, r3, #24
 800bcf0:	460d      	mov	r5, r1
 800bcf2:	4614      	mov	r4, r2
 800bcf4:	b09d      	sub	sp, #116	@ 0x74
 800bcf6:	d510      	bpl.n	800bd1a <_svfiprintf_r+0x36>
 800bcf8:	690b      	ldr	r3, [r1, #16]
 800bcfa:	b973      	cbnz	r3, 800bd1a <_svfiprintf_r+0x36>
 800bcfc:	2140      	movs	r1, #64	@ 0x40
 800bcfe:	f7ff ff09 	bl	800bb14 <_malloc_r>
 800bd02:	6028      	str	r0, [r5, #0]
 800bd04:	6128      	str	r0, [r5, #16]
 800bd06:	b930      	cbnz	r0, 800bd16 <_svfiprintf_r+0x32>
 800bd08:	230c      	movs	r3, #12
 800bd0a:	603b      	str	r3, [r7, #0]
 800bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd10:	b01d      	add	sp, #116	@ 0x74
 800bd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd16:	2340      	movs	r3, #64	@ 0x40
 800bd18:	616b      	str	r3, [r5, #20]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd1e:	2320      	movs	r3, #32
 800bd20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd24:	2330      	movs	r3, #48	@ 0x30
 800bd26:	f04f 0901 	mov.w	r9, #1
 800bd2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800bec8 <_svfiprintf_r+0x1e4>
 800bd32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd36:	4623      	mov	r3, r4
 800bd38:	469a      	mov	sl, r3
 800bd3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd3e:	b10a      	cbz	r2, 800bd44 <_svfiprintf_r+0x60>
 800bd40:	2a25      	cmp	r2, #37	@ 0x25
 800bd42:	d1f9      	bne.n	800bd38 <_svfiprintf_r+0x54>
 800bd44:	ebba 0b04 	subs.w	fp, sl, r4
 800bd48:	d00b      	beq.n	800bd62 <_svfiprintf_r+0x7e>
 800bd4a:	465b      	mov	r3, fp
 800bd4c:	4622      	mov	r2, r4
 800bd4e:	4629      	mov	r1, r5
 800bd50:	4638      	mov	r0, r7
 800bd52:	f7ff ff6b 	bl	800bc2c <__ssputs_r>
 800bd56:	3001      	adds	r0, #1
 800bd58:	f000 80a7 	beq.w	800beaa <_svfiprintf_r+0x1c6>
 800bd5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd5e:	445a      	add	r2, fp
 800bd60:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd62:	f89a 3000 	ldrb.w	r3, [sl]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f000 809f 	beq.w	800beaa <_svfiprintf_r+0x1c6>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd76:	f10a 0a01 	add.w	sl, sl, #1
 800bd7a:	9304      	str	r3, [sp, #16]
 800bd7c:	9307      	str	r3, [sp, #28]
 800bd7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd82:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd84:	4654      	mov	r4, sl
 800bd86:	2205      	movs	r2, #5
 800bd88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd8c:	484e      	ldr	r0, [pc, #312]	@ (800bec8 <_svfiprintf_r+0x1e4>)
 800bd8e:	f000 fd01 	bl	800c794 <memchr>
 800bd92:	9a04      	ldr	r2, [sp, #16]
 800bd94:	b9d8      	cbnz	r0, 800bdce <_svfiprintf_r+0xea>
 800bd96:	06d0      	lsls	r0, r2, #27
 800bd98:	bf44      	itt	mi
 800bd9a:	2320      	movmi	r3, #32
 800bd9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bda0:	0711      	lsls	r1, r2, #28
 800bda2:	bf44      	itt	mi
 800bda4:	232b      	movmi	r3, #43	@ 0x2b
 800bda6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdaa:	f89a 3000 	ldrb.w	r3, [sl]
 800bdae:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdb0:	d015      	beq.n	800bdde <_svfiprintf_r+0xfa>
 800bdb2:	4654      	mov	r4, sl
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	f04f 0c0a 	mov.w	ip, #10
 800bdba:	9a07      	ldr	r2, [sp, #28]
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdc2:	3b30      	subs	r3, #48	@ 0x30
 800bdc4:	2b09      	cmp	r3, #9
 800bdc6:	d94b      	bls.n	800be60 <_svfiprintf_r+0x17c>
 800bdc8:	b1b0      	cbz	r0, 800bdf8 <_svfiprintf_r+0x114>
 800bdca:	9207      	str	r2, [sp, #28]
 800bdcc:	e014      	b.n	800bdf8 <_svfiprintf_r+0x114>
 800bdce:	eba0 0308 	sub.w	r3, r0, r8
 800bdd2:	fa09 f303 	lsl.w	r3, r9, r3
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	46a2      	mov	sl, r4
 800bdda:	9304      	str	r3, [sp, #16]
 800bddc:	e7d2      	b.n	800bd84 <_svfiprintf_r+0xa0>
 800bdde:	9b03      	ldr	r3, [sp, #12]
 800bde0:	1d19      	adds	r1, r3, #4
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	9103      	str	r1, [sp, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	bfbb      	ittet	lt
 800bdea:	425b      	neglt	r3, r3
 800bdec:	f042 0202 	orrlt.w	r2, r2, #2
 800bdf0:	9307      	strge	r3, [sp, #28]
 800bdf2:	9307      	strlt	r3, [sp, #28]
 800bdf4:	bfb8      	it	lt
 800bdf6:	9204      	strlt	r2, [sp, #16]
 800bdf8:	7823      	ldrb	r3, [r4, #0]
 800bdfa:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdfc:	d10a      	bne.n	800be14 <_svfiprintf_r+0x130>
 800bdfe:	7863      	ldrb	r3, [r4, #1]
 800be00:	2b2a      	cmp	r3, #42	@ 0x2a
 800be02:	d132      	bne.n	800be6a <_svfiprintf_r+0x186>
 800be04:	9b03      	ldr	r3, [sp, #12]
 800be06:	3402      	adds	r4, #2
 800be08:	1d1a      	adds	r2, r3, #4
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	9203      	str	r2, [sp, #12]
 800be0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be12:	9305      	str	r3, [sp, #20]
 800be14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800becc <_svfiprintf_r+0x1e8>
 800be18:	2203      	movs	r2, #3
 800be1a:	4650      	mov	r0, sl
 800be1c:	7821      	ldrb	r1, [r4, #0]
 800be1e:	f000 fcb9 	bl	800c794 <memchr>
 800be22:	b138      	cbz	r0, 800be34 <_svfiprintf_r+0x150>
 800be24:	2240      	movs	r2, #64	@ 0x40
 800be26:	9b04      	ldr	r3, [sp, #16]
 800be28:	eba0 000a 	sub.w	r0, r0, sl
 800be2c:	4082      	lsls	r2, r0
 800be2e:	4313      	orrs	r3, r2
 800be30:	3401      	adds	r4, #1
 800be32:	9304      	str	r3, [sp, #16]
 800be34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be38:	2206      	movs	r2, #6
 800be3a:	4825      	ldr	r0, [pc, #148]	@ (800bed0 <_svfiprintf_r+0x1ec>)
 800be3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be40:	f000 fca8 	bl	800c794 <memchr>
 800be44:	2800      	cmp	r0, #0
 800be46:	d036      	beq.n	800beb6 <_svfiprintf_r+0x1d2>
 800be48:	4b22      	ldr	r3, [pc, #136]	@ (800bed4 <_svfiprintf_r+0x1f0>)
 800be4a:	bb1b      	cbnz	r3, 800be94 <_svfiprintf_r+0x1b0>
 800be4c:	9b03      	ldr	r3, [sp, #12]
 800be4e:	3307      	adds	r3, #7
 800be50:	f023 0307 	bic.w	r3, r3, #7
 800be54:	3308      	adds	r3, #8
 800be56:	9303      	str	r3, [sp, #12]
 800be58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be5a:	4433      	add	r3, r6
 800be5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be5e:	e76a      	b.n	800bd36 <_svfiprintf_r+0x52>
 800be60:	460c      	mov	r4, r1
 800be62:	2001      	movs	r0, #1
 800be64:	fb0c 3202 	mla	r2, ip, r2, r3
 800be68:	e7a8      	b.n	800bdbc <_svfiprintf_r+0xd8>
 800be6a:	2300      	movs	r3, #0
 800be6c:	f04f 0c0a 	mov.w	ip, #10
 800be70:	4619      	mov	r1, r3
 800be72:	3401      	adds	r4, #1
 800be74:	9305      	str	r3, [sp, #20]
 800be76:	4620      	mov	r0, r4
 800be78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be7c:	3a30      	subs	r2, #48	@ 0x30
 800be7e:	2a09      	cmp	r2, #9
 800be80:	d903      	bls.n	800be8a <_svfiprintf_r+0x1a6>
 800be82:	2b00      	cmp	r3, #0
 800be84:	d0c6      	beq.n	800be14 <_svfiprintf_r+0x130>
 800be86:	9105      	str	r1, [sp, #20]
 800be88:	e7c4      	b.n	800be14 <_svfiprintf_r+0x130>
 800be8a:	4604      	mov	r4, r0
 800be8c:	2301      	movs	r3, #1
 800be8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800be92:	e7f0      	b.n	800be76 <_svfiprintf_r+0x192>
 800be94:	ab03      	add	r3, sp, #12
 800be96:	9300      	str	r3, [sp, #0]
 800be98:	462a      	mov	r2, r5
 800be9a:	4638      	mov	r0, r7
 800be9c:	4b0e      	ldr	r3, [pc, #56]	@ (800bed8 <_svfiprintf_r+0x1f4>)
 800be9e:	a904      	add	r1, sp, #16
 800bea0:	f3af 8000 	nop.w
 800bea4:	1c42      	adds	r2, r0, #1
 800bea6:	4606      	mov	r6, r0
 800bea8:	d1d6      	bne.n	800be58 <_svfiprintf_r+0x174>
 800beaa:	89ab      	ldrh	r3, [r5, #12]
 800beac:	065b      	lsls	r3, r3, #25
 800beae:	f53f af2d 	bmi.w	800bd0c <_svfiprintf_r+0x28>
 800beb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800beb4:	e72c      	b.n	800bd10 <_svfiprintf_r+0x2c>
 800beb6:	ab03      	add	r3, sp, #12
 800beb8:	9300      	str	r3, [sp, #0]
 800beba:	462a      	mov	r2, r5
 800bebc:	4638      	mov	r0, r7
 800bebe:	4b06      	ldr	r3, [pc, #24]	@ (800bed8 <_svfiprintf_r+0x1f4>)
 800bec0:	a904      	add	r1, sp, #16
 800bec2:	f000 f9bd 	bl	800c240 <_printf_i>
 800bec6:	e7ed      	b.n	800bea4 <_svfiprintf_r+0x1c0>
 800bec8:	0800d2b6 	.word	0x0800d2b6
 800becc:	0800d2bc 	.word	0x0800d2bc
 800bed0:	0800d2c0 	.word	0x0800d2c0
 800bed4:	00000000 	.word	0x00000000
 800bed8:	0800bc2d 	.word	0x0800bc2d

0800bedc <__sfputc_r>:
 800bedc:	6893      	ldr	r3, [r2, #8]
 800bede:	b410      	push	{r4}
 800bee0:	3b01      	subs	r3, #1
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	6093      	str	r3, [r2, #8]
 800bee6:	da07      	bge.n	800bef8 <__sfputc_r+0x1c>
 800bee8:	6994      	ldr	r4, [r2, #24]
 800beea:	42a3      	cmp	r3, r4
 800beec:	db01      	blt.n	800bef2 <__sfputc_r+0x16>
 800beee:	290a      	cmp	r1, #10
 800bef0:	d102      	bne.n	800bef8 <__sfputc_r+0x1c>
 800bef2:	bc10      	pop	{r4}
 800bef4:	f7ff bc85 	b.w	800b802 <__swbuf_r>
 800bef8:	6813      	ldr	r3, [r2, #0]
 800befa:	1c58      	adds	r0, r3, #1
 800befc:	6010      	str	r0, [r2, #0]
 800befe:	7019      	strb	r1, [r3, #0]
 800bf00:	4608      	mov	r0, r1
 800bf02:	bc10      	pop	{r4}
 800bf04:	4770      	bx	lr

0800bf06 <__sfputs_r>:
 800bf06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf08:	4606      	mov	r6, r0
 800bf0a:	460f      	mov	r7, r1
 800bf0c:	4614      	mov	r4, r2
 800bf0e:	18d5      	adds	r5, r2, r3
 800bf10:	42ac      	cmp	r4, r5
 800bf12:	d101      	bne.n	800bf18 <__sfputs_r+0x12>
 800bf14:	2000      	movs	r0, #0
 800bf16:	e007      	b.n	800bf28 <__sfputs_r+0x22>
 800bf18:	463a      	mov	r2, r7
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf20:	f7ff ffdc 	bl	800bedc <__sfputc_r>
 800bf24:	1c43      	adds	r3, r0, #1
 800bf26:	d1f3      	bne.n	800bf10 <__sfputs_r+0xa>
 800bf28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf2c <_vfiprintf_r>:
 800bf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf30:	460d      	mov	r5, r1
 800bf32:	4614      	mov	r4, r2
 800bf34:	4698      	mov	r8, r3
 800bf36:	4606      	mov	r6, r0
 800bf38:	b09d      	sub	sp, #116	@ 0x74
 800bf3a:	b118      	cbz	r0, 800bf44 <_vfiprintf_r+0x18>
 800bf3c:	6a03      	ldr	r3, [r0, #32]
 800bf3e:	b90b      	cbnz	r3, 800bf44 <_vfiprintf_r+0x18>
 800bf40:	f7ff fb3a 	bl	800b5b8 <__sinit>
 800bf44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf46:	07d9      	lsls	r1, r3, #31
 800bf48:	d405      	bmi.n	800bf56 <_vfiprintf_r+0x2a>
 800bf4a:	89ab      	ldrh	r3, [r5, #12]
 800bf4c:	059a      	lsls	r2, r3, #22
 800bf4e:	d402      	bmi.n	800bf56 <_vfiprintf_r+0x2a>
 800bf50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf52:	f7ff fd64 	bl	800ba1e <__retarget_lock_acquire_recursive>
 800bf56:	89ab      	ldrh	r3, [r5, #12]
 800bf58:	071b      	lsls	r3, r3, #28
 800bf5a:	d501      	bpl.n	800bf60 <_vfiprintf_r+0x34>
 800bf5c:	692b      	ldr	r3, [r5, #16]
 800bf5e:	b99b      	cbnz	r3, 800bf88 <_vfiprintf_r+0x5c>
 800bf60:	4629      	mov	r1, r5
 800bf62:	4630      	mov	r0, r6
 800bf64:	f7ff fc8c 	bl	800b880 <__swsetup_r>
 800bf68:	b170      	cbz	r0, 800bf88 <_vfiprintf_r+0x5c>
 800bf6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf6c:	07dc      	lsls	r4, r3, #31
 800bf6e:	d504      	bpl.n	800bf7a <_vfiprintf_r+0x4e>
 800bf70:	f04f 30ff 	mov.w	r0, #4294967295
 800bf74:	b01d      	add	sp, #116	@ 0x74
 800bf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf7a:	89ab      	ldrh	r3, [r5, #12]
 800bf7c:	0598      	lsls	r0, r3, #22
 800bf7e:	d4f7      	bmi.n	800bf70 <_vfiprintf_r+0x44>
 800bf80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf82:	f7ff fd4d 	bl	800ba20 <__retarget_lock_release_recursive>
 800bf86:	e7f3      	b.n	800bf70 <_vfiprintf_r+0x44>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf8c:	2320      	movs	r3, #32
 800bf8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf92:	2330      	movs	r3, #48	@ 0x30
 800bf94:	f04f 0901 	mov.w	r9, #1
 800bf98:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf9c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c148 <_vfiprintf_r+0x21c>
 800bfa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfa4:	4623      	mov	r3, r4
 800bfa6:	469a      	mov	sl, r3
 800bfa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfac:	b10a      	cbz	r2, 800bfb2 <_vfiprintf_r+0x86>
 800bfae:	2a25      	cmp	r2, #37	@ 0x25
 800bfb0:	d1f9      	bne.n	800bfa6 <_vfiprintf_r+0x7a>
 800bfb2:	ebba 0b04 	subs.w	fp, sl, r4
 800bfb6:	d00b      	beq.n	800bfd0 <_vfiprintf_r+0xa4>
 800bfb8:	465b      	mov	r3, fp
 800bfba:	4622      	mov	r2, r4
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f7ff ffa1 	bl	800bf06 <__sfputs_r>
 800bfc4:	3001      	adds	r0, #1
 800bfc6:	f000 80a7 	beq.w	800c118 <_vfiprintf_r+0x1ec>
 800bfca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfcc:	445a      	add	r2, fp
 800bfce:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfd0:	f89a 3000 	ldrb.w	r3, [sl]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f000 809f 	beq.w	800c118 <_vfiprintf_r+0x1ec>
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f04f 32ff 	mov.w	r2, #4294967295
 800bfe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfe4:	f10a 0a01 	add.w	sl, sl, #1
 800bfe8:	9304      	str	r3, [sp, #16]
 800bfea:	9307      	str	r3, [sp, #28]
 800bfec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bff0:	931a      	str	r3, [sp, #104]	@ 0x68
 800bff2:	4654      	mov	r4, sl
 800bff4:	2205      	movs	r2, #5
 800bff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bffa:	4853      	ldr	r0, [pc, #332]	@ (800c148 <_vfiprintf_r+0x21c>)
 800bffc:	f000 fbca 	bl	800c794 <memchr>
 800c000:	9a04      	ldr	r2, [sp, #16]
 800c002:	b9d8      	cbnz	r0, 800c03c <_vfiprintf_r+0x110>
 800c004:	06d1      	lsls	r1, r2, #27
 800c006:	bf44      	itt	mi
 800c008:	2320      	movmi	r3, #32
 800c00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c00e:	0713      	lsls	r3, r2, #28
 800c010:	bf44      	itt	mi
 800c012:	232b      	movmi	r3, #43	@ 0x2b
 800c014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c018:	f89a 3000 	ldrb.w	r3, [sl]
 800c01c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c01e:	d015      	beq.n	800c04c <_vfiprintf_r+0x120>
 800c020:	4654      	mov	r4, sl
 800c022:	2000      	movs	r0, #0
 800c024:	f04f 0c0a 	mov.w	ip, #10
 800c028:	9a07      	ldr	r2, [sp, #28]
 800c02a:	4621      	mov	r1, r4
 800c02c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c030:	3b30      	subs	r3, #48	@ 0x30
 800c032:	2b09      	cmp	r3, #9
 800c034:	d94b      	bls.n	800c0ce <_vfiprintf_r+0x1a2>
 800c036:	b1b0      	cbz	r0, 800c066 <_vfiprintf_r+0x13a>
 800c038:	9207      	str	r2, [sp, #28]
 800c03a:	e014      	b.n	800c066 <_vfiprintf_r+0x13a>
 800c03c:	eba0 0308 	sub.w	r3, r0, r8
 800c040:	fa09 f303 	lsl.w	r3, r9, r3
 800c044:	4313      	orrs	r3, r2
 800c046:	46a2      	mov	sl, r4
 800c048:	9304      	str	r3, [sp, #16]
 800c04a:	e7d2      	b.n	800bff2 <_vfiprintf_r+0xc6>
 800c04c:	9b03      	ldr	r3, [sp, #12]
 800c04e:	1d19      	adds	r1, r3, #4
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	9103      	str	r1, [sp, #12]
 800c054:	2b00      	cmp	r3, #0
 800c056:	bfbb      	ittet	lt
 800c058:	425b      	neglt	r3, r3
 800c05a:	f042 0202 	orrlt.w	r2, r2, #2
 800c05e:	9307      	strge	r3, [sp, #28]
 800c060:	9307      	strlt	r3, [sp, #28]
 800c062:	bfb8      	it	lt
 800c064:	9204      	strlt	r2, [sp, #16]
 800c066:	7823      	ldrb	r3, [r4, #0]
 800c068:	2b2e      	cmp	r3, #46	@ 0x2e
 800c06a:	d10a      	bne.n	800c082 <_vfiprintf_r+0x156>
 800c06c:	7863      	ldrb	r3, [r4, #1]
 800c06e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c070:	d132      	bne.n	800c0d8 <_vfiprintf_r+0x1ac>
 800c072:	9b03      	ldr	r3, [sp, #12]
 800c074:	3402      	adds	r4, #2
 800c076:	1d1a      	adds	r2, r3, #4
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	9203      	str	r2, [sp, #12]
 800c07c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c080:	9305      	str	r3, [sp, #20]
 800c082:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c14c <_vfiprintf_r+0x220>
 800c086:	2203      	movs	r2, #3
 800c088:	4650      	mov	r0, sl
 800c08a:	7821      	ldrb	r1, [r4, #0]
 800c08c:	f000 fb82 	bl	800c794 <memchr>
 800c090:	b138      	cbz	r0, 800c0a2 <_vfiprintf_r+0x176>
 800c092:	2240      	movs	r2, #64	@ 0x40
 800c094:	9b04      	ldr	r3, [sp, #16]
 800c096:	eba0 000a 	sub.w	r0, r0, sl
 800c09a:	4082      	lsls	r2, r0
 800c09c:	4313      	orrs	r3, r2
 800c09e:	3401      	adds	r4, #1
 800c0a0:	9304      	str	r3, [sp, #16]
 800c0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0a6:	2206      	movs	r2, #6
 800c0a8:	4829      	ldr	r0, [pc, #164]	@ (800c150 <_vfiprintf_r+0x224>)
 800c0aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0ae:	f000 fb71 	bl	800c794 <memchr>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d03f      	beq.n	800c136 <_vfiprintf_r+0x20a>
 800c0b6:	4b27      	ldr	r3, [pc, #156]	@ (800c154 <_vfiprintf_r+0x228>)
 800c0b8:	bb1b      	cbnz	r3, 800c102 <_vfiprintf_r+0x1d6>
 800c0ba:	9b03      	ldr	r3, [sp, #12]
 800c0bc:	3307      	adds	r3, #7
 800c0be:	f023 0307 	bic.w	r3, r3, #7
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	9303      	str	r3, [sp, #12]
 800c0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0c8:	443b      	add	r3, r7
 800c0ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0cc:	e76a      	b.n	800bfa4 <_vfiprintf_r+0x78>
 800c0ce:	460c      	mov	r4, r1
 800c0d0:	2001      	movs	r0, #1
 800c0d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0d6:	e7a8      	b.n	800c02a <_vfiprintf_r+0xfe>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	f04f 0c0a 	mov.w	ip, #10
 800c0de:	4619      	mov	r1, r3
 800c0e0:	3401      	adds	r4, #1
 800c0e2:	9305      	str	r3, [sp, #20]
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0ea:	3a30      	subs	r2, #48	@ 0x30
 800c0ec:	2a09      	cmp	r2, #9
 800c0ee:	d903      	bls.n	800c0f8 <_vfiprintf_r+0x1cc>
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d0c6      	beq.n	800c082 <_vfiprintf_r+0x156>
 800c0f4:	9105      	str	r1, [sp, #20]
 800c0f6:	e7c4      	b.n	800c082 <_vfiprintf_r+0x156>
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c100:	e7f0      	b.n	800c0e4 <_vfiprintf_r+0x1b8>
 800c102:	ab03      	add	r3, sp, #12
 800c104:	9300      	str	r3, [sp, #0]
 800c106:	462a      	mov	r2, r5
 800c108:	4630      	mov	r0, r6
 800c10a:	4b13      	ldr	r3, [pc, #76]	@ (800c158 <_vfiprintf_r+0x22c>)
 800c10c:	a904      	add	r1, sp, #16
 800c10e:	f3af 8000 	nop.w
 800c112:	4607      	mov	r7, r0
 800c114:	1c78      	adds	r0, r7, #1
 800c116:	d1d6      	bne.n	800c0c6 <_vfiprintf_r+0x19a>
 800c118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c11a:	07d9      	lsls	r1, r3, #31
 800c11c:	d405      	bmi.n	800c12a <_vfiprintf_r+0x1fe>
 800c11e:	89ab      	ldrh	r3, [r5, #12]
 800c120:	059a      	lsls	r2, r3, #22
 800c122:	d402      	bmi.n	800c12a <_vfiprintf_r+0x1fe>
 800c124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c126:	f7ff fc7b 	bl	800ba20 <__retarget_lock_release_recursive>
 800c12a:	89ab      	ldrh	r3, [r5, #12]
 800c12c:	065b      	lsls	r3, r3, #25
 800c12e:	f53f af1f 	bmi.w	800bf70 <_vfiprintf_r+0x44>
 800c132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c134:	e71e      	b.n	800bf74 <_vfiprintf_r+0x48>
 800c136:	ab03      	add	r3, sp, #12
 800c138:	9300      	str	r3, [sp, #0]
 800c13a:	462a      	mov	r2, r5
 800c13c:	4630      	mov	r0, r6
 800c13e:	4b06      	ldr	r3, [pc, #24]	@ (800c158 <_vfiprintf_r+0x22c>)
 800c140:	a904      	add	r1, sp, #16
 800c142:	f000 f87d 	bl	800c240 <_printf_i>
 800c146:	e7e4      	b.n	800c112 <_vfiprintf_r+0x1e6>
 800c148:	0800d2b6 	.word	0x0800d2b6
 800c14c:	0800d2bc 	.word	0x0800d2bc
 800c150:	0800d2c0 	.word	0x0800d2c0
 800c154:	00000000 	.word	0x00000000
 800c158:	0800bf07 	.word	0x0800bf07

0800c15c <_printf_common>:
 800c15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c160:	4616      	mov	r6, r2
 800c162:	4698      	mov	r8, r3
 800c164:	688a      	ldr	r2, [r1, #8]
 800c166:	690b      	ldr	r3, [r1, #16]
 800c168:	4607      	mov	r7, r0
 800c16a:	4293      	cmp	r3, r2
 800c16c:	bfb8      	it	lt
 800c16e:	4613      	movlt	r3, r2
 800c170:	6033      	str	r3, [r6, #0]
 800c172:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c176:	460c      	mov	r4, r1
 800c178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c17c:	b10a      	cbz	r2, 800c182 <_printf_common+0x26>
 800c17e:	3301      	adds	r3, #1
 800c180:	6033      	str	r3, [r6, #0]
 800c182:	6823      	ldr	r3, [r4, #0]
 800c184:	0699      	lsls	r1, r3, #26
 800c186:	bf42      	ittt	mi
 800c188:	6833      	ldrmi	r3, [r6, #0]
 800c18a:	3302      	addmi	r3, #2
 800c18c:	6033      	strmi	r3, [r6, #0]
 800c18e:	6825      	ldr	r5, [r4, #0]
 800c190:	f015 0506 	ands.w	r5, r5, #6
 800c194:	d106      	bne.n	800c1a4 <_printf_common+0x48>
 800c196:	f104 0a19 	add.w	sl, r4, #25
 800c19a:	68e3      	ldr	r3, [r4, #12]
 800c19c:	6832      	ldr	r2, [r6, #0]
 800c19e:	1a9b      	subs	r3, r3, r2
 800c1a0:	42ab      	cmp	r3, r5
 800c1a2:	dc2b      	bgt.n	800c1fc <_printf_common+0xa0>
 800c1a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c1a8:	6822      	ldr	r2, [r4, #0]
 800c1aa:	3b00      	subs	r3, #0
 800c1ac:	bf18      	it	ne
 800c1ae:	2301      	movne	r3, #1
 800c1b0:	0692      	lsls	r2, r2, #26
 800c1b2:	d430      	bmi.n	800c216 <_printf_common+0xba>
 800c1b4:	4641      	mov	r1, r8
 800c1b6:	4638      	mov	r0, r7
 800c1b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c1bc:	47c8      	blx	r9
 800c1be:	3001      	adds	r0, #1
 800c1c0:	d023      	beq.n	800c20a <_printf_common+0xae>
 800c1c2:	6823      	ldr	r3, [r4, #0]
 800c1c4:	6922      	ldr	r2, [r4, #16]
 800c1c6:	f003 0306 	and.w	r3, r3, #6
 800c1ca:	2b04      	cmp	r3, #4
 800c1cc:	bf14      	ite	ne
 800c1ce:	2500      	movne	r5, #0
 800c1d0:	6833      	ldreq	r3, [r6, #0]
 800c1d2:	f04f 0600 	mov.w	r6, #0
 800c1d6:	bf08      	it	eq
 800c1d8:	68e5      	ldreq	r5, [r4, #12]
 800c1da:	f104 041a 	add.w	r4, r4, #26
 800c1de:	bf08      	it	eq
 800c1e0:	1aed      	subeq	r5, r5, r3
 800c1e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c1e6:	bf08      	it	eq
 800c1e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	bfc4      	itt	gt
 800c1f0:	1a9b      	subgt	r3, r3, r2
 800c1f2:	18ed      	addgt	r5, r5, r3
 800c1f4:	42b5      	cmp	r5, r6
 800c1f6:	d11a      	bne.n	800c22e <_printf_common+0xd2>
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	e008      	b.n	800c20e <_printf_common+0xb2>
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	4652      	mov	r2, sl
 800c200:	4641      	mov	r1, r8
 800c202:	4638      	mov	r0, r7
 800c204:	47c8      	blx	r9
 800c206:	3001      	adds	r0, #1
 800c208:	d103      	bne.n	800c212 <_printf_common+0xb6>
 800c20a:	f04f 30ff 	mov.w	r0, #4294967295
 800c20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c212:	3501      	adds	r5, #1
 800c214:	e7c1      	b.n	800c19a <_printf_common+0x3e>
 800c216:	2030      	movs	r0, #48	@ 0x30
 800c218:	18e1      	adds	r1, r4, r3
 800c21a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c224:	4422      	add	r2, r4
 800c226:	3302      	adds	r3, #2
 800c228:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c22c:	e7c2      	b.n	800c1b4 <_printf_common+0x58>
 800c22e:	2301      	movs	r3, #1
 800c230:	4622      	mov	r2, r4
 800c232:	4641      	mov	r1, r8
 800c234:	4638      	mov	r0, r7
 800c236:	47c8      	blx	r9
 800c238:	3001      	adds	r0, #1
 800c23a:	d0e6      	beq.n	800c20a <_printf_common+0xae>
 800c23c:	3601      	adds	r6, #1
 800c23e:	e7d9      	b.n	800c1f4 <_printf_common+0x98>

0800c240 <_printf_i>:
 800c240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c244:	7e0f      	ldrb	r7, [r1, #24]
 800c246:	4691      	mov	r9, r2
 800c248:	2f78      	cmp	r7, #120	@ 0x78
 800c24a:	4680      	mov	r8, r0
 800c24c:	460c      	mov	r4, r1
 800c24e:	469a      	mov	sl, r3
 800c250:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c252:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c256:	d807      	bhi.n	800c268 <_printf_i+0x28>
 800c258:	2f62      	cmp	r7, #98	@ 0x62
 800c25a:	d80a      	bhi.n	800c272 <_printf_i+0x32>
 800c25c:	2f00      	cmp	r7, #0
 800c25e:	f000 80d3 	beq.w	800c408 <_printf_i+0x1c8>
 800c262:	2f58      	cmp	r7, #88	@ 0x58
 800c264:	f000 80ba 	beq.w	800c3dc <_printf_i+0x19c>
 800c268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c26c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c270:	e03a      	b.n	800c2e8 <_printf_i+0xa8>
 800c272:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c276:	2b15      	cmp	r3, #21
 800c278:	d8f6      	bhi.n	800c268 <_printf_i+0x28>
 800c27a:	a101      	add	r1, pc, #4	@ (adr r1, 800c280 <_printf_i+0x40>)
 800c27c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c280:	0800c2d9 	.word	0x0800c2d9
 800c284:	0800c2ed 	.word	0x0800c2ed
 800c288:	0800c269 	.word	0x0800c269
 800c28c:	0800c269 	.word	0x0800c269
 800c290:	0800c269 	.word	0x0800c269
 800c294:	0800c269 	.word	0x0800c269
 800c298:	0800c2ed 	.word	0x0800c2ed
 800c29c:	0800c269 	.word	0x0800c269
 800c2a0:	0800c269 	.word	0x0800c269
 800c2a4:	0800c269 	.word	0x0800c269
 800c2a8:	0800c269 	.word	0x0800c269
 800c2ac:	0800c3ef 	.word	0x0800c3ef
 800c2b0:	0800c317 	.word	0x0800c317
 800c2b4:	0800c3a9 	.word	0x0800c3a9
 800c2b8:	0800c269 	.word	0x0800c269
 800c2bc:	0800c269 	.word	0x0800c269
 800c2c0:	0800c411 	.word	0x0800c411
 800c2c4:	0800c269 	.word	0x0800c269
 800c2c8:	0800c317 	.word	0x0800c317
 800c2cc:	0800c269 	.word	0x0800c269
 800c2d0:	0800c269 	.word	0x0800c269
 800c2d4:	0800c3b1 	.word	0x0800c3b1
 800c2d8:	6833      	ldr	r3, [r6, #0]
 800c2da:	1d1a      	adds	r2, r3, #4
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	6032      	str	r2, [r6, #0]
 800c2e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e09e      	b.n	800c42a <_printf_i+0x1ea>
 800c2ec:	6833      	ldr	r3, [r6, #0]
 800c2ee:	6820      	ldr	r0, [r4, #0]
 800c2f0:	1d19      	adds	r1, r3, #4
 800c2f2:	6031      	str	r1, [r6, #0]
 800c2f4:	0606      	lsls	r6, r0, #24
 800c2f6:	d501      	bpl.n	800c2fc <_printf_i+0xbc>
 800c2f8:	681d      	ldr	r5, [r3, #0]
 800c2fa:	e003      	b.n	800c304 <_printf_i+0xc4>
 800c2fc:	0645      	lsls	r5, r0, #25
 800c2fe:	d5fb      	bpl.n	800c2f8 <_printf_i+0xb8>
 800c300:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c304:	2d00      	cmp	r5, #0
 800c306:	da03      	bge.n	800c310 <_printf_i+0xd0>
 800c308:	232d      	movs	r3, #45	@ 0x2d
 800c30a:	426d      	negs	r5, r5
 800c30c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c310:	230a      	movs	r3, #10
 800c312:	4859      	ldr	r0, [pc, #356]	@ (800c478 <_printf_i+0x238>)
 800c314:	e011      	b.n	800c33a <_printf_i+0xfa>
 800c316:	6821      	ldr	r1, [r4, #0]
 800c318:	6833      	ldr	r3, [r6, #0]
 800c31a:	0608      	lsls	r0, r1, #24
 800c31c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c320:	d402      	bmi.n	800c328 <_printf_i+0xe8>
 800c322:	0649      	lsls	r1, r1, #25
 800c324:	bf48      	it	mi
 800c326:	b2ad      	uxthmi	r5, r5
 800c328:	2f6f      	cmp	r7, #111	@ 0x6f
 800c32a:	6033      	str	r3, [r6, #0]
 800c32c:	bf14      	ite	ne
 800c32e:	230a      	movne	r3, #10
 800c330:	2308      	moveq	r3, #8
 800c332:	4851      	ldr	r0, [pc, #324]	@ (800c478 <_printf_i+0x238>)
 800c334:	2100      	movs	r1, #0
 800c336:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c33a:	6866      	ldr	r6, [r4, #4]
 800c33c:	2e00      	cmp	r6, #0
 800c33e:	bfa8      	it	ge
 800c340:	6821      	ldrge	r1, [r4, #0]
 800c342:	60a6      	str	r6, [r4, #8]
 800c344:	bfa4      	itt	ge
 800c346:	f021 0104 	bicge.w	r1, r1, #4
 800c34a:	6021      	strge	r1, [r4, #0]
 800c34c:	b90d      	cbnz	r5, 800c352 <_printf_i+0x112>
 800c34e:	2e00      	cmp	r6, #0
 800c350:	d04b      	beq.n	800c3ea <_printf_i+0x1aa>
 800c352:	4616      	mov	r6, r2
 800c354:	fbb5 f1f3 	udiv	r1, r5, r3
 800c358:	fb03 5711 	mls	r7, r3, r1, r5
 800c35c:	5dc7      	ldrb	r7, [r0, r7]
 800c35e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c362:	462f      	mov	r7, r5
 800c364:	42bb      	cmp	r3, r7
 800c366:	460d      	mov	r5, r1
 800c368:	d9f4      	bls.n	800c354 <_printf_i+0x114>
 800c36a:	2b08      	cmp	r3, #8
 800c36c:	d10b      	bne.n	800c386 <_printf_i+0x146>
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	07df      	lsls	r7, r3, #31
 800c372:	d508      	bpl.n	800c386 <_printf_i+0x146>
 800c374:	6923      	ldr	r3, [r4, #16]
 800c376:	6861      	ldr	r1, [r4, #4]
 800c378:	4299      	cmp	r1, r3
 800c37a:	bfde      	ittt	le
 800c37c:	2330      	movle	r3, #48	@ 0x30
 800c37e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c382:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c386:	1b92      	subs	r2, r2, r6
 800c388:	6122      	str	r2, [r4, #16]
 800c38a:	464b      	mov	r3, r9
 800c38c:	4621      	mov	r1, r4
 800c38e:	4640      	mov	r0, r8
 800c390:	f8cd a000 	str.w	sl, [sp]
 800c394:	aa03      	add	r2, sp, #12
 800c396:	f7ff fee1 	bl	800c15c <_printf_common>
 800c39a:	3001      	adds	r0, #1
 800c39c:	d14a      	bne.n	800c434 <_printf_i+0x1f4>
 800c39e:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a2:	b004      	add	sp, #16
 800c3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	f043 0320 	orr.w	r3, r3, #32
 800c3ae:	6023      	str	r3, [r4, #0]
 800c3b0:	2778      	movs	r7, #120	@ 0x78
 800c3b2:	4832      	ldr	r0, [pc, #200]	@ (800c47c <_printf_i+0x23c>)
 800c3b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	6831      	ldr	r1, [r6, #0]
 800c3bc:	061f      	lsls	r7, r3, #24
 800c3be:	f851 5b04 	ldr.w	r5, [r1], #4
 800c3c2:	d402      	bmi.n	800c3ca <_printf_i+0x18a>
 800c3c4:	065f      	lsls	r7, r3, #25
 800c3c6:	bf48      	it	mi
 800c3c8:	b2ad      	uxthmi	r5, r5
 800c3ca:	6031      	str	r1, [r6, #0]
 800c3cc:	07d9      	lsls	r1, r3, #31
 800c3ce:	bf44      	itt	mi
 800c3d0:	f043 0320 	orrmi.w	r3, r3, #32
 800c3d4:	6023      	strmi	r3, [r4, #0]
 800c3d6:	b11d      	cbz	r5, 800c3e0 <_printf_i+0x1a0>
 800c3d8:	2310      	movs	r3, #16
 800c3da:	e7ab      	b.n	800c334 <_printf_i+0xf4>
 800c3dc:	4826      	ldr	r0, [pc, #152]	@ (800c478 <_printf_i+0x238>)
 800c3de:	e7e9      	b.n	800c3b4 <_printf_i+0x174>
 800c3e0:	6823      	ldr	r3, [r4, #0]
 800c3e2:	f023 0320 	bic.w	r3, r3, #32
 800c3e6:	6023      	str	r3, [r4, #0]
 800c3e8:	e7f6      	b.n	800c3d8 <_printf_i+0x198>
 800c3ea:	4616      	mov	r6, r2
 800c3ec:	e7bd      	b.n	800c36a <_printf_i+0x12a>
 800c3ee:	6833      	ldr	r3, [r6, #0]
 800c3f0:	6825      	ldr	r5, [r4, #0]
 800c3f2:	1d18      	adds	r0, r3, #4
 800c3f4:	6961      	ldr	r1, [r4, #20]
 800c3f6:	6030      	str	r0, [r6, #0]
 800c3f8:	062e      	lsls	r6, r5, #24
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	d501      	bpl.n	800c402 <_printf_i+0x1c2>
 800c3fe:	6019      	str	r1, [r3, #0]
 800c400:	e002      	b.n	800c408 <_printf_i+0x1c8>
 800c402:	0668      	lsls	r0, r5, #25
 800c404:	d5fb      	bpl.n	800c3fe <_printf_i+0x1be>
 800c406:	8019      	strh	r1, [r3, #0]
 800c408:	2300      	movs	r3, #0
 800c40a:	4616      	mov	r6, r2
 800c40c:	6123      	str	r3, [r4, #16]
 800c40e:	e7bc      	b.n	800c38a <_printf_i+0x14a>
 800c410:	6833      	ldr	r3, [r6, #0]
 800c412:	2100      	movs	r1, #0
 800c414:	1d1a      	adds	r2, r3, #4
 800c416:	6032      	str	r2, [r6, #0]
 800c418:	681e      	ldr	r6, [r3, #0]
 800c41a:	6862      	ldr	r2, [r4, #4]
 800c41c:	4630      	mov	r0, r6
 800c41e:	f000 f9b9 	bl	800c794 <memchr>
 800c422:	b108      	cbz	r0, 800c428 <_printf_i+0x1e8>
 800c424:	1b80      	subs	r0, r0, r6
 800c426:	6060      	str	r0, [r4, #4]
 800c428:	6863      	ldr	r3, [r4, #4]
 800c42a:	6123      	str	r3, [r4, #16]
 800c42c:	2300      	movs	r3, #0
 800c42e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c432:	e7aa      	b.n	800c38a <_printf_i+0x14a>
 800c434:	4632      	mov	r2, r6
 800c436:	4649      	mov	r1, r9
 800c438:	4640      	mov	r0, r8
 800c43a:	6923      	ldr	r3, [r4, #16]
 800c43c:	47d0      	blx	sl
 800c43e:	3001      	adds	r0, #1
 800c440:	d0ad      	beq.n	800c39e <_printf_i+0x15e>
 800c442:	6823      	ldr	r3, [r4, #0]
 800c444:	079b      	lsls	r3, r3, #30
 800c446:	d413      	bmi.n	800c470 <_printf_i+0x230>
 800c448:	68e0      	ldr	r0, [r4, #12]
 800c44a:	9b03      	ldr	r3, [sp, #12]
 800c44c:	4298      	cmp	r0, r3
 800c44e:	bfb8      	it	lt
 800c450:	4618      	movlt	r0, r3
 800c452:	e7a6      	b.n	800c3a2 <_printf_i+0x162>
 800c454:	2301      	movs	r3, #1
 800c456:	4632      	mov	r2, r6
 800c458:	4649      	mov	r1, r9
 800c45a:	4640      	mov	r0, r8
 800c45c:	47d0      	blx	sl
 800c45e:	3001      	adds	r0, #1
 800c460:	d09d      	beq.n	800c39e <_printf_i+0x15e>
 800c462:	3501      	adds	r5, #1
 800c464:	68e3      	ldr	r3, [r4, #12]
 800c466:	9903      	ldr	r1, [sp, #12]
 800c468:	1a5b      	subs	r3, r3, r1
 800c46a:	42ab      	cmp	r3, r5
 800c46c:	dcf2      	bgt.n	800c454 <_printf_i+0x214>
 800c46e:	e7eb      	b.n	800c448 <_printf_i+0x208>
 800c470:	2500      	movs	r5, #0
 800c472:	f104 0619 	add.w	r6, r4, #25
 800c476:	e7f5      	b.n	800c464 <_printf_i+0x224>
 800c478:	0800d2c7 	.word	0x0800d2c7
 800c47c:	0800d2d8 	.word	0x0800d2d8

0800c480 <__sflush_r>:
 800c480:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c486:	0716      	lsls	r6, r2, #28
 800c488:	4605      	mov	r5, r0
 800c48a:	460c      	mov	r4, r1
 800c48c:	d454      	bmi.n	800c538 <__sflush_r+0xb8>
 800c48e:	684b      	ldr	r3, [r1, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	dc02      	bgt.n	800c49a <__sflush_r+0x1a>
 800c494:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c496:	2b00      	cmp	r3, #0
 800c498:	dd48      	ble.n	800c52c <__sflush_r+0xac>
 800c49a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c49c:	2e00      	cmp	r6, #0
 800c49e:	d045      	beq.n	800c52c <__sflush_r+0xac>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c4a6:	682f      	ldr	r7, [r5, #0]
 800c4a8:	6a21      	ldr	r1, [r4, #32]
 800c4aa:	602b      	str	r3, [r5, #0]
 800c4ac:	d030      	beq.n	800c510 <__sflush_r+0x90>
 800c4ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4b0:	89a3      	ldrh	r3, [r4, #12]
 800c4b2:	0759      	lsls	r1, r3, #29
 800c4b4:	d505      	bpl.n	800c4c2 <__sflush_r+0x42>
 800c4b6:	6863      	ldr	r3, [r4, #4]
 800c4b8:	1ad2      	subs	r2, r2, r3
 800c4ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c4bc:	b10b      	cbz	r3, 800c4c2 <__sflush_r+0x42>
 800c4be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4c0:	1ad2      	subs	r2, r2, r3
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4c8:	6a21      	ldr	r1, [r4, #32]
 800c4ca:	47b0      	blx	r6
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	d106      	bne.n	800c4e0 <__sflush_r+0x60>
 800c4d2:	6829      	ldr	r1, [r5, #0]
 800c4d4:	291d      	cmp	r1, #29
 800c4d6:	d82b      	bhi.n	800c530 <__sflush_r+0xb0>
 800c4d8:	4a28      	ldr	r2, [pc, #160]	@ (800c57c <__sflush_r+0xfc>)
 800c4da:	410a      	asrs	r2, r1
 800c4dc:	07d6      	lsls	r6, r2, #31
 800c4de:	d427      	bmi.n	800c530 <__sflush_r+0xb0>
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	6062      	str	r2, [r4, #4]
 800c4e4:	6922      	ldr	r2, [r4, #16]
 800c4e6:	04d9      	lsls	r1, r3, #19
 800c4e8:	6022      	str	r2, [r4, #0]
 800c4ea:	d504      	bpl.n	800c4f6 <__sflush_r+0x76>
 800c4ec:	1c42      	adds	r2, r0, #1
 800c4ee:	d101      	bne.n	800c4f4 <__sflush_r+0x74>
 800c4f0:	682b      	ldr	r3, [r5, #0]
 800c4f2:	b903      	cbnz	r3, 800c4f6 <__sflush_r+0x76>
 800c4f4:	6560      	str	r0, [r4, #84]	@ 0x54
 800c4f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4f8:	602f      	str	r7, [r5, #0]
 800c4fa:	b1b9      	cbz	r1, 800c52c <__sflush_r+0xac>
 800c4fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c500:	4299      	cmp	r1, r3
 800c502:	d002      	beq.n	800c50a <__sflush_r+0x8a>
 800c504:	4628      	mov	r0, r5
 800c506:	f7ff fa9b 	bl	800ba40 <_free_r>
 800c50a:	2300      	movs	r3, #0
 800c50c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c50e:	e00d      	b.n	800c52c <__sflush_r+0xac>
 800c510:	2301      	movs	r3, #1
 800c512:	4628      	mov	r0, r5
 800c514:	47b0      	blx	r6
 800c516:	4602      	mov	r2, r0
 800c518:	1c50      	adds	r0, r2, #1
 800c51a:	d1c9      	bne.n	800c4b0 <__sflush_r+0x30>
 800c51c:	682b      	ldr	r3, [r5, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d0c6      	beq.n	800c4b0 <__sflush_r+0x30>
 800c522:	2b1d      	cmp	r3, #29
 800c524:	d001      	beq.n	800c52a <__sflush_r+0xaa>
 800c526:	2b16      	cmp	r3, #22
 800c528:	d11d      	bne.n	800c566 <__sflush_r+0xe6>
 800c52a:	602f      	str	r7, [r5, #0]
 800c52c:	2000      	movs	r0, #0
 800c52e:	e021      	b.n	800c574 <__sflush_r+0xf4>
 800c530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c534:	b21b      	sxth	r3, r3
 800c536:	e01a      	b.n	800c56e <__sflush_r+0xee>
 800c538:	690f      	ldr	r7, [r1, #16]
 800c53a:	2f00      	cmp	r7, #0
 800c53c:	d0f6      	beq.n	800c52c <__sflush_r+0xac>
 800c53e:	0793      	lsls	r3, r2, #30
 800c540:	bf18      	it	ne
 800c542:	2300      	movne	r3, #0
 800c544:	680e      	ldr	r6, [r1, #0]
 800c546:	bf08      	it	eq
 800c548:	694b      	ldreq	r3, [r1, #20]
 800c54a:	1bf6      	subs	r6, r6, r7
 800c54c:	600f      	str	r7, [r1, #0]
 800c54e:	608b      	str	r3, [r1, #8]
 800c550:	2e00      	cmp	r6, #0
 800c552:	ddeb      	ble.n	800c52c <__sflush_r+0xac>
 800c554:	4633      	mov	r3, r6
 800c556:	463a      	mov	r2, r7
 800c558:	4628      	mov	r0, r5
 800c55a:	6a21      	ldr	r1, [r4, #32]
 800c55c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c560:	47e0      	blx	ip
 800c562:	2800      	cmp	r0, #0
 800c564:	dc07      	bgt.n	800c576 <__sflush_r+0xf6>
 800c566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c56a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c56e:	f04f 30ff 	mov.w	r0, #4294967295
 800c572:	81a3      	strh	r3, [r4, #12]
 800c574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c576:	4407      	add	r7, r0
 800c578:	1a36      	subs	r6, r6, r0
 800c57a:	e7e9      	b.n	800c550 <__sflush_r+0xd0>
 800c57c:	dfbffffe 	.word	0xdfbffffe

0800c580 <_fflush_r>:
 800c580:	b538      	push	{r3, r4, r5, lr}
 800c582:	690b      	ldr	r3, [r1, #16]
 800c584:	4605      	mov	r5, r0
 800c586:	460c      	mov	r4, r1
 800c588:	b913      	cbnz	r3, 800c590 <_fflush_r+0x10>
 800c58a:	2500      	movs	r5, #0
 800c58c:	4628      	mov	r0, r5
 800c58e:	bd38      	pop	{r3, r4, r5, pc}
 800c590:	b118      	cbz	r0, 800c59a <_fflush_r+0x1a>
 800c592:	6a03      	ldr	r3, [r0, #32]
 800c594:	b90b      	cbnz	r3, 800c59a <_fflush_r+0x1a>
 800c596:	f7ff f80f 	bl	800b5b8 <__sinit>
 800c59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d0f3      	beq.n	800c58a <_fflush_r+0xa>
 800c5a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5a4:	07d0      	lsls	r0, r2, #31
 800c5a6:	d404      	bmi.n	800c5b2 <_fflush_r+0x32>
 800c5a8:	0599      	lsls	r1, r3, #22
 800c5aa:	d402      	bmi.n	800c5b2 <_fflush_r+0x32>
 800c5ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5ae:	f7ff fa36 	bl	800ba1e <__retarget_lock_acquire_recursive>
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	4621      	mov	r1, r4
 800c5b6:	f7ff ff63 	bl	800c480 <__sflush_r>
 800c5ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5bc:	4605      	mov	r5, r0
 800c5be:	07da      	lsls	r2, r3, #31
 800c5c0:	d4e4      	bmi.n	800c58c <_fflush_r+0xc>
 800c5c2:	89a3      	ldrh	r3, [r4, #12]
 800c5c4:	059b      	lsls	r3, r3, #22
 800c5c6:	d4e1      	bmi.n	800c58c <_fflush_r+0xc>
 800c5c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5ca:	f7ff fa29 	bl	800ba20 <__retarget_lock_release_recursive>
 800c5ce:	e7dd      	b.n	800c58c <_fflush_r+0xc>

0800c5d0 <__swhatbuf_r>:
 800c5d0:	b570      	push	{r4, r5, r6, lr}
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d8:	4615      	mov	r5, r2
 800c5da:	2900      	cmp	r1, #0
 800c5dc:	461e      	mov	r6, r3
 800c5de:	b096      	sub	sp, #88	@ 0x58
 800c5e0:	da0c      	bge.n	800c5fc <__swhatbuf_r+0x2c>
 800c5e2:	89a3      	ldrh	r3, [r4, #12]
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5ea:	bf14      	ite	ne
 800c5ec:	2340      	movne	r3, #64	@ 0x40
 800c5ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c5f2:	2000      	movs	r0, #0
 800c5f4:	6031      	str	r1, [r6, #0]
 800c5f6:	602b      	str	r3, [r5, #0]
 800c5f8:	b016      	add	sp, #88	@ 0x58
 800c5fa:	bd70      	pop	{r4, r5, r6, pc}
 800c5fc:	466a      	mov	r2, sp
 800c5fe:	f000 f897 	bl	800c730 <_fstat_r>
 800c602:	2800      	cmp	r0, #0
 800c604:	dbed      	blt.n	800c5e2 <__swhatbuf_r+0x12>
 800c606:	9901      	ldr	r1, [sp, #4]
 800c608:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c60c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c610:	4259      	negs	r1, r3
 800c612:	4159      	adcs	r1, r3
 800c614:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c618:	e7eb      	b.n	800c5f2 <__swhatbuf_r+0x22>

0800c61a <__smakebuf_r>:
 800c61a:	898b      	ldrh	r3, [r1, #12]
 800c61c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c61e:	079d      	lsls	r5, r3, #30
 800c620:	4606      	mov	r6, r0
 800c622:	460c      	mov	r4, r1
 800c624:	d507      	bpl.n	800c636 <__smakebuf_r+0x1c>
 800c626:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c62a:	6023      	str	r3, [r4, #0]
 800c62c:	6123      	str	r3, [r4, #16]
 800c62e:	2301      	movs	r3, #1
 800c630:	6163      	str	r3, [r4, #20]
 800c632:	b003      	add	sp, #12
 800c634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c636:	466a      	mov	r2, sp
 800c638:	ab01      	add	r3, sp, #4
 800c63a:	f7ff ffc9 	bl	800c5d0 <__swhatbuf_r>
 800c63e:	9f00      	ldr	r7, [sp, #0]
 800c640:	4605      	mov	r5, r0
 800c642:	4639      	mov	r1, r7
 800c644:	4630      	mov	r0, r6
 800c646:	f7ff fa65 	bl	800bb14 <_malloc_r>
 800c64a:	b948      	cbnz	r0, 800c660 <__smakebuf_r+0x46>
 800c64c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c650:	059a      	lsls	r2, r3, #22
 800c652:	d4ee      	bmi.n	800c632 <__smakebuf_r+0x18>
 800c654:	f023 0303 	bic.w	r3, r3, #3
 800c658:	f043 0302 	orr.w	r3, r3, #2
 800c65c:	81a3      	strh	r3, [r4, #12]
 800c65e:	e7e2      	b.n	800c626 <__smakebuf_r+0xc>
 800c660:	89a3      	ldrh	r3, [r4, #12]
 800c662:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c66a:	81a3      	strh	r3, [r4, #12]
 800c66c:	9b01      	ldr	r3, [sp, #4]
 800c66e:	6020      	str	r0, [r4, #0]
 800c670:	b15b      	cbz	r3, 800c68a <__smakebuf_r+0x70>
 800c672:	4630      	mov	r0, r6
 800c674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c678:	f000 f86c 	bl	800c754 <_isatty_r>
 800c67c:	b128      	cbz	r0, 800c68a <__smakebuf_r+0x70>
 800c67e:	89a3      	ldrh	r3, [r4, #12]
 800c680:	f023 0303 	bic.w	r3, r3, #3
 800c684:	f043 0301 	orr.w	r3, r3, #1
 800c688:	81a3      	strh	r3, [r4, #12]
 800c68a:	89a3      	ldrh	r3, [r4, #12]
 800c68c:	431d      	orrs	r5, r3
 800c68e:	81a5      	strh	r5, [r4, #12]
 800c690:	e7cf      	b.n	800c632 <__smakebuf_r+0x18>

0800c692 <_putc_r>:
 800c692:	b570      	push	{r4, r5, r6, lr}
 800c694:	460d      	mov	r5, r1
 800c696:	4614      	mov	r4, r2
 800c698:	4606      	mov	r6, r0
 800c69a:	b118      	cbz	r0, 800c6a4 <_putc_r+0x12>
 800c69c:	6a03      	ldr	r3, [r0, #32]
 800c69e:	b90b      	cbnz	r3, 800c6a4 <_putc_r+0x12>
 800c6a0:	f7fe ff8a 	bl	800b5b8 <__sinit>
 800c6a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6a6:	07d8      	lsls	r0, r3, #31
 800c6a8:	d405      	bmi.n	800c6b6 <_putc_r+0x24>
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	0599      	lsls	r1, r3, #22
 800c6ae:	d402      	bmi.n	800c6b6 <_putc_r+0x24>
 800c6b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6b2:	f7ff f9b4 	bl	800ba1e <__retarget_lock_acquire_recursive>
 800c6b6:	68a3      	ldr	r3, [r4, #8]
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	60a3      	str	r3, [r4, #8]
 800c6be:	da05      	bge.n	800c6cc <_putc_r+0x3a>
 800c6c0:	69a2      	ldr	r2, [r4, #24]
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	db12      	blt.n	800c6ec <_putc_r+0x5a>
 800c6c6:	b2eb      	uxtb	r3, r5
 800c6c8:	2b0a      	cmp	r3, #10
 800c6ca:	d00f      	beq.n	800c6ec <_putc_r+0x5a>
 800c6cc:	6823      	ldr	r3, [r4, #0]
 800c6ce:	1c5a      	adds	r2, r3, #1
 800c6d0:	6022      	str	r2, [r4, #0]
 800c6d2:	701d      	strb	r5, [r3, #0]
 800c6d4:	b2ed      	uxtb	r5, r5
 800c6d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6d8:	07da      	lsls	r2, r3, #31
 800c6da:	d405      	bmi.n	800c6e8 <_putc_r+0x56>
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	059b      	lsls	r3, r3, #22
 800c6e0:	d402      	bmi.n	800c6e8 <_putc_r+0x56>
 800c6e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6e4:	f7ff f99c 	bl	800ba20 <__retarget_lock_release_recursive>
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	bd70      	pop	{r4, r5, r6, pc}
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	4622      	mov	r2, r4
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f7ff f886 	bl	800b802 <__swbuf_r>
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	e7ed      	b.n	800c6d6 <_putc_r+0x44>

0800c6fa <memmove>:
 800c6fa:	4288      	cmp	r0, r1
 800c6fc:	b510      	push	{r4, lr}
 800c6fe:	eb01 0402 	add.w	r4, r1, r2
 800c702:	d902      	bls.n	800c70a <memmove+0x10>
 800c704:	4284      	cmp	r4, r0
 800c706:	4623      	mov	r3, r4
 800c708:	d807      	bhi.n	800c71a <memmove+0x20>
 800c70a:	1e43      	subs	r3, r0, #1
 800c70c:	42a1      	cmp	r1, r4
 800c70e:	d008      	beq.n	800c722 <memmove+0x28>
 800c710:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c714:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c718:	e7f8      	b.n	800c70c <memmove+0x12>
 800c71a:	4601      	mov	r1, r0
 800c71c:	4402      	add	r2, r0
 800c71e:	428a      	cmp	r2, r1
 800c720:	d100      	bne.n	800c724 <memmove+0x2a>
 800c722:	bd10      	pop	{r4, pc}
 800c724:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c728:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c72c:	e7f7      	b.n	800c71e <memmove+0x24>
	...

0800c730 <_fstat_r>:
 800c730:	b538      	push	{r3, r4, r5, lr}
 800c732:	2300      	movs	r3, #0
 800c734:	4d06      	ldr	r5, [pc, #24]	@ (800c750 <_fstat_r+0x20>)
 800c736:	4604      	mov	r4, r0
 800c738:	4608      	mov	r0, r1
 800c73a:	4611      	mov	r1, r2
 800c73c:	602b      	str	r3, [r5, #0]
 800c73e:	f7f4 f8e5 	bl	800090c <_fstat>
 800c742:	1c43      	adds	r3, r0, #1
 800c744:	d102      	bne.n	800c74c <_fstat_r+0x1c>
 800c746:	682b      	ldr	r3, [r5, #0]
 800c748:	b103      	cbz	r3, 800c74c <_fstat_r+0x1c>
 800c74a:	6023      	str	r3, [r4, #0]
 800c74c:	bd38      	pop	{r3, r4, r5, pc}
 800c74e:	bf00      	nop
 800c750:	200009b0 	.word	0x200009b0

0800c754 <_isatty_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	2300      	movs	r3, #0
 800c758:	4d05      	ldr	r5, [pc, #20]	@ (800c770 <_isatty_r+0x1c>)
 800c75a:	4604      	mov	r4, r0
 800c75c:	4608      	mov	r0, r1
 800c75e:	602b      	str	r3, [r5, #0]
 800c760:	f7f4 f8e3 	bl	800092a <_isatty>
 800c764:	1c43      	adds	r3, r0, #1
 800c766:	d102      	bne.n	800c76e <_isatty_r+0x1a>
 800c768:	682b      	ldr	r3, [r5, #0]
 800c76a:	b103      	cbz	r3, 800c76e <_isatty_r+0x1a>
 800c76c:	6023      	str	r3, [r4, #0]
 800c76e:	bd38      	pop	{r3, r4, r5, pc}
 800c770:	200009b0 	.word	0x200009b0

0800c774 <_sbrk_r>:
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	2300      	movs	r3, #0
 800c778:	4d05      	ldr	r5, [pc, #20]	@ (800c790 <_sbrk_r+0x1c>)
 800c77a:	4604      	mov	r4, r0
 800c77c:	4608      	mov	r0, r1
 800c77e:	602b      	str	r3, [r5, #0]
 800c780:	f7f4 f8ea 	bl	8000958 <_sbrk>
 800c784:	1c43      	adds	r3, r0, #1
 800c786:	d102      	bne.n	800c78e <_sbrk_r+0x1a>
 800c788:	682b      	ldr	r3, [r5, #0]
 800c78a:	b103      	cbz	r3, 800c78e <_sbrk_r+0x1a>
 800c78c:	6023      	str	r3, [r4, #0]
 800c78e:	bd38      	pop	{r3, r4, r5, pc}
 800c790:	200009b0 	.word	0x200009b0

0800c794 <memchr>:
 800c794:	4603      	mov	r3, r0
 800c796:	b510      	push	{r4, lr}
 800c798:	b2c9      	uxtb	r1, r1
 800c79a:	4402      	add	r2, r0
 800c79c:	4293      	cmp	r3, r2
 800c79e:	4618      	mov	r0, r3
 800c7a0:	d101      	bne.n	800c7a6 <memchr+0x12>
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	e003      	b.n	800c7ae <memchr+0x1a>
 800c7a6:	7804      	ldrb	r4, [r0, #0]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	428c      	cmp	r4, r1
 800c7ac:	d1f6      	bne.n	800c79c <memchr+0x8>
 800c7ae:	bd10      	pop	{r4, pc}

0800c7b0 <_realloc_r>:
 800c7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b4:	4680      	mov	r8, r0
 800c7b6:	4615      	mov	r5, r2
 800c7b8:	460c      	mov	r4, r1
 800c7ba:	b921      	cbnz	r1, 800c7c6 <_realloc_r+0x16>
 800c7bc:	4611      	mov	r1, r2
 800c7be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c2:	f7ff b9a7 	b.w	800bb14 <_malloc_r>
 800c7c6:	b92a      	cbnz	r2, 800c7d4 <_realloc_r+0x24>
 800c7c8:	f7ff f93a 	bl	800ba40 <_free_r>
 800c7cc:	2400      	movs	r4, #0
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d4:	f000 f81a 	bl	800c80c <_malloc_usable_size_r>
 800c7d8:	4285      	cmp	r5, r0
 800c7da:	4606      	mov	r6, r0
 800c7dc:	d802      	bhi.n	800c7e4 <_realloc_r+0x34>
 800c7de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c7e2:	d8f4      	bhi.n	800c7ce <_realloc_r+0x1e>
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	4640      	mov	r0, r8
 800c7e8:	f7ff f994 	bl	800bb14 <_malloc_r>
 800c7ec:	4607      	mov	r7, r0
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	d0ec      	beq.n	800c7cc <_realloc_r+0x1c>
 800c7f2:	42b5      	cmp	r5, r6
 800c7f4:	462a      	mov	r2, r5
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	bf28      	it	cs
 800c7fa:	4632      	movcs	r2, r6
 800c7fc:	f7ff f911 	bl	800ba22 <memcpy>
 800c800:	4621      	mov	r1, r4
 800c802:	4640      	mov	r0, r8
 800c804:	f7ff f91c 	bl	800ba40 <_free_r>
 800c808:	463c      	mov	r4, r7
 800c80a:	e7e0      	b.n	800c7ce <_realloc_r+0x1e>

0800c80c <_malloc_usable_size_r>:
 800c80c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c810:	1f18      	subs	r0, r3, #4
 800c812:	2b00      	cmp	r3, #0
 800c814:	bfbc      	itt	lt
 800c816:	580b      	ldrlt	r3, [r1, r0]
 800c818:	18c0      	addlt	r0, r0, r3
 800c81a:	4770      	bx	lr

0800c81c <_init>:
 800c81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81e:	bf00      	nop
 800c820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c822:	bc08      	pop	{r3}
 800c824:	469e      	mov	lr, r3
 800c826:	4770      	bx	lr

0800c828 <_fini>:
 800c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82a:	bf00      	nop
 800c82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82e:	bc08      	pop	{r3}
 800c830:	469e      	mov	lr, r3
 800c832:	4770      	bx	lr
