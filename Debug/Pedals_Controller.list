
Pedals_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c738  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000afc  0800c844  0800c844  0000d844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d340  0800d340  0000f094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d340  0800d340  0000e340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d348  0800d348  0000f094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d348  0800d348  0000e348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d34c  0800d34c  0000e34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800d350  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  20000094  0800d3e4  0000f094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c0  0800d3e4  0000f9c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015528  00000000  00000000  0000f0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c85  00000000  00000000  000245e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00028270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b61  00000000  00000000  000290f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c828  00000000  00000000  00029c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012eeb  00000000  00000000  00046481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0e3a  00000000  00000000  0005936c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa1a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004480  00000000  00000000  000fa1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fe66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c82c 	.word	0x0800c82c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	0800c82c 	.word	0x0800c82c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
 80001b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	0a1b      	lsrs	r3, r3, #8
 80001b6:	b29a      	uxth	r2, r3
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	615a      	str	r2, [r3, #20]
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	68db      	ldr	r3, [r3, #12]
 80001d4:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	0a1b      	lsrs	r3, r3, #8
 80001da:	b29b      	uxth	r3, r3
 80001dc:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 80001de:	68fa      	ldr	r2, [r7, #12]
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	4013      	ands	r3, r2
 80001e4:	041a      	lsls	r2, r3, #16
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	43d9      	mvns	r1, r3
 80001ea:	68bb      	ldr	r3, [r7, #8]
 80001ec:	400b      	ands	r3, r1
 80001ee:	431a      	orrs	r2, r3
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	611a      	str	r2, [r3, #16]
}
 80001f4:	bf00      	nop
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
	...

08000200 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000208:	4b08      	ldr	r3, [pc, #32]	@ (800022c <LL_APB2_GRP1_EnableClock+0x2c>)
 800020a:	699a      	ldr	r2, [r3, #24]
 800020c:	4907      	ldr	r1, [pc, #28]	@ (800022c <LL_APB2_GRP1_EnableClock+0x2c>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4313      	orrs	r3, r2
 8000212:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000214:	4b05      	ldr	r3, [pc, #20]	@ (800022c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000216:	699a      	ldr	r2, [r3, #24]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4013      	ands	r3, r2
 800021c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800021e:	68fb      	ldr	r3, [r7, #12]
}
 8000220:	bf00      	nop
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40021000 	.word	0x40021000

08000230 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int le, char *ptr, int len)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++)
 800023c:	2300      	movs	r3, #0
 800023e:	617b      	str	r3, [r7, #20]
 8000240:	e009      	b.n	8000256 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	1c5a      	adds	r2, r3, #1
 8000246:	60ba      	str	r2, [r7, #8]
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	4618      	mov	r0, r3
 800024c:	f7ff ff86 	bl	800015c <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	3301      	adds	r3, #1
 8000254:	617b      	str	r3, [r7, #20]
 8000256:	697a      	ldr	r2, [r7, #20]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	429a      	cmp	r2, r3
 800025c:	dbf1      	blt.n	8000242 <_write+0x12>
	}
	return len;
 800025e:	687b      	ldr	r3, [r7, #4]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3718      	adds	r7, #24
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026e:	f000 fc61 	bl	8000b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000272:	f000 f823 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000276:	f000 f89d 	bl	80003b4 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 800027a:	f000 f879 	bl	8000370 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
	tusb_rhport_init_t dev_init = { .role = TUSB_ROLE_DEVICE, .speed =
 800027e:	4b0d      	ldr	r3, [pc, #52]	@ (80002b4 <main+0x4c>)
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	80bb      	strh	r3, [r7, #4]
			TUSB_SPEED_AUTO };
//  LL_USB_InitPeriph();
  get_serial_id_string();
 8000284:	f000 fa30 	bl	80006e8 <get_serial_id_string>
	tusb_init(BOARD_TUD_RHPORT, &dev_init);
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	2000      	movs	r0, #0
 800028e:	f00a fe75 	bl	800af7c <tusb_rhport_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf(serial_str);
 8000292:	4809      	ldr	r0, [pc, #36]	@ (80002b8 <main+0x50>)
 8000294:	f00b f9ce 	bl	800b634 <iprintf>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 8000298:	2100      	movs	r1, #0
 800029a:	f04f 30ff 	mov.w	r0, #4294967295
 800029e:	f006 fe39 	bl	8006f14 <tud_task_ext>
}
 80002a2:	bf00      	nop
	while (1) {
		tud_task();
		cdc_task();
 80002a4:	f000 f930 	bl	8000508 <cdc_task>
		led_blinking_task();
 80002a8:	f000 fa3c 	bl	8000724 <led_blinking_task>
		hid_task();
 80002ac:	f000 f992 	bl	80005d4 <hid_task>
		tud_task();
 80002b0:	bf00      	nop
 80002b2:	e7f1      	b.n	8000298 <main+0x30>
 80002b4:	0800c844 	.word	0x0800c844
 80002b8:	20000388 	.word	0x20000388

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b094      	sub	sp, #80	@ 0x50
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002c6:	2228      	movs	r2, #40	@ 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f00b fb36 	bl	800b93c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ec:	2301      	movs	r3, #1
 80002ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000302:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000306:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000308:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800030c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000312:	4618      	mov	r0, r3
 8000314:	f002 f8fe 	bl	8002514 <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800031e:	f000 fa23 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	230f      	movs	r3, #15
 8000324:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	2302      	movs	r3, #2
 8000328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000332:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	2102      	movs	r1, #2
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fb6a 	bl	8002a18 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800034a:	f000 fa0d 	bl	8000768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800034e:	2310      	movs	r3, #16
 8000350:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f002 fcb9 	bl	8002cd0 <HAL_RCCEx_PeriphCLKConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000364:	f000 fa00 	bl	8000768 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	3750      	adds	r7, #80	@ 0x50
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000374:	4b0d      	ldr	r3, [pc, #52]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 8000376:	4a0e      	ldr	r2, [pc, #56]	@ (80003b0 <MX_USB_PCD_Init+0x40>)
 8000378:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800037a:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 800037c:	2208      	movs	r2, #8
 800037e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000380:	4b0a      	ldr	r3, [pc, #40]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 8000382:	2202      	movs	r2, #2
 8000384:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000386:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 8000388:	2200      	movs	r2, #0
 800038a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800038c:	4b07      	ldr	r3, [pc, #28]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 800038e:	2200      	movs	r2, #0
 8000390:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000392:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 8000394:	2200      	movs	r2, #0
 8000396:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000398:	4804      	ldr	r0, [pc, #16]	@ (80003ac <MX_USB_PCD_Init+0x3c>)
 800039a:	f000 fd58 	bl	8000e4e <HAL_PCD_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80003a4:	f000 f9e0 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	200000b0 	.word	0x200000b0
 80003b0:	40005c00 	.word	0x40005c00

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80003c8:	2010      	movs	r0, #16
 80003ca:	f7ff ff19 	bl	8000200 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80003ce:	2020      	movs	r0, #32
 80003d0:	f7ff ff16 	bl	8000200 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80003d4:	2004      	movs	r0, #4
 80003d6:	f7ff ff13 	bl	8000200 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80003da:	2008      	movs	r0, #8
 80003dc:	f7ff ff10 	bl	8000200 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(userLED_GPIO_Port, userLED_Pin);
 80003e0:	4919      	ldr	r1, [pc, #100]	@ (8000448 <MX_GPIO_Init+0x94>)
 80003e2:	481a      	ldr	r0, [pc, #104]	@ (800044c <MX_GPIO_Init+0x98>)
 80003e4:	f7ff fee0 	bl	80001a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, Clutch_Clock_Pin|Brake_Clock_Pin|Throttle_Clock_Pin);
 80003e8:	f644 1149 	movw	r1, #18761	@ 0x4949
 80003ec:	4818      	ldr	r0, [pc, #96]	@ (8000450 <MX_GPIO_Init+0x9c>)
 80003ee:	f7ff fedb 	bl	80001a8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = userLED_Pin;
 80003f2:	4b15      	ldr	r3, [pc, #84]	@ (8000448 <MX_GPIO_Init+0x94>)
 80003f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003f6:	2301      	movs	r3, #1
 80003f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80003fa:	2303      	movs	r3, #3
 80003fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000402:	2301      	movs	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(userLED_GPIO_Port, &GPIO_InitStruct);
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	4810      	ldr	r0, [pc, #64]	@ (800044c <MX_GPIO_Init+0x98>)
 800040c:	f002 fdce 	bl	8002fac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Clutch_Clock_Pin|Brake_Clock_Pin|Throttle_Clock_Pin;
 8000410:	f644 1349 	movw	r3, #18761	@ 0x4949
 8000414:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000416:	2301      	movs	r3, #1
 8000418:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800041a:	2302      	movs	r3, #2
 800041c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4619      	mov	r1, r3
 8000426:	480a      	ldr	r0, [pc, #40]	@ (8000450 <MX_GPIO_Init+0x9c>)
 8000428:	f002 fdc0 	bl	8002fac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Clutch_Data_Pin|Brake_Data_Pin|Throttle_Data_Pin;
 800042c:	f249 2392 	movw	r3, #37522	@ 0x9292
 8000430:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000432:	2304      	movs	r3, #4
 8000434:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4619      	mov	r1, r3
 800043a:	4805      	ldr	r0, [pc, #20]	@ (8000450 <MX_GPIO_Init+0x9c>)
 800043c:	f002 fdb6 	bl	8002fac <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000440:	bf00      	nop
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	04200020 	.word	0x04200020
 800044c:	40011000 	.word	0x40011000
 8000450:	40010800 	.word	0x40010800

08000454 <echo_serial_port>:

/* USER CODE BEGIN 4 */
// echo to either Serial0 or Serial1
// with Serial0 as all lower case, Serial1 as all upper case
static void echo_serial_port(uint8_t itf, uint8_t buf[], uint32_t count) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < count; i++) {
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	e041      	b.n	80004ec <echo_serial_port+0x98>
		if (itf == 0) {
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d116      	bne.n	800049c <echo_serial_port+0x48>
			// echo back 1st port as lower case
			if (isupper(buf[i]))
 800046e:	68ba      	ldr	r2, [r7, #8]
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	4413      	add	r3, r2
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	3301      	adds	r3, #1
 8000478:	4a22      	ldr	r2, [pc, #136]	@ (8000504 <echo_serial_port+0xb0>)
 800047a:	4413      	add	r3, r2
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	f003 0303 	and.w	r3, r3, #3
 8000482:	2b01      	cmp	r3, #1
 8000484:	d120      	bne.n	80004c8 <echo_serial_port+0x74>
				buf[i] += 'a' - 'A';
 8000486:	68ba      	ldr	r2, [r7, #8]
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	4413      	add	r3, r2
 800048c:	781a      	ldrb	r2, [r3, #0]
 800048e:	68b9      	ldr	r1, [r7, #8]
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	440b      	add	r3, r1
 8000494:	3220      	adds	r2, #32
 8000496:	b2d2      	uxtb	r2, r2
 8000498:	701a      	strb	r2, [r3, #0]
 800049a:	e015      	b.n	80004c8 <echo_serial_port+0x74>
		} else {
			// echo back 2nd port as upper case
			if (islower(buf[i]))
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	4413      	add	r3, r2
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	4a17      	ldr	r2, [pc, #92]	@ (8000504 <echo_serial_port+0xb0>)
 80004a8:	4413      	add	r3, r2
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	f003 0303 	and.w	r3, r3, #3
 80004b0:	2b02      	cmp	r3, #2
 80004b2:	d109      	bne.n	80004c8 <echo_serial_port+0x74>
				buf[i] -= 'a' - 'A';
 80004b4:	68ba      	ldr	r2, [r7, #8]
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	4413      	add	r3, r2
 80004ba:	781a      	ldrb	r2, [r3, #0]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	440b      	add	r3, r1
 80004c2:	3a20      	subs	r2, #32
 80004c4:	b2d2      	uxtb	r2, r2
 80004c6:	701a      	strb	r2, [r3, #0]
		}

		tud_cdc_n_write_char(itf, buf[i]);
 80004c8:	68ba      	ldr	r2, [r7, #8]
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	4413      	add	r3, r2
 80004ce:	781a      	ldrb	r2, [r3, #0]
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	74fb      	strb	r3, [r7, #19]
 80004d4:	4613      	mov	r3, r2
 80004d6:	74bb      	strb	r3, [r7, #18]
// Write bytes to TX FIFO, data may remain in the FIFO for a while
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize);

// Write a byte
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_n_write_char(uint8_t itf, char ch) {
  return tud_cdc_n_write(itf, &ch, 1);
 80004d8:	f107 0112 	add.w	r1, r7, #18
 80004dc:	7cfb      	ldrb	r3, [r7, #19]
 80004de:	2201      	movs	r2, #1
 80004e0:	4618      	mov	r0, r3
 80004e2:	f004 fb3d 	bl	8004b60 <tud_cdc_n_write>
	for (uint32_t i = 0; i < count; i++) {
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	3301      	adds	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	697a      	ldr	r2, [r7, #20]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d3b9      	bcc.n	8000468 <echo_serial_port+0x14>
	}
	tud_cdc_n_write_flush(itf);
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f004 fb66 	bl	8004bc8 <tud_cdc_n_write_flush>
}
 80004fc:	bf00      	nop
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	0800d209 	.word	0x0800d209

08000508 <cdc_task>:

//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+
static void cdc_task(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b092      	sub	sp, #72	@ 0x48
 800050c:	af00      	add	r7, sp, #0
	uint8_t itf;

	for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800050e:	2300      	movs	r3, #0
 8000510:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000514:	e01a      	b.n	800054c <cdc_task+0x44>
		// connected() check for DTR bit
		// Most but not all terminal client set this when making connection
		// if ( tud_cdc_n_connected(itf) )
		{
			if (tud_cdc_n_available(itf)) {
 8000516:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800051a:	4618      	mov	r0, r3
 800051c:	f004 fade 	bl	8004adc <tud_cdc_n_available>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d00d      	beq.n	8000542 <cdc_task+0x3a>
				uint8_t buf[64];

				uint32_t count = tud_cdc_n_read(itf, buf, sizeof(buf));
 8000526:	4639      	mov	r1, r7
 8000528:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800052c:	2240      	movs	r2, #64	@ 0x40
 800052e:	4618      	mov	r0, r3
 8000530:	f004 faea 	bl	8004b08 <tud_cdc_n_read>
 8000534:	6438      	str	r0, [r7, #64]	@ 0x40

				// echo back to both serial ports
				echo_serial_port(0, buf, count);
 8000536:	463b      	mov	r3, r7
 8000538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800053a:	4619      	mov	r1, r3
 800053c:	2000      	movs	r0, #0
 800053e:	f7ff ff89 	bl	8000454 <echo_serial_port>
	for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8000542:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000546:	3301      	adds	r3, #1
 8000548:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800054c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0e0      	beq.n	8000516 <cdc_task+0xe>
//        echo_serial_port(1, buf, count);
			}
		}
	}
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3748      	adds	r7, #72	@ 0x48
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <tud_mount_cb>:

// Invoked when device is mounted
void tud_mount_cb(void) {
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_MOUNTED;
 8000564:	4b03      	ldr	r3, [pc, #12]	@ (8000574 <tud_mount_cb+0x14>)
 8000566:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800056a:	601a      	str	r2, [r3, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000000 	.word	0x20000000

08000578 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void) {
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_NOT_MOUNTED;
 800057c:	4b03      	ldr	r3, [pc, #12]	@ (800058c <tud_umount_cb+0x14>)
 800057e:	2264      	movs	r2, #100	@ 0x64
 8000580:	601a      	str	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en) {
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	(void) remote_wakeup_en;
	blink_interval_ms = BLINK_SUSPENDED;
 800059a:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <tud_suspend_cb+0x1c>)
 800059c:	22fa      	movs	r2, #250	@ 0xfa
 800059e:	601a      	str	r2, [r3, #0]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000

080005b0 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	blink_interval_ms = tud_mounted() ? BLINK_MOUNTED : BLINK_NOT_MOUNTED;
 80005b4:	f006 fac6 	bl	8006b44 <tud_mounted>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <tud_resume_cb+0x14>
 80005be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005c2:	e000      	b.n	80005c6 <tud_resume_cb+0x16>
 80005c4:	2364      	movs	r3, #100	@ 0x64
 80005c6:	4a02      	ldr	r2, [pc, #8]	@ (80005d0 <tud_resume_cb+0x20>)
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000000 	.word	0x20000000

080005d4 <hid_task>:

//--------------------------------------------------------------------+
// USB HID
//--------------------------------------------------------------------+

void hid_task(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af04      	add	r7, sp, #16
	// Poll every 10ms
	const uint32_t interval_ms = 10;
 80005da:	230a      	movs	r3, #10
 80005dc:	60fb      	str	r3, [r7, #12]
	static uint32_t start_ms = 0;

	if (HAL_GetTick() - start_ms < interval_ms)
 80005de:	f000 fb01 	bl	8000be4 <HAL_GetTick>
 80005e2:	4602      	mov	r2, r0
 80005e4:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <hid_task+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d852      	bhi.n	8000696 <hid_task+0xc2>
		return; // not enough time
	start_ms += interval_ms;
 80005f0:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <hid_task+0xcc>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	4a29      	ldr	r2, [pc, #164]	@ (80006a0 <hid_task+0xcc>)
 80005fa:	6013      	str	r3, [r2, #0]

	uint32_t const btn = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]

	// Remote wakeup
	if (tud_suspended() && btn) {
 8000600:	f006 fab0 	bl	8006b64 <tud_suspended>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d004      	beq.n	8000614 <hid_task+0x40>
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <hid_task+0x40>
		// Wake up host if we are in suspend mode
		// and REMOTE_WAKEUP feature is enabled by host
		tud_remote_wakeup();
 8000610:	f006 faba 	bl	8006b88 <tud_remote_wakeup>
	}

	/*------------- Keyboard -------------*/
	if (tud_hid_n_ready(ITF_KEYBOARD)) {
 8000614:	2000      	movs	r0, #0
 8000616:	f004 ff21 	bl	800545c <tud_hid_n_ready>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d01f      	beq.n	8000660 <hid_task+0x8c>
		// use to avoid send multiple consecutive zero report for keyboard
		static bool has_key = false;

		if (btn) {
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00f      	beq.n	8000646 <hid_task+0x72>
			uint8_t keycode[6] = { 0 };
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	80bb      	strh	r3, [r7, #4]
			keycode[0] = HID_KEY_A;
 800062e:	2304      	movs	r3, #4
 8000630:	703b      	strb	r3, [r7, #0]

			tud_hid_n_keyboard_report(ITF_KEYBOARD, 0, 0, keycode);
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	2000      	movs	r0, #0
 800063a:	f004 ffd9 	bl	80055f0 <tud_hid_n_keyboard_report>

			has_key = true;
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <hid_task+0xd0>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
 8000644:	e00c      	b.n	8000660 <hid_task+0x8c>
		} else {
			// send empty key report if previously has key pressed
			if (has_key)
 8000646:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <hid_task+0xd0>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d005      	beq.n	800065a <hid_task+0x86>
				tud_hid_n_keyboard_report(ITF_KEYBOARD, 0, 0, NULL);
 800064e:	2300      	movs	r3, #0
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	2000      	movs	r0, #0
 8000656:	f004 ffcb 	bl	80055f0 <tud_hid_n_keyboard_report>
			has_key = false;
 800065a:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <hid_task+0xd0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
		}
	}

	/*------------- Mouse -------------*/
	if (tud_hid_n_ready(ITF_MOUSE)) {
 8000660:	2001      	movs	r0, #1
 8000662:	f004 fefb 	bl	800545c <tud_hid_n_ready>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d015      	beq.n	8000698 <hid_task+0xc4>
		if (btn) {
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d012      	beq.n	8000698 <hid_task+0xc4>
			int8_t const delta = 5;
 8000672:	2305      	movs	r3, #5
 8000674:	71fb      	strb	r3, [r7, #7]

			// no button, right + down, no scroll pan
			tud_hid_n_mouse_report(ITF_MOUSE, 0, 0x00, delta, delta, 0, 0);
 8000676:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800067a:	2300      	movs	r3, #0
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	2300      	movs	r3, #0
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4613      	mov	r3, r2
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2001      	movs	r0, #1
 8000690:	f004 ffdb 	bl	800564a <tud_hid_n_mouse_report>
 8000694:	e000      	b.n	8000698 <hid_task+0xc4>
		return; // not enough time
 8000696:	bf00      	nop
		}
	}
}
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200003a4 	.word	0x200003a4
 80006a4:	200003a8 	.word	0x200003a8

080006a8 <tud_hid_get_report_cb>:

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t itf, uint8_t report_id,
		hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4603      	mov	r3, r0
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	460b      	mov	r3, r1
 80006b6:	71bb      	strb	r3, [r7, #6]
 80006b8:	4613      	mov	r3, r2
 80006ba:	717b      	strb	r3, [r7, #5]
	(void) report_id;
	(void) report_type;
	(void) buffer;
	(void) reqlen;

	return 0;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t itf, uint8_t report_id,
		hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	460b      	mov	r3, r1
 80006d6:	71bb      	strb	r3, [r7, #6]
 80006d8:	4613      	mov	r3, r2
 80006da:	717b      	strb	r3, [r7, #5]
	(void) itf;
	(void) report_id;
	(void) report_type;
	(void) buffer;
	(void) bufsize;
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
	...

080006e8 <get_serial_id_string>:

// Convert Serial ID to String
void get_serial_id_string(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af02      	add	r7, sp, #8
	unsigned int id1 = HAL_GetUIDw0();
 80006ee:	f000 fa83 	bl	8000bf8 <HAL_GetUIDw0>
 80006f2:	60f8      	str	r0, [r7, #12]
	unsigned int id2 = HAL_GetUIDw1();
 80006f4:	f000 fa8a 	bl	8000c0c <HAL_GetUIDw1>
 80006f8:	60b8      	str	r0, [r7, #8]
	unsigned int id3 = HAL_GetUIDw2();
 80006fa:	f000 fa91 	bl	8000c20 <HAL_GetUIDw2>
 80006fe:	6078      	str	r0, [r7, #4]

	// Format: XXXXXXXXYYYYYYYYZZZZZZZZ (Hex format)
	snprintf(serial_str, sizeof(serial_str), "%08X%08X%08X\n", id1, id2, id3);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4a04      	ldr	r2, [pc, #16]	@ (800071c <get_serial_id_string+0x34>)
 800070c:	211a      	movs	r1, #26
 800070e:	4804      	ldr	r0, [pc, #16]	@ (8000720 <get_serial_id_string+0x38>)
 8000710:	f00b f808 	bl	800b724 <sniprintf>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	0800c848 	.word	0x0800c848
 8000720:	20000388 	.word	0x20000388

08000724 <led_blinking_task>:

//--------------------------------------------------------------------+
// BLINKING TASK
//--------------------------------------------------------------------+
void led_blinking_task(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	static uint32_t start_ms = 0;
//  static bool led_state = false;

	// Blink every interval ms
	if (HAL_GetTick() - start_ms < blink_interval_ms)
 8000728:	f000 fa5c 	bl	8000be4 <HAL_GetTick>
 800072c:	4602      	mov	r2, r0
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <led_blinking_task+0x34>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	1ad2      	subs	r2, r2, r3
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <led_blinking_task+0x38>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d30b      	bcc.n	8000754 <led_blinking_task+0x30>
		return; // not enough time
	start_ms += blink_interval_ms;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <led_blinking_task+0x34>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <led_blinking_task+0x38>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4413      	add	r3, r2
 8000746:	4a04      	ldr	r2, [pc, #16]	@ (8000758 <led_blinking_task+0x34>)
 8000748:	6013      	str	r3, [r2, #0]

//  board_led_write(led_state);
	LL_GPIO_TogglePin(userLED_GPIO_Port, userLED_Pin);
 800074a:	4905      	ldr	r1, [pc, #20]	@ (8000760 <led_blinking_task+0x3c>)
 800074c:	4805      	ldr	r0, [pc, #20]	@ (8000764 <led_blinking_task+0x40>)
 800074e:	f7ff fd3a 	bl	80001c6 <LL_GPIO_TogglePin>
 8000752:	e000      	b.n	8000756 <led_blinking_task+0x32>
		return; // not enough time
 8000754:	bf00      	nop
//  led_state = 1 - led_state; // toggle
}
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200003ac 	.word	0x200003ac
 800075c:	20000000 	.word	0x20000000
 8000760:	04200020 	.word	0x04200020
 8000764:	40011000 	.word	0x40011000

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <HAL_MspInit+0x5c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	4a14      	ldr	r2, [pc, #80]	@ (80007d0 <HAL_MspInit+0x5c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6193      	str	r3, [r2, #24]
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <HAL_MspInit+0x5c>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <HAL_MspInit+0x5c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a0e      	ldr	r2, [pc, #56]	@ (80007d0 <HAL_MspInit+0x5c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <HAL_MspInit+0x5c>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007aa:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <HAL_MspInit+0x60>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <HAL_MspInit+0x60>)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010000 	.word	0x40010000

080007d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a11      	ldr	r2, [pc, #68]	@ (800082c <HAL_PCD_MspInit+0x54>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d11b      	bne.n	8000822 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <HAL_PCD_MspInit+0x58>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a10      	ldr	r2, [pc, #64]	@ (8000830 <HAL_PCD_MspInit+0x58>)
 80007f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <HAL_PCD_MspInit+0x58>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2013      	movs	r0, #19
 8000808:	f000 faeb 	bl	8000de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800080c:	2013      	movs	r0, #19
 800080e:	f000 fb04 	bl	8000e1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2014      	movs	r0, #20
 8000818:	f000 fae3 	bl	8000de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800081c:	2014      	movs	r0, #20
 800081e:	f000 fafc 	bl	8000e1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40005c00 	.word	0x40005c00
 8000830:	40021000 	.word	0x40021000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <NMI_Handler+0x4>

0800083c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <MemManage_Handler+0x4>

0800084c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <UsageFault_Handler+0x4>

0800085c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000884:	f000 f99c 	bl	8000bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */
	tud_int_handler(BOARD_TUD_RHPORT);
 8000890:	2000      	movs	r0, #0
 8000892:	f008 ff33 	bl	80096fc <dcd_int_handler>
  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000896:	4802      	ldr	r0, [pc, #8]	@ (80008a0 <USB_HP_CAN1_TX_IRQHandler+0x14>)
 8000898:	f000 fbcf 	bl	800103a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000b0 	.word	0x200000b0

080008a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	tud_int_handler(BOARD_TUD_RHPORT);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f008 ff27 	bl	80096fc <dcd_int_handler>
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008ae:	4802      	ldr	r0, [pc, #8]	@ (80008b8 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 80008b0:	f000 fbc3 	bl	800103a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000b0 	.word	0x200000b0

080008bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	e00a      	b.n	80008e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ce:	f3af 8000 	nop.w
 80008d2:	4601      	mov	r1, r0
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	60ba      	str	r2, [r7, #8]
 80008da:	b2ca      	uxtb	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3301      	adds	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dbf0      	blt.n	80008ce <_read+0x12>
  }

  return len;
 80008ec:	687b      	ldr	r3, [r7, #4]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800091c:	605a      	str	r2, [r3, #4]
  return 0;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <_isatty>:

int _isatty(int file)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800093e:	b480      	push	{r7}
 8000940:	b085      	sub	sp, #20
 8000942:	af00      	add	r7, sp, #0
 8000944:	60f8      	str	r0, [r7, #12]
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
	...

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	@ (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f00b f826 	bl	800b9d8 <__errno>
 800098c:	4603      	mov	r3, r0
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <_sbrk+0x64>)
 80009a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20005000 	.word	0x20005000
 80009b8:	00000400 	.word	0x00000400
 80009bc:	200003b0 	.word	0x200003b0
 80009c0:	200009c0 	.word	0x200009c0

080009c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 80009d4:	4b02      	ldr	r3, [pc, #8]	@ (80009e0 <tud_descriptor_device_cb+0x10>)
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	0800ceb0 	.word	0x0800ceb0

080009e4 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t itf)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  if (itf == 0)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <tud_hid_descriptor_report_cb+0x14>
  {
    return desc_hid_report1;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <tud_hid_descriptor_report_cb+0x2c>)
 80009f6:	e005      	b.n	8000a04 <tud_hid_descriptor_report_cb+0x20>
  }
  else if (itf == 1)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d101      	bne.n	8000a02 <tud_hid_descriptor_report_cb+0x1e>
  {
    return desc_hid_report2;
 80009fe:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <tud_hid_descriptor_report_cb+0x30>)
 8000a00:	e000      	b.n	8000a04 <tud_hid_descriptor_report_cb+0x20>
  }

  return NULL;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	0800cec4 	.word	0x0800cec4
 8000a14:	0800cef4 	.word	0x0800cef4

08000a18 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_fs_configuration;
 8000a22:	4b03      	ldr	r3, [pc, #12]	@ (8000a30 <tud_descriptor_configuration_cb+0x18>)
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	0800cf44 	.word	0x0800cf44

08000a34 <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	4613      	mov	r3, r2
 8000a42:	80bb      	strh	r3, [r7, #4]
  (void) langid;
  size_t chr_count;

  switch ( index ) {
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <tud_descriptor_string_cb+0x1c>
 8000a4a:	2b03      	cmp	r3, #3
 8000a4c:	d009      	beq.n	8000a62 <tud_descriptor_string_cb+0x2e>
 8000a4e:	e00b      	b.n	8000a68 <tud_descriptor_string_cb+0x34>
    case STRID_LANGID:
      memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8000a50:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <tud_descriptor_string_cb+0xac>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <tud_descriptor_string_cb+0xb0>)
 8000a5a:	805a      	strh	r2, [r3, #2]
      chr_count = 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
      break;
 8000a60:	e02d      	b.n	8000abe <tud_descriptor_string_cb+0x8a>

    case STRID_SERIAL:
//      chr_count = board_usb_get_serial(_desc_str + 1, 32);
      chr_count = sizeof(serial_str);
 8000a62:	2319      	movs	r3, #25
 8000a64:	617b      	str	r3, [r7, #20]
      break;
 8000a66:	e02a      	b.n	8000abe <tud_descriptor_string_cb+0x8a>

    default:
      // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
      // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

      if ( !(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])) ) return NULL;
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b05      	cmp	r3, #5
 8000a6c:	d901      	bls.n	8000a72 <tud_descriptor_string_cb+0x3e>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e031      	b.n	8000ad6 <tud_descriptor_string_cb+0xa2>

      const char *str = string_desc_arr[index];
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4a1a      	ldr	r2, [pc, #104]	@ (8000ae0 <tud_descriptor_string_cb+0xac>)
 8000a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7a:	60fb      	str	r3, [r7, #12]
//      board_get_unique_id

      // Cap at max char
      chr_count = strlen(str);
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f7ff fb65 	bl	800014c <strlen>
 8000a82:	6178      	str	r0, [r7, #20]
      size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 8000a84:	2320      	movs	r3, #32
 8000a86:	60bb      	str	r3, [r7, #8]
      if ( chr_count > max_count ) chr_count = max_count;
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d901      	bls.n	8000a94 <tud_descriptor_string_cb+0x60>
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	617b      	str	r3, [r7, #20]

      // Convert ASCII string into UTF-16
      for ( size_t i = 0; i < chr_count; i++ ) {
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	e00c      	b.n	8000ab4 <tud_descriptor_string_cb+0x80>
        _desc_str[1 + i] = str[i];
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <tud_descriptor_string_cb+0xb0>)
 8000aaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for ( size_t i = 0; i < chr_count; i++ ) {
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d3ee      	bcc.n	8000a9a <tud_descriptor_string_cb+0x66>
      }
      break;
 8000abc:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <tud_descriptor_string_cb+0xb0>)
 8000ad2:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <tud_descriptor_string_cb+0xb0>)
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	200003b4 	.word	0x200003b4

08000ae8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae8:	f7ff ff6c 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aee:	490c      	ldr	r1, [pc, #48]	@ (8000b20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000af0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b04:	4c09      	ldr	r4, [pc, #36]	@ (8000b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f00a ff67 	bl	800b9e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b16:	f7ff fba7 	bl	8000268 <main>
  bx lr
 8000b1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000b24:	0800d350 	.word	0x0800d350
  ldr r2, =_sbss
 8000b28:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000b2c:	200009c0 	.word	0x200009c0

08000b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC1_2_IRQHandler>
	...

08000b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <HAL_Init+0x28>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <HAL_Init+0x28>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f941 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f000 f808 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff fe10 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40022000 	.word	0x40022000

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_InitTick+0x54>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_InitTick+0x58>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f959 	bl	8000e36 <HAL_SYSTICK_Config>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00e      	b.n	8000bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d80a      	bhi.n	8000baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f000 f921 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba0:	4a06      	ldr	r2, [pc, #24]	@ (8000bbc <HAL_InitTick+0x5c>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000004 	.word	0x20000004
 8000bb8:	20000024 	.word	0x20000024
 8000bbc:	20000020 	.word	0x20000020

08000bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <HAL_IncTick+0x1c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <HAL_IncTick+0x20>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a03      	ldr	r2, [pc, #12]	@ (8000be0 <HAL_IncTick+0x20>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	20000024 	.word	0x20000024
 8000be0:	200003f8 	.word	0x200003f8

08000be4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b02      	ldr	r3, [pc, #8]	@ (8000bf4 <HAL_GetTick+0x10>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	200003f8 	.word	0x200003f8

08000bf8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8000bfc:	4b02      	ldr	r3, [pc, #8]	@ (8000c08 <HAL_GetUIDw0+0x10>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	1ffff7e8 	.word	0x1ffff7e8

08000c0c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000c10:	4b02      	ldr	r3, [pc, #8]	@ (8000c1c <HAL_GetUIDw1+0x10>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	1ffff7ec 	.word	0x1ffff7ec

08000c20 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000c24:	4b02      	ldr	r3, [pc, #8]	@ (8000c30 <HAL_GetUIDw2+0x10>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	1ffff7f0 	.word	0x1ffff7f0

08000c34 <__NVIC_SetPriorityGrouping>:
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4906      	ldr	r1, [pc, #24]	@ (8000ccc <__NVIC_EnableIRQ+0x34>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	@ (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	@ (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	@ 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	@ 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Config>:
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f7ff ff90 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff2d 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff42 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff90 	bl	8000d24 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5f 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff35 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffa2 	bl	8000d88 <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e0e8      	b.n	8001032 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d106      	bne.n	8000e7a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff fcaf 	bl	80007d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 f900 	bl	8003092 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e9c:	f002 f8ec 	bl	8003078 <USB_CoreInit>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d005      	beq.n	8000eb2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e0bf      	b.n	8001032 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 f904 	bl	80030c6 <USB_SetCurrentMode>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d005      	beq.n	8000ed0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e0b0      	b.n	8001032 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e03e      	b.n	8000f54 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3311      	adds	r3, #17
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3310      	adds	r3, #16
 8000efa:	7bfa      	ldrb	r2, [r7, #15]
 8000efc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3313      	adds	r3, #19
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f12:	7bfa      	ldrb	r2, [r7, #15]
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	440b      	add	r3, r1
 8000f20:	3320      	adds	r3, #32
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	440b      	add	r3, r1
 8000f34:	3324      	adds	r3, #36	@ 0x24
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	440b      	add	r3, r1
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	3301      	adds	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	791b      	ldrb	r3, [r3, #4]
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d3bb      	bcc.n	8000ed6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e044      	b.n	8000fee <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	440b      	add	r3, r1
 8000f88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	440b      	add	r3, r1
 8000f9e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	440b      	add	r3, r1
 8000fca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	440b      	add	r3, r1
 8000fe0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	3301      	adds	r3, #1
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	791b      	ldrb	r3, [r3, #4]
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d3b5      	bcc.n	8000f64 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3304      	adds	r3, #4
 8001000:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001002:	f002 f86c 	bl	80030de <USB_DevInit>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2202      	movs	r2, #2
 8001010:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e00c      	b.n	8001032 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f003 fc38 	bl	80048a0 <USB_DevDisconnect>

  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b088      	sub	sp, #32
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f003 fc34 	bl	80048b4 <USB_ReadInterrupts>
 800104c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f985 	bl	8001368 <PCD_EP_ISR_Handler>

    return;
 800105e:	e119      	b.n	8001294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001066:	2b00      	cmp	r3, #0
 8001068:	d013      	beq.n	8001092 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001072:	b29a      	uxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800107c:	b292      	uxth	r2, r2
 800107e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f931 	bl	80012ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001088:	2100      	movs	r1, #0
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f948 	bl	8001320 <HAL_PCD_SetAddress>

    return;
 8001090:	e100      	b.n	8001294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00c      	beq.n	80010b6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80010ae:	b292      	uxth	r2, r2
 80010b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010b4:	e0ee      	b.n	8001294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00c      	beq.n	80010da <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80010d2:	b292      	uxth	r2, r2
 80010d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010d8:	e0dc      	b.n	8001294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d027      	beq.n	8001134 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0204 	bic.w	r2, r2, #4
 80010f6:	b292      	uxth	r2, r2
 80010f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001104:	b29a      	uxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0208 	bic.w	r2, r2, #8
 800110e:	b292      	uxth	r2, r2
 8001110:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f8fa 	bl	800130e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001122:	b29a      	uxth	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800112c:	b292      	uxth	r2, r2
 800112e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001132:	e0af      	b.n	8001294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 8083 	beq.w	8001246 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001140:	2300      	movs	r3, #0
 8001142:	77fb      	strb	r3, [r7, #31]
 8001144:	e010      	b.n	8001168 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	7ffb      	ldrb	r3, [r7, #31]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	441a      	add	r2, r3
 8001152:	7ffb      	ldrb	r3, [r7, #31]
 8001154:	8812      	ldrh	r2, [r2, #0]
 8001156:	b292      	uxth	r2, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	3320      	adds	r3, #32
 800115c:	443b      	add	r3, r7
 800115e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001162:	7ffb      	ldrb	r3, [r7, #31]
 8001164:	3301      	adds	r3, #1
 8001166:	77fb      	strb	r3, [r7, #31]
 8001168:	7ffb      	ldrb	r3, [r7, #31]
 800116a:	2b07      	cmp	r3, #7
 800116c:	d9eb      	bls.n	8001146 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001176:	b29a      	uxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0201 	orr.w	r2, r2, #1
 8001180:	b292      	uxth	r2, r2
 8001182:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800118e:	b29a      	uxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0201 	bic.w	r2, r2, #1
 8001198:	b292      	uxth	r2, r2
 800119a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800119e:	bf00      	nop
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f6      	beq.n	80011a0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011c4:	b292      	uxth	r2, r2
 80011c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	77fb      	strb	r3, [r7, #31]
 80011ce:	e00f      	b.n	80011f0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80011d0:	7ffb      	ldrb	r3, [r7, #31]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	4611      	mov	r1, r2
 80011d8:	7ffa      	ldrb	r2, [r7, #31]
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	440a      	add	r2, r1
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	3320      	adds	r3, #32
 80011e2:	443b      	add	r3, r7
 80011e4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80011e8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80011ea:	7ffb      	ldrb	r3, [r7, #31]
 80011ec:	3301      	adds	r3, #1
 80011ee:	77fb      	strb	r3, [r7, #31]
 80011f0:	7ffb      	ldrb	r3, [r7, #31]
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	d9ec      	bls.n	80011d0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011fe:	b29a      	uxth	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0208 	orr.w	r2, r2, #8
 8001208:	b292      	uxth	r2, r2
 800120a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001220:	b292      	uxth	r2, r2
 8001222:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800122e:	b29a      	uxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0204 	orr.w	r2, r2, #4
 8001238:	b292      	uxth	r2, r2
 800123a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f85c 	bl	80012fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001244:	e026      	b.n	8001294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00f      	beq.n	8001270 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001262:	b292      	uxth	r2, r2
 8001264:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f835 	bl	80012d8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800126e:	e011      	b.n	8001294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00c      	beq.n	8001294 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001282:	b29a      	uxth	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800128c:	b292      	uxth	r2, r2
 800128e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001292:	bf00      	nop
  }
}
 8001294:	3720      	adds	r7, #32
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_PCD_SetAddress+0x1a>
 8001336:	2302      	movs	r3, #2
 8001338:	e012      	b.n	8001360 <HAL_PCD_SetAddress+0x40>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	78fa      	ldrb	r2, [r7, #3]
 8001346:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	78fa      	ldrb	r2, [r7, #3]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f003 fa92 	bl	800487a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	@ 0x58
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001370:	e3bb      	b.n	8001aea <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800137a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800137e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f003 030f 	and.w	r3, r3, #15
 8001388:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800138c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001390:	2b00      	cmp	r3, #0
 8001392:	f040 8175 	bne.w	8001680 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001396:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d14e      	bne.n	8001440 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80013ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013b2:	81fb      	strh	r3, [r7, #14]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3310      	adds	r3, #16
 80013ca:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4413      	add	r3, r2
 80013e0:	3302      	adds	r3, #2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80013f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013fa:	695a      	ldr	r2, [r3, #20]
 80013fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	441a      	add	r2, r3
 8001402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001404:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001406:	2100      	movs	r1, #0
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff51 	bl	80012b0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7b5b      	ldrb	r3, [r3, #13]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 8368 	beq.w	8001aea <PCD_EP_ISR_Handler+0x782>
 800141a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f040 8363 	bne.w	8001aea <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7b5b      	ldrb	r3, [r3, #13]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800142e:	b2da      	uxtb	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	735a      	strb	r2, [r3, #13]
 800143e:	e354      	b.n	8001aea <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001446:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001452:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800145a:	2b00      	cmp	r3, #0
 800145c:	d034      	beq.n	80014c8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001466:	b29b      	uxth	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4413      	add	r3, r2
 8001472:	3306      	adds	r3, #6
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	4413      	add	r3, r2
 800147c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001488:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001496:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800149a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800149c:	b29b      	uxth	r3, r3
 800149e:	f003 fa5d 	bl	800495c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80014ae:	4013      	ands	r3, r2
 80014b0:	823b      	strh	r3, [r7, #16]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	8a3a      	ldrh	r2, [r7, #16]
 80014b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014bc:	b292      	uxth	r2, r2
 80014be:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff00 	bl	80012c6 <HAL_PCD_SetupStageCallback>
 80014c6:	e310      	b.n	8001aea <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014c8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f280 830c 	bge.w	8001aea <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	b29a      	uxth	r2, r3
 80014da:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80014de:	4013      	ands	r3, r2
 80014e0:	83fb      	strh	r3, [r7, #30]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	8bfa      	ldrh	r2, [r7, #30]
 80014e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014ec:	b292      	uxth	r2, r2
 80014ee:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	461a      	mov	r2, r3
 80014fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	3306      	adds	r3, #6
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	4413      	add	r3, r2
 800150e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800151a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800151c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d019      	beq.n	8001558 <PCD_EP_ISR_Handler+0x1f0>
 8001524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d015      	beq.n	8001558 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001532:	6959      	ldr	r1, [r3, #20]
 8001534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001536:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800153a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800153c:	b29b      	uxth	r3, r3
 800153e:	f003 fa0d 	bl	800495c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	441a      	add	r2, r3
 800154c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800154e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001550:	2100      	movs	r1, #0
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fea1 	bl	800129a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001562:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 82bd 	bne.w	8001aea <PCD_EP_ISR_Handler+0x782>
 8001570:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001574:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001578:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800157c:	f000 82b5 	beq.w	8001aea <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800158e:	b29b      	uxth	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4413      	add	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	801a      	strh	r2, [r3, #0]
 80015b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80015b6:	d91d      	bls.n	80015f4 <PCD_EP_ISR_Handler+0x28c>
 80015b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	095b      	lsrs	r3, r3, #5
 80015be:	647b      	str	r3, [r7, #68]	@ 0x44
 80015c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <PCD_EP_ISR_Handler+0x26a>
 80015cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015ce:	3b01      	subs	r3, #1
 80015d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015da:	b29b      	uxth	r3, r3
 80015dc:	029b      	lsls	r3, r3, #10
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	801a      	strh	r2, [r3, #0]
 80015f2:	e026      	b.n	8001642 <PCD_EP_ISR_Handler+0x2da>
 80015f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10a      	bne.n	8001612 <PCD_EP_ISR_Handler+0x2aa>
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800160a:	b29a      	uxth	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	801a      	strh	r2, [r3, #0]
 8001610:	e017      	b.n	8001642 <PCD_EP_ISR_Handler+0x2da>
 8001612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	085b      	lsrs	r3, r3, #1
 8001618:	647b      	str	r3, [r7, #68]	@ 0x44
 800161a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <PCD_EP_ISR_Handler+0x2c4>
 8001626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001628:	3301      	adds	r3, #1
 800162a:	647b      	str	r3, [r7, #68]	@ 0x44
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	b29a      	uxth	r2, r3
 8001632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001634:	b29b      	uxth	r3, r3
 8001636:	029b      	lsls	r3, r3, #10
 8001638:	b29b      	uxth	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b29a      	uxth	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800164e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001652:	827b      	strh	r3, [r7, #18]
 8001654:	8a7b      	ldrh	r3, [r7, #18]
 8001656:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800165a:	827b      	strh	r3, [r7, #18]
 800165c:	8a7b      	ldrh	r3, [r7, #18]
 800165e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001662:	827b      	strh	r3, [r7, #18]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	8a7b      	ldrh	r3, [r7, #18]
 800166a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800166e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800167a:	b29b      	uxth	r3, r3
 800167c:	8013      	strh	r3, [r2, #0]
 800167e:	e234      	b.n	8001aea <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001694:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001698:	2b00      	cmp	r3, #0
 800169a:	f280 80fc 	bge.w	8001896 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80016b4:	4013      	ands	r3, r2
 80016b6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80016cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016d0:	b292      	uxth	r2, r2
 80016d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016d4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80016ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ec:	7b1b      	ldrb	r3, [r3, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d125      	bne.n	800173e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	3306      	adds	r3, #6
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800171a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800171e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8092 	beq.w	800184c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800172e:	6959      	ldr	r1, [r3, #20]
 8001730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001732:	88da      	ldrh	r2, [r3, #6]
 8001734:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001738:	f003 f910 	bl	800495c <USB_ReadPMA>
 800173c:	e086      	b.n	800184c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800173e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001740:	78db      	ldrb	r3, [r3, #3]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d10a      	bne.n	800175c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001746:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800174a:	461a      	mov	r2, r3
 800174c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f9d9 	bl	8001b06 <HAL_PCD_EP_DB_Receive>
 8001754:	4603      	mov	r3, r0
 8001756:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800175a:	e077      	b.n	800184c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001776:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	441a      	add	r2, r3
 8001788:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800178c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001790:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001794:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001798:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800179c:	b29b      	uxth	r3, r3
 800179e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d024      	beq.n	8001804 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4413      	add	r3, r2
 80017ce:	3302      	adds	r3, #2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80017e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d02e      	beq.n	800184c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f4:	6959      	ldr	r1, [r3, #20]
 80017f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f8:	891a      	ldrh	r2, [r3, #8]
 80017fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80017fe:	f003 f8ad 	bl	800495c <USB_ReadPMA>
 8001802:	e023      	b.n	800184c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800180c:	b29b      	uxth	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	3306      	adds	r3, #6
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	4413      	add	r3, r2
 8001822:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800182c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001830:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001834:	2b00      	cmp	r3, #0
 8001836:	d009      	beq.n	800184c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183e:	6959      	ldr	r1, [r3, #20]
 8001840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001842:	895a      	ldrh	r2, [r3, #10]
 8001844:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001848:	f003 f888 	bl	800495c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800184c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800184e:	69da      	ldr	r2, [r3, #28]
 8001850:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001854:	441a      	add	r2, r3
 8001856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001858:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800185a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001862:	441a      	add	r2, r3
 8001864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001866:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <PCD_EP_ISR_Handler+0x514>
 8001870:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d206      	bcs.n	800188a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800187c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fd09 	bl	800129a <HAL_PCD_DataOutStageCallback>
 8001888:	e005      	b.n	8001896 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001890:	4618      	mov	r0, r3
 8001892:	f001 fc41 	bl	8003118 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001896:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800189a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8123 	beq.w	8001aea <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80018a4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	3310      	adds	r3, #16
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80018ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	441a      	add	r2, r3
 80018e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80018e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80018f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f6:	78db      	ldrb	r3, [r3, #3]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	f040 80a2 	bne.w	8001a42 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80018fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001906:	7b1b      	ldrb	r3, [r3, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 8093 	beq.w	8001a34 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800190e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d046      	beq.n	80019a8 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800191a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800191c:	785b      	ldrb	r3, [r3, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d126      	bne.n	8001970 <PCD_EP_ISR_Handler+0x608>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001930:	b29b      	uxth	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	4413      	add	r3, r2
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
 800193a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	011a      	lsls	r2, r3, #4
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	4413      	add	r3, r2
 8001944:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001954:	b29a      	uxth	r2, r3
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001968:	b29a      	uxth	r2, r3
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	801a      	strh	r2, [r3, #0]
 800196e:	e061      	b.n	8001a34 <PCD_EP_ISR_Handler+0x6cc>
 8001970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001972:	785b      	ldrb	r3, [r3, #1]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d15d      	bne.n	8001a34 <PCD_EP_ISR_Handler+0x6cc>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001986:	b29b      	uxth	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800198c:	4413      	add	r3, r2
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	011a      	lsls	r2, r3, #4
 8001996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001998:	4413      	add	r3, r2
 800199a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800199e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a2:	2200      	movs	r2, #0
 80019a4:	801a      	strh	r2, [r3, #0]
 80019a6:	e045      	b.n	8001a34 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b0:	785b      	ldrb	r3, [r3, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d126      	bne.n	8001a04 <PCD_EP_ISR_Handler+0x69c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ca:	4413      	add	r3, r2
 80019cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	011a      	lsls	r2, r3, #4
 80019d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d6:	4413      	add	r3, r2
 80019d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80019dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80019de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ec:	801a      	strh	r2, [r3, #0]
 80019ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a00:	801a      	strh	r2, [r3, #0]
 8001a02:	e017      	b.n	8001a34 <PCD_EP_ISR_Handler+0x6cc>
 8001a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a06:	785b      	ldrb	r3, [r3, #1]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d113      	bne.n	8001a34 <PCD_EP_ISR_Handler+0x6cc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a1a:	4413      	add	r3, r2
 8001a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	011a      	lsls	r2, r3, #4
 8001a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a26:	4413      	add	r3, r2
 8001a28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a30:	2200      	movs	r2, #0
 8001a32:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fc38 	bl	80012b0 <HAL_PCD_DataInStageCallback>
 8001a40:	e053      	b.n	8001aea <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d146      	bne.n	8001adc <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	3302      	adds	r3, #2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a76:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d907      	bls.n	8001a96 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001a8e:	1ad2      	subs	r2, r2, r3
 8001a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a92:	619a      	str	r2, [r3, #24]
 8001a94:	e002      	b.n	8001a9c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fc00 	bl	80012b0 <HAL_PCD_DataInStageCallback>
 8001ab0:	e01b      	b.n	8001aea <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001aba:	441a      	add	r2, r3
 8001abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001abe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac2:	69da      	ldr	r2, [r3, #28]
 8001ac4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ac8:	441a      	add	r2, r3
 8001aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001acc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 fb1f 	bl	8003118 <USB_EPStartXfer>
 8001ada:	e006      	b.n	8001aea <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001adc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f91b 	bl	8001d20 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f6ff ac3b 	blt.w	8001372 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3758      	adds	r7, #88	@ 0x58
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b088      	sub	sp, #32
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	4613      	mov	r3, r2
 8001b12:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d07e      	beq.n	8001c1c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	3302      	adds	r3, #2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b46:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	8b7b      	ldrh	r3, [r7, #26]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d306      	bcc.n	8001b60 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	699a      	ldr	r2, [r3, #24]
 8001b56:	8b7b      	ldrh	r3, [r7, #26]
 8001b58:	1ad2      	subs	r2, r2, r3
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	619a      	str	r2, [r3, #24]
 8001b5e:	e002      	b.n	8001b66 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d123      	bne.n	8001bb6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b88:	833b      	strh	r3, [r7, #24]
 8001b8a:	8b3b      	ldrh	r3, [r7, #24]
 8001b8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001b90:	833b      	strh	r3, [r7, #24]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	441a      	add	r2, r3
 8001ba0:	8b3b      	ldrh	r3, [r7, #24]
 8001ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01f      	beq.n	8001c00 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bda:	82fb      	strh	r3, [r7, #22]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	441a      	add	r2, r3
 8001bea:	8afb      	ldrh	r3, [r7, #22]
 8001bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bf8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c00:	8b7b      	ldrh	r3, [r7, #26]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8087 	beq.w	8001d16 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	6959      	ldr	r1, [r3, #20]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	891a      	ldrh	r2, [r3, #8]
 8001c14:	8b7b      	ldrh	r3, [r7, #26]
 8001c16:	f002 fea1 	bl	800495c <USB_ReadPMA>
 8001c1a:	e07c      	b.n	8001d16 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	3306      	adds	r3, #6
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c44:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	8b7b      	ldrh	r3, [r7, #26]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d306      	bcc.n	8001c5e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	699a      	ldr	r2, [r3, #24]
 8001c54:	8b7b      	ldrh	r3, [r7, #26]
 8001c56:	1ad2      	subs	r2, r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	619a      	str	r2, [r3, #24]
 8001c5c:	e002      	b.n	8001c64 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d123      	bne.n	8001cb4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c86:	83fb      	strh	r3, [r7, #30]
 8001c88:	8bfb      	ldrh	r3, [r7, #30]
 8001c8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001c8e:	83fb      	strh	r3, [r7, #30]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	441a      	add	r2, r3
 8001c9e:	8bfb      	ldrh	r3, [r7, #30]
 8001ca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d11f      	bne.n	8001cfe <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001cd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cd8:	83bb      	strh	r3, [r7, #28]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	441a      	add	r2, r3
 8001ce8:	8bbb      	ldrh	r3, [r7, #28]
 8001cea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cf6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001cfe:	8b7b      	ldrh	r3, [r7, #26]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	6959      	ldr	r1, [r3, #20]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	895a      	ldrh	r2, [r3, #10]
 8001d10:	8b7b      	ldrh	r3, [r7, #26]
 8001d12:	f002 fe23 	bl	800495c <USB_ReadPMA>
    }
  }

  return count;
 8001d16:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b0a4      	sub	sp, #144	@ 0x90
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 81dd 	beq.w	80020f4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d62:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	699a      	ldr	r2, [r3, #24]
 8001d6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d907      	bls.n	8001d82 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d7a:	1ad2      	subs	r2, r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	619a      	str	r2, [r3, #24]
 8001d80:	e002      	b.n	8001d88 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 80b9 	bne.w	8001f04 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	785b      	ldrb	r3, [r3, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d126      	bne.n	8001de8 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dae:	4413      	add	r3, r2
 8001db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	011a      	lsls	r2, r3, #4
 8001db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dba:	4413      	add	r3, r2
 8001dbc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd0:	801a      	strh	r2, [r3, #0]
 8001dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de4:	801a      	strh	r2, [r3, #0]
 8001de6:	e01a      	b.n	8001e1e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	785b      	ldrb	r3, [r3, #1]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d116      	bne.n	8001e1e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e04:	4413      	add	r3, r2
 8001e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	011a      	lsls	r2, r3, #4
 8001e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e10:	4413      	add	r3, r2
 8001e12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e16:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	785b      	ldrb	r3, [r3, #1]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d126      	bne.n	8001e7a <HAL_PCD_EP_DB_Transmit+0x15a>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	4413      	add	r3, r2
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	011a      	lsls	r2, r3, #4
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e52:	61bb      	str	r3, [r7, #24]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	801a      	strh	r2, [r3, #0]
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	801a      	strh	r2, [r3, #0]
 8001e78:	e017      	b.n	8001eaa <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	785b      	ldrb	r3, [r3, #1]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d113      	bne.n	8001eaa <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	4413      	add	r3, r2
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	011a      	lsls	r2, r3, #4
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001ea2:	623b      	str	r3, [r7, #32]
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7ff f9fd 	bl	80012b0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 82fc 	beq.w	80024ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001edc:	82fb      	strh	r3, [r7, #22]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	441a      	add	r2, r3
 8001eec:	8afb      	ldrh	r3, [r7, #22]
 8001eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ef6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	8013      	strh	r3, [r2, #0]
 8001f02:	e2da      	b.n	80024ba <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d021      	beq.n	8001f52 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f28:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	441a      	add	r2, r3
 8001f3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	f040 82ae 	bne.w	80024ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f66:	441a      	add	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	69da      	ldr	r2, [r3, #28]
 8001f70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f74:	441a      	add	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	6a1a      	ldr	r2, [r3, #32]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d30b      	bcc.n	8001f9e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	6a1a      	ldr	r2, [r3, #32]
 8001f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f96:	1ad2      	subs	r2, r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	621a      	str	r2, [r3, #32]
 8001f9c:	e017      	b.n	8001fce <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d108      	bne.n	8001fb8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001fa6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001faa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001fb6:	e00a      	b.n	8001fce <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d165      	bne.n	80020a2 <HAL_PCD_EP_DB_Transmit+0x382>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fea:	4413      	add	r3, r2
 8001fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	011a      	lsls	r2, r3, #4
 8001ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002008:	b29a      	uxth	r2, r3
 800200a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800200c:	801a      	strh	r2, [r3, #0]
 800200e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002012:	2b3e      	cmp	r3, #62	@ 0x3e
 8002014:	d91d      	bls.n	8002052 <HAL_PCD_EP_DB_Transmit+0x332>
 8002016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800201e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <HAL_PCD_EP_DB_Transmit+0x310>
 800202a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800202c:	3b01      	subs	r3, #1
 800202e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29a      	uxth	r2, r3
 8002036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002038:	b29b      	uxth	r3, r3
 800203a:	029b      	lsls	r3, r3, #10
 800203c:	b29b      	uxth	r3, r3
 800203e:	4313      	orrs	r3, r2
 8002040:	b29b      	uxth	r3, r3
 8002042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800204a:	b29a      	uxth	r2, r3
 800204c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800204e:	801a      	strh	r2, [r3, #0]
 8002050:	e044      	b.n	80020dc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002052:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <HAL_PCD_EP_DB_Transmit+0x350>
 800205a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002068:	b29a      	uxth	r2, r3
 800206a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800206c:	801a      	strh	r2, [r3, #0]
 800206e:	e035      	b.n	80020dc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002078:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_PCD_EP_DB_Transmit+0x36a>
 8002084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002086:	3301      	adds	r3, #1
 8002088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800208a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	b29a      	uxth	r2, r3
 8002090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002092:	b29b      	uxth	r3, r3
 8002094:	029b      	lsls	r3, r3, #10
 8002096:	b29b      	uxth	r3, r3
 8002098:	4313      	orrs	r3, r2
 800209a:	b29a      	uxth	r2, r3
 800209c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800209e:	801a      	strh	r2, [r3, #0]
 80020a0:	e01c      	b.n	80020dc <HAL_PCD_EP_DB_Transmit+0x3bc>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	785b      	ldrb	r3, [r3, #1]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d118      	bne.n	80020dc <HAL_PCD_EP_DB_Transmit+0x3bc>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020be:	4413      	add	r3, r2
 80020c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	011a      	lsls	r2, r3, #4
 80020c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ca:	4413      	add	r3, r2
 80020cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80020d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80020d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020da:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	6959      	ldr	r1, [r3, #20]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	891a      	ldrh	r2, [r3, #8]
 80020e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f002 fbf0 	bl	80048d2 <USB_WritePMA>
 80020f2:	e1e2      	b.n	80024ba <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	3306      	adds	r3, #6
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	4413      	add	r3, r2
 8002112:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800211c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	699a      	ldr	r2, [r3, #24]
 8002124:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002128:	429a      	cmp	r2, r3
 800212a:	d307      	bcc.n	800213c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	699a      	ldr	r2, [r3, #24]
 8002130:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002134:	1ad2      	subs	r2, r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	619a      	str	r2, [r3, #24]
 800213a:	e002      	b.n	8002142 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2200      	movs	r2, #0
 8002140:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 80c0 	bne.w	80022cc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	785b      	ldrb	r3, [r3, #1]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d126      	bne.n	80021a2 <HAL_PCD_EP_DB_Transmit+0x482>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002162:	b29b      	uxth	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002168:	4413      	add	r3, r2
 800216a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	011a      	lsls	r2, r3, #4
 8002172:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002174:	4413      	add	r3, r2
 8002176:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800217a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800217c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002186:	b29a      	uxth	r2, r3
 8002188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800218a:	801a      	strh	r2, [r3, #0]
 800218c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800219a:	b29a      	uxth	r2, r3
 800219c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800219e:	801a      	strh	r2, [r3, #0]
 80021a0:	e01a      	b.n	80021d8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d116      	bne.n	80021d8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021be:	4413      	add	r3, r2
 80021c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	011a      	lsls	r2, r3, #4
 80021c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021ca:	4413      	add	r3, r2
 80021cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80021d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021d4:	2200      	movs	r2, #0
 80021d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	785b      	ldrb	r3, [r3, #1]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d12b      	bne.n	800223e <HAL_PCD_EP_DB_Transmit+0x51e>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021fa:	4413      	add	r3, r2
 80021fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	011a      	lsls	r2, r3, #4
 8002204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002206:	4413      	add	r3, r2
 8002208:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800220c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002210:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800221c:	b29a      	uxth	r2, r3
 800221e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002222:	801a      	strh	r2, [r3, #0]
 8002224:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002234:	b29a      	uxth	r2, r3
 8002236:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800223a:	801a      	strh	r2, [r3, #0]
 800223c:	e017      	b.n	800226e <HAL_PCD_EP_DB_Transmit+0x54e>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	785b      	ldrb	r3, [r3, #1]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d113      	bne.n	800226e <HAL_PCD_EP_DB_Transmit+0x54e>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002254:	4413      	add	r3, r2
 8002256:	677b      	str	r3, [r7, #116]	@ 0x74
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	011a      	lsls	r2, r3, #4
 800225e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002260:	4413      	add	r3, r2
 8002262:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002266:	673b      	str	r3, [r7, #112]	@ 0x70
 8002268:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800226a:	2200      	movs	r2, #0
 800226c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	4619      	mov	r1, r3
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff f81b 	bl	80012b0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 811a 	bne.w	80024ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800229c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022a0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	441a      	add	r2, r3
 80022b2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80022b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	8013      	strh	r3, [r2, #0]
 80022ca:	e0f6      	b.n	80024ba <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d121      	bne.n	800231a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022f0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	441a      	add	r2, r3
 8002302:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800230a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800230e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002316:	b29b      	uxth	r3, r3
 8002318:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002320:	2b01      	cmp	r3, #1
 8002322:	f040 80ca 	bne.w	80024ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800232e:	441a      	add	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800233c:	441a      	add	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	6a1a      	ldr	r2, [r3, #32]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	429a      	cmp	r2, r3
 800234c:	d30b      	bcc.n	8002366 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6a1a      	ldr	r2, [r3, #32]
 800235a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800235e:	1ad2      	subs	r2, r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	621a      	str	r2, [r3, #32]
 8002364:	e017      	b.n	8002396 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d108      	bne.n	8002380 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800236e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002372:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800237e:	e00a      	b.n	8002396 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2200      	movs	r2, #0
 800238c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	657b      	str	r3, [r7, #84]	@ 0x54
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d165      	bne.n	8002470 <HAL_PCD_EP_DB_Transmit+0x750>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023b8:	4413      	add	r3, r2
 80023ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	011a      	lsls	r2, r3, #4
 80023c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023c4:	4413      	add	r3, r2
 80023c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80023cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023da:	801a      	strh	r2, [r3, #0]
 80023dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80023e2:	d91d      	bls.n	8002420 <HAL_PCD_EP_DB_Transmit+0x700>
 80023e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <HAL_PCD_EP_DB_Transmit+0x6de>
 80023f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023fa:	3b01      	subs	r3, #1
 80023fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b29a      	uxth	r2, r3
 8002404:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002406:	b29b      	uxth	r3, r3
 8002408:	029b      	lsls	r3, r3, #10
 800240a:	b29b      	uxth	r3, r3
 800240c:	4313      	orrs	r3, r2
 800240e:	b29b      	uxth	r3, r3
 8002410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002418:	b29a      	uxth	r2, r3
 800241a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800241c:	801a      	strh	r2, [r3, #0]
 800241e:	e041      	b.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10a      	bne.n	800243e <HAL_PCD_EP_DB_Transmit+0x71e>
 8002428:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002436:	b29a      	uxth	r2, r3
 8002438:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800243a:	801a      	strh	r2, [r3, #0]
 800243c:	e032      	b.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x784>
 800243e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002442:	085b      	lsrs	r3, r3, #1
 8002444:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_PCD_EP_DB_Transmit+0x738>
 8002452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002454:	3301      	adds	r3, #1
 8002456:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002458:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29a      	uxth	r2, r3
 800245e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002460:	b29b      	uxth	r3, r3
 8002462:	029b      	lsls	r3, r3, #10
 8002464:	b29b      	uxth	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	b29a      	uxth	r2, r3
 800246a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800246c:	801a      	strh	r2, [r3, #0]
 800246e:	e019      	b.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	785b      	ldrb	r3, [r3, #1]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d115      	bne.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002480:	b29b      	uxth	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002486:	4413      	add	r3, r2
 8002488:	657b      	str	r3, [r7, #84]	@ 0x54
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	011a      	lsls	r2, r3, #4
 8002490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002492:	4413      	add	r3, r2
 8002494:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002498:	653b      	str	r3, [r7, #80]	@ 0x50
 800249a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800249e:	b29a      	uxth	r2, r3
 80024a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024a2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6959      	ldr	r1, [r3, #20]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	895a      	ldrh	r2, [r3, #10]
 80024b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f002 fa0c 	bl	80048d2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024d4:	82bb      	strh	r3, [r7, #20]
 80024d6:	8abb      	ldrh	r3, [r7, #20]
 80024d8:	f083 0310 	eor.w	r3, r3, #16
 80024dc:	82bb      	strh	r3, [r7, #20]
 80024de:	8abb      	ldrh	r3, [r7, #20]
 80024e0:	f083 0320 	eor.w	r3, r3, #32
 80024e4:	82bb      	strh	r3, [r7, #20]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	441a      	add	r2, r3
 80024f4:	8abb      	ldrh	r3, [r7, #20]
 80024f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002506:	b29b      	uxth	r3, r3
 8002508:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3790      	adds	r7, #144	@ 0x90
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e272      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8087 	beq.w	8002642 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002534:	4b92      	ldr	r3, [pc, #584]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	2b04      	cmp	r3, #4
 800253e:	d00c      	beq.n	800255a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002540:	4b8f      	ldr	r3, [pc, #572]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b08      	cmp	r3, #8
 800254a:	d112      	bne.n	8002572 <HAL_RCC_OscConfig+0x5e>
 800254c:	4b8c      	ldr	r3, [pc, #560]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002558:	d10b      	bne.n	8002572 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255a:	4b89      	ldr	r3, [pc, #548]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d06c      	beq.n	8002640 <HAL_RCC_OscConfig+0x12c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d168      	bne.n	8002640 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e24c      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x76>
 800257c:	4b80      	ldr	r3, [pc, #512]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a7f      	ldr	r2, [pc, #508]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 8002582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	e02e      	b.n	80025e8 <HAL_RCC_OscConfig+0xd4>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0x98>
 8002592:	4b7b      	ldr	r3, [pc, #492]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a7a      	ldr	r2, [pc, #488]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 8002598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b78      	ldr	r3, [pc, #480]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a77      	ldr	r2, [pc, #476]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e01d      	b.n	80025e8 <HAL_RCC_OscConfig+0xd4>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0xbc>
 80025b6:	4b72      	ldr	r3, [pc, #456]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a71      	ldr	r2, [pc, #452]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e00b      	b.n	80025e8 <HAL_RCC_OscConfig+0xd4>
 80025d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b68      	ldr	r3, [pc, #416]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a67      	ldr	r2, [pc, #412]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe faf8 	bl	8000be4 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7fe faf4 	bl	8000be4 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	@ 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e200      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	4b5d      	ldr	r3, [pc, #372]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0xe4>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe fae4 	bl	8000be4 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002620:	f7fe fae0 	bl	8000be4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	@ 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e1ec      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	4b53      	ldr	r3, [pc, #332]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x10c>
 800263e:	e000      	b.n	8002642 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d063      	beq.n	8002716 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800264e:	4b4c      	ldr	r3, [pc, #304]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800265a:	4b49      	ldr	r3, [pc, #292]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b08      	cmp	r3, #8
 8002664:	d11c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x18c>
 8002666:	4b46      	ldr	r3, [pc, #280]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d116      	bne.n	80026a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	4b43      	ldr	r3, [pc, #268]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_RCC_OscConfig+0x176>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d001      	beq.n	800268a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e1c0      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268a:	4b3d      	ldr	r3, [pc, #244]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4939      	ldr	r1, [pc, #228]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	e03a      	b.n	8002716 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d020      	beq.n	80026ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a8:	4b36      	ldr	r3, [pc, #216]	@ (8002784 <HAL_RCC_OscConfig+0x270>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe fa99 	bl	8000be4 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b6:	f7fe fa95 	bl	8000be4 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e1a1      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4927      	ldr	r1, [pc, #156]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]
 80026e8:	e015      	b.n	8002716 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ea:	4b26      	ldr	r3, [pc, #152]	@ (8002784 <HAL_RCC_OscConfig+0x270>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe fa78 	bl	8000be4 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f8:	f7fe fa74 	bl	8000be4 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e180      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d03a      	beq.n	8002798 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d019      	beq.n	800275e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272a:	4b17      	ldr	r3, [pc, #92]	@ (8002788 <HAL_RCC_OscConfig+0x274>)
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002730:	f7fe fa58 	bl	8000be4 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002738:	f7fe fa54 	bl	8000be4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e160      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274a:	4b0d      	ldr	r3, [pc, #52]	@ (8002780 <HAL_RCC_OscConfig+0x26c>)
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002756:	2001      	movs	r0, #1
 8002758:	f000 fa9c 	bl	8002c94 <RCC_Delay>
 800275c:	e01c      	b.n	8002798 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275e:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <HAL_RCC_OscConfig+0x274>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7fe fa3e 	bl	8000be4 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276a:	e00f      	b.n	800278c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276c:	f7fe fa3a 	bl	8000be4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d908      	bls.n	800278c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e146      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	42420000 	.word	0x42420000
 8002788:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278c:	4b92      	ldr	r3, [pc, #584]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e9      	bne.n	800276c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80a6 	beq.w	80028f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a6:	2300      	movs	r3, #0
 80027a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027aa:	4b8b      	ldr	r3, [pc, #556]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10d      	bne.n	80027d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	4b88      	ldr	r3, [pc, #544]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a87      	ldr	r2, [pc, #540]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c0:	61d3      	str	r3, [r2, #28]
 80027c2:	4b85      	ldr	r3, [pc, #532]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ce:	2301      	movs	r3, #1
 80027d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	4b82      	ldr	r3, [pc, #520]	@ (80029dc <HAL_RCC_OscConfig+0x4c8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d118      	bne.n	8002810 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027de:	4b7f      	ldr	r3, [pc, #508]	@ (80029dc <HAL_RCC_OscConfig+0x4c8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a7e      	ldr	r2, [pc, #504]	@ (80029dc <HAL_RCC_OscConfig+0x4c8>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ea:	f7fe f9fb 	bl	8000be4 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f2:	f7fe f9f7 	bl	8000be4 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b64      	cmp	r3, #100	@ 0x64
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e103      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4b75      	ldr	r3, [pc, #468]	@ (80029dc <HAL_RCC_OscConfig+0x4c8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x312>
 8002818:	4b6f      	ldr	r3, [pc, #444]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4a6e      	ldr	r2, [pc, #440]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6213      	str	r3, [r2, #32]
 8002824:	e02d      	b.n	8002882 <HAL_RCC_OscConfig+0x36e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x334>
 800282e:	4b6a      	ldr	r3, [pc, #424]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4a69      	ldr	r2, [pc, #420]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6213      	str	r3, [r2, #32]
 800283a:	4b67      	ldr	r3, [pc, #412]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	4a66      	ldr	r2, [pc, #408]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	f023 0304 	bic.w	r3, r3, #4
 8002844:	6213      	str	r3, [r2, #32]
 8002846:	e01c      	b.n	8002882 <HAL_RCC_OscConfig+0x36e>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b05      	cmp	r3, #5
 800284e:	d10c      	bne.n	800286a <HAL_RCC_OscConfig+0x356>
 8002850:	4b61      	ldr	r3, [pc, #388]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4a60      	ldr	r2, [pc, #384]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	f043 0304 	orr.w	r3, r3, #4
 800285a:	6213      	str	r3, [r2, #32]
 800285c:	4b5e      	ldr	r3, [pc, #376]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4a5d      	ldr	r2, [pc, #372]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6213      	str	r3, [r2, #32]
 8002868:	e00b      	b.n	8002882 <HAL_RCC_OscConfig+0x36e>
 800286a:	4b5b      	ldr	r3, [pc, #364]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4a5a      	ldr	r2, [pc, #360]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	6213      	str	r3, [r2, #32]
 8002876:	4b58      	ldr	r3, [pc, #352]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4a57      	ldr	r2, [pc, #348]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	f023 0304 	bic.w	r3, r3, #4
 8002880:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d015      	beq.n	80028b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288a:	f7fe f9ab 	bl	8000be4 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002892:	f7fe f9a7 	bl	8000be4 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e0b1      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a8:	4b4b      	ldr	r3, [pc, #300]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0ee      	beq.n	8002892 <HAL_RCC_OscConfig+0x37e>
 80028b4:	e014      	b.n	80028e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b6:	f7fe f995 	bl	8000be4 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028bc:	e00a      	b.n	80028d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7fe f991 	bl	8000be4 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e09b      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d4:	4b40      	ldr	r3, [pc, #256]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ee      	bne.n	80028be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d105      	bne.n	80028f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e6:	4b3c      	ldr	r3, [pc, #240]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4a3b      	ldr	r2, [pc, #236]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8087 	beq.w	8002a0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028fc:	4b36      	ldr	r3, [pc, #216]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b08      	cmp	r3, #8
 8002906:	d061      	beq.n	80029cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d146      	bne.n	800299e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002910:	4b33      	ldr	r3, [pc, #204]	@ (80029e0 <HAL_RCC_OscConfig+0x4cc>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7fe f965 	bl	8000be4 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291e:	f7fe f961 	bl	8000be4 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e06d      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002930:	4b29      	ldr	r3, [pc, #164]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f0      	bne.n	800291e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002944:	d108      	bne.n	8002958 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002946:	4b24      	ldr	r3, [pc, #144]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	4921      	ldr	r1, [pc, #132]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002958:	4b1f      	ldr	r3, [pc, #124]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a19      	ldr	r1, [r3, #32]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	430b      	orrs	r3, r1
 800296a:	491b      	ldr	r1, [pc, #108]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <HAL_RCC_OscConfig+0x4cc>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7fe f935 	bl	8000be4 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297e:	f7fe f931 	bl	8000be4 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e03d      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002990:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x46a>
 800299c:	e035      	b.n	8002a0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	4b10      	ldr	r3, [pc, #64]	@ (80029e0 <HAL_RCC_OscConfig+0x4cc>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe f91e 	bl	8000be4 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe f91a 	bl	8000be4 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e026      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029be:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x498>
 80029ca:	e01e      	b.n	8002a0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e019      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40007000 	.word	0x40007000
 80029e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <HAL_RCC_OscConfig+0x500>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d106      	bne.n	8002a06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000

08002a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0d0      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d910      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b67      	ldr	r3, [pc, #412]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 0207 	bic.w	r2, r3, #7
 8002a42:	4965      	ldr	r1, [pc, #404]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b63      	ldr	r3, [pc, #396]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0b8      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d020      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a74:	4b59      	ldr	r3, [pc, #356]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a58      	ldr	r2, [pc, #352]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a8c:	4b53      	ldr	r3, [pc, #332]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a52      	ldr	r2, [pc, #328]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a98:	4b50      	ldr	r3, [pc, #320]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	494d      	ldr	r1, [pc, #308]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d040      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b47      	ldr	r3, [pc, #284]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d115      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e07f      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b41      	ldr	r3, [pc, #260]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e073      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b39      	ldr	r3, [pc, #228]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4936      	ldr	r1, [pc, #216]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b08:	f7fe f86c 	bl	8000be4 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7fe f868 	bl	8000be4 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e053      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b2d      	ldr	r3, [pc, #180]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b27      	ldr	r3, [pc, #156]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d210      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b24      	ldr	r3, [pc, #144]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	4922      	ldr	r1, [pc, #136]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b20      	ldr	r3, [pc, #128]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e032      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b74:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4916      	ldr	r1, [pc, #88]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b92:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	490e      	ldr	r1, [pc, #56]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ba6:	f000 f821 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	490a      	ldr	r1, [pc, #40]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	5ccb      	ldrb	r3, [r1, r3]
 8002bba:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbe:	4a09      	ldr	r2, [pc, #36]	@ (8002be4 <HAL_RCC_ClockConfig+0x1cc>)
 8002bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <HAL_RCC_ClockConfig+0x1d0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd ffca 	bl	8000b60 <HAL_InitTick>

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40022000 	.word	0x40022000
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	0800cea0 	.word	0x0800cea0
 8002be4:	20000004 	.word	0x20000004
 8002be8:	20000020 	.word	0x20000020

08002bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c06:	4b1e      	ldr	r3, [pc, #120]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d002      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x30>
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x36>
 8002c1a:	e027      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c1c:	4b19      	ldr	r3, [pc, #100]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c1e:	613b      	str	r3, [r7, #16]
      break;
 8002c20:	e027      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	0c9b      	lsrs	r3, r3, #18
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	4a17      	ldr	r2, [pc, #92]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c2c:	5cd3      	ldrb	r3, [r2, r3]
 8002c2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c3a:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	0c5b      	lsrs	r3, r3, #17
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	4a11      	ldr	r2, [pc, #68]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c4e:	fb03 f202 	mul.w	r2, r3, r2
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e004      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	613b      	str	r3, [r7, #16]
      break;
 8002c6a:	e002      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c6e:	613b      	str	r3, [r7, #16]
      break;
 8002c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c72:	693b      	ldr	r3, [r7, #16]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	007a1200 	.word	0x007a1200
 8002c88:	0800cfac 	.word	0x0800cfac
 8002c8c:	0800cfbc 	.word	0x0800cfbc
 8002c90:	003d0900 	.word	0x003d0900

08002c94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <RCC_Delay+0x34>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <RCC_Delay+0x38>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	0a5b      	lsrs	r3, r3, #9
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cb0:	bf00      	nop
  }
  while (Delay --);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1e5a      	subs	r2, r3, #1
 8002cb6:	60fa      	str	r2, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f9      	bne.n	8002cb0 <RCC_Delay+0x1c>
}
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr
 8002cc8:	20000004 	.word	0x20000004
 8002ccc:	10624dd3 	.word	0x10624dd3

08002cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d07d      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cec:	2300      	movs	r3, #0
 8002cee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf0:	4b4f      	ldr	r3, [pc, #316]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10d      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	4b4c      	ldr	r3, [pc, #304]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	4a4b      	ldr	r2, [pc, #300]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	61d3      	str	r3, [r2, #28]
 8002d08:	4b49      	ldr	r3, [pc, #292]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d14:	2301      	movs	r3, #1
 8002d16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b46      	ldr	r3, [pc, #280]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d118      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d24:	4b43      	ldr	r3, [pc, #268]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a42      	ldr	r2, [pc, #264]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d30:	f7fd ff58 	bl	8000be4 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	e008      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d38:	f7fd ff54 	bl	8000be4 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	@ 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e06d      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d56:	4b36      	ldr	r3, [pc, #216]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d02e      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d027      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d74:	4b2e      	ldr	r3, [pc, #184]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d84:	4b2c      	ldr	r3, [pc, #176]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d8a:	4a29      	ldr	r2, [pc, #164]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d014      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7fd ff23 	bl	8000be4 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fd ff1f 	bl	8000be4 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e036      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ee      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4917      	ldr	r1, [pc, #92]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d105      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ddc:	4b14      	ldr	r3, [pc, #80]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	4a13      	ldr	r2, [pc, #76]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002df4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	490b      	ldr	r1, [pc, #44]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e12:	4b07      	ldr	r3, [pc, #28]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	4904      	ldr	r1, [pc, #16]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40007000 	.word	0x40007000
 8002e38:	42420440 	.word	0x42420440

08002e3c <LL_GPIO_SetPinMode>:
{
 8002e3c:	b490      	push	{r4, r7}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	0e1b      	lsrs	r3, r3, #24
 8002e50:	4413      	add	r3, r2
 8002e52:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002e54:	6822      	ldr	r2, [r4, #0]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	fab3 f383 	clz	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	210f      	movs	r1, #15
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	401a      	ands	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	61bb      	str	r3, [r7, #24]
  return result;
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	4313      	orrs	r3, r2
 8002e94:	6023      	str	r3, [r4, #0]
}
 8002e96:	bf00      	nop
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc90      	pop	{r4, r7}
 8002e9e:	4770      	bx	lr

08002ea0 <LL_GPIO_SetPinSpeed>:
{
 8002ea0:	b490      	push	{r4, r7}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	0e1b      	lsrs	r3, r3, #24
 8002eb4:	4413      	add	r3, r2
 8002eb6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002eb8:	6822      	ldr	r2, [r4, #0]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	613b      	str	r3, [r7, #16]
  return result;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	2103      	movs	r1, #3
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	401a      	ands	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	61bb      	str	r3, [r7, #24]
  return result;
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	6023      	str	r3, [r4, #0]
}
 8002efa:	bf00      	nop
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc90      	pop	{r4, r7}
 8002f02:	4770      	bx	lr

08002f04 <LL_GPIO_SetPinOutputType>:
{
 8002f04:	b490      	push	{r4, r7}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	461a      	mov	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	0e1b      	lsrs	r3, r3, #24
 8002f18:	4413      	add	r3, r2
 8002f1a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	613b      	str	r3, [r7, #16]
  return result;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	2104      	movs	r1, #4
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	401a      	ands	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	61bb      	str	r3, [r7, #24]
  return result;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	6023      	str	r3, [r4, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc90      	pop	{r4, r7}
 8002f66:	4770      	bx	lr

08002f68 <LL_GPIO_SetPinPull>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	401a      	ands	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	613b      	str	r3, [r7, #16]
  return result;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	4619      	mov	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	408b      	lsls	r3, r1
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	60da      	str	r2, [r3, #12]
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	60fb      	str	r3, [r7, #12]
  return result;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002fd6:	e044      	b.n	8003062 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d03a      	beq.n	800305c <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	2b07      	cmp	r3, #7
 8002fea:	d806      	bhi.n	8002ffa <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002fec:	f240 1201 	movw	r2, #257	@ 0x101
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	e008      	b.n	800300c <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3b08      	subs	r3, #8
 8002ffe:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800300a:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d106      	bne.n	8003022 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	461a      	mov	r2, r3
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ffa3 	bl	8002f68 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	461a      	mov	r2, r3
 8003028:	69b9      	ldr	r1, [r7, #24]
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ff06 	bl	8002e3c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d003      	beq.n	8003040 <LL_GPIO_Init+0x94>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b09      	cmp	r3, #9
 800303e:	d10d      	bne.n	800305c <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	461a      	mov	r2, r3
 8003046:	69b9      	ldr	r1, [r7, #24]
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ff29 	bl	8002ea0 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	461a      	mov	r2, r3
 8003054:	69b9      	ldr	r1, [r7, #24]
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ff54 	bl	8002f04 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	3301      	adds	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	fa22 f303 	lsr.w	r3, r2, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1b4      	bne.n	8002fd8 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3720      	adds	r7, #32
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	4638      	mov	r0, r7
 8003082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800309a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800309e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	4013      	ands	r3, r2
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	4638      	mov	r0, r7
 80030e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b0c2      	sub	sp, #264	@ 0x108
 800311c:	af00      	add	r7, sp, #0
 800311e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003122:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003126:	6018      	str	r0, [r3, #0]
 8003128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800312c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003130:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	2b01      	cmp	r3, #1
 8003140:	f040 86b7 	bne.w	8003eb2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	429a      	cmp	r2, r3
 800315e:	d908      	bls.n	8003172 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003170:	e007      	b.n	8003182 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	7b1b      	ldrb	r3, [r3, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d13a      	bne.n	8003208 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6959      	ldr	r1, [r3, #20]
 800319e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	88da      	ldrh	r2, [r3, #6]
 80031aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80031b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80031b8:	6800      	ldr	r0, [r0, #0]
 80031ba:	f001 fb8a 	bl	80048d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80031be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031d8:	b29b      	uxth	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4413      	add	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	011a      	lsls	r2, r3, #4
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4413      	add	r3, r2
 80031f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	801a      	strh	r2, [r3, #0]
 8003204:	f000 be1f 	b.w	8003e46 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800320c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	78db      	ldrb	r3, [r3, #3]
 8003214:	2b02      	cmp	r3, #2
 8003216:	f040 8462 	bne.w	8003ade <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800321a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800321e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a1a      	ldr	r2, [r3, #32]
 8003226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800322a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	429a      	cmp	r2, r3
 8003234:	f240 83df 	bls.w	80039f6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800323c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800325a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800325e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003266:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	441a      	add	r2, r3
 800327c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003280:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003284:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003288:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800328c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003290:	b29b      	uxth	r3, r3
 8003292:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032a4:	1ad2      	subs	r2, r2, r3
 80032a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80032b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 81c7 	beq.w	8003668 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80032da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80032e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	785b      	ldrb	r3, [r3, #1]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d177      	bne.n	80033e6 <USB_EPStartXfer+0x2ce>
 80032f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003310:	b29b      	uxth	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	4413      	add	r3, r2
 8003318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800331a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800331e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	011a      	lsls	r2, r3, #4
 8003328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332a:	4413      	add	r3, r2
 800332c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800333c:	b29a      	uxth	r2, r3
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	801a      	strh	r2, [r3, #0]
 8003342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003346:	2b3e      	cmp	r3, #62	@ 0x3e
 8003348:	d921      	bls.n	800338e <USB_EPStartXfer+0x276>
 800334a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <USB_EPStartXfer+0x252>
 8003360:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003364:	3b01      	subs	r3, #1
 8003366:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	b29a      	uxth	r2, r3
 8003370:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003374:	b29b      	uxth	r3, r3
 8003376:	029b      	lsls	r3, r3, #10
 8003378:	b29b      	uxth	r3, r3
 800337a:	4313      	orrs	r3, r2
 800337c:	b29b      	uxth	r3, r3
 800337e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003386:	b29a      	uxth	r2, r3
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	801a      	strh	r2, [r3, #0]
 800338c:	e050      	b.n	8003430 <USB_EPStartXfer+0x318>
 800338e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <USB_EPStartXfer+0x294>
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	801a      	strh	r2, [r3, #0]
 80033aa:	e041      	b.n	8003430 <USB_EPStartXfer+0x318>
 80033ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80033b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <USB_EPStartXfer+0x2b4>
 80033c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80033c6:	3301      	adds	r3, #1
 80033c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	029b      	lsls	r3, r3, #10
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4313      	orrs	r3, r2
 80033de:	b29a      	uxth	r2, r3
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	801a      	strh	r2, [r3, #0]
 80033e4:	e024      	b.n	8003430 <USB_EPStartXfer+0x318>
 80033e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80033ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	785b      	ldrb	r3, [r3, #1]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d11c      	bne.n	8003430 <USB_EPStartXfer+0x318>
 80033f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80033fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003404:	b29b      	uxth	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340a:	4413      	add	r3, r2
 800340c:	633b      	str	r3, [r7, #48]	@ 0x30
 800340e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	011a      	lsls	r2, r3, #4
 800341c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341e:	4413      	add	r3, r2
 8003420:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800342a:	b29a      	uxth	r2, r3
 800342c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	895b      	ldrh	r3, [r3, #10]
 800343c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6959      	ldr	r1, [r3, #20]
 800344c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003450:	b29b      	uxth	r3, r3
 8003452:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003456:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800345a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800345e:	6800      	ldr	r0, [r0, #0]
 8003460:	f001 fa37 	bl	80048d2 <USB_WritePMA>
            ep->xfer_buff += len;
 8003464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003474:	441a      	add	r2, r3
 8003476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800347a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	429a      	cmp	r2, r3
 800349c:	d90f      	bls.n	80034be <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800349e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ae:	1ad2      	subs	r2, r2, r3
 80034b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	621a      	str	r2, [r3, #32]
 80034bc:	e00e      	b.n	80034dc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80034be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80034ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2200      	movs	r2, #0
 80034da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80034dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	785b      	ldrb	r3, [r3, #1]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d177      	bne.n	80035dc <USB_EPStartXfer+0x4c4>
 80034ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003506:	b29b      	uxth	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	4413      	add	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	011a      	lsls	r2, r3, #4
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	4413      	add	r3, r2
 8003522:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003532:	b29a      	uxth	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	801a      	strh	r2, [r3, #0]
 8003538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800353c:	2b3e      	cmp	r3, #62	@ 0x3e
 800353e:	d921      	bls.n	8003584 <USB_EPStartXfer+0x46c>
 8003540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800354a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	2b00      	cmp	r3, #0
 8003554:	d104      	bne.n	8003560 <USB_EPStartXfer+0x448>
 8003556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800355a:	3b01      	subs	r3, #1
 800355c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	b29a      	uxth	r2, r3
 8003566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800356a:	b29b      	uxth	r3, r3
 800356c:	029b      	lsls	r3, r3, #10
 800356e:	b29b      	uxth	r3, r3
 8003570:	4313      	orrs	r3, r2
 8003572:	b29b      	uxth	r3, r3
 8003574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800357c:	b29a      	uxth	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	801a      	strh	r2, [r3, #0]
 8003582:	e056      	b.n	8003632 <USB_EPStartXfer+0x51a>
 8003584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <USB_EPStartXfer+0x48a>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800359a:	b29a      	uxth	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	801a      	strh	r2, [r3, #0]
 80035a0:	e047      	b.n	8003632 <USB_EPStartXfer+0x51a>
 80035a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d004      	beq.n	80035c2 <USB_EPStartXfer+0x4aa>
 80035b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035bc:	3301      	adds	r3, #1
 80035be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	029b      	lsls	r3, r3, #10
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4313      	orrs	r3, r2
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	801a      	strh	r2, [r3, #0]
 80035da:	e02a      	b.n	8003632 <USB_EPStartXfer+0x51a>
 80035dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80035e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	785b      	ldrb	r3, [r3, #1]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d122      	bne.n	8003632 <USB_EPStartXfer+0x51a>
 80035ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80035f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	623b      	str	r3, [r7, #32]
 80035f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80035fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003606:	b29b      	uxth	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	4413      	add	r3, r2
 800360e:	623b      	str	r3, [r7, #32]
 8003610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	011a      	lsls	r2, r3, #4
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	4413      	add	r3, r2
 8003622:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800362c:	b29a      	uxth	r2, r3
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	891b      	ldrh	r3, [r3, #8]
 800363e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6959      	ldr	r1, [r3, #20]
 800364e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003652:	b29b      	uxth	r3, r3
 8003654:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003658:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800365c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003660:	6800      	ldr	r0, [r0, #0]
 8003662:	f001 f936 	bl	80048d2 <USB_WritePMA>
 8003666:	e3ee      	b.n	8003e46 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800366c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d177      	bne.n	8003768 <USB_EPStartXfer+0x650>
 8003678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800367c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003692:	b29b      	uxth	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003698:	4413      	add	r3, r2
 800369a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800369c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	011a      	lsls	r2, r3, #4
 80036aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036ac:	4413      	add	r3, r2
 80036ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036be:	b29a      	uxth	r2, r3
 80036c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80036ca:	d921      	bls.n	8003710 <USB_EPStartXfer+0x5f8>
 80036cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d104      	bne.n	80036ec <USB_EPStartXfer+0x5d4>
 80036e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036e6:	3b01      	subs	r3, #1
 80036e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	029b      	lsls	r3, r3, #10
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	4313      	orrs	r3, r2
 80036fe:	b29b      	uxth	r3, r3
 8003700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003708:	b29a      	uxth	r2, r3
 800370a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e056      	b.n	80037be <USB_EPStartXfer+0x6a6>
 8003710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <USB_EPStartXfer+0x616>
 8003718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003726:	b29a      	uxth	r2, r3
 8003728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800372a:	801a      	strh	r2, [r3, #0]
 800372c:	e047      	b.n	80037be <USB_EPStartXfer+0x6a6>
 800372e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003732:	085b      	lsrs	r3, r3, #1
 8003734:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <USB_EPStartXfer+0x636>
 8003744:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003748:	3301      	adds	r3, #1
 800374a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800374e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	b29a      	uxth	r2, r3
 8003754:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003758:	b29b      	uxth	r3, r3
 800375a:	029b      	lsls	r3, r3, #10
 800375c:	b29b      	uxth	r3, r3
 800375e:	4313      	orrs	r3, r2
 8003760:	b29a      	uxth	r2, r3
 8003762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003764:	801a      	strh	r2, [r3, #0]
 8003766:	e02a      	b.n	80037be <USB_EPStartXfer+0x6a6>
 8003768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800376c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	785b      	ldrb	r3, [r3, #1]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d122      	bne.n	80037be <USB_EPStartXfer+0x6a6>
 8003778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800377c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	653b      	str	r3, [r7, #80]	@ 0x50
 8003784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003788:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003792:	b29b      	uxth	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003798:	4413      	add	r3, r2
 800379a:	653b      	str	r3, [r7, #80]	@ 0x50
 800379c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	011a      	lsls	r2, r3, #4
 80037aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ac:	4413      	add	r3, r2
 80037ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80037be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	891b      	ldrh	r3, [r3, #8]
 80037ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6959      	ldr	r1, [r3, #20]
 80037da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80037e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80037e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80037ec:	6800      	ldr	r0, [r0, #0]
 80037ee:	f001 f870 	bl	80048d2 <USB_WritePMA>
            ep->xfer_buff += len;
 80037f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003802:	441a      	add	r2, r3
 8003804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a1a      	ldr	r2, [r3, #32]
 800381c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	429a      	cmp	r2, r3
 800382a:	d90f      	bls.n	800384c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800382c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800383c:	1ad2      	subs	r2, r2, r3
 800383e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	621a      	str	r2, [r3, #32]
 800384a:	e00e      	b.n	800386a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800384c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800385c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2200      	movs	r2, #0
 8003868:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800386a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800386e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	643b      	str	r3, [r7, #64]	@ 0x40
 8003876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800387a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	785b      	ldrb	r3, [r3, #1]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d177      	bne.n	8003976 <USB_EPStartXfer+0x85e>
 8003886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800388a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a6:	4413      	add	r3, r2
 80038a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	011a      	lsls	r2, r3, #4
 80038b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ba:	4413      	add	r3, r2
 80038bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d0:	801a      	strh	r2, [r3, #0]
 80038d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80038d8:	d921      	bls.n	800391e <USB_EPStartXfer+0x806>
 80038da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d104      	bne.n	80038fa <USB_EPStartXfer+0x7e2>
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f4:	3b01      	subs	r3, #1
 80038f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	b29a      	uxth	r2, r3
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003904:	b29b      	uxth	r3, r3
 8003906:	029b      	lsls	r3, r3, #10
 8003908:	b29b      	uxth	r3, r3
 800390a:	4313      	orrs	r3, r2
 800390c:	b29b      	uxth	r3, r3
 800390e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003916:	b29a      	uxth	r2, r3
 8003918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800391a:	801a      	strh	r2, [r3, #0]
 800391c:	e050      	b.n	80039c0 <USB_EPStartXfer+0x8a8>
 800391e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <USB_EPStartXfer+0x824>
 8003926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003934:	b29a      	uxth	r2, r3
 8003936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003938:	801a      	strh	r2, [r3, #0]
 800393a:	e041      	b.n	80039c0 <USB_EPStartXfer+0x8a8>
 800393c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <USB_EPStartXfer+0x844>
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003956:	3301      	adds	r3, #1
 8003958:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800395c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	b29a      	uxth	r2, r3
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003966:	b29b      	uxth	r3, r3
 8003968:	029b      	lsls	r3, r3, #10
 800396a:	b29b      	uxth	r3, r3
 800396c:	4313      	orrs	r3, r2
 800396e:	b29a      	uxth	r2, r3
 8003970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003972:	801a      	strh	r2, [r3, #0]
 8003974:	e024      	b.n	80039c0 <USB_EPStartXfer+0x8a8>
 8003976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800397a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	785b      	ldrb	r3, [r3, #1]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d11c      	bne.n	80039c0 <USB_EPStartXfer+0x8a8>
 8003986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800398a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003994:	b29b      	uxth	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800399a:	4413      	add	r3, r2
 800399c:	643b      	str	r3, [r7, #64]	@ 0x40
 800399e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	011a      	lsls	r2, r3, #4
 80039ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ae:	4413      	add	r3, r2
 80039b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80039c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	895b      	ldrh	r3, [r3, #10]
 80039cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6959      	ldr	r1, [r3, #20]
 80039dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80039e6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80039ea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80039ee:	6800      	ldr	r0, [r0, #0]
 80039f0:	f000 ff6f 	bl	80048d2 <USB_WritePMA>
 80039f4:	e227      	b.n	8003e46 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80039f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	441a      	add	r2, r3
 8003a4a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a82:	4413      	add	r3, r2
 8003a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	011a      	lsls	r2, r3, #4
 8003a94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a96:	4413      	add	r3, r2
 8003a98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aa6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	891b      	ldrh	r3, [r3, #8]
 8003ab4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6959      	ldr	r1, [r3, #20]
 8003ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003ace:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003ad2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003ad6:	6800      	ldr	r0, [r0, #0]
 8003ad8:	f000 fefb 	bl	80048d2 <USB_WritePMA>
 8003adc:	e1b3      	b.n	8003e46 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6a1a      	ldr	r2, [r3, #32]
 8003aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aee:	1ad2      	subs	r2, r2, r3
 8003af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80c6 	beq.w	8003cb0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	785b      	ldrb	r3, [r3, #1]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d177      	bne.n	8003c30 <USB_EPStartXfer+0xb18>
 8003b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b60:	4413      	add	r3, r2
 8003b62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	011a      	lsls	r2, r3, #4
 8003b72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b74:	4413      	add	r3, r2
 8003b76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b8a:	801a      	strh	r2, [r3, #0]
 8003b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b90:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b92:	d921      	bls.n	8003bd8 <USB_EPStartXfer+0xac0>
 8003b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <USB_EPStartXfer+0xa9c>
 8003baa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003bb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	029b      	lsls	r3, r3, #10
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bd4:	801a      	strh	r2, [r3, #0]
 8003bd6:	e050      	b.n	8003c7a <USB_EPStartXfer+0xb62>
 8003bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <USB_EPStartXfer+0xade>
 8003be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bf2:	801a      	strh	r2, [r3, #0]
 8003bf4:	e041      	b.n	8003c7a <USB_EPStartXfer+0xb62>
 8003bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d004      	beq.n	8003c16 <USB_EPStartXfer+0xafe>
 8003c0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003c10:	3301      	adds	r3, #1
 8003c12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	029b      	lsls	r3, r3, #10
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	4313      	orrs	r3, r2
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c2c:	801a      	strh	r2, [r3, #0]
 8003c2e:	e024      	b.n	8003c7a <USB_EPStartXfer+0xb62>
 8003c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	785b      	ldrb	r3, [r3, #1]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d11c      	bne.n	8003c7a <USB_EPStartXfer+0xb62>
 8003c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c54:	4413      	add	r3, r2
 8003c56:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	011a      	lsls	r2, r3, #4
 8003c66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c68:	4413      	add	r3, r2
 8003c6a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	895b      	ldrh	r3, [r3, #10]
 8003c86:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6959      	ldr	r1, [r3, #20]
 8003c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003ca0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003ca4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003ca8:	6800      	ldr	r0, [r0, #0]
 8003caa:	f000 fe12 	bl	80048d2 <USB_WritePMA>
 8003cae:	e0ca      	b.n	8003e46 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	785b      	ldrb	r3, [r3, #1]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d177      	bne.n	8003db0 <USB_EPStartXfer+0xc98>
 8003cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ce0:	4413      	add	r3, r2
 8003ce2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	011a      	lsls	r2, r3, #4
 8003cf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cfa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d0a:	801a      	strh	r2, [r3, #0]
 8003d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d10:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d12:	d921      	bls.n	8003d58 <USB_EPStartXfer+0xc40>
 8003d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <USB_EPStartXfer+0xc1c>
 8003d2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	029b      	lsls	r3, r3, #10
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	4313      	orrs	r3, r2
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d54:	801a      	strh	r2, [r3, #0]
 8003d56:	e05c      	b.n	8003e12 <USB_EPStartXfer+0xcfa>
 8003d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <USB_EPStartXfer+0xc5e>
 8003d60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d72:	801a      	strh	r2, [r3, #0]
 8003d74:	e04d      	b.n	8003e12 <USB_EPStartXfer+0xcfa>
 8003d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <USB_EPStartXfer+0xc7e>
 8003d8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003d90:	3301      	adds	r3, #1
 8003d92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	029b      	lsls	r3, r3, #10
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dac:	801a      	strh	r2, [r3, #0]
 8003dae:	e030      	b.n	8003e12 <USB_EPStartXfer+0xcfa>
 8003db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	785b      	ldrb	r3, [r3, #1]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d128      	bne.n	8003e12 <USB_EPStartXfer+0xcfa>
 8003dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003de4:	4413      	add	r3, r2
 8003de6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	011a      	lsls	r2, r3, #4
 8003df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	891b      	ldrh	r3, [r3, #8]
 8003e1e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6959      	ldr	r1, [r3, #20]
 8003e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003e38:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003e3c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003e40:	6800      	ldr	r0, [r0, #0]
 8003e42:	f000 fd46 	bl	80048d2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e6c:	817b      	strh	r3, [r7, #10]
 8003e6e:	897b      	ldrh	r3, [r7, #10]
 8003e70:	f083 0310 	eor.w	r3, r3, #16
 8003e74:	817b      	strh	r3, [r7, #10]
 8003e76:	897b      	ldrh	r3, [r7, #10]
 8003e78:	f083 0320 	eor.w	r3, r3, #32
 8003e7c:	817b      	strh	r3, [r7, #10]
 8003e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	441a      	add	r2, r3
 8003e98:	897b      	ldrh	r3, [r7, #10]
 8003e9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	8013      	strh	r3, [r2, #0]
 8003eae:	f000 bcde 	b.w	800486e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8003eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	7b1b      	ldrb	r3, [r3, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f040 80bb 	bne.w	800403a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8003ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699a      	ldr	r2, [r3, #24]
 8003ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d917      	bls.n	8003f10 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8003ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8003ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f00:	1ad2      	subs	r2, r2, r3
 8003f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	619a      	str	r2, [r3, #24]
 8003f0e:	e00e      	b.n	8003f2e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8003f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8003f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f52:	4413      	add	r3, r2
 8003f54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	011a      	lsls	r2, r3, #4
 8003f66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f86:	801a      	strh	r2, [r3, #0]
 8003f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f8e:	d924      	bls.n	8003fda <USB_EPStartXfer+0xec2>
 8003f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <USB_EPStartXfer+0xe98>
 8003fa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003faa:	3b01      	subs	r3, #1
 8003fac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	029b      	lsls	r3, r3, #10
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fd4:	801a      	strh	r2, [r3, #0]
 8003fd6:	f000 bc10 	b.w	80047fa <USB_EPStartXfer+0x16e2>
 8003fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10c      	bne.n	8003ffc <USB_EPStartXfer+0xee4>
 8003fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ff8:	801a      	strh	r2, [r3, #0]
 8003ffa:	e3fe      	b.n	80047fa <USB_EPStartXfer+0x16e2>
 8003ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004000:	085b      	lsrs	r3, r3, #1
 8004002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d004      	beq.n	800401c <USB_EPStartXfer+0xf04>
 8004012:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004016:	3301      	adds	r3, #1
 8004018:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800401c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29a      	uxth	r2, r3
 8004024:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004028:	b29b      	uxth	r3, r3
 800402a:	029b      	lsls	r3, r3, #10
 800402c:	b29b      	uxth	r3, r3
 800402e:	4313      	orrs	r3, r2
 8004030:	b29a      	uxth	r2, r3
 8004032:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004036:	801a      	strh	r2, [r3, #0]
 8004038:	e3df      	b.n	80047fa <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800403a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800403e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	78db      	ldrb	r3, [r3, #3]
 8004046:	2b02      	cmp	r3, #2
 8004048:	f040 8218 	bne.w	800447c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800404c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	785b      	ldrb	r3, [r3, #1]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f040 809d 	bne.w	8004198 <USB_EPStartXfer+0x1080>
 800405e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004062:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800406c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004070:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800407a:	b29b      	uxth	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004082:	4413      	add	r3, r2
 8004084:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800408c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	011a      	lsls	r2, r3, #4
 8004096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800409a:	4413      	add	r3, r2
 800409c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80040c6:	d92b      	bls.n	8004120 <USB_EPStartXfer+0x1008>
 80040c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d104      	bne.n	80040f8 <USB_EPStartXfer+0xfe0>
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f2:	3b01      	subs	r3, #1
 80040f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b29a      	uxth	r2, r3
 8004100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004104:	b29b      	uxth	r3, r3
 8004106:	029b      	lsls	r3, r3, #10
 8004108:	b29b      	uxth	r3, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	b29b      	uxth	r3, r3
 800410e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004116:	b29a      	uxth	r2, r3
 8004118:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800411c:	801a      	strh	r2, [r3, #0]
 800411e:	e070      	b.n	8004202 <USB_EPStartXfer+0x10ea>
 8004120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10c      	bne.n	800414a <USB_EPStartXfer+0x1032>
 8004130:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800413c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004140:	b29a      	uxth	r2, r3
 8004142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004146:	801a      	strh	r2, [r3, #0]
 8004148:	e05b      	b.n	8004202 <USB_EPStartXfer+0x10ea>
 800414a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800414e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	085b      	lsrs	r3, r3, #1
 8004158:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800415c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d004      	beq.n	800417a <USB_EPStartXfer+0x1062>
 8004170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004174:	3301      	adds	r3, #1
 8004176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800417a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29a      	uxth	r2, r3
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004186:	b29b      	uxth	r3, r3
 8004188:	029b      	lsls	r3, r3, #10
 800418a:	b29b      	uxth	r3, r3
 800418c:	4313      	orrs	r3, r2
 800418e:	b29a      	uxth	r2, r3
 8004190:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004194:	801a      	strh	r2, [r3, #0]
 8004196:	e034      	b.n	8004202 <USB_EPStartXfer+0x10ea>
 8004198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800419c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	785b      	ldrb	r3, [r3, #1]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d12c      	bne.n	8004202 <USB_EPStartXfer+0x10ea>
 80041a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041cc:	4413      	add	r3, r2
 80041ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	011a      	lsls	r2, r3, #4
 80041e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041e4:	4413      	add	r3, r2
 80041e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004200:	801a      	strh	r2, [r3, #0]
 8004202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f040 809d 	bne.w	800435c <USB_EPStartXfer+0x1244>
 8004222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800423e:	b29b      	uxth	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004246:	4413      	add	r3, r2
 8004248:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800424c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	011a      	lsls	r2, r3, #4
 800425a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800425e:	4413      	add	r3, r2
 8004260:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004264:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004268:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004274:	b29a      	uxth	r2, r3
 8004276:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	2b3e      	cmp	r3, #62	@ 0x3e
 800428a:	d92b      	bls.n	80042e4 <USB_EPStartXfer+0x11cc>
 800428c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800429e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d104      	bne.n	80042bc <USB_EPStartXfer+0x11a4>
 80042b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b6:	3b01      	subs	r3, #1
 80042b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	029b      	lsls	r3, r3, #10
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	4313      	orrs	r3, r2
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042da:	b29a      	uxth	r2, r3
 80042dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042e0:	801a      	strh	r2, [r3, #0]
 80042e2:	e069      	b.n	80043b8 <USB_EPStartXfer+0x12a0>
 80042e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10c      	bne.n	800430e <USB_EPStartXfer+0x11f6>
 80042f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004304:	b29a      	uxth	r2, r3
 8004306:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	e054      	b.n	80043b8 <USB_EPStartXfer+0x12a0>
 800430e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	085b      	lsrs	r3, r3, #1
 800431c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d004      	beq.n	800433e <USB_EPStartXfer+0x1226>
 8004334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004338:	3301      	adds	r3, #1
 800433a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800433e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29a      	uxth	r2, r3
 8004346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800434a:	b29b      	uxth	r3, r3
 800434c:	029b      	lsls	r3, r3, #10
 800434e:	b29b      	uxth	r3, r3
 8004350:	4313      	orrs	r3, r2
 8004352:	b29a      	uxth	r2, r3
 8004354:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	e02d      	b.n	80043b8 <USB_EPStartXfer+0x12a0>
 800435c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	785b      	ldrb	r3, [r3, #1]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d125      	bne.n	80043b8 <USB_EPStartXfer+0x12a0>
 800436c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004370:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800437a:	b29b      	uxth	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004382:	4413      	add	r3, r2
 8004384:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800438c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	011a      	lsls	r2, r3, #4
 8004396:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800439a:	4413      	add	r3, r2
 800439c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043b6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80043b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8218 	beq.w	80047fa <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80043ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80043ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80043ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <USB_EPStartXfer+0x12ea>
 80043f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80043fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10d      	bne.n	800441e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004402:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800440a:	2b00      	cmp	r3, #0
 800440c:	f040 81f5 	bne.w	80047fa <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004410:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	f040 81ee 	bne.w	80047fa <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800441e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004422:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800442c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	b29b      	uxth	r3, r3
 800443c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004444:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800444c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	441a      	add	r2, r3
 8004462:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800446a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800446e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004472:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004476:	b29b      	uxth	r3, r3
 8004478:	8013      	strh	r3, [r2, #0]
 800447a:	e1be      	b.n	80047fa <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800447c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	78db      	ldrb	r3, [r3, #3]
 8004488:	2b01      	cmp	r3, #1
 800448a:	f040 81b4 	bne.w	80047f6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800448e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800449e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d917      	bls.n	80044da <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80044aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80044ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ca:	1ad2      	subs	r2, r2, r3
 80044cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	619a      	str	r2, [r3, #24]
 80044d8:	e00e      	b.n	80044f8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80044da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80044ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2200      	movs	r2, #0
 80044f6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80044f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	785b      	ldrb	r3, [r3, #1]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f040 8085 	bne.w	8004614 <USB_EPStartXfer+0x14fc>
 800450a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800450e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800451c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004526:	b29b      	uxth	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800452e:	4413      	add	r3, r2
 8004530:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	011a      	lsls	r2, r3, #4
 8004542:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004546:	4413      	add	r3, r2
 8004548:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800454c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004550:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800455c:	b29a      	uxth	r2, r3
 800455e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004562:	801a      	strh	r2, [r3, #0]
 8004564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004568:	2b3e      	cmp	r3, #62	@ 0x3e
 800456a:	d923      	bls.n	80045b4 <USB_EPStartXfer+0x149c>
 800456c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800457a:	f003 031f 	and.w	r3, r3, #31
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <USB_EPStartXfer+0x1474>
 8004582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004586:	3b01      	subs	r3, #1
 8004588:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800458c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b29a      	uxth	r2, r3
 8004594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004598:	b29b      	uxth	r3, r3
 800459a:	029b      	lsls	r3, r3, #10
 800459c:	b29b      	uxth	r3, r3
 800459e:	4313      	orrs	r3, r2
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045b0:	801a      	strh	r2, [r3, #0]
 80045b2:	e060      	b.n	8004676 <USB_EPStartXfer+0x155e>
 80045b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10c      	bne.n	80045d6 <USB_EPStartXfer+0x14be>
 80045bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045d2:	801a      	strh	r2, [r3, #0]
 80045d4:	e04f      	b.n	8004676 <USB_EPStartXfer+0x155e>
 80045d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80045e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <USB_EPStartXfer+0x14de>
 80045ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045f0:	3301      	adds	r3, #1
 80045f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80045f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004602:	b29b      	uxth	r3, r3
 8004604:	029b      	lsls	r3, r3, #10
 8004606:	b29b      	uxth	r3, r3
 8004608:	4313      	orrs	r3, r2
 800460a:	b29a      	uxth	r2, r3
 800460c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004610:	801a      	strh	r2, [r3, #0]
 8004612:	e030      	b.n	8004676 <USB_EPStartXfer+0x155e>
 8004614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d128      	bne.n	8004676 <USB_EPStartXfer+0x155e>
 8004624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004628:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004640:	b29b      	uxth	r3, r3
 8004642:	461a      	mov	r2, r3
 8004644:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004648:	4413      	add	r3, r2
 800464a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800464e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	011a      	lsls	r2, r3, #4
 800465c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004660:	4413      	add	r3, r2
 8004662:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004666:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800466a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800466e:	b29a      	uxth	r2, r3
 8004670:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004674:	801a      	strh	r2, [r3, #0]
 8004676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800467a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	785b      	ldrb	r3, [r3, #1]
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 8085 	bne.w	80047a0 <USB_EPStartXfer+0x1688>
 8004696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800469a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80046a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80046ba:	4413      	add	r3, r2
 80046bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80046c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	011a      	lsls	r2, r3, #4
 80046ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80046d2:	4413      	add	r3, r2
 80046d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80046f6:	d923      	bls.n	8004740 <USB_EPStartXfer+0x1628>
 80046f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <USB_EPStartXfer+0x1600>
 800470e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004712:	3b01      	subs	r3, #1
 8004714:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004718:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29a      	uxth	r2, r3
 8004720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004724:	b29b      	uxth	r3, r3
 8004726:	029b      	lsls	r3, r3, #10
 8004728:	b29b      	uxth	r3, r3
 800472a:	4313      	orrs	r3, r2
 800472c:	b29b      	uxth	r3, r3
 800472e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004736:	b29a      	uxth	r2, r3
 8004738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800473c:	801a      	strh	r2, [r3, #0]
 800473e:	e05c      	b.n	80047fa <USB_EPStartXfer+0x16e2>
 8004740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10c      	bne.n	8004762 <USB_EPStartXfer+0x164a>
 8004748:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004758:	b29a      	uxth	r2, r3
 800475a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	e04b      	b.n	80047fa <USB_EPStartXfer+0x16e2>
 8004762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800476c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <USB_EPStartXfer+0x166a>
 8004778:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800477c:	3301      	adds	r3, #1
 800477e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004782:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29a      	uxth	r2, r3
 800478a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800478e:	b29b      	uxth	r3, r3
 8004790:	029b      	lsls	r3, r3, #10
 8004792:	b29b      	uxth	r3, r3
 8004794:	4313      	orrs	r3, r2
 8004796:	b29a      	uxth	r2, r3
 8004798:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800479c:	801a      	strh	r2, [r3, #0]
 800479e:	e02c      	b.n	80047fa <USB_EPStartXfer+0x16e2>
 80047a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	785b      	ldrb	r3, [r3, #1]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d124      	bne.n	80047fa <USB_EPStartXfer+0x16e2>
 80047b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047be:	b29b      	uxth	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047c6:	4413      	add	r3, r2
 80047c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	011a      	lsls	r2, r3, #4
 80047da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047de:	4413      	add	r3, r2
 80047e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	e001      	b.n	80047fa <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e03a      	b.n	8004870 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800481c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004820:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004824:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004828:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800482c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004830:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004834:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004838:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800483c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004840:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800484a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800485a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800485e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800486a:	b29b      	uxth	r3, r3
 800486c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004886:	78fb      	ldrb	r3, [r7, #3]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d103      	bne.n	8004894 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2280      	movs	r2, #128	@ 0x80
 8004890:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80048c6:	68fb      	ldr	r3, [r7, #12]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr

080048d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b08b      	sub	sp, #44	@ 0x2c
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	4611      	mov	r1, r2
 80048de:	461a      	mov	r2, r3
 80048e0:	460b      	mov	r3, r1
 80048e2:	80fb      	strh	r3, [r7, #6]
 80048e4:	4613      	mov	r3, r2
 80048e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80048e8:	88bb      	ldrh	r3, [r7, #4]
 80048ea:	3301      	adds	r3, #1
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	005a      	lsls	r2, r3, #1
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004904:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	627b      	str	r3, [r7, #36]	@ 0x24
 800490a:	e01e      	b.n	800494a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3301      	adds	r3, #1
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	b21a      	sxth	r2, r3
 800491c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004920:	4313      	orrs	r3, r2
 8004922:	b21b      	sxth	r3, r3
 8004924:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	8a7a      	ldrh	r2, [r7, #18]
 800492a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	3302      	adds	r3, #2
 8004930:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	3302      	adds	r3, #2
 8004936:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	3301      	adds	r3, #1
 800493c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3301      	adds	r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	3b01      	subs	r3, #1
 8004948:	627b      	str	r3, [r7, #36]	@ 0x24
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1dd      	bne.n	800490c <USB_WritePMA+0x3a>
  }
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	372c      	adds	r7, #44	@ 0x2c
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr

0800495c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800495c:	b480      	push	{r7}
 800495e:	b08b      	sub	sp, #44	@ 0x2c
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	4611      	mov	r1, r2
 8004968:	461a      	mov	r2, r3
 800496a:	460b      	mov	r3, r1
 800496c:	80fb      	strh	r3, [r7, #6]
 800496e:	4613      	mov	r3, r2
 8004970:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004972:	88bb      	ldrh	r3, [r7, #4]
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	b29b      	uxth	r3, r3
 8004978:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	005a      	lsls	r2, r3, #1
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800498e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
 8004994:	e01b      	b.n	80049ce <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	3302      	adds	r3, #2
 80049a2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	3301      	adds	r3, #1
 80049b0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	0a1b      	lsrs	r3, r3, #8
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	3301      	adds	r3, #1
 80049c0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	3302      	adds	r3, #2
 80049c6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	3b01      	subs	r3, #1
 80049cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e0      	bne.n	8004996 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80049d4:	88bb      	ldrh	r3, [r7, #4]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	701a      	strb	r2, [r3, #0]
  }
}
 80049f0:	bf00      	nop
 80049f2:	372c      	adds	r7, #44	@ 0x2c
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr
	...

080049fc <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_fifo_t _cdcd_fifo_cfg;

static bool _prep_out_transaction(uint8_t itf) {
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	22a8      	movs	r2, #168	@ 0xa8
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	4a30      	ldr	r2, [pc, #192]	@ (8004ad4 <_prep_out_transaction+0xd8>)
 8004a14:	4413      	add	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	01db      	lsls	r3, r3, #7
 8004a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ad8 <_prep_out_transaction+0xdc>)
 8004a1e:	4413      	add	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8004a22:	f002 f88f 	bl	8006b44 <tud_mounted>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d009      	beq.n	8004a40 <_prep_out_transaction+0x44>
 8004a2c:	f002 f89a 	bl	8006b64 <tud_suspended>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f083 0301 	eor.w	r3, r3, #1
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <_prep_out_transaction+0x44>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <_prep_out_transaction+0x46>
 8004a40:	2300      	movs	r3, #0
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8004a48:	f083 0301 	eor.w	r3, r3, #1
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d103      	bne.n	8004a5a <_prep_out_transaction+0x5e>
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	78db      	ldrb	r3, [r3, #3]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <_prep_out_transaction+0x62>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e035      	b.n	8004aca <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	3310      	adds	r3, #16
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fd75 	bl	8006552 <tu_fifo_remaining>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8004a6c:	897b      	ldrh	r3, [r7, #10]
 8004a6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a70:	d801      	bhi.n	8004a76 <_prep_out_transaction+0x7a>
 8004a72:	2300      	movs	r3, #0
 8004a74:	e029      	b.n	8004aca <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	78da      	ldrb	r2, [r3, #3]
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f003 fd06 	bl	8008490 <usbd_edpt_claim>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f083 0301 	eor.w	r3, r3, #1
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <_prep_out_transaction+0x98>
 8004a90:	2300      	movs	r3, #0
 8004a92:	e01a      	b.n	8004aca <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	3310      	adds	r3, #16
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f001 fd5a 	bl	8006552 <tu_fifo_remaining>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8004aa2:	897b      	ldrh	r3, [r7, #10]
 8004aa4:	2b3f      	cmp	r3, #63	@ 0x3f
 8004aa6:	d908      	bls.n	8004aba <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	78d9      	ldrb	r1, [r3, #3]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	7df8      	ldrb	r0, [r7, #23]
 8004ab0:	2340      	movs	r3, #64	@ 0x40
 8004ab2:	f003 fd41 	bl	8008538 <usbd_edpt_xfer>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	e007      	b.n	8004aca <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	78da      	ldrb	r2, [r3, #3]
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f003 fd0e 	bl	80084e4 <usbd_edpt_release>
    return false;
 8004ac8:	2300      	movs	r3, #0
  }
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200003fc 	.word	0x200003fc
 8004ad8:	200004a4 	.word	0x200004a4

08004adc <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	22a8      	movs	r2, #168	@ 0xa8
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	3310      	adds	r3, #16
 8004af0:	4a04      	ldr	r2, [pc, #16]	@ (8004b04 <tud_cdc_n_available+0x28>)
 8004af2:	4413      	add	r3, r2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f001 fcba 	bl	800646e <tu_fifo_count>
 8004afa:	4603      	mov	r3, r0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	200003fc 	.word	0x200003fc

08004b08 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	22a8      	movs	r2, #168	@ 0xa8
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8004b5c <tud_cdc_n_read+0x54>)
 8004b20:	4413      	add	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f103 0010 	add.w	r0, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d802      	bhi.n	8004b3a <tud_cdc_n_read+0x32>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	e001      	b.n	8004b3e <tud_cdc_n_read+0x36>
 8004b3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	f001 fd61 	bl	8006608 <tu_fifo_read_n>
 8004b46:	4603      	mov	r3, r0
 8004b48:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff ff55 	bl	80049fc <_prep_out_transaction>
  return num_read;
 8004b52:	693b      	ldr	r3, [r7, #16]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	200003fc 	.word	0x200003fc

08004b60 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	22a8      	movs	r2, #168	@ 0xa8
 8004b72:	fb02 f303 	mul.w	r3, r2, r3
 8004b76:	4a13      	ldr	r2, [pc, #76]	@ (8004bc4 <tud_cdc_n_write+0x64>)
 8004b78:	4413      	add	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f103 001c 	add.w	r0, r3, #28
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d802      	bhi.n	8004b92 <tud_cdc_n_write+0x32>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	e001      	b.n	8004b96 <tud_cdc_n_write+0x36>
 8004b92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b96:	461a      	mov	r2, r3
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	f001 fd8a 	bl	80066b2 <tu_fifo_write_n>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	331c      	adds	r3, #28
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f001 fc61 	bl	800646e <tu_fifo_count>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b3f      	cmp	r3, #63	@ 0x3f
 8004bb0:	d903      	bls.n	8004bba <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 f807 	bl	8004bc8 <tud_cdc_n_write_flush>
  }

  return ret;
 8004bba:	8a7b      	ldrh	r3, [r7, #18]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	200003fc 	.word	0x200003fc

08004bc8 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	22a8      	movs	r2, #168	@ 0xa8
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	4a3c      	ldr	r2, [pc, #240]	@ (8004ccc <tud_cdc_n_write_flush+0x104>)
 8004bdc:	4413      	add	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	01db      	lsls	r3, r3, #7
 8004be4:	4a3a      	ldr	r2, [pc, #232]	@ (8004cd0 <tud_cdc_n_write_flush+0x108>)
 8004be6:	4413      	add	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	f001 ffab 	bl	8006b44 <tud_mounted>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <tud_cdc_n_write_flush+0x40>
 8004bf4:	f001 ffb6 	bl	8006b64 <tud_suspended>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f083 0301 	eor.w	r3, r3, #1
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <tud_cdc_n_write_flush+0x40>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <tud_cdc_n_write_flush+0x42>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8004c10:	f083 0301 	eor.w	r3, r3, #1
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <tud_cdc_n_write_flush+0x56>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e051      	b.n	8004cc2 <tud_cdc_n_write_flush+0xfa>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	331c      	adds	r3, #28
 8004c22:	4618      	mov	r0, r3
 8004c24:	f001 fc23 	bl	800646e <tu_fifo_count>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <tud_cdc_n_write_flush+0x6a>
    return 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e047      	b.n	8004cc2 <tud_cdc_n_write_flush+0xfa>
  }

  const uint8_t rhport = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	789a      	ldrb	r2, [r3, #2]
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f003 fc26 	bl	8008490 <usbd_edpt_claim>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f083 0301 	eor.w	r3, r3, #1
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <tud_cdc_n_write_flush+0x8c>
 8004c50:	2300      	movs	r3, #0
 8004c52:	e036      	b.n	8004cc2 <tud_cdc_n_write_flush+0xfa>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f103 001c 	add.w	r0, r3, #28
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	3340      	adds	r3, #64	@ 0x40
 8004c5e:	2240      	movs	r2, #64	@ 0x40
 8004c60:	4619      	mov	r1, r3
 8004c62:	f001 fcd1 	bl	8006608 <tu_fifo_read_n>
 8004c66:	4603      	mov	r3, r0
 8004c68:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8004c6a:	89bb      	ldrh	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d020      	beq.n	8004cb2 <tud_cdc_n_write_flush+0xea>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	7899      	ldrb	r1, [r3, #2]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004c7a:	89bb      	ldrh	r3, [r7, #12]
 8004c7c:	7bf8      	ldrb	r0, [r7, #15]
 8004c7e:	f003 fc5b 	bl	8008538 <usbd_edpt_xfer>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f083 0301 	eor.w	r3, r3, #1
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00f      	beq.n	8004cae <tud_cdc_n_write_flush+0xe6>
 8004c8e:	22d5      	movs	r2, #213	@ 0xd5
 8004c90:	4910      	ldr	r1, [pc, #64]	@ (8004cd4 <tud_cdc_n_write_flush+0x10c>)
 8004c92:	4811      	ldr	r0, [pc, #68]	@ (8004cd8 <tud_cdc_n_write_flush+0x110>)
 8004c94:	f006 fcce 	bl	800b634 <iprintf>
 8004c98:	4b10      	ldr	r3, [pc, #64]	@ (8004cdc <tud_cdc_n_write_flush+0x114>)
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d000      	beq.n	8004caa <tud_cdc_n_write_flush+0xe2>
 8004ca8:	be00      	bkpt	0x0000
 8004caa:	2300      	movs	r3, #0
 8004cac:	e009      	b.n	8004cc2 <tud_cdc_n_write_flush+0xfa>
    return count;
 8004cae:	89bb      	ldrh	r3, [r7, #12]
 8004cb0:	e007      	b.n	8004cc2 <tud_cdc_n_write_flush+0xfa>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	789a      	ldrb	r2, [r3, #2]
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	4611      	mov	r1, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f003 fc12 	bl	80084e4 <usbd_edpt_release>
    return 0;
 8004cc0:	2300      	movs	r3, #0
  }
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	200003fc 	.word	0x200003fc
 8004cd0:	200004a4 	.word	0x200004a4
 8004cd4:	0800cfc0 	.word	0x0800cfc0
 8004cd8:	0800c888 	.word	0x0800c888
 8004cdc:	e000edf0 	.word	0xe000edf0

08004ce0 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8004ce6:	22a8      	movs	r2, #168	@ 0xa8
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4822      	ldr	r0, [pc, #136]	@ (8004d74 <cdcd_init+0x94>)
 8004cec:	f006 fe26 	bl	800b93c <memset>
  tu_memclr(&_cdcd_fifo_cfg, sizeof(_cdcd_fifo_cfg));
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4820      	ldr	r0, [pc, #128]	@ (8004d78 <cdcd_init+0x98>)
 8004cf6:	f006 fe21 	bl	800b93c <memset>

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	71fb      	strb	r3, [r7, #7]
 8004cfe:	e031      	b.n	8004d64 <cdcd_init+0x84>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8004d00:	79fb      	ldrb	r3, [r7, #7]
 8004d02:	22a8      	movs	r2, #168	@ 0xa8
 8004d04:	fb02 f303 	mul.w	r3, r2, r3
 8004d08:	4a1a      	ldr	r2, [pc, #104]	@ (8004d74 <cdcd_init+0x94>)
 8004d0a:	4413      	add	r3, r2
 8004d0c:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	22ff      	movs	r2, #255	@ 0xff
 8004d12:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004d1a:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2200      	movs	r2, #0
 8004d26:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2208      	movs	r2, #8
 8004d2c:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	f103 0010 	add.w	r0, r3, #16
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	2301      	movs	r3, #1
 8004d40:	2240      	movs	r2, #64	@ 0x40
 8004d42:	f001 f86b 	bl	8005e1c <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	f103 001c 	add.w	r0, r3, #28
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8004d52:	2301      	movs	r3, #1
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	2301      	movs	r3, #1
 8004d58:	2240      	movs	r2, #64	@ 0x40
 8004d5a:	f001 f85f 	bl	8005e1c <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	3301      	adds	r3, #1
 8004d62:	71fb      	strb	r3, [r7, #7]
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0ca      	beq.n	8004d00 <cdcd_init+0x20>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8004d6a:	bf00      	nop
 8004d6c:	bf00      	nop
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	200003fc 	.word	0x200003fc
 8004d78:	20000524 	.word	0x20000524

08004d7c <cdcd_deinit>:

bool cdcd_deinit(void) {
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8004d80:	2301      	movs	r3, #1
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr
	...

08004d8c <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004d96:	2300      	movs	r3, #0
 8004d98:	73fb      	strb	r3, [r7, #15]
 8004d9a:	e02c      	b.n	8004df6 <cdcd_reset+0x6a>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	22a8      	movs	r2, #168	@ 0xa8
 8004da0:	fb02 f303 	mul.w	r3, r2, r3
 8004da4:	4a18      	ldr	r2, [pc, #96]	@ (8004e08 <cdcd_reset+0x7c>)
 8004da6:	4413      	add	r3, r2
 8004da8:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8004daa:	2205      	movs	r2, #5
 8004dac:	2100      	movs	r1, #0
 8004dae:	68b8      	ldr	r0, [r7, #8]
 8004db0:	f006 fdc4 	bl	800b93c <memset>
    if (!_cdcd_fifo_cfg.rx_persistent) {
 8004db4:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <cdcd_reset+0x80>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	3310      	adds	r3, #16
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f001 fc85 	bl	80066d6 <tu_fifo_clear>
    }
    if (!_cdcd_fifo_cfg.tx_persistent) {
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8004e0c <cdcd_reset+0x80>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	331c      	adds	r3, #28
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 fc79 	bl	80066d6 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	331c      	adds	r3, #28
 8004de8:	2101      	movs	r1, #1
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 fc83 	bl	80066f6 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	3301      	adds	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0cf      	beq.n	8004d9c <cdcd_reset+0x10>
  }
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	200003fc 	.word	0x200003fc
 8004e0c:	20000524 	.word	0x20000524

08004e10 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b09a      	sub	sp, #104	@ 0x68
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	4603      	mov	r3, r0
 8004e18:	6039      	str	r1, [r7, #0]
 8004e1a:	71fb      	strb	r3, [r7, #7]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	795b      	ldrb	r3, [r3, #5]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d103      	bne.n	8004e30 <cdcd_open+0x20>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	799b      	ldrb	r3, [r3, #6]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d001      	beq.n	8004e34 <cdcd_open+0x24>
 8004e30:	2300      	movs	r3, #0
 8004e32:	e0ec      	b.n	800500e <cdcd_open+0x1fe>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8004e3a:	e010      	b.n	8004e5e <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8004e3c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e40:	22a8      	movs	r2, #168	@ 0xa8
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	4a74      	ldr	r2, [pc, #464]	@ (8005018 <cdcd_open+0x208>)
 8004e48:	4413      	add	r3, r2
 8004e4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8004e4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e4e:	789b      	ldrb	r3, [r3, #2]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d009      	beq.n	8004e68 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8004e54:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e58:	3301      	adds	r3, #1
 8004e5a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8004e5e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0ea      	beq.n	8004e3c <cdcd_open+0x2c>
 8004e66:	e000      	b.n	8004e6a <cdcd_open+0x5a>
      break;
 8004e68:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8004e6a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d010      	beq.n	8004e94 <cdcd_open+0x84>
 8004e72:	f240 1241 	movw	r2, #321	@ 0x141
 8004e76:	4969      	ldr	r1, [pc, #420]	@ (800501c <cdcd_open+0x20c>)
 8004e78:	4869      	ldr	r0, [pc, #420]	@ (8005020 <cdcd_open+0x210>)
 8004e7a:	f006 fbdb 	bl	800b634 <iprintf>
 8004e7e:	4b69      	ldr	r3, [pc, #420]	@ (8005024 <cdcd_open+0x214>)
 8004e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d000      	beq.n	8004e90 <cdcd_open+0x80>
 8004e8e:	be00      	bkpt	0x0000
 8004e90:	2300      	movs	r3, #0
 8004e92:	e0bc      	b.n	800500e <cdcd_open+0x1fe>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	789a      	ldrb	r2, [r3, #2]
 8004e98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e9a:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8004e9c:	2309      	movs	r3, #9
 8004e9e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eb2:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8004eb4:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8004eb6:	e013      	b.n	8004ee0 <cdcd_open+0xd0>
 8004eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eba:	633b      	str	r3, [r7, #48]	@ 0x30
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ece:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed2:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004edc:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8004ede:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8004eea:	2b24      	cmp	r3, #36	@ 0x24
 8004eec:	d104      	bne.n	8004ef8 <cdcd_open+0xe8>
 8004eee:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8004ef2:	88bb      	ldrh	r3, [r7, #4]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d9df      	bls.n	8004eb8 <cdcd_open+0xa8>
 8004ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efe:	3301      	adds	r3, #1
 8004f00:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8004f02:	2b05      	cmp	r3, #5
 8004f04:	d135      	bne.n	8004f72 <cdcd_open+0x162>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8004f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f08:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f003 fa6a 	bl	80083e8 <usbd_edpt_open>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f083 0301 	eor.w	r3, r3, #1
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d010      	beq.n	8004f42 <cdcd_open+0x132>
 8004f20:	f240 1253 	movw	r2, #339	@ 0x153
 8004f24:	493d      	ldr	r1, [pc, #244]	@ (800501c <cdcd_open+0x20c>)
 8004f26:	483e      	ldr	r0, [pc, #248]	@ (8005020 <cdcd_open+0x210>)
 8004f28:	f006 fb84 	bl	800b634 <iprintf>
 8004f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8005024 <cdcd_open+0x214>)
 8004f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d000      	beq.n	8004f3e <cdcd_open+0x12e>
 8004f3c:	be00      	bkpt	0x0000
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e065      	b.n	800500e <cdcd_open+0x1fe>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8004f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f44:	789a      	ldrb	r2, [r3, #2]
 8004f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f48:	705a      	strb	r2, [r3, #1]
 8004f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f4c:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8004f52:	461a      	mov	r2, r3
 8004f54:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004f58:	4413      	add	r3, r2
 8004f5a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8004f70:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f74:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d13f      	bne.n	8005000 <cdcd_open+0x1f0>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8004f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f82:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8004f84:	2b0a      	cmp	r3, #10
 8004f86:	d13b      	bne.n	8005000 <cdcd_open+0x1f0>
 8004f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f8a:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8004f90:	461a      	mov	r2, r3
 8004f92:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004f96:	4413      	add	r3, r2
 8004f98:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f9e:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8004fae:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8004fb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fb2:	3303      	adds	r3, #3
 8004fb4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004fb6:	3202      	adds	r2, #2
 8004fb8:	79f8      	ldrb	r0, [r7, #7]
 8004fba:	9201      	str	r2, [sp, #4]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fc4:	f003 f998 	bl	80082f8 <usbd_open_edpt_pair>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	f083 0301 	eor.w	r3, r3, #1
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d010      	beq.n	8004ff6 <cdcd_open+0x1e6>
 8004fd4:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 8004fd8:	4910      	ldr	r1, [pc, #64]	@ (800501c <cdcd_open+0x20c>)
 8004fda:	4811      	ldr	r0, [pc, #68]	@ (8005020 <cdcd_open+0x210>)
 8004fdc:	f006 fb2a 	bl	800b634 <iprintf>
 8004fe0:	4b10      	ldr	r3, [pc, #64]	@ (8005024 <cdcd_open+0x214>)
 8004fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d000      	beq.n	8004ff2 <cdcd_open+0x1e2>
 8004ff0:	be00      	bkpt	0x0000
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e00b      	b.n	800500e <cdcd_open+0x1fe>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 8004ff6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004ffa:	330e      	adds	r3, #14
 8004ffc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 8005000:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fcf9 	bl	80049fc <_prep_out_transaction>

  return drv_len;
 800500a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 800500e:	4618      	mov	r0, r3
 8005010:	3760      	adds	r7, #96	@ 0x60
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	200003fc 	.word	0x200003fc
 800501c:	0800cfd8 	.word	0x0800cfd8
 8005020:	0800c888 	.word	0x0800c888
 8005024:	e000edf0 	.word	0xe000edf0

08005028 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b08a      	sub	sp, #40	@ 0x28
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	603a      	str	r2, [r7, #0]
 8005032:	71fb      	strb	r3, [r7, #7]
 8005034:	460b      	mov	r3, r1
 8005036:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b20      	cmp	r3, #32
 8005044:	d001      	beq.n	800504a <cdcd_control_xfer_cb+0x22>
 8005046:	2300      	movs	r3, #0
 8005048:	e0e7      	b.n	800521a <cdcd_control_xfer_cb+0x1f2>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800504a:	2300      	movs	r3, #0
 800504c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005050:	e014      	b.n	800507c <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8005052:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005056:	22a8      	movs	r2, #168	@ 0xa8
 8005058:	fb02 f303 	mul.w	r3, r2, r3
 800505c:	4a71      	ldr	r2, [pc, #452]	@ (8005224 <cdcd_control_xfer_cb+0x1fc>)
 800505e:	4413      	add	r3, r2
 8005060:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	889b      	ldrh	r3, [r3, #4]
 800506c:	b29b      	uxth	r3, r3
 800506e:	429a      	cmp	r2, r3
 8005070:	d009      	beq.n	8005086 <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8005072:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005076:	3301      	adds	r3, #1
 8005078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800507c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0e6      	beq.n	8005052 <cdcd_control_xfer_cb+0x2a>
 8005084:	e000      	b.n	8005088 <cdcd_control_xfer_cb+0x60>
      break;
 8005086:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8005088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <cdcd_control_xfer_cb+0x6c>
 8005090:	2300      	movs	r3, #0
 8005092:	e0c2      	b.n	800521a <cdcd_control_xfer_cb+0x1f2>

  switch (request->bRequest) {
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	785b      	ldrb	r3, [r3, #1]
 8005098:	3b20      	subs	r3, #32
 800509a:	2b03      	cmp	r3, #3
 800509c:	f200 80b3 	bhi.w	8005206 <cdcd_control_xfer_cb+0x1de>
 80050a0:	a201      	add	r2, pc, #4	@ (adr r2, 80050a8 <cdcd_control_xfer_cb+0x80>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050fb 	.word	0x080050fb
 80050b0:	0800511b 	.word	0x0800511b
 80050b4:	080051cf 	.word	0x080051cf
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 80050b8:	79bb      	ldrb	r3, [r7, #6]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d10b      	bne.n	80050d6 <cdcd_control_xfer_cb+0xae>
        TU_LOG_DRV("  Set Line Coding\r\n");
 80050be:	485a      	ldr	r0, [pc, #360]	@ (8005228 <cdcd_control_xfer_cb+0x200>)
 80050c0:	f006 fb28 	bl	800b714 <puts>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	f103 0208 	add.w	r2, r3, #8
 80050ca:	79f8      	ldrb	r0, [r7, #7]
 80050cc:	2307      	movs	r3, #7
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	f003 fc32 	bl	8008938 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 80050d4:	e099      	b.n	800520a <cdcd_control_xfer_cb+0x1e2>
      } else if (stage == CONTROL_STAGE_ACK) {
 80050d6:	79bb      	ldrb	r3, [r7, #6]
 80050d8:	2b03      	cmp	r3, #3
 80050da:	f040 8096 	bne.w	800520a <cdcd_control_xfer_cb+0x1e2>
        if (tud_cdc_line_coding_cb) {
 80050de:	4b53      	ldr	r3, [pc, #332]	@ (800522c <cdcd_control_xfer_cb+0x204>)
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8092 	beq.w	800520a <cdcd_control_xfer_cb+0x1e2>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	f103 0208 	add.w	r2, r3, #8
 80050ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f3af 8000 	nop.w
      break;
 80050f8:	e087      	b.n	800520a <cdcd_control_xfer_cb+0x1e2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 80050fa:	79bb      	ldrb	r3, [r7, #6]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	f040 8086 	bne.w	800520e <cdcd_control_xfer_cb+0x1e6>
        TU_LOG_DRV("  Get Line Coding\r\n");
 8005102:	484b      	ldr	r0, [pc, #300]	@ (8005230 <cdcd_control_xfer_cb+0x208>)
 8005104:	f006 fb06 	bl	800b714 <puts>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	f103 0208 	add.w	r2, r3, #8
 800510e:	79f8      	ldrb	r0, [r7, #7]
 8005110:	2307      	movs	r3, #7
 8005112:	6839      	ldr	r1, [r7, #0]
 8005114:	f003 fc10 	bl	8008938 <tud_control_xfer>
      }
      break;
 8005118:	e079      	b.n	800520e <cdcd_control_xfer_cb+0x1e6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 800511a:	79bb      	ldrb	r3, [r7, #6]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d105      	bne.n	800512c <cdcd_control_xfer_cb+0x104>
        tud_control_status(rhport, request);
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f003 fb95 	bl	8008854 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 800512a:	e072      	b.n	8005212 <cdcd_control_xfer_cb+0x1ea>
      } else if (stage == CONTROL_STAGE_ACK) {
 800512c:	79bb      	ldrb	r3, [r7, #6]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d16f      	bne.n	8005212 <cdcd_control_xfer_cb+0x1ea>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	885b      	ldrh	r3, [r3, #2]
 8005136:	b29b      	uxth	r3, r3
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	fa22 f303 	lsr.w	r3, r2, r3
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	bf14      	ite	ne
 800514e:	2301      	movne	r3, #1
 8005150:	2300      	moveq	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	885b      	ldrh	r3, [r3, #2]
 800515a:	b29b      	uxth	r3, r3
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	2301      	movs	r3, #1
 8005160:	75fb      	strb	r3, [r7, #23]
 8005162:	7dfb      	ldrb	r3, [r7, #23]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	fa22 f303 	lsr.w	r3, r2, r3
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	bf14      	ite	ne
 8005172:	2301      	movne	r3, #1
 8005174:	2300      	moveq	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	885b      	ldrh	r3, [r3, #2]
 800517e:	b29b      	uxth	r3, r3
 8005180:	b2da      	uxtb	r2, r3
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	f103 021c 	add.w	r2, r3, #28
 800518c:	7ffb      	ldrb	r3, [r7, #31]
 800518e:	2b00      	cmp	r3, #0
 8005190:	bf14      	ite	ne
 8005192:	2301      	movne	r3, #1
 8005194:	2300      	moveq	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f083 0301 	eor.w	r3, r3, #1
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	4619      	mov	r1, r3
 80051a6:	4610      	mov	r0, r2
 80051a8:	f001 faa5 	bl	80066f6 <tu_fifo_set_overwritable>
        TU_LOG_DRV("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);
 80051ac:	7ffb      	ldrb	r3, [r7, #31]
 80051ae:	7fba      	ldrb	r2, [r7, #30]
 80051b0:	4619      	mov	r1, r3
 80051b2:	4820      	ldr	r0, [pc, #128]	@ (8005234 <cdcd_control_xfer_cb+0x20c>)
 80051b4:	f006 fa3e 	bl	800b634 <iprintf>
        if (tud_cdc_line_state_cb) {
 80051b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005238 <cdcd_control_xfer_cb+0x210>)
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d029      	beq.n	8005212 <cdcd_control_xfer_cb+0x1ea>
          tud_cdc_line_state_cb(itf, dtr, rts);
 80051be:	7fba      	ldrb	r2, [r7, #30]
 80051c0:	7ff9      	ldrb	r1, [r7, #31]
 80051c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051c6:	4618      	mov	r0, r3
 80051c8:	f3af 8000 	nop.w
      break;
 80051cc:	e021      	b.n	8005212 <cdcd_control_xfer_cb+0x1ea>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 80051ce:	79bb      	ldrb	r3, [r7, #6]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d105      	bne.n	80051e0 <cdcd_control_xfer_cb+0x1b8>
        tud_control_status(rhport, request);
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	6839      	ldr	r1, [r7, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f003 fb3b 	bl	8008854 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 80051de:	e01a      	b.n	8005216 <cdcd_control_xfer_cb+0x1ee>
      } else if (stage == CONTROL_STAGE_ACK) {
 80051e0:	79bb      	ldrb	r3, [r7, #6]
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d117      	bne.n	8005216 <cdcd_control_xfer_cb+0x1ee>
        TU_LOG_DRV("  Send Break\r\n");
 80051e6:	4815      	ldr	r0, [pc, #84]	@ (800523c <cdcd_control_xfer_cb+0x214>)
 80051e8:	f006 fa94 	bl	800b714 <puts>
        if (tud_cdc_send_break_cb) {
 80051ec:	4b14      	ldr	r3, [pc, #80]	@ (8005240 <cdcd_control_xfer_cb+0x218>)
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d011      	beq.n	8005216 <cdcd_control_xfer_cb+0x1ee>
          tud_cdc_send_break_cb(itf, request->wValue);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	885b      	ldrh	r3, [r3, #2]
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051fc:	4611      	mov	r1, r2
 80051fe:	4618      	mov	r0, r3
 8005200:	f3af 8000 	nop.w
      break;
 8005204:	e007      	b.n	8005216 <cdcd_control_xfer_cb+0x1ee>

    default:
      return false; // stall unsupported request
 8005206:	2300      	movs	r3, #0
 8005208:	e007      	b.n	800521a <cdcd_control_xfer_cb+0x1f2>
      break;
 800520a:	bf00      	nop
 800520c:	e004      	b.n	8005218 <cdcd_control_xfer_cb+0x1f0>
      break;
 800520e:	bf00      	nop
 8005210:	e002      	b.n	8005218 <cdcd_control_xfer_cb+0x1f0>
      break;
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <cdcd_control_xfer_cb+0x1f0>
      break;
 8005216:	bf00      	nop
  }

  return true;
 8005218:	2301      	movs	r3, #1
}
 800521a:	4618      	mov	r0, r3
 800521c:	3728      	adds	r7, #40	@ 0x28
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	200003fc 	.word	0x200003fc
 8005228:	0800c8a0 	.word	0x0800c8a0
 800522c:	00000000 	.word	0x00000000
 8005230:	0800c8b4 	.word	0x0800c8b4
 8005234:	0800c8c8 	.word	0x0800c8c8
 8005238:	00000000 	.word	0x00000000
 800523c:	0800c8f8 	.word	0x0800c8f8
 8005240:	00000000 	.word	0x00000000

08005244 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	4603      	mov	r3, r0
 800524e:	71fb      	strb	r3, [r7, #7]
 8005250:	460b      	mov	r3, r1
 8005252:	71bb      	strb	r3, [r7, #6]
 8005254:	4613      	mov	r3, r2
 8005256:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8005258:	2300      	movs	r3, #0
 800525a:	77fb      	strb	r3, [r7, #31]
 800525c:	e013      	b.n	8005286 <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 800525e:	7ffb      	ldrb	r3, [r7, #31]
 8005260:	22a8      	movs	r2, #168	@ 0xa8
 8005262:	fb02 f303 	mul.w	r3, r2, r3
 8005266:	4a59      	ldr	r2, [pc, #356]	@ (80053cc <cdcd_xfer_cb+0x188>)
 8005268:	4413      	add	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	78db      	ldrb	r3, [r3, #3]
 8005270:	79ba      	ldrb	r2, [r7, #6]
 8005272:	429a      	cmp	r2, r3
 8005274:	d00a      	beq.n	800528c <cdcd_xfer_cb+0x48>
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	789b      	ldrb	r3, [r3, #2]
 800527a:	79ba      	ldrb	r2, [r7, #6]
 800527c:	429a      	cmp	r2, r3
 800527e:	d005      	beq.n	800528c <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8005280:	7ffb      	ldrb	r3, [r7, #31]
 8005282:	3301      	adds	r3, #1
 8005284:	77fb      	strb	r3, [r7, #31]
 8005286:	7ffb      	ldrb	r3, [r7, #31]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0e8      	beq.n	800525e <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 800528c:	7ffb      	ldrb	r3, [r7, #31]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d010      	beq.n	80052b4 <cdcd_xfer_cb+0x70>
 8005292:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8005296:	494e      	ldr	r1, [pc, #312]	@ (80053d0 <cdcd_xfer_cb+0x18c>)
 8005298:	484e      	ldr	r0, [pc, #312]	@ (80053d4 <cdcd_xfer_cb+0x190>)
 800529a:	f006 f9cb 	bl	800b634 <iprintf>
 800529e:	4b4e      	ldr	r3, [pc, #312]	@ (80053d8 <cdcd_xfer_cb+0x194>)
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d000      	beq.n	80052b0 <cdcd_xfer_cb+0x6c>
 80052ae:	be00      	bkpt	0x0000
 80052b0:	2300      	movs	r3, #0
 80052b2:	e087      	b.n	80053c4 <cdcd_xfer_cb+0x180>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 80052b4:	7ffb      	ldrb	r3, [r7, #31]
 80052b6:	01db      	lsls	r3, r3, #7
 80052b8:	4a48      	ldr	r2, [pc, #288]	@ (80053dc <cdcd_xfer_cb+0x198>)
 80052ba:	4413      	add	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	78db      	ldrb	r3, [r3, #3]
 80052c2:	79ba      	ldrb	r2, [r7, #6]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d148      	bne.n	800535a <cdcd_xfer_cb+0x116>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	3310      	adds	r3, #16
 80052cc:	6939      	ldr	r1, [r7, #16]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	b292      	uxth	r2, r2
 80052d2:	4618      	mov	r0, r3
 80052d4:	f001 f9ed 	bl	80066b2 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 80052d8:	4b41      	ldr	r3, [pc, #260]	@ (80053e0 <cdcd_xfer_cb+0x19c>)
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d027      	beq.n	800532e <cdcd_xfer_cb+0xea>
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	795b      	ldrb	r3, [r3, #5]
 80052e2:	2bff      	cmp	r3, #255	@ 0xff
 80052e4:	d023      	beq.n	800532e <cdcd_xfer_cb+0xea>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	e01c      	b.n	8005326 <cdcd_xfer_cb+0xe2>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	795a      	ldrb	r2, [r3, #5]
 80052f0:	6939      	ldr	r1, [r7, #16]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	440b      	add	r3, r1
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d111      	bne.n	8005320 <cdcd_xfer_cb+0xdc>
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	3310      	adds	r3, #16
 8005300:	4618      	mov	r0, r3
 8005302:	f001 f8e5 	bl	80064d0 <tu_fifo_empty>
 8005306:	4603      	mov	r3, r0
 8005308:	f083 0301 	eor.w	r3, r3, #1
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d006      	beq.n	8005320 <cdcd_xfer_cb+0xdc>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	795a      	ldrb	r2, [r3, #5]
 8005316:	7ffb      	ldrb	r3, [r7, #31]
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	3301      	adds	r3, #1
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d3de      	bcc.n	80052ec <cdcd_xfer_cb+0xa8>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 800532e:	4b2d      	ldr	r3, [pc, #180]	@ (80053e4 <cdcd_xfer_cb+0x1a0>)
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00e      	beq.n	8005352 <cdcd_xfer_cb+0x10e>
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	3310      	adds	r3, #16
 8005338:	4618      	mov	r0, r3
 800533a:	f001 f8c9 	bl	80064d0 <tu_fifo_empty>
 800533e:	4603      	mov	r3, r0
 8005340:	f083 0301 	eor.w	r3, r3, #1
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <cdcd_xfer_cb+0x10e>
      tud_cdc_rx_cb(itf);
 800534a:	7ffb      	ldrb	r3, [r7, #31]
 800534c:	4618      	mov	r0, r3
 800534e:	f3af 8000 	nop.w
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 8005352:	7ffb      	ldrb	r3, [r7, #31]
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff fb51 	bl	80049fc <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	789b      	ldrb	r3, [r3, #2]
 800535e:	79ba      	ldrb	r2, [r7, #6]
 8005360:	429a      	cmp	r2, r3
 8005362:	d12e      	bne.n	80053c2 <cdcd_xfer_cb+0x17e>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 8005364:	4b20      	ldr	r3, [pc, #128]	@ (80053e8 <cdcd_xfer_cb+0x1a4>)
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <cdcd_xfer_cb+0x12e>
      tud_cdc_tx_complete_cb(itf);
 800536a:	7ffb      	ldrb	r3, [r7, #31]
 800536c:	4618      	mov	r0, r3
 800536e:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 8005372:	7ffb      	ldrb	r3, [r7, #31]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff fc27 	bl	8004bc8 <tud_cdc_n_write_flush>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d120      	bne.n	80053c2 <cdcd_xfer_cb+0x17e>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	331c      	adds	r3, #28
 8005384:	4618      	mov	r0, r3
 8005386:	f001 f872 	bl	800646e <tu_fifo_count>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d118      	bne.n	80053c2 <cdcd_xfer_cb+0x17e>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d015      	beq.n	80053c2 <cdcd_xfer_cb+0x17e>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800539c:	2b00      	cmp	r3, #0
 800539e:	d110      	bne.n	80053c2 <cdcd_xfer_cb+0x17e>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	789a      	ldrb	r2, [r3, #2]
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	4611      	mov	r1, r2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f003 f871 	bl	8008490 <usbd_edpt_claim>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d006      	beq.n	80053c2 <cdcd_xfer_cb+0x17e>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	7899      	ldrb	r1, [r3, #2]
 80053b8:	79f8      	ldrb	r0, [r7, #7]
 80053ba:	2300      	movs	r3, #0
 80053bc:	2200      	movs	r2, #0
 80053be:	f003 f8bb 	bl	8008538 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80053c2:	2301      	movs	r3, #1
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3720      	adds	r7, #32
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	200003fc 	.word	0x200003fc
 80053d0:	0800cfe4 	.word	0x0800cfe4
 80053d4:	0800c888 	.word	0x0800c888
 80053d8:	e000edf0 	.word	0xe000edf0
 80053dc:	200004a4 	.word	0x200004a4
	...

080053ec <tud_hid_set_protocol_cb>:
}

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	460a      	mov	r2, r1
 80053f6:	71fb      	strb	r3, [r7, #7]
 80053f8:	4613      	mov	r3, r2
 80053fa:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) protocol;
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <tud_hid_set_idle_cb>:

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	4603      	mov	r3, r0
 800540e:	460a      	mov	r2, r1
 8005410:	71fb      	strb	r3, [r7, #7]
 8005412:	4613      	mov	r3, r2
 8005414:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 8005416:	2301      	movs	r3, #1
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <tud_hid_report_complete_cb>:

TU_ATTR_WEAK void tud_hid_report_complete_cb(uint8_t instance, uint8_t const* report, uint16_t len) {
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	4603      	mov	r3, r0
 800542a:	6039      	str	r1, [r7, #0]
 800542c:	71fb      	strb	r3, [r7, #7]
 800542e:	4613      	mov	r3, r2
 8005430:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report;
  (void) len;
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr

0800543c <tud_hid_report_failed_cb>:

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	603a      	str	r2, [r7, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	4603      	mov	r3, r0
 8005448:	71fb      	strb	r3, [r7, #7]
 800544a:	460b      	mov	r3, r1
 800544c:	71bb      	strb	r3, [r7, #6]
 800544e:	4613      	mov	r3, r2
 8005450:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr

0800545c <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 8005466:	2300      	movs	r3, #0
 8005468:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 800546a:	79fa      	ldrb	r2, [r7, #7]
 800546c:	491b      	ldr	r1, [pc, #108]	@ (80054dc <tud_hid_n_ready+0x80>)
 800546e:	4613      	mov	r3, r2
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	3301      	adds	r3, #1
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	73bb      	strb	r3, [r7, #14]
 800547e:	f001 fb61 	bl	8006b44 <tud_mounted>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d009      	beq.n	800549c <tud_hid_n_ready+0x40>
 8005488:	f001 fb6c 	bl	8006b64 <tud_suspended>
 800548c:	4603      	mov	r3, r0
 800548e:	f083 0301 	eor.w	r3, r3, #1
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <tud_hid_n_ready+0x40>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <tud_hid_n_ready+0x42>
 800549c:	2300      	movs	r3, #0
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d010      	beq.n	80054ca <tud_hid_n_ready+0x6e>
 80054a8:	7bbb      	ldrb	r3, [r7, #14]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00d      	beq.n	80054ca <tud_hid_n_ready+0x6e>
 80054ae:	7bba      	ldrb	r2, [r7, #14]
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	4611      	mov	r1, r2
 80054b4:	4618      	mov	r0, r3
 80054b6:	f003 f8cd 	bl	8008654 <usbd_edpt_busy>
 80054ba:	4603      	mov	r3, r0
 80054bc:	f083 0301 	eor.w	r3, r3, #1
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <tud_hid_n_ready+0x6e>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <tud_hid_n_ready+0x70>
 80054ca:	2300      	movs	r3, #0
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	b2db      	uxtb	r3, r3
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000528 	.word	0x20000528

080054e0 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08e      	sub	sp, #56	@ 0x38
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	603a      	str	r2, [r7, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	71fb      	strb	r3, [r7, #7]
 80054ee:	460b      	mov	r3, r1
 80054f0:	71bb      	strb	r3, [r7, #6]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <tud_hid_n_report+0x20>
 80054fc:	2300      	movs	r3, #0
 80054fe:	e06e      	b.n	80055de <tud_hid_n_report+0xfe>
  const uint8_t rhport = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 8005506:	79fa      	ldrb	r2, [r7, #7]
 8005508:	4613      	mov	r3, r2
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4a35      	ldr	r2, [pc, #212]	@ (80055e8 <tud_hid_n_report+0x108>)
 8005512:	4413      	add	r3, r2
 8005514:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8005516:	79fa      	ldrb	r2, [r7, #7]
 8005518:	4613      	mov	r3, r2
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	4413      	add	r3, r2
 800551e:	019b      	lsls	r3, r3, #6
 8005520:	4a32      	ldr	r2, [pc, #200]	@ (80055ec <tud_hid_n_report+0x10c>)
 8005522:	4413      	add	r3, r2
 8005524:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	785a      	ldrb	r2, [r3, #1]
 800552a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800552e:	4611      	mov	r1, r2
 8005530:	4618      	mov	r0, r3
 8005532:	f002 ffad 	bl	8008490 <usbd_edpt_claim>
 8005536:	4603      	mov	r3, r0
 8005538:	f083 0301 	eor.w	r3, r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <tud_hid_n_report+0x66>
 8005542:	2300      	movs	r3, #0
 8005544:	e04b      	b.n	80055de <tud_hid_n_report+0xfe>

  // prepare data
  if (report_id) {
 8005546:	79bb      	ldrb	r3, [r7, #6]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d022      	beq.n	8005592 <tud_hid_n_report+0xb2>
    p_epbuf->epin[0] = report_id;
 800554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554e:	79ba      	ldrb	r2, [r7, #6]
 8005550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 8005554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005556:	3340      	adds	r3, #64	@ 0x40
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	88bb      	ldrh	r3, [r7, #4]
 800555c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800555e:	223f      	movs	r2, #63	@ 0x3f
 8005560:	627a      	str	r2, [r7, #36]	@ 0x24
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	623a      	str	r2, [r7, #32]
 8005566:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 8005568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	429a      	cmp	r2, r3
 800556e:	d202      	bcs.n	8005576 <tud_hid_n_report+0x96>
    return -1;
 8005570:	f04f 33ff 	mov.w	r3, #4294967295
 8005574:	e005      	b.n	8005582 <tud_hid_n_report+0xa2>
  memcpy(dest, src, count);
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	6a39      	ldr	r1, [r7, #32]
 800557a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800557c:	f006 fa59 	bl	800ba32 <memcpy>
  return 0;
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <tud_hid_n_report+0xaa>
 8005586:	2300      	movs	r3, #0
 8005588:	e029      	b.n	80055de <tud_hid_n_report+0xfe>
    len++;
 800558a:	88bb      	ldrh	r3, [r7, #4]
 800558c:	3301      	adds	r3, #1
 800558e:	80bb      	strh	r3, [r7, #4]
 8005590:	e01a      	b.n	80055c8 <tud_hid_n_report+0xe8>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8005592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005594:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8005598:	88bb      	ldrh	r3, [r7, #4]
 800559a:	61ba      	str	r2, [r7, #24]
 800559c:	2240      	movs	r2, #64	@ 0x40
 800559e:	617a      	str	r2, [r7, #20]
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	613a      	str	r2, [r7, #16]
 80055a4:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d202      	bcs.n	80055b4 <tud_hid_n_report+0xd4>
    return -1;
 80055ae:	f04f 33ff 	mov.w	r3, #4294967295
 80055b2:	e005      	b.n	80055c0 <tud_hid_n_report+0xe0>
  memcpy(dest, src, count);
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	6939      	ldr	r1, [r7, #16]
 80055b8:	69b8      	ldr	r0, [r7, #24]
 80055ba:	f006 fa3a 	bl	800ba32 <memcpy>
  return 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <tud_hid_n_report+0xe8>
 80055c4:	2300      	movs	r3, #0
 80055c6:	e00a      	b.n	80055de <tud_hid_n_report+0xfe>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	7859      	ldrb	r1, [r3, #1]
 80055cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ce:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80055d2:	88bb      	ldrh	r3, [r7, #4]
 80055d4:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80055d8:	f002 ffae 	bl	8008538 <usbd_edpt_xfer>
 80055dc:	4603      	mov	r3, r0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3738      	adds	r7, #56	@ 0x38
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000528 	.word	0x20000528
 80055ec:	20000534 	.word	0x20000534

080055f0 <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4603      	mov	r3, r0
 80055fa:	71fb      	strb	r3, [r7, #7]
 80055fc:	460b      	mov	r3, r1
 80055fe:	71bb      	strb	r3, [r7, #6]
 8005600:	4613      	mov	r3, r2
 8005602:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 8005604:	797b      	ldrb	r3, [r7, #5]
 8005606:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	f107 030a 	add.w	r3, r7, #10
 8005618:	6811      	ldr	r1, [r2, #0]
 800561a:	6019      	str	r1, [r3, #0]
 800561c:	8892      	ldrh	r2, [r2, #4]
 800561e:	809a      	strh	r2, [r3, #4]
 8005620:	e007      	b.n	8005632 <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 8005622:	f107 0308 	add.w	r3, r7, #8
 8005626:	3302      	adds	r3, #2
 8005628:	2206      	movs	r2, #6
 800562a:	2100      	movs	r1, #0
 800562c:	4618      	mov	r0, r3
 800562e:	f006 f985 	bl	800b93c <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 8005632:	f107 0208 	add.w	r2, r7, #8
 8005636:	79b9      	ldrb	r1, [r7, #6]
 8005638:	79f8      	ldrb	r0, [r7, #7]
 800563a:	2308      	movs	r3, #8
 800563c:	f7ff ff50 	bl	80054e0 <tud_hid_n_report>
 8005640:	4603      	mov	r3, r0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <tud_hid_n_mouse_report>:

bool tud_hid_n_mouse_report(uint8_t instance, uint8_t report_id,
                            uint8_t buttons, int8_t x, int8_t y, int8_t vertical, int8_t horizontal) {
 800564a:	b590      	push	{r4, r7, lr}
 800564c:	b085      	sub	sp, #20
 800564e:	af00      	add	r7, sp, #0
 8005650:	4604      	mov	r4, r0
 8005652:	4608      	mov	r0, r1
 8005654:	4611      	mov	r1, r2
 8005656:	461a      	mov	r2, r3
 8005658:	4623      	mov	r3, r4
 800565a:	71fb      	strb	r3, [r7, #7]
 800565c:	4603      	mov	r3, r0
 800565e:	71bb      	strb	r3, [r7, #6]
 8005660:	460b      	mov	r3, r1
 8005662:	717b      	strb	r3, [r7, #5]
 8005664:	4613      	mov	r3, r2
 8005666:	713b      	strb	r3, [r7, #4]
  hid_mouse_report_t report = {
 8005668:	797b      	ldrb	r3, [r7, #5]
 800566a:	723b      	strb	r3, [r7, #8]
 800566c:	793b      	ldrb	r3, [r7, #4]
 800566e:	727b      	strb	r3, [r7, #9]
 8005670:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005674:	72bb      	strb	r3, [r7, #10]
 8005676:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800567a:	72fb      	strb	r3, [r7, #11]
 800567c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005680:	733b      	strb	r3, [r7, #12]
    .y = y,
    .wheel = vertical,
    .pan = horizontal
  };

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 8005682:	f107 0208 	add.w	r2, r7, #8
 8005686:	79b9      	ldrb	r1, [r7, #6]
 8005688:	79f8      	ldrb	r0, [r7, #7]
 800568a:	2305      	movs	r3, #5
 800568c:	f7ff ff28 	bl	80054e0 <tud_hid_n_report>
 8005690:	4603      	mov	r3, r0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	bd90      	pop	{r4, r7, pc}

0800569a <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 800569a:	b580      	push	{r7, lr}
 800569c:	af00      	add	r7, sp, #0
  hidd_reset(0);
 800569e:	2000      	movs	r0, #0
 80056a0:	f000 f80a 	bl	80056b8 <hidd_reset>
}
 80056a4:	bf00      	nop
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <hidd_deinit>:

bool hidd_deinit(void) {
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  return true;
 80056ac:	2301      	movs	r3, #1
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr
	...

080056b8 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 80056c2:	220c      	movs	r2, #12
 80056c4:	2100      	movs	r1, #0
 80056c6:	4803      	ldr	r0, [pc, #12]	@ (80056d4 <hidd_reset+0x1c>)
 80056c8:	f006 f938 	bl	800b93c <memset>
}
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20000528 	.word	0x20000528

080056d8 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b094      	sub	sp, #80	@ 0x50
 80056dc:	af02      	add	r7, sp, #8
 80056de:	4603      	mov	r3, r0
 80056e0:	6039      	str	r1, [r7, #0]
 80056e2:	71fb      	strb	r3, [r7, #7]
 80056e4:	4613      	mov	r3, r2
 80056e6:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	795b      	ldrb	r3, [r3, #5]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d001      	beq.n	80056f4 <hidd_open+0x1c>
 80056f0:	2300      	movs	r3, #0
 80056f2:	e0e8      	b.n	80058c6 <hidd_open+0x1ee>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	791b      	ldrb	r3, [r3, #4]
 80056f8:	461a      	mov	r2, r3
 80056fa:	00d2      	lsls	r2, r2, #3
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8005700:	3312      	adds	r3, #18
 8005702:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 8005706:	88ba      	ldrh	r2, [r7, #4]
 8005708:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800570c:	429a      	cmp	r2, r3
 800570e:	d20f      	bcs.n	8005730 <hidd_open+0x58>
 8005710:	22e5      	movs	r2, #229	@ 0xe5
 8005712:	496f      	ldr	r1, [pc, #444]	@ (80058d0 <hidd_open+0x1f8>)
 8005714:	486f      	ldr	r0, [pc, #444]	@ (80058d4 <hidd_open+0x1fc>)
 8005716:	f005 ff8d 	bl	800b634 <iprintf>
 800571a:	4b6f      	ldr	r3, [pc, #444]	@ (80058d8 <hidd_open+0x200>)
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d000      	beq.n	800572c <hidd_open+0x54>
 800572a:	be00      	bkpt	0x0000
 800572c:	2300      	movs	r3, #0
 800572e:	e0ca      	b.n	80058c6 <hidd_open+0x1ee>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8005730:	2300      	movs	r3, #0
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005736:	e011      	b.n	800575c <hidd_open+0x84>
    p_hid = &_hidd_itf[hid_id];
 8005738:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800573c:	4613      	mov	r3, r2
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4a65      	ldr	r2, [pc, #404]	@ (80058dc <hidd_open+0x204>)
 8005746:	4413      	add	r3, r2
 8005748:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 800574a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <hidd_open+0x8e>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8005752:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005756:	3301      	adds	r3, #1
 8005758:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800575c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0e9      	beq.n	8005738 <hidd_open+0x60>
 8005764:	e000      	b.n	8005768 <hidd_open+0x90>
      break;
 8005766:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 8005768:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00f      	beq.n	8005790 <hidd_open+0xb8>
 8005770:	22f0      	movs	r2, #240	@ 0xf0
 8005772:	4957      	ldr	r1, [pc, #348]	@ (80058d0 <hidd_open+0x1f8>)
 8005774:	4857      	ldr	r0, [pc, #348]	@ (80058d4 <hidd_open+0x1fc>)
 8005776:	f005 ff5d 	bl	800b634 <iprintf>
 800577a:	4b57      	ldr	r3, [pc, #348]	@ (80058d8 <hidd_open+0x200>)
 800577c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800577e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d000      	beq.n	800578c <hidd_open+0xb4>
 800578a:	be00      	bkpt	0x0000
 800578c:	2300      	movs	r3, #0
 800578e:	e09a      	b.n	80058c6 <hidd_open+0x1ee>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8005790:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8005794:	4613      	mov	r3, r2
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	4413      	add	r3, r2
 800579a:	019b      	lsls	r3, r3, #6
 800579c:	4a50      	ldr	r2, [pc, #320]	@ (80058e0 <hidd_open+0x208>)
 800579e:	4413      	add	r3, r2
 80057a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80057b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057bc:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	3301      	adds	r3, #1
 80057c2:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 80057c4:	2b21      	cmp	r3, #33	@ 0x21
 80057c6:	d00f      	beq.n	80057e8 <hidd_open+0x110>
 80057c8:	22f7      	movs	r2, #247	@ 0xf7
 80057ca:	4941      	ldr	r1, [pc, #260]	@ (80058d0 <hidd_open+0x1f8>)
 80057cc:	4841      	ldr	r0, [pc, #260]	@ (80058d4 <hidd_open+0x1fc>)
 80057ce:	f005 ff31 	bl	800b634 <iprintf>
 80057d2:	4b41      	ldr	r3, [pc, #260]	@ (80058d8 <hidd_open+0x200>)
 80057d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d000      	beq.n	80057e4 <hidd_open+0x10c>
 80057e2:	be00      	bkpt	0x0000
 80057e4:	2300      	movs	r3, #0
 80057e6:	e06e      	b.n	80058c6 <hidd_open+0x1ee>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 80057e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057ec:	609a      	str	r2, [r3, #8]
 80057ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f0:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8005800:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	7919      	ldrb	r1, [r3, #4]
 8005806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005808:	3302      	adds	r3, #2
 800580a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800580c:	3201      	adds	r2, #1
 800580e:	79f8      	ldrb	r0, [r7, #7]
 8005810:	9201      	str	r2, [sp, #4]
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	2303      	movs	r3, #3
 8005816:	460a      	mov	r2, r1
 8005818:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800581a:	f002 fd6d 	bl	80082f8 <usbd_open_edpt_pair>
 800581e:	4603      	mov	r3, r0
 8005820:	f083 0301 	eor.w	r3, r3, #1
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00f      	beq.n	800584a <hidd_open+0x172>
 800582a:	22fc      	movs	r2, #252	@ 0xfc
 800582c:	4928      	ldr	r1, [pc, #160]	@ (80058d0 <hidd_open+0x1f8>)
 800582e:	4829      	ldr	r0, [pc, #164]	@ (80058d4 <hidd_open+0x1fc>)
 8005830:	f005 ff00 	bl	800b634 <iprintf>
 8005834:	4b28      	ldr	r3, [pc, #160]	@ (80058d8 <hidd_open+0x200>)
 8005836:	633b      	str	r3, [r7, #48]	@ 0x30
 8005838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d000      	beq.n	8005846 <hidd_open+0x16e>
 8005844:	be00      	bkpt	0x0000
 8005846:	2300      	movs	r3, #0
 8005848:	e03d      	b.n	80058c6 <hidd_open+0x1ee>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	799b      	ldrb	r3, [r3, #6]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d103      	bne.n	800585a <hidd_open+0x182>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	79da      	ldrb	r2, [r3, #7]
 8005856:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005858:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 800585a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800585c:	2201      	movs	r2, #1
 800585e:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	789a      	ldrb	r2, [r3, #2]
 8005864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005866:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 8005868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	3307      	adds	r3, #7
 800586e:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	881a      	ldrh	r2, [r3, #0]
 8005874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005876:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 8005878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800587a:	789b      	ldrb	r3, [r3, #2]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d020      	beq.n	80058c2 <hidd_open+0x1ea>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8005880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005882:	7899      	ldrb	r1, [r3, #2]
 8005884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005886:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 800588a:	79f8      	ldrb	r0, [r7, #7]
 800588c:	2340      	movs	r3, #64	@ 0x40
 800588e:	f002 fe53 	bl	8008538 <usbd_edpt_xfer>
 8005892:	4603      	mov	r3, r0
 8005894:	f083 0301 	eor.w	r3, r3, #1
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d011      	beq.n	80058c2 <hidd_open+0x1ea>
 800589e:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 80058a2:	490b      	ldr	r1, [pc, #44]	@ (80058d0 <hidd_open+0x1f8>)
 80058a4:	480b      	ldr	r0, [pc, #44]	@ (80058d4 <hidd_open+0x1fc>)
 80058a6:	f005 fec5 	bl	800b634 <iprintf>
 80058aa:	4b0b      	ldr	r3, [pc, #44]	@ (80058d8 <hidd_open+0x200>)
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d000      	beq.n	80058bc <hidd_open+0x1e4>
 80058ba:	be00      	bkpt	0x0000
 80058bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80058c0:	e001      	b.n	80058c6 <hidd_open+0x1ee>
  }

  return drv_len;
 80058c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3748      	adds	r7, #72	@ 0x48
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	0800cff4 	.word	0x0800cff4
 80058d4:	0800c908 	.word	0x0800c908
 80058d8:	e000edf0 	.word	0xe000edf0
 80058dc:	20000528 	.word	0x20000528
 80058e0:	20000534 	.word	0x20000534

080058e4 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b094      	sub	sp, #80	@ 0x50
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	4603      	mov	r3, r0
 80058ec:	603a      	str	r2, [r7, #0]
 80058ee:	71fb      	strb	r3, [r7, #7]
 80058f0:	460b      	mov	r3, r1
 80058f2:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d001      	beq.n	8005906 <hidd_control_xfer_cb+0x22>
 8005902:	2300      	movs	r3, #0
 8005904:	e1e0      	b.n	8005cc8 <hidd_control_xfer_cb+0x3e4>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	889b      	ldrh	r3, [r3, #4]
 800590a:	b29b      	uxth	r3, r3
 800590c:	b2db      	uxtb	r3, r3
 800590e:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8005910:	2300      	movs	r3, #0
 8005912:	77bb      	strb	r3, [r7, #30]
 8005914:	e00f      	b.n	8005936 <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 8005916:	7fba      	ldrb	r2, [r7, #30]
 8005918:	4992      	ldr	r1, [pc, #584]	@ (8005b64 <hidd_control_xfer_cb+0x280>)
 800591a:	4613      	mov	r3, r2
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	440b      	add	r3, r1
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	7ffa      	ldrb	r2, [r7, #31]
 8005928:	429a      	cmp	r2, r3
 800592a:	d101      	bne.n	8005930 <hidd_control_xfer_cb+0x4c>
      return i;
 800592c:	7fbb      	ldrb	r3, [r7, #30]
 800592e:	e006      	b.n	800593e <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8005930:	7fbb      	ldrb	r3, [r7, #30]
 8005932:	3301      	adds	r3, #1
 8005934:	77bb      	strb	r3, [r7, #30]
 8005936:	7fbb      	ldrb	r3, [r7, #30]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0ec      	beq.n	8005916 <hidd_control_xfer_cb+0x32>
  return 0xFF;
 800593c:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 800593e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8005942:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <hidd_control_xfer_cb+0x6a>
 800594a:	2300      	movs	r3, #0
 800594c:	e1bc      	b.n	8005cc8 <hidd_control_xfer_cb+0x3e4>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 800594e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005952:	4613      	mov	r3, r2
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4a82      	ldr	r2, [pc, #520]	@ (8005b64 <hidd_control_xfer_cb+0x280>)
 800595c:	4413      	add	r3, r2
 800595e:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8005960:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005964:	4613      	mov	r3, r2
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	4413      	add	r3, r2
 800596a:	019b      	lsls	r3, r3, #6
 800596c:	4a7e      	ldr	r2, [pc, #504]	@ (8005b68 <hidd_control_xfer_cb+0x284>)
 800596e:	4413      	add	r3, r2
 8005970:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d145      	bne.n	8005a0c <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8005980:	79bb      	ldrb	r3, [r7, #6]
 8005982:	2b01      	cmp	r3, #1
 8005984:	f040 819f 	bne.w	8005cc6 <hidd_control_xfer_cb+0x3e2>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	885b      	ldrh	r3, [r3, #2]
 800598c:	b29b      	uxth	r3, r3
 800598e:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005990:	8bbb      	ldrh	r3, [r7, #28]
 8005992:	0a1b      	lsrs	r3, r3, #8
 8005994:	b29b      	uxth	r3, r3
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	2b06      	cmp	r3, #6
 80059a2:	d11b      	bne.n	80059dc <hidd_control_xfer_cb+0xf8>
 80059a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059a8:	2b21      	cmp	r3, #33	@ 0x21
 80059aa:	d117      	bne.n	80059dc <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 80059ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <hidd_control_xfer_cb+0xd4>
 80059b4:	2300      	movs	r3, #0
 80059b6:	e187      	b.n	8005cc8 <hidd_control_xfer_cb+0x3e4>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 80059b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	79f8      	ldrb	r0, [r7, #7]
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	f002 ffb7 	bl	8008938 <tud_control_xfer>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f083 0301 	eor.w	r3, r3, #1
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 8177 	beq.w	8005cc6 <hidd_control_xfer_cb+0x3e2>
 80059d8:	2300      	movs	r3, #0
 80059da:	e175      	b.n	8005cc8 <hidd_control_xfer_cb+0x3e4>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	785b      	ldrb	r3, [r3, #1]
 80059e0:	2b06      	cmp	r3, #6
 80059e2:	d111      	bne.n	8005a08 <hidd_control_xfer_cb+0x124>
 80059e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059e8:	2b22      	cmp	r3, #34	@ 0x22
 80059ea:	d10d      	bne.n	8005a08 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 80059ec:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fa fff7 	bl	80009e4 <tud_hid_descriptor_report_cb>
 80059f6:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 80059f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fa:	889b      	ldrh	r3, [r3, #4]
 80059fc:	79f8      	ldrb	r0, [r7, #7]
 80059fe:	6a3a      	ldr	r2, [r7, #32]
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	f002 ff99 	bl	8008938 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8005a06:	e15e      	b.n	8005cc6 <hidd_control_xfer_cb+0x3e2>
      } else {
        return false; // stall unsupported request
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e15d      	b.n	8005cc8 <hidd_control_xfer_cb+0x3e4>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	f040 8148 	bne.w	8005cac <hidd_control_xfer_cb+0x3c8>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	2b0a      	cmp	r3, #10
 8005a24:	f200 8140 	bhi.w	8005ca8 <hidd_control_xfer_cb+0x3c4>
 8005a28:	a201      	add	r2, pc, #4	@ (adr r2, 8005a30 <hidd_control_xfer_cb+0x14c>)
 8005a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2e:	bf00      	nop
 8005a30:	08005a5d 	.word	0x08005a5d
 8005a34:	08005c47 	.word	0x08005c47
 8005a38:	08005c5d 	.word	0x08005c5d
 8005a3c:	08005ca9 	.word	0x08005ca9
 8005a40:	08005ca9 	.word	0x08005ca9
 8005a44:	08005ca9 	.word	0x08005ca9
 8005a48:	08005ca9 	.word	0x08005ca9
 8005a4c:	08005ca9 	.word	0x08005ca9
 8005a50:	08005b3f 	.word	0x08005b3f
 8005a54:	08005c01 	.word	0x08005c01
 8005a58:	08005c73 	.word	0x08005c73
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8005a5c:	79bb      	ldrb	r3, [r7, #6]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	f040 8126 	bne.w	8005cb0 <hidd_control_xfer_cb+0x3cc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	885b      	ldrh	r3, [r3, #2]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	82bb      	strh	r3, [r7, #20]
 8005a6c:	8abb      	ldrh	r3, [r7, #20]
 8005a6e:	0a1b      	lsrs	r3, r3, #8
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	885b      	ldrh	r3, [r3, #2]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005a80:	8afb      	ldrh	r3, [r7, #22]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8005a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8a:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	88db      	ldrh	r3, [r3, #6]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	837b      	strh	r3, [r7, #26]
 8005a94:	2340      	movs	r3, #64	@ 0x40
 8005a96:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005a98:	8b7a      	ldrh	r2, [r7, #26]
 8005a9a:	8b3b      	ldrh	r3, [r7, #24]
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	bf28      	it	cs
 8005aa0:	4613      	movcs	r3, r2
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 8005aae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d013      	beq.n	8005ade <hidd_control_xfer_cb+0x1fa>
 8005ab6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d90f      	bls.n	8005ade <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 8005abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ac4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005ac8:	701a      	strb	r2, [r3, #0]
            req_len--;
 8005aca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8005ad4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005ad8:	3301      	adds	r3, #1
 8005ada:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8005ade:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005ae2:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8005ae6:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8005aea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005af2:	f7fa fdd9 	bl	80006a8 <tud_hid_get_report_cb>
 8005af6:	4603      	mov	r3, r0
 8005af8:	461a      	mov	r2, r3
 8005afa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005afe:	4413      	add	r3, r2
 8005b00:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8005b04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d110      	bne.n	8005b2e <hidd_control_xfer_cb+0x24a>
 8005b0c:	f240 123f 	movw	r2, #319	@ 0x13f
 8005b10:	4916      	ldr	r1, [pc, #88]	@ (8005b6c <hidd_control_xfer_cb+0x288>)
 8005b12:	4817      	ldr	r0, [pc, #92]	@ (8005b70 <hidd_control_xfer_cb+0x28c>)
 8005b14:	f005 fd8e 	bl	800b634 <iprintf>
 8005b18:	4b16      	ldr	r3, [pc, #88]	@ (8005b74 <hidd_control_xfer_cb+0x290>)
 8005b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d000      	beq.n	8005b2a <hidd_control_xfer_cb+0x246>
 8005b28:	be00      	bkpt	0x0000
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e0cc      	b.n	8005cc8 <hidd_control_xfer_cb+0x3e4>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8005b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005b34:	79f8      	ldrb	r0, [r7, #7]
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	f002 fefe 	bl	8008938 <tud_control_xfer>
        }
        break;
 8005b3c:	e0b8      	b.n	8005cb0 <hidd_control_xfer_cb+0x3cc>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8005b3e:	79bb      	ldrb	r3, [r7, #6]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d119      	bne.n	8005b78 <hidd_control_xfer_cb+0x294>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	88db      	ldrh	r3, [r3, #6]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b40      	cmp	r3, #64	@ 0x40
 8005b4c:	d901      	bls.n	8005b52 <hidd_control_xfer_cb+0x26e>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e0ba      	b.n	8005cc8 <hidd_control_xfer_cb+0x3e4>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8005b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	88db      	ldrh	r3, [r3, #6]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	79f8      	ldrb	r0, [r7, #7]
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	f002 feeb 	bl	8008938 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8005b62:	e0a7      	b.n	8005cb4 <hidd_control_xfer_cb+0x3d0>
 8005b64:	20000528 	.word	0x20000528
 8005b68:	20000534 	.word	0x20000534
 8005b6c:	0800d000 	.word	0x0800d000
 8005b70:	0800c908 	.word	0x0800c908
 8005b74:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8005b78:	79bb      	ldrb	r3, [r7, #6]
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	f040 809a 	bne.w	8005cb4 <hidd_control_xfer_cb+0x3d0>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	885b      	ldrh	r3, [r3, #2]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005b88:	89bb      	ldrh	r3, [r7, #12]
 8005b8a:	0a1b      	lsrs	r3, r3, #8
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	885b      	ldrh	r3, [r3, #2]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005b9c:	89fb      	ldrh	r3, [r7, #14]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	88db      	ldrh	r3, [r3, #6]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	827b      	strh	r3, [r7, #18]
 8005bb0:	2340      	movs	r3, #64	@ 0x40
 8005bb2:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005bb4:	8a7a      	ldrh	r2, [r7, #18]
 8005bb6:	8a3b      	ldrh	r3, [r7, #16]
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	bf28      	it	cs
 8005bbc:	4613      	movcs	r3, r2
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 8005bc2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00e      	beq.n	8005be8 <hidd_control_xfer_cb+0x304>
 8005bca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d90b      	bls.n	8005be8 <hidd_control_xfer_cb+0x304>
 8005bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d105      	bne.n	8005be8 <hidd_control_xfer_cb+0x304>
            report_buf++;
 8005bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bde:	3301      	adds	r3, #1
 8005be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8005be2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005be4:	3b01      	subs	r3, #1
 8005be6:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8005be8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005bec:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005bf0:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8005bf4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bfa:	f7fa fd65 	bl	80006c8 <tud_hid_set_report_cb>
        break;
 8005bfe:	e059      	b.n	8005cb4 <hidd_control_xfer_cb+0x3d0>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8005c00:	79bb      	ldrb	r3, [r7, #6]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d158      	bne.n	8005cb8 <hidd_control_xfer_cb+0x3d4>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	885b      	ldrh	r3, [r3, #2]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005c0e:	897b      	ldrh	r3, [r7, #10]
 8005c10:	0a1b      	lsrs	r3, r3, #8
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c18:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1c:	79da      	ldrb	r2, [r3, #7]
 8005c1e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005c22:	4611      	mov	r1, r2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fbee 	bl	8005406 <tud_hid_set_idle_cb>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f083 0301 	eor.w	r3, r3, #1
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <hidd_control_xfer_cb+0x356>
 8005c36:	2300      	movs	r3, #0
 8005c38:	e046      	b.n	8005cc8 <hidd_control_xfer_cb+0x3e4>
          tud_control_status(rhport, request);
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f002 fe08 	bl	8008854 <tud_control_status>
        }
        break;
 8005c44:	e038      	b.n	8005cb8 <hidd_control_xfer_cb+0x3d4>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8005c46:	79bb      	ldrb	r3, [r7, #6]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d137      	bne.n	8005cbc <hidd_control_xfer_cb+0x3d8>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c4e:	1dda      	adds	r2, r3, #7
 8005c50:	79f8      	ldrb	r0, [r7, #7]
 8005c52:	2301      	movs	r3, #1
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	f002 fe6f 	bl	8008938 <tud_control_xfer>
        }
        break;
 8005c5a:	e02f      	b.n	8005cbc <hidd_control_xfer_cb+0x3d8>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8005c5c:	79bb      	ldrb	r3, [r7, #6]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d12e      	bne.n	8005cc0 <hidd_control_xfer_cb+0x3dc>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8005c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c64:	1d9a      	adds	r2, r3, #6
 8005c66:	79f8      	ldrb	r0, [r7, #7]
 8005c68:	2301      	movs	r3, #1
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	f002 fe64 	bl	8008938 <tud_control_xfer>
        }
        break;
 8005c70:	e026      	b.n	8005cc0 <hidd_control_xfer_cb+0x3dc>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8005c72:	79bb      	ldrb	r3, [r7, #6]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d105      	bne.n	8005c84 <hidd_control_xfer_cb+0x3a0>
          tud_control_status(rhport, request);
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f002 fde9 	bl	8008854 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8005c82:	e01f      	b.n	8005cc4 <hidd_control_xfer_cb+0x3e0>
        } else if (stage == CONTROL_STAGE_ACK) {
 8005c84:	79bb      	ldrb	r3, [r7, #6]
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d11c      	bne.n	8005cc4 <hidd_control_xfer_cb+0x3e0>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	885b      	ldrh	r3, [r3, #2]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c94:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8005c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c98:	799a      	ldrb	r2, [r3, #6]
 8005c9a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff fba3 	bl	80053ec <tud_hid_set_protocol_cb>
        break;
 8005ca6:	e00d      	b.n	8005cc4 <hidd_control_xfer_cb+0x3e0>

      default:
        return false; // stall unsupported request
 8005ca8:	2300      	movs	r3, #0
 8005caa:	e00d      	b.n	8005cc8 <hidd_control_xfer_cb+0x3e4>
    }
  } else {
    return false; // stall unsupported request
 8005cac:	2300      	movs	r3, #0
 8005cae:	e00b      	b.n	8005cc8 <hidd_control_xfer_cb+0x3e4>
        break;
 8005cb0:	bf00      	nop
 8005cb2:	e008      	b.n	8005cc6 <hidd_control_xfer_cb+0x3e2>
        break;
 8005cb4:	bf00      	nop
 8005cb6:	e006      	b.n	8005cc6 <hidd_control_xfer_cb+0x3e2>
        break;
 8005cb8:	bf00      	nop
 8005cba:	e004      	b.n	8005cc6 <hidd_control_xfer_cb+0x3e2>
        break;
 8005cbc:	bf00      	nop
 8005cbe:	e002      	b.n	8005cc6 <hidd_control_xfer_cb+0x3e2>
        break;
 8005cc0:	bf00      	nop
 8005cc2:	e000      	b.n	8005cc6 <hidd_control_xfer_cb+0x3e2>
        break;
 8005cc4:	bf00      	nop
  }

  return true;
 8005cc6:	2301      	movs	r3, #1
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3748      	adds	r7, #72	@ 0x48
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08a      	sub	sp, #40	@ 0x28
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4603      	mov	r3, r0
 8005cda:	71fb      	strb	r3, [r7, #7]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	71bb      	strb	r3, [r7, #6]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	77fb      	strb	r3, [r7, #31]
 8005ce8:	e014      	b.n	8005d14 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8005cea:	7ffa      	ldrb	r2, [r7, #31]
 8005cec:	4613      	mov	r3, r2
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4a44      	ldr	r2, [pc, #272]	@ (8005e08 <hidd_xfer_cb+0x138>)
 8005cf6:	4413      	add	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	789b      	ldrb	r3, [r3, #2]
 8005cfe:	79ba      	ldrb	r2, [r7, #6]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d00a      	beq.n	8005d1a <hidd_xfer_cb+0x4a>
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	79ba      	ldrb	r2, [r7, #6]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d005      	beq.n	8005d1a <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8005d0e:	7ffb      	ldrb	r3, [r7, #31]
 8005d10:	3301      	adds	r3, #1
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	7ffb      	ldrb	r3, [r7, #31]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d0e7      	beq.n	8005cea <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8005d1a:	7ffb      	ldrb	r3, [r7, #31]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d010      	beq.n	8005d42 <hidd_xfer_cb+0x72>
 8005d20:	f240 128d 	movw	r2, #397	@ 0x18d
 8005d24:	4939      	ldr	r1, [pc, #228]	@ (8005e0c <hidd_xfer_cb+0x13c>)
 8005d26:	483a      	ldr	r0, [pc, #232]	@ (8005e10 <hidd_xfer_cb+0x140>)
 8005d28:	f005 fc84 	bl	800b634 <iprintf>
 8005d2c:	4b39      	ldr	r3, [pc, #228]	@ (8005e14 <hidd_xfer_cb+0x144>)
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d000      	beq.n	8005d3e <hidd_xfer_cb+0x6e>
 8005d3c:	be00      	bkpt	0x0000
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e05d      	b.n	8005dfe <hidd_xfer_cb+0x12e>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8005d42:	7ffa      	ldrb	r2, [r7, #31]
 8005d44:	4613      	mov	r3, r2
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	4413      	add	r3, r2
 8005d4a:	019b      	lsls	r3, r3, #6
 8005d4c:	4a32      	ldr	r2, [pc, #200]	@ (8005e18 <hidd_xfer_cb+0x148>)
 8005d4e:	4413      	add	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	785b      	ldrb	r3, [r3, #1]
 8005d56:	79ba      	ldrb	r2, [r7, #6]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d116      	bne.n	8005d8a <hidd_xfer_cb+0xba>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8005d5c:	797b      	ldrb	r3, [r7, #5]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d109      	bne.n	8005d76 <hidd_xfer_cb+0xa6>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	7ffb      	ldrb	r3, [r7, #31]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fb57 	bl	8005422 <tud_hid_report_complete_cb>
 8005d74:	e042      	b.n	8005dfc <hidd_xfer_cb+0x12c>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	7ff8      	ldrb	r0, [r7, #31]
 8005d82:	2101      	movs	r1, #1
 8005d84:	f7ff fb5a 	bl	800543c <tud_hid_report_failed_cb>
 8005d88:	e038      	b.n	8005dfc <hidd_xfer_cb+0x12c>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8005d8a:	797b      	ldrb	r3, [r7, #5]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10c      	bne.n	8005daa <hidd_xfer_cb+0xda>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	7ff8      	ldrb	r0, [r7, #31]
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	2202      	movs	r2, #2
 8005da2:	2100      	movs	r1, #0
 8005da4:	f7fa fc90 	bl	80006c8 <tud_hid_set_report_cb>
 8005da8:	e008      	b.n	8005dbc <hidd_xfer_cb+0xec>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	7ff8      	ldrb	r0, [r7, #31]
 8005db6:	2102      	movs	r1, #2
 8005db8:	f7ff fb40 	bl	800543c <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	7899      	ldrb	r1, [r3, #2]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8005dc6:	79f8      	ldrb	r0, [r7, #7]
 8005dc8:	2340      	movs	r3, #64	@ 0x40
 8005dca:	f002 fbb5 	bl	8008538 <usbd_edpt_xfer>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	f083 0301 	eor.w	r3, r3, #1
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d010      	beq.n	8005dfc <hidd_xfer_cb+0x12c>
 8005dda:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8005dde:	490b      	ldr	r1, [pc, #44]	@ (8005e0c <hidd_xfer_cb+0x13c>)
 8005de0:	480b      	ldr	r0, [pc, #44]	@ (8005e10 <hidd_xfer_cb+0x140>)
 8005de2:	f005 fc27 	bl	800b634 <iprintf>
 8005de6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e14 <hidd_xfer_cb+0x144>)
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d000      	beq.n	8005df8 <hidd_xfer_cb+0x128>
 8005df6:	be00      	bkpt	0x0000
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e000      	b.n	8005dfe <hidd_xfer_cb+0x12e>
  }

  return true;
 8005dfc:	2301      	movs	r3, #1
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3720      	adds	r7, #32
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000528 	.word	0x20000528
 8005e0c:	0800d018 	.word	0x0800d018
 8005e10:	0800c908 	.word	0x0800c908
 8005e14:	e000edf0 	.word	0xe000edf0
 8005e18:	20000534 	.word	0x20000534

08005e1c <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	4611      	mov	r1, r2
 8005e28:	461a      	mov	r2, r3
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	80fb      	strh	r3, [r7, #6]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e38:	d901      	bls.n	8005e3e <tu_fifo_config+0x22>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e01b      	b.n	8005e76 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	88fa      	ldrh	r2, [r7, #6]
 8005e48:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8005e4a:	88bb      	ldrh	r3, [r7, #4]
 8005e4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005e50:	b299      	uxth	r1, r3
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	88d3      	ldrh	r3, [r2, #6]
 8005e56:	f361 030e 	bfi	r3, r1, #0, #15
 8005e5a:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	79d3      	ldrb	r3, [r2, #7]
 8005e60:	7e39      	ldrb	r1, [r7, #24]
 8005e62:	f361 13c7 	bfi	r3, r1, #7, #1
 8005e66:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8005e74:	2301      	movs	r3, #1
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <_ff_push>:
}
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	88fa      	ldrh	r2, [r7, #6]
 8005e94:	68f9      	ldr	r1, [r7, #12]
 8005e96:	88c9      	ldrh	r1, [r1, #6]
 8005e98:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8005e9c:	b289      	uxth	r1, r1
 8005e9e:	fb01 f202 	mul.w	r2, r1, r2
 8005ea2:	1898      	adds	r0, r3, r2
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	88db      	ldrh	r3, [r3, #6]
 8005ea8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68b9      	ldr	r1, [r7, #8]
 8005eb2:	f005 fdbe 	bl	800ba32 <memcpy>
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b088      	sub	sp, #32
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	4611      	mov	r1, r2
 8005eca:	461a      	mov	r2, r3
 8005ecc:	460b      	mov	r3, r1
 8005ece:	80fb      	strh	r3, [r7, #6]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	889a      	ldrh	r2, [r3, #4]
 8005ed8:	88bb      	ldrh	r3, [r7, #4]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	83fb      	strh	r3, [r7, #30]
  uint16_t const wrap_count = n - lin_count;
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	8bfb      	ldrh	r3, [r7, #30]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	83bb      	strh	r3, [r7, #28]

  uint16_t lin_bytes = lin_count * f->item_size;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	88db      	ldrh	r3, [r3, #6]
 8005eea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	8bfb      	ldrh	r3, [r7, #30]
 8005ef4:	fb02 f303 	mul.w	r3, r2, r3
 8005ef8:	837b      	strh	r3, [r7, #26]
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	88db      	ldrh	r3, [r3, #6]
 8005efe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	8bbb      	ldrh	r3, [r7, #28]
 8005f08:	fb02 f303 	mul.w	r3, r2, r3
 8005f0c:	833b      	strh	r3, [r7, #24]

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	88ba      	ldrh	r2, [r7, #4]
 8005f14:	68f9      	ldr	r1, [r7, #12]
 8005f16:	88c9      	ldrh	r1, [r1, #6]
 8005f18:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8005f1c:	b289      	uxth	r1, r1
 8005f1e:	fb01 f202 	mul.w	r2, r1, r2
 8005f22:	4413      	add	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]

  switch (copy_mode)
 8005f26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d121      	bne.n	8005f72 <_ff_push_n+0xb4>
  {
    case TU_FIFO_COPY_INC:
      if(n <= lin_count)
 8005f2e:	88fa      	ldrh	r2, [r7, #6]
 8005f30:	8bfb      	ldrh	r3, [r7, #30]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d80d      	bhi.n	8005f52 <_ff_push_n+0x94>
      {
        // Linear only
        memcpy(ff_buf, app_buf, n*f->item_size);
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	88d2      	ldrh	r2, [r2, #6]
 8005f3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005f40:	b292      	uxth	r2, r2
 8005f42:	fb02 f303 	mul.w	r3, r2, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	6978      	ldr	r0, [r7, #20]
 8005f4c:	f005 fd71 	bl	800ba32 <memcpy>

        // Write data wrapped around
        // TU_ASSERT(nWrap_bytes <= f->depth, );
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
      }
      break;
 8005f50:	e010      	b.n	8005f74 <_ff_push_n+0xb6>
        memcpy(ff_buf, app_buf, lin_bytes);
 8005f52:	8b7b      	ldrh	r3, [r7, #26]
 8005f54:	461a      	mov	r2, r3
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	6978      	ldr	r0, [r7, #20]
 8005f5a:	f005 fd6a 	bl	800ba32 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	8b7b      	ldrh	r3, [r7, #26]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	4413      	add	r3, r2
 8005f68:	8b3a      	ldrh	r2, [r7, #24]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	f005 fd61 	bl	800ba32 <memcpy>
      break;
 8005f70:	e000      	b.n	8005f74 <_ff_push_n+0xb6>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8005f72:	bf00      	nop
  }
}
 8005f74:	bf00      	nop
 8005f76:	3720      	adds	r7, #32
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	4613      	mov	r3, r2
 8005f88:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	88fa      	ldrh	r2, [r7, #6]
 8005f90:	68f9      	ldr	r1, [r7, #12]
 8005f92:	88c9      	ldrh	r1, [r1, #6]
 8005f94:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8005f98:	b289      	uxth	r1, r1
 8005f9a:	fb01 f202 	mul.w	r2, r1, r2
 8005f9e:	1899      	adds	r1, r3, r2
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	88db      	ldrh	r3, [r3, #6]
 8005fa4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	68b8      	ldr	r0, [r7, #8]
 8005fae:	f005 fd40 	bl	800ba32 <memcpy>
}
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b088      	sub	sp, #32
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	460b      	mov	r3, r1
 8005fca:	80fb      	strh	r3, [r7, #6]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	889a      	ldrh	r2, [r3, #4]
 8005fd4:	88bb      	ldrh	r3, [r7, #4]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	83fb      	strh	r3, [r7, #30]
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8005fda:	88fa      	ldrh	r2, [r7, #6]
 8005fdc:	8bfb      	ldrh	r3, [r7, #30]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	83bb      	strh	r3, [r7, #28]

  uint16_t lin_bytes = lin_count * f->item_size;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	88db      	ldrh	r3, [r3, #6]
 8005fe6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	8bfb      	ldrh	r3, [r7, #30]
 8005ff0:	fb02 f303 	mul.w	r3, r2, r3
 8005ff4:	837b      	strh	r3, [r7, #26]
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	88db      	ldrh	r3, [r3, #6]
 8005ffa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	8bbb      	ldrh	r3, [r7, #28]
 8006004:	fb02 f303 	mul.w	r3, r2, r3
 8006008:	833b      	strh	r3, [r7, #24]

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	88ba      	ldrh	r2, [r7, #4]
 8006010:	68f9      	ldr	r1, [r7, #12]
 8006012:	88c9      	ldrh	r1, [r1, #6]
 8006014:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006018:	b289      	uxth	r1, r1
 800601a:	fb01 f202 	mul.w	r2, r1, r2
 800601e:	4413      	add	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

  switch (copy_mode)
 8006022:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006026:	2b00      	cmp	r3, #0
 8006028:	d121      	bne.n	800606e <_ff_pull_n+0xb4>
  {
    case TU_FIFO_COPY_INC:
      if ( n <= lin_count )
 800602a:	88fa      	ldrh	r2, [r7, #6]
 800602c:	8bfb      	ldrh	r3, [r7, #30]
 800602e:	429a      	cmp	r2, r3
 8006030:	d80d      	bhi.n	800604e <_ff_pull_n+0x94>
      {
        // Linear only
        memcpy(app_buf, ff_buf, n*f->item_size);
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	88d2      	ldrh	r2, [r2, #6]
 8006038:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800603c:	b292      	uxth	r2, r2
 800603e:	fb02 f303 	mul.w	r3, r2, r3
 8006042:	461a      	mov	r2, r3
 8006044:	6979      	ldr	r1, [r7, #20]
 8006046:	68b8      	ldr	r0, [r7, #8]
 8006048:	f005 fcf3 	bl	800ba32 <memcpy>
        memcpy(app_buf, ff_buf, lin_bytes);

        // Read data wrapped part
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
      }
    break;
 800604c:	e010      	b.n	8006070 <_ff_pull_n+0xb6>
        memcpy(app_buf, ff_buf, lin_bytes);
 800604e:	8b7b      	ldrh	r3, [r7, #26]
 8006050:	461a      	mov	r2, r3
 8006052:	6979      	ldr	r1, [r7, #20]
 8006054:	68b8      	ldr	r0, [r7, #8]
 8006056:	f005 fcec 	bl	800ba32 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800605a:	8b7b      	ldrh	r3, [r7, #26]
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	18d0      	adds	r0, r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	8b3a      	ldrh	r2, [r7, #24]
 8006066:	4619      	mov	r1, r3
 8006068:	f005 fce3 	bl	800ba32 <memcpy>
    break;
 800606c:	e000      	b.n	8006070 <_ff_pull_n+0xb6>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 800606e:	bf00      	nop
  }
}
 8006070:	bf00      	nop
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	80fb      	strh	r3, [r7, #6]
 8006082:	460b      	mov	r3, r1
 8006084:	80bb      	strh	r3, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 800608a:	88ba      	ldrh	r2, [r7, #4]
 800608c:	887b      	ldrh	r3, [r7, #2]
 800608e:	4413      	add	r3, r2
 8006090:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8006092:	88ba      	ldrh	r2, [r7, #4]
 8006094:	89fb      	ldrh	r3, [r7, #14]
 8006096:	429a      	cmp	r2, r3
 8006098:	d804      	bhi.n	80060a4 <advance_index+0x2c>
 800609a:	89fa      	ldrh	r2, [r7, #14]
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	429a      	cmp	r2, r3
 80060a2:	db08      	blt.n	80060b6 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 80060a4:	88fb      	ldrh	r3, [r7, #6]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	425b      	negs	r3, r3
 80060ac:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 80060ae:	89fa      	ldrh	r2, [r7, #14]
 80060b0:	89bb      	ldrh	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 80060b6:	89fb      	ldrh	r3, [r7, #14]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr

080060c2 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b08a      	sub	sp, #40	@ 0x28
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	4611      	mov	r1, r2
 80060ce:	461a      	mov	r2, r3
 80060d0:	460b      	mov	r3, r1
 80060d2:	80fb      	strh	r3, [r7, #6]
 80060d4:	4613      	mov	r3, r2
 80060d6:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	889b      	ldrh	r3, [r3, #4]
 80060dc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	843b      	strh	r3, [r7, #32]
 80060e2:	88bb      	ldrh	r3, [r7, #4]
 80060e4:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80060e6:	8c3a      	ldrh	r2, [r7, #32]
 80060e8:	8bfb      	ldrh	r3, [r7, #30]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d304      	bcc.n	80060f8 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80060ee:	8c3a      	ldrh	r2, [r7, #32]
 80060f0:	8bfb      	ldrh	r3, [r7, #30]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	e008      	b.n	800610a <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80060f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	8c39      	ldrh	r1, [r7, #32]
 8006100:	8bfb      	ldrh	r3, [r7, #30]
 8006102:	1acb      	subs	r3, r1, r3
 8006104:	b29b      	uxth	r3, r3
 8006106:	4413      	add	r3, r2
 8006108:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800610a:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 800610c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <_tu_fifo_peek+0x54>
 8006112:	2300      	movs	r3, #0
 8006114:	e037      	b.n	8006186 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	889b      	ldrh	r3, [r3, #4]
 800611a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800611c:	429a      	cmp	r2, r3
 800611e:	d91b      	bls.n	8006158 <_tu_fifo_peek+0x96>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	61bb      	str	r3, [r7, #24]
 8006124:	88fb      	ldrh	r3, [r7, #6]
 8006126:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	889b      	ldrh	r3, [r3, #4]
 800612c:	8afa      	ldrh	r2, [r7, #22]
 800612e:	429a      	cmp	r2, r3
 8006130:	d305      	bcc.n	800613e <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	889b      	ldrh	r3, [r3, #4]
 8006136:	8afa      	ldrh	r2, [r7, #22]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	82bb      	strh	r3, [r7, #20]
 800613c:	e004      	b.n	8006148 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	889a      	ldrh	r2, [r3, #4]
 8006142:	8afb      	ldrh	r3, [r7, #22]
 8006144:	4413      	add	r3, r2
 8006146:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	8aba      	ldrh	r2, [r7, #20]
 800614c:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800614e:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8006150:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	889b      	ldrh	r3, [r3, #4]
 8006156:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	889b      	ldrh	r3, [r3, #4]
 800615c:	827b      	strh	r3, [r7, #18]
 800615e:	88bb      	ldrh	r3, [r7, #4]
 8006160:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8006162:	e003      	b.n	800616c <_tu_fifo_peek+0xaa>
 8006164:	8a3a      	ldrh	r2, [r7, #16]
 8006166:	8a7b      	ldrh	r3, [r7, #18]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	823b      	strh	r3, [r7, #16]
 800616c:	8a7a      	ldrh	r2, [r7, #18]
 800616e:	8a3b      	ldrh	r3, [r7, #16]
 8006170:	429a      	cmp	r2, r3
 8006172:	d9f7      	bls.n	8006164 <_tu_fifo_peek+0xa2>
  return idx;
 8006174:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006176:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8006178:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800617a:	461a      	mov	r2, r3
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff fefc 	bl	8005f7c <_ff_pull>

  return true;
 8006184:	2301      	movs	r3, #1
}
 8006186:	4618      	mov	r0, r3
 8006188:	3728      	adds	r7, #40	@ 0x28
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b08c      	sub	sp, #48	@ 0x30
 8006192:	af02      	add	r7, sp, #8
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	4611      	mov	r1, r2
 800619a:	461a      	mov	r2, r3
 800619c:	460b      	mov	r3, r1
 800619e:	80fb      	strh	r3, [r7, #6]
 80061a0:	4613      	mov	r3, r2
 80061a2:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	889b      	ldrh	r3, [r3, #4]
 80061a8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80061aa:	88bb      	ldrh	r3, [r7, #4]
 80061ac:	843b      	strh	r3, [r7, #32]
 80061ae:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80061b0:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80061b2:	8c3a      	ldrh	r2, [r7, #32]
 80061b4:	8bfb      	ldrh	r3, [r7, #30]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d304      	bcc.n	80061c4 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80061ba:	8c3a      	ldrh	r2, [r7, #32]
 80061bc:	8bfb      	ldrh	r3, [r7, #30]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	e008      	b.n	80061d6 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80061c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	8c39      	ldrh	r1, [r7, #32]
 80061cc:	8bfb      	ldrh	r3, [r7, #30]
 80061ce:	1acb      	subs	r3, r1, r3
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	4413      	add	r3, r2
 80061d4:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80061d6:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 80061d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <_tu_fifo_peek_n+0x54>
 80061de:	2300      	movs	r3, #0
 80061e0:	e041      	b.n	8006266 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	889b      	ldrh	r3, [r3, #4]
 80061e6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d91b      	bls.n	8006224 <_tu_fifo_peek_n+0x96>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	88bb      	ldrh	r3, [r7, #4]
 80061f2:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	889b      	ldrh	r3, [r3, #4]
 80061f8:	8afa      	ldrh	r2, [r7, #22]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d305      	bcc.n	800620a <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	889b      	ldrh	r3, [r3, #4]
 8006202:	8afa      	ldrh	r2, [r7, #22]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	82bb      	strh	r3, [r7, #20]
 8006208:	e004      	b.n	8006214 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	889a      	ldrh	r2, [r3, #4]
 800620e:	8afb      	ldrh	r3, [r7, #22]
 8006210:	4413      	add	r3, r2
 8006212:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	8aba      	ldrh	r2, [r7, #20]
 8006218:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800621a:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800621c:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	889b      	ldrh	r3, [r3, #4]
 8006222:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8006224:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006226:	88fb      	ldrh	r3, [r7, #6]
 8006228:	429a      	cmp	r2, r3
 800622a:	d201      	bcs.n	8006230 <_tu_fifo_peek_n+0xa2>
 800622c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800622e:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	889b      	ldrh	r3, [r3, #4]
 8006234:	827b      	strh	r3, [r7, #18]
 8006236:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006238:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 800623a:	e003      	b.n	8006244 <_tu_fifo_peek_n+0xb6>
 800623c:	8a3a      	ldrh	r2, [r7, #16]
 800623e:	8a7b      	ldrh	r3, [r7, #18]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	823b      	strh	r3, [r7, #16]
 8006244:	8a7a      	ldrh	r2, [r7, #18]
 8006246:	8a3b      	ldrh	r3, [r7, #16]
 8006248:	429a      	cmp	r2, r3
 800624a:	d9f7      	bls.n	800623c <_tu_fifo_peek_n+0xae>
  return idx;
 800624c:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800624e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8006250:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8006252:	88fa      	ldrh	r2, [r7, #6]
 8006254:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	460b      	mov	r3, r1
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7ff feab 	bl	8005fba <_ff_pull_n>

  return n;
 8006264:	88fb      	ldrh	r3, [r7, #6]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3728      	adds	r7, #40	@ 0x28
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b092      	sub	sp, #72	@ 0x48
 8006272:	af02      	add	r7, sp, #8
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	4611      	mov	r1, r2
 800627a:	461a      	mov	r2, r3
 800627c:	460b      	mov	r3, r1
 800627e:	80fb      	strh	r3, [r7, #6]
 8006280:	4613      	mov	r3, r2
 8006282:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8006284:	88fb      	ldrh	r3, [r7, #6]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <_tu_fifo_write_n+0x20>
 800628a:	2300      	movs	r3, #0
 800628c:	e0bc      	b.n	8006408 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	891b      	ldrh	r3, [r3, #8]
 8006292:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	895b      	ldrh	r3, [r3, #10]
 8006298:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	79db      	ldrb	r3, [r3, #7]
 80062a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	f083 0301 	eor.w	r3, r3, #1
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d036      	beq.n	8006320 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	889b      	ldrh	r3, [r3, #4]
 80062b6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80062b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80062ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 80062bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062be:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80062c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80062c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80062c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80062c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80062c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062ca:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 80062cc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80062ce:	8c3b      	ldrh	r3, [r7, #32]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d304      	bcc.n	80062de <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 80062d4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80062d6:	8c3b      	ldrh	r3, [r7, #32]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	b29b      	uxth	r3, r3
 80062dc:	e008      	b.n	80062f0 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80062de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80062e6:	8c3b      	ldrh	r3, [r7, #32]
 80062e8:	1acb      	subs	r3, r1, r3
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	4413      	add	r3, r2
 80062ee:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80062f0:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 80062f2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80062f4:	8bfb      	ldrh	r3, [r7, #30]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d904      	bls.n	8006304 <_tu_fifo_write_n+0x96>
 80062fa:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80062fc:	8bfb      	ldrh	r3, [r7, #30]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	b29b      	uxth	r3, r3
 8006302:	e000      	b.n	8006306 <_tu_fifo_write_n+0x98>
 8006304:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8006306:	867b      	strh	r3, [r7, #50]	@ 0x32
 8006308:	88fb      	ldrh	r3, [r7, #6]
 800630a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800630c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800630e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006310:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006312:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006314:	4293      	cmp	r3, r2
 8006316:	bf28      	it	cs
 8006318:	4613      	movcs	r3, r2
 800631a:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 800631c:	80fb      	strh	r3, [r7, #6]
 800631e:	e04b      	b.n	80063b8 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	889b      	ldrh	r3, [r3, #4]
 8006324:	88fa      	ldrh	r2, [r7, #6]
 8006326:	429a      	cmp	r2, r3
 8006328:	d317      	bcc.n	800635a <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 800632a:	797b      	ldrb	r3, [r7, #5]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10e      	bne.n	800634e <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	8892      	ldrh	r2, [r2, #4]
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	88d2      	ldrh	r2, [r2, #6]
 800633c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006340:	b292      	uxth	r2, r2
 8006342:	fb02 f303 	mul.w	r3, r2, r3
 8006346:	461a      	mov	r2, r3
 8006348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634a:	4413      	add	r3, r2
 800634c:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	889b      	ldrh	r3, [r3, #4]
 8006352:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8006354:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006356:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006358:	e02e      	b.n	80063b8 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	889b      	ldrh	r3, [r3, #4]
 800635e:	83bb      	strh	r3, [r7, #28]
 8006360:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006362:	837b      	strh	r3, [r7, #26]
 8006364:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006366:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8006368:	8b7a      	ldrh	r2, [r7, #26]
 800636a:	8b3b      	ldrh	r3, [r7, #24]
 800636c:	429a      	cmp	r2, r3
 800636e:	d304      	bcc.n	800637a <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8006370:	8b7a      	ldrh	r2, [r7, #26]
 8006372:	8b3b      	ldrh	r3, [r7, #24]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	b29b      	uxth	r3, r3
 8006378:	e008      	b.n	800638c <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800637a:	8bbb      	ldrh	r3, [r7, #28]
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	8b79      	ldrh	r1, [r7, #26]
 8006382:	8b3b      	ldrh	r3, [r7, #24]
 8006384:	1acb      	subs	r3, r1, r3
 8006386:	b29b      	uxth	r3, r3
 8006388:	4413      	add	r3, r2
 800638a:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 800638c:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 800638e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006390:	88fb      	ldrh	r3, [r7, #6]
 8006392:	441a      	add	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	889b      	ldrh	r3, [r3, #4]
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	429a      	cmp	r2, r3
 800639c:	db0c      	blt.n	80063b8 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8898      	ldrh	r0, [r3, #4]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	889a      	ldrh	r2, [r3, #4]
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063ae:	4619      	mov	r1, r3
 80063b0:	f7ff fe62 	bl	8006078 <advance_index>
 80063b4:	4603      	mov	r3, r0
 80063b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 80063b8:	88fb      	ldrh	r3, [r7, #6]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d023      	beq.n	8006406 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	889b      	ldrh	r3, [r3, #4]
 80063c2:	82fb      	strh	r3, [r7, #22]
 80063c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80063c6:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 80063c8:	e003      	b.n	80063d2 <_tu_fifo_write_n+0x164>
 80063ca:	8aba      	ldrh	r2, [r7, #20]
 80063cc:	8afb      	ldrh	r3, [r7, #22]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	82bb      	strh	r3, [r7, #20]
 80063d2:	8afa      	ldrh	r2, [r7, #22]
 80063d4:	8abb      	ldrh	r3, [r7, #20]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d9f7      	bls.n	80063ca <_tu_fifo_write_n+0x15c>
  return idx;
 80063da:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80063dc:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 80063de:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80063e0:	88fa      	ldrh	r2, [r7, #6]
 80063e2:	797b      	ldrb	r3, [r7, #5]
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	460b      	mov	r3, r1
 80063e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f7ff fd67 	bl	8005ebe <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	889b      	ldrh	r3, [r3, #4]
 80063f4:	88fa      	ldrh	r2, [r7, #6]
 80063f6:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff fe3d 	bl	8006078 <advance_index>
 80063fe:	4603      	mov	r3, r0
 8006400:	461a      	mov	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8006406:	88fb      	ldrh	r3, [r7, #6]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3740      	adds	r7, #64	@ 0x40
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af02      	add	r7, sp, #8
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	4611      	mov	r1, r2
 800641c:	461a      	mov	r2, r3
 800641e:	460b      	mov	r3, r1
 8006420:	80fb      	strh	r3, [r7, #6]
 8006422:	4613      	mov	r3, r2
 8006424:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	891b      	ldrh	r3, [r3, #8]
 800642a:	b298      	uxth	r0, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	895b      	ldrh	r3, [r3, #10]
 8006430:	b29b      	uxth	r3, r3
 8006432:	88f9      	ldrh	r1, [r7, #6]
 8006434:	797a      	ldrb	r2, [r7, #5]
 8006436:	9201      	str	r2, [sp, #4]
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	4603      	mov	r3, r0
 800643c:	460a      	mov	r2, r1
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f7ff fea4 	bl	800618e <_tu_fifo_peek_n>
 8006446:	4603      	mov	r3, r0
 8006448:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8898      	ldrh	r0, [r3, #4]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	895b      	ldrh	r3, [r3, #10]
 8006452:	b29b      	uxth	r3, r3
 8006454:	88fa      	ldrh	r2, [r7, #6]
 8006456:	4619      	mov	r1, r3
 8006458:	f7ff fe0e 	bl	8006078 <advance_index>
 800645c:	4603      	mov	r3, r0
 800645e:	461a      	mov	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8006464:	88fb      	ldrh	r3, [r7, #6]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 800646e:	b480      	push	{r7}
 8006470:	b087      	sub	sp, #28
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	8899      	ldrh	r1, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	891b      	ldrh	r3, [r3, #8]
 800647e:	b29a      	uxth	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	895b      	ldrh	r3, [r3, #10]
 8006484:	b29b      	uxth	r3, r3
 8006486:	8279      	strh	r1, [r7, #18]
 8006488:	823a      	strh	r2, [r7, #16]
 800648a:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 800648c:	8a3a      	ldrh	r2, [r7, #16]
 800648e:	89fb      	ldrh	r3, [r7, #14]
 8006490:	429a      	cmp	r2, r3
 8006492:	d304      	bcc.n	800649e <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8006494:	8a3a      	ldrh	r2, [r7, #16]
 8006496:	89fb      	ldrh	r3, [r7, #14]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	b29b      	uxth	r3, r3
 800649c:	e008      	b.n	80064b0 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800649e:	8a7b      	ldrh	r3, [r7, #18]
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	8a39      	ldrh	r1, [r7, #16]
 80064a6:	89fb      	ldrh	r3, [r7, #14]
 80064a8:	1acb      	subs	r3, r1, r3
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	4413      	add	r3, r2
 80064ae:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	8892      	ldrh	r2, [r2, #4]
 80064b4:	82fb      	strh	r3, [r7, #22]
 80064b6:	4613      	mov	r3, r2
 80064b8:	82bb      	strh	r3, [r7, #20]
 80064ba:	8afa      	ldrh	r2, [r7, #22]
 80064bc:	8abb      	ldrh	r3, [r7, #20]
 80064be:	4293      	cmp	r3, r2
 80064c0:	bf28      	it	cs
 80064c2:	4613      	movcs	r3, r2
 80064c4:	b29b      	uxth	r3, r3
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr

080064d0 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	891b      	ldrh	r3, [r3, #8]
 80064dc:	b29a      	uxth	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	895b      	ldrh	r3, [r3, #10]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	429a      	cmp	r2, r3
 80064e6:	bf0c      	ite	eq
 80064e8:	2301      	moveq	r3, #1
 80064ea:	2300      	movne	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr

080064f8 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	8899      	ldrh	r1, [r3, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	891b      	ldrh	r3, [r3, #8]
 8006508:	b29a      	uxth	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	895b      	ldrh	r3, [r3, #10]
 800650e:	b29b      	uxth	r3, r3
 8006510:	81f9      	strh	r1, [r7, #14]
 8006512:	81ba      	strh	r2, [r7, #12]
 8006514:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8006516:	89ba      	ldrh	r2, [r7, #12]
 8006518:	897b      	ldrh	r3, [r7, #10]
 800651a:	429a      	cmp	r2, r3
 800651c:	d304      	bcc.n	8006528 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800651e:	89ba      	ldrh	r2, [r7, #12]
 8006520:	897b      	ldrh	r3, [r7, #10]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	b29b      	uxth	r3, r3
 8006526:	e008      	b.n	800653a <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006528:	89fb      	ldrh	r3, [r7, #14]
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	89b9      	ldrh	r1, [r7, #12]
 8006530:	897b      	ldrh	r3, [r7, #10]
 8006532:	1acb      	subs	r3, r1, r3
 8006534:	b29b      	uxth	r3, r3
 8006536:	4413      	add	r3, r2
 8006538:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	8892      	ldrh	r2, [r2, #4]
 800653e:	4293      	cmp	r3, r2
 8006540:	bf2c      	ite	cs
 8006542:	2301      	movcs	r3, #1
 8006544:	2300      	movcc	r3, #0
 8006546:	b2db      	uxtb	r3, r3
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr

08006552 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8006552:	b480      	push	{r7}
 8006554:	b087      	sub	sp, #28
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	8899      	ldrh	r1, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	891b      	ldrh	r3, [r3, #8]
 8006562:	b29a      	uxth	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	895b      	ldrh	r3, [r3, #10]
 8006568:	b29b      	uxth	r3, r3
 800656a:	82f9      	strh	r1, [r7, #22]
 800656c:	82ba      	strh	r2, [r7, #20]
 800656e:	827b      	strh	r3, [r7, #18]
 8006570:	8afb      	ldrh	r3, [r7, #22]
 8006572:	823b      	strh	r3, [r7, #16]
 8006574:	8abb      	ldrh	r3, [r7, #20]
 8006576:	81fb      	strh	r3, [r7, #14]
 8006578:	8a7b      	ldrh	r3, [r7, #18]
 800657a:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 800657c:	89fa      	ldrh	r2, [r7, #14]
 800657e:	89bb      	ldrh	r3, [r7, #12]
 8006580:	429a      	cmp	r2, r3
 8006582:	d304      	bcc.n	800658e <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8006584:	89fa      	ldrh	r2, [r7, #14]
 8006586:	89bb      	ldrh	r3, [r7, #12]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	b29b      	uxth	r3, r3
 800658c:	e008      	b.n	80065a0 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800658e:	8a3b      	ldrh	r3, [r7, #16]
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	89f9      	ldrh	r1, [r7, #14]
 8006596:	89bb      	ldrh	r3, [r7, #12]
 8006598:	1acb      	subs	r3, r1, r3
 800659a:	b29b      	uxth	r3, r3
 800659c:	4413      	add	r3, r2
 800659e:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80065a0:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 80065a2:	8afa      	ldrh	r2, [r7, #22]
 80065a4:	897b      	ldrh	r3, [r7, #10]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d904      	bls.n	80065b4 <tu_fifo_remaining+0x62>
 80065aa:	8afa      	ldrh	r2, [r7, #22]
 80065ac:	897b      	ldrh	r3, [r7, #10]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	e000      	b.n	80065b6 <tu_fifo_remaining+0x64>
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr

080065c0 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	891b      	ldrh	r3, [r3, #8]
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	895b      	ldrh	r3, [r3, #10]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff fd72 	bl	80060c2 <_tu_fifo_peek>
 80065de:	4603      	mov	r3, r0
 80065e0:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	8898      	ldrh	r0, [r3, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	895b      	ldrh	r3, [r3, #10]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	7bfa      	ldrb	r2, [r7, #15]
 80065ee:	b292      	uxth	r2, r2
 80065f0:	4619      	mov	r1, r3
 80065f2:	f7ff fd41 	bl	8006078 <advance_index>
 80065f6:	4603      	mov	r3, r0
 80065f8:	461a      	mov	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	4613      	mov	r3, r2
 8006614:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8006616:	88fa      	ldrh	r2, [r7, #6]
 8006618:	2300      	movs	r3, #0
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f7ff fef7 	bl	8006410 <_tu_fifo_read_n>
 8006622:	4603      	mov	r3, r0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	891b      	ldrh	r3, [r3, #8]
 800663a:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff ff5b 	bl	80064f8 <tu_fifo_full>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00c      	beq.n	8006662 <tu_fifo_write+0x36>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	79db      	ldrb	r3, [r3, #7]
 800664c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006650:	b2db      	uxtb	r3, r3
 8006652:	f083 0301 	eor.w	r3, r3, #1
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <tu_fifo_write+0x36>
  {
    ret = false;
 800665c:	2300      	movs	r3, #0
 800665e:	75fb      	strb	r3, [r7, #23]
 8006660:	e022      	b.n	80066a8 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	889b      	ldrh	r3, [r3, #4]
 8006666:	823b      	strh	r3, [r7, #16]
 8006668:	8abb      	ldrh	r3, [r7, #20]
 800666a:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 800666c:	e003      	b.n	8006676 <tu_fifo_write+0x4a>
 800666e:	89fa      	ldrh	r2, [r7, #14]
 8006670:	8a3b      	ldrh	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	81fb      	strh	r3, [r7, #14]
 8006676:	8a3a      	ldrh	r2, [r7, #16]
 8006678:	89fb      	ldrh	r3, [r7, #14]
 800667a:	429a      	cmp	r2, r3
 800667c:	d9f7      	bls.n	800666e <tu_fifo_write+0x42>
  return idx;
 800667e:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006680:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8006682:	8a7b      	ldrh	r3, [r7, #18]
 8006684:	461a      	mov	r2, r3
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff fbf9 	bl	8005e80 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	889b      	ldrh	r3, [r3, #4]
 8006692:	8ab9      	ldrh	r1, [r7, #20]
 8006694:	2201      	movs	r2, #1
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff fcee 	bl	8006078 <advance_index>
 800669c:	4603      	mov	r3, r0
 800669e:	461a      	mov	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	811a      	strh	r2, [r3, #8]

    ret = true;
 80066a4:	2301      	movs	r3, #1
 80066a6:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	4613      	mov	r3, r2
 80066be:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 80066c0:	88fa      	ldrh	r2, [r7, #6]
 80066c2:	2300      	movs	r3, #0
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7ff fdd1 	bl	800626e <_tu_fifo_write_n>
 80066cc:	4603      	mov	r3, r0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 80066ea:	2301      	movs	r3, #1
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr

080066f6 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	79d3      	ldrb	r3, [r2, #7]
 8006706:	78f9      	ldrb	r1, [r7, #3]
 8006708:	f361 13c7 	bfi	r3, r1, #7, #1
 800670c:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800670e:	2301      	movs	r3, #1
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	bc80      	pop	{r7}
 8006718:	4770      	bx	lr

0800671a <tu_fifo_advance_write_pointer>:
    @param[in]  n
                Number of items the write pointer moves forward
 */
/******************************************************************************/
void tu_fifo_advance_write_pointer(tu_fifo_t *f, uint16_t n)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	807b      	strh	r3, [r7, #2]
  f->wr_idx = advance_index(f->depth, f->wr_idx, n);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	8898      	ldrh	r0, [r3, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	891b      	ldrh	r3, [r3, #8]
 800672e:	b29b      	uxth	r3, r3
 8006730:	887a      	ldrh	r2, [r7, #2]
 8006732:	4619      	mov	r1, r3
 8006734:	f7ff fca0 	bl	8006078 <advance_index>
 8006738:	4603      	mov	r3, r0
 800673a:	461a      	mov	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	811a      	strh	r2, [r3, #8]
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <tu_fifo_advance_read_pointer>:
    @param[in]  n
                Number of items the read pointer moves forward
 */
/******************************************************************************/
void tu_fifo_advance_read_pointer(tu_fifo_t *f, uint16_t n)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	807b      	strh	r3, [r7, #2]
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	8898      	ldrh	r0, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	895b      	ldrh	r3, [r3, #10]
 800675c:	b29b      	uxth	r3, r3
 800675e:	887a      	ldrh	r2, [r7, #2]
 8006760:	4619      	mov	r1, r3
 8006762:	f7ff fc89 	bl	8006078 <advance_index>
 8006766:	4603      	mov	r3, r0
 8006768:	461a      	mov	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	815a      	strh	r2, [r3, #10]
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <tu_fifo_get_read_info>:
   @param[out]      *info
                    Pointer to struct which holds the desired infos
 */
/******************************************************************************/
void tu_fifo_get_read_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
{
 8006776:	b480      	push	{r7}
 8006778:	b08b      	sub	sp, #44	@ 0x2c
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
  // Operate on temporary values in case they change in between
  uint16_t wr_idx = f->wr_idx;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	891b      	ldrh	r3, [r3, #8]
 8006784:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t rd_idx = f->rd_idx;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	895b      	ldrh	r3, [r3, #10]
 800678a:	84fb      	strh	r3, [r7, #38]	@ 0x26

  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	889b      	ldrh	r3, [r3, #4]
 8006790:	83bb      	strh	r3, [r7, #28]
 8006792:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006794:	837b      	strh	r3, [r7, #26]
 8006796:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006798:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 800679a:	8b7a      	ldrh	r2, [r7, #26]
 800679c:	8b3b      	ldrh	r3, [r7, #24]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d304      	bcc.n	80067ac <tu_fifo_get_read_info+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80067a2:	8b7a      	ldrh	r2, [r7, #26]
 80067a4:	8b3b      	ldrh	r3, [r7, #24]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	e008      	b.n	80067be <tu_fifo_get_read_info+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80067ac:	8bbb      	ldrh	r3, [r7, #28]
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	8b79      	ldrh	r1, [r7, #26]
 80067b4:	8b3b      	ldrh	r3, [r7, #24]
 80067b6:	1acb      	subs	r3, r1, r3
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	4413      	add	r3, r2
 80067bc:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80067be:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Check overflow and correct if required - may happen in case a DMA wrote too fast
  if (cnt > f->depth)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	889b      	ldrh	r3, [r3, #4]
 80067c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d91b      	bls.n	8006802 <tu_fifo_get_read_info+0x8c>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80067d0:	827b      	strh	r3, [r7, #18]
  if ( wr_idx >= f->depth )
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	889b      	ldrh	r3, [r3, #4]
 80067d6:	8a7a      	ldrh	r2, [r7, #18]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d305      	bcc.n	80067e8 <tu_fifo_get_read_info+0x72>
    rd_idx = wr_idx - f->depth;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	889b      	ldrh	r3, [r3, #4]
 80067e0:	8a7a      	ldrh	r2, [r7, #18]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	823b      	strh	r3, [r7, #16]
 80067e6:	e004      	b.n	80067f2 <tu_fifo_get_read_info+0x7c>
    rd_idx = wr_idx + f->depth;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	889a      	ldrh	r2, [r3, #4]
 80067ec:	8a7b      	ldrh	r3, [r7, #18]
 80067ee:	4413      	add	r3, r2
 80067f0:	823b      	strh	r3, [r7, #16]
  f->rd_idx = rd_idx;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	8a3a      	ldrh	r2, [r7, #16]
 80067f6:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80067f8:	8a3b      	ldrh	r3, [r7, #16]
  {
    _ff_lock(f->mutex_rd);
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80067fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
    _ff_unlock(f->mutex_rd);

    cnt = f->depth;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	889b      	ldrh	r3, [r3, #4]
 8006800:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  // Check if fifo is empty
  if (cnt == 0)
 8006802:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10c      	bne.n	8006822 <tu_fifo_get_read_info+0xac>
  {
    info->len_lin  = 0;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2200      	movs	r2, #0
 800680c:	801a      	strh	r2, [r3, #0]
    info->len_wrap = 0;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2200      	movs	r2, #0
 8006812:	805a      	strh	r2, [r3, #2]
    info->ptr_lin  = NULL;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2200      	movs	r2, #0
 8006818:	605a      	str	r2, [r3, #4]
    info->ptr_wrap = NULL;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2200      	movs	r2, #0
 800681e:	609a      	str	r2, [r3, #8]
    return;
 8006820:	e045      	b.n	80068ae <tu_fifo_get_read_info+0x138>
  }

  // Get relative pointers
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	889b      	ldrh	r3, [r3, #4]
 8006826:	817b      	strh	r3, [r7, #10]
 8006828:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800682a:	813b      	strh	r3, [r7, #8]
  while ( idx >= depth ) idx -= depth;
 800682c:	e003      	b.n	8006836 <tu_fifo_get_read_info+0xc0>
 800682e:	893a      	ldrh	r2, [r7, #8]
 8006830:	897b      	ldrh	r3, [r7, #10]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	813b      	strh	r3, [r7, #8]
 8006836:	897a      	ldrh	r2, [r7, #10]
 8006838:	893b      	ldrh	r3, [r7, #8]
 800683a:	429a      	cmp	r2, r3
 800683c:	d9f7      	bls.n	800682e <tu_fifo_get_read_info+0xb8>
  return idx;
 800683e:	893b      	ldrh	r3, [r7, #8]
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006840:	843b      	strh	r3, [r7, #32]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	889b      	ldrh	r3, [r3, #4]
 8006846:	81fb      	strh	r3, [r7, #14]
 8006848:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800684a:	81bb      	strh	r3, [r7, #12]
  while ( idx >= depth ) idx -= depth;
 800684c:	e003      	b.n	8006856 <tu_fifo_get_read_info+0xe0>
 800684e:	89ba      	ldrh	r2, [r7, #12]
 8006850:	89fb      	ldrh	r3, [r7, #14]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	81bb      	strh	r3, [r7, #12]
 8006856:	89fa      	ldrh	r2, [r7, #14]
 8006858:	89bb      	ldrh	r3, [r7, #12]
 800685a:	429a      	cmp	r2, r3
 800685c:	d9f7      	bls.n	800684e <tu_fifo_get_read_info+0xd8>
  return idx;
 800685e:	89bb      	ldrh	r3, [r7, #12]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006860:	83fb      	strh	r3, [r7, #30]

  // Copy pointer to buffer to start reading from
  info->ptr_lin = &f->buffer[rd_ptr];
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	8bfb      	ldrh	r3, [r7, #30]
 8006868:	441a      	add	r2, r3
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	605a      	str	r2, [r3, #4]

  // Check if there is a wrap around necessary
  if (wr_ptr > rd_ptr)
 800686e:	8c3a      	ldrh	r2, [r7, #32]
 8006870:	8bfb      	ldrh	r3, [r7, #30]
 8006872:	429a      	cmp	r2, r3
 8006874:	d909      	bls.n	800688a <tu_fifo_get_read_info+0x114>
  {
    // Non wrapping case
    info->len_lin  = cnt;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800687a:	801a      	strh	r2, [r3, #0]

    info->len_wrap = 0;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2200      	movs	r2, #0
 8006880:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = NULL;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2200      	movs	r2, #0
 8006886:	609a      	str	r2, [r3, #8]
 8006888:	e011      	b.n	80068ae <tu_fifo_get_read_info+0x138>
  }
  else
  {
    info->len_lin  = f->depth - rd_ptr;   // Also the case if FIFO was full
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	889a      	ldrh	r2, [r3, #4]
 800688e:	8bfb      	ldrh	r3, [r7, #30]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	b29a      	uxth	r2, r3
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	801a      	strh	r2, [r3, #0]

    info->len_wrap = cnt - info->len_lin;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = f->buffer;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	609a      	str	r2, [r3, #8]
  }
}
 80068ae:	372c      	adds	r7, #44	@ 0x2c
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr

080068b6 <tu_fifo_get_write_info>:
   @param[out]      *info
                    Pointer to struct which holds the desired infos
 */
/******************************************************************************/
void tu_fifo_get_write_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b08b      	sub	sp, #44	@ 0x2c
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]
  uint16_t wr_idx = f->wr_idx;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	891b      	ldrh	r3, [r3, #8]
 80068c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t rd_idx = f->rd_idx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	895b      	ldrh	r3, [r3, #10]
 80068ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	889b      	ldrh	r3, [r3, #4]
 80068d0:	83bb      	strh	r3, [r7, #28]
 80068d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068d4:	837b      	strh	r3, [r7, #26]
 80068d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068d8:	833b      	strh	r3, [r7, #24]
 80068da:	8bbb      	ldrh	r3, [r7, #28]
 80068dc:	82fb      	strh	r3, [r7, #22]
 80068de:	8b7b      	ldrh	r3, [r7, #26]
 80068e0:	82bb      	strh	r3, [r7, #20]
 80068e2:	8b3b      	ldrh	r3, [r7, #24]
 80068e4:	827b      	strh	r3, [r7, #18]
  if (wr_idx >= rd_idx)
 80068e6:	8aba      	ldrh	r2, [r7, #20]
 80068e8:	8a7b      	ldrh	r3, [r7, #18]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d304      	bcc.n	80068f8 <tu_fifo_get_write_info+0x42>
    return (uint16_t) (wr_idx - rd_idx);
 80068ee:	8aba      	ldrh	r2, [r7, #20]
 80068f0:	8a7b      	ldrh	r3, [r7, #18]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	e008      	b.n	800690a <tu_fifo_get_write_info+0x54>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80068f8:	8afb      	ldrh	r3, [r7, #22]
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	8ab9      	ldrh	r1, [r7, #20]
 8006900:	8a7b      	ldrh	r3, [r7, #18]
 8006902:	1acb      	subs	r3, r1, r3
 8006904:	b29b      	uxth	r3, r3
 8006906:	4413      	add	r3, r2
 8006908:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800690a:	823b      	strh	r3, [r7, #16]
  return (depth > count) ? (depth - count) : 0;
 800690c:	8bba      	ldrh	r2, [r7, #28]
 800690e:	8a3b      	ldrh	r3, [r7, #16]
 8006910:	429a      	cmp	r2, r3
 8006912:	d904      	bls.n	800691e <tu_fifo_get_write_info+0x68>
 8006914:	8bba      	ldrh	r2, [r7, #28]
 8006916:	8a3b      	ldrh	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	b29b      	uxth	r3, r3
 800691c:	e000      	b.n	8006920 <tu_fifo_get_write_info+0x6a>
 800691e:	2300      	movs	r3, #0
  uint16_t remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8006920:	847b      	strh	r3, [r7, #34]	@ 0x22

  if (remain == 0)
 8006922:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10c      	bne.n	8006942 <tu_fifo_get_write_info+0x8c>
  {
    info->len_lin  = 0;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2200      	movs	r2, #0
 800692c:	801a      	strh	r2, [r3, #0]
    info->len_wrap = 0;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2200      	movs	r2, #0
 8006932:	805a      	strh	r2, [r3, #2]
    info->ptr_lin  = NULL;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2200      	movs	r2, #0
 8006938:	605a      	str	r2, [r3, #4]
    info->ptr_wrap = NULL;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2200      	movs	r2, #0
 800693e:	609a      	str	r2, [r3, #8]
    return;
 8006940:	e048      	b.n	80069d4 <tu_fifo_get_write_info+0x11e>
  }

  // Get relative pointers
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	889b      	ldrh	r3, [r3, #4]
 8006946:	817b      	strh	r3, [r7, #10]
 8006948:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800694a:	813b      	strh	r3, [r7, #8]
  while ( idx >= depth ) idx -= depth;
 800694c:	e003      	b.n	8006956 <tu_fifo_get_write_info+0xa0>
 800694e:	893a      	ldrh	r2, [r7, #8]
 8006950:	897b      	ldrh	r3, [r7, #10]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	813b      	strh	r3, [r7, #8]
 8006956:	897a      	ldrh	r2, [r7, #10]
 8006958:	893b      	ldrh	r3, [r7, #8]
 800695a:	429a      	cmp	r2, r3
 800695c:	d9f7      	bls.n	800694e <tu_fifo_get_write_info+0x98>
  return idx;
 800695e:	893b      	ldrh	r3, [r7, #8]
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006960:	843b      	strh	r3, [r7, #32]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	889b      	ldrh	r3, [r3, #4]
 8006966:	81fb      	strh	r3, [r7, #14]
 8006968:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800696a:	81bb      	strh	r3, [r7, #12]
  while ( idx >= depth ) idx -= depth;
 800696c:	e003      	b.n	8006976 <tu_fifo_get_write_info+0xc0>
 800696e:	89ba      	ldrh	r2, [r7, #12]
 8006970:	89fb      	ldrh	r3, [r7, #14]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	81bb      	strh	r3, [r7, #12]
 8006976:	89fa      	ldrh	r2, [r7, #14]
 8006978:	89bb      	ldrh	r3, [r7, #12]
 800697a:	429a      	cmp	r2, r3
 800697c:	d9f7      	bls.n	800696e <tu_fifo_get_write_info+0xb8>
  return idx;
 800697e:	89bb      	ldrh	r3, [r7, #12]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006980:	83fb      	strh	r3, [r7, #30]

  // Copy pointer to buffer to start writing to
  info->ptr_lin = &f->buffer[wr_ptr];
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	8c3b      	ldrh	r3, [r7, #32]
 8006988:	441a      	add	r2, r3
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	605a      	str	r2, [r3, #4]

  if (wr_ptr < rd_ptr)
 800698e:	8c3a      	ldrh	r2, [r7, #32]
 8006990:	8bfb      	ldrh	r3, [r7, #30]
 8006992:	429a      	cmp	r2, r3
 8006994:	d20c      	bcs.n	80069b0 <tu_fifo_get_write_info+0xfa>
  {
    // Non wrapping case
    info->len_lin  = rd_ptr-wr_ptr;
 8006996:	8bfa      	ldrh	r2, [r7, #30]
 8006998:	8c3b      	ldrh	r3, [r7, #32]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	b29a      	uxth	r2, r3
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	801a      	strh	r2, [r3, #0]
    info->len_wrap = 0;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2200      	movs	r2, #0
 80069a6:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = NULL;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2200      	movs	r2, #0
 80069ac:	609a      	str	r2, [r3, #8]
 80069ae:	e011      	b.n	80069d4 <tu_fifo_get_write_info+0x11e>
  }
  else
  {
    info->len_lin  = f->depth - wr_ptr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	889a      	ldrh	r2, [r3, #4]
 80069b4:	8c3b      	ldrh	r3, [r7, #32]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	801a      	strh	r2, [r3, #0]
    info->len_wrap = remain - info->len_lin; // Remaining length - n already was limited to remain or FIFO depth
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = f->buffer;              // Always start of buffer
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	609a      	str	r2, [r3, #8]
  }
}
 80069d4:	372c      	adds	r7, #44	@ 0x2c
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <tu_print_buf>:
  #define tu_printf    CFG_TUSB_DEBUG_PRINTF
#else
  #define tu_printf    printf
#endif

static inline void tu_print_buf(uint8_t const* buf, uint32_t bufsize) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  for(uint32_t i=0; i<bufsize; i++) tu_printf("%02X ", buf[i]);
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	e00a      	b.n	8006a02 <tu_print_buf+0x26>
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4413      	add	r3, r2
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	4619      	mov	r1, r3
 80069f6:	4808      	ldr	r0, [pc, #32]	@ (8006a18 <tu_print_buf+0x3c>)
 80069f8:	f004 fe1c 	bl	800b634 <iprintf>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3301      	adds	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d3f0      	bcc.n	80069ec <tu_print_buf+0x10>
  tu_printf("\r\n");
 8006a0a:	4804      	ldr	r0, [pc, #16]	@ (8006a1c <tu_print_buf+0x40>)
 8006a0c:	f004 fe82 	bl	800b714 <puts>
}
 8006a10:	bf00      	nop
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	0800c920 	.word	0x0800c920
 8006a1c:	0800c928 	.word	0x0800c928

08006a20 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	6039      	str	r1, [r7, #0]
 8006a2a:	71fb      	strb	r3, [r7, #7]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr

08006a3a <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr

08006a4c <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
  return NULL;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8006a5a:	b480      	push	{r7}
 8006a5c:	af00      	add	r7, sp, #0
  return NULL;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <tud_vendor_control_xfer_cb>:
}

TU_ATTR_WEAK void tud_resume_cb(void) {
}

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	4603      	mov	r3, r0
 8006a86:	603a      	str	r2, [r7, #0]
 8006a88:	71fb      	strb	r3, [r7, #7]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr

08006a9a <dcd_connect>:
TU_ATTR_WEAK bool dcd_deinit(uint8_t rhport) {
  (void) rhport;
  return false;
}

TU_ATTR_WEAK void dcd_connect(uint8_t rhport) {
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr
	...

08006ab0 <usbd_driver_print_control_complete_name>:
    "Xfer Complete",
    "Func Call"
};

// for usbd_control to print the name of control complete driver
void usbd_driver_print_control_complete_name(usbd_control_xfer_cb_t callback) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006ab8:	2300      	movs	r3, #0
 8006aba:	75fb      	strb	r3, [r7, #23]
 8006abc:	e031      	b.n	8006b22 <usbd_driver_print_control_complete_name+0x72>
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
 8006ac0:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8006ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b34 <usbd_driver_print_control_complete_name+0x84>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	7bfa      	ldrb	r2, [r7, #15]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d206      	bcs.n	8006ade <usbd_driver_print_control_complete_name+0x2e>
    driver = &_app_driver[drvid];
 8006ad0:	4b19      	ldr	r3, [pc, #100]	@ (8006b38 <usbd_driver_print_control_complete_name+0x88>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
 8006ad6:	015b      	lsls	r3, r3, #5
 8006ad8:	4413      	add	r3, r2
 8006ada:	60bb      	str	r3, [r7, #8]
 8006adc:	e00d      	b.n	8006afa <usbd_driver_print_control_complete_name+0x4a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006ade:	4b15      	ldr	r3, [pc, #84]	@ (8006b34 <usbd_driver_print_control_complete_name+0x84>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	db07      	blt.n	8006afa <usbd_driver_print_control_complete_name+0x4a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
 8006aec:	4a11      	ldr	r2, [pc, #68]	@ (8006b34 <usbd_driver_print_control_complete_name+0x84>)
 8006aee:	7812      	ldrb	r2, [r2, #0]
 8006af0:	1a9b      	subs	r3, r3, r2
 8006af2:	015b      	lsls	r3, r3, #5
 8006af4:	4a11      	ldr	r2, [pc, #68]	@ (8006b3c <usbd_driver_print_control_complete_name+0x8c>)
 8006af6:	4413      	add	r3, r2
 8006af8:	60bb      	str	r3, [r7, #8]
  return driver;
 8006afa:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8006afc:	613b      	str	r3, [r7, #16]
    if (driver && driver->control_xfer_cb == callback) {
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00b      	beq.n	8006b1c <usbd_driver_print_control_complete_name+0x6c>
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d106      	bne.n	8006b1c <usbd_driver_print_control_complete_name+0x6c>
      TU_LOG_USBD("%s control complete\r\n", driver->name);
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4619      	mov	r1, r3
 8006b14:	480a      	ldr	r0, [pc, #40]	@ (8006b40 <usbd_driver_print_control_complete_name+0x90>)
 8006b16:	f004 fd8d 	bl	800b634 <iprintf>
      return;
 8006b1a:	e008      	b.n	8006b2e <usbd_driver_print_control_complete_name+0x7e>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006b1c:	7dfb      	ldrb	r3, [r7, #23]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	75fb      	strb	r3, [r7, #23]
 8006b22:	4b04      	ldr	r3, [pc, #16]	@ (8006b34 <usbd_driver_print_control_complete_name+0x84>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	dac7      	bge.n	8006abe <usbd_driver_print_control_complete_name+0xe>
    }
  }
}
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20000630 	.word	0x20000630
 8006b38:	2000062c 	.word	0x2000062c
 8006b3c:	0800d028 	.word	0x0800d028
 8006b40:	0800c994 	.word	0x0800c994

08006b44 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8006b48:	4b05      	ldr	r3, [pc, #20]	@ (8006b60 <tud_mounted+0x1c>)
 8006b4a:	785b      	ldrb	r3, [r3, #1]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bf14      	ite	ne
 8006b52:	2301      	movne	r3, #1
 8006b54:	2300      	moveq	r3, #0
 8006b56:	b2db      	uxtb	r3, r3
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr
 8006b60:	200005f4 	.word	0x200005f4

08006b64 <tud_suspended>:

bool tud_suspended(void) {
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8006b68:	4b06      	ldr	r3, [pc, #24]	@ (8006b84 <tud_suspended+0x20>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	bf14      	ite	ne
 8006b76:	2301      	movne	r3, #1
 8006b78:	2300      	moveq	r3, #0
 8006b7a:	b2db      	uxtb	r3, r3
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr
 8006b84:	200005f4 	.word	0x200005f4

08006b88 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8006b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006bcc <tud_remote_wakeup+0x44>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00d      	beq.n	8006bb6 <tud_remote_wakeup+0x2e>
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bcc <tud_remote_wakeup+0x44>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	f003 0310 	and.w	r3, r3, #16
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d006      	beq.n	8006bb6 <tud_remote_wakeup+0x2e>
 8006ba8:	4b08      	ldr	r3, [pc, #32]	@ (8006bcc <tud_remote_wakeup+0x44>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	f003 0308 	and.w	r3, r3, #8
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <tud_remote_wakeup+0x32>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	e005      	b.n	8006bc6 <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8006bba:	4b05      	ldr	r3, [pc, #20]	@ (8006bd0 <tud_remote_wakeup+0x48>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f002 f976 	bl	8008eb0 <dcd_remote_wakeup>
  return true;
 8006bc4:	2301      	movs	r3, #1
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	200005f4 	.word	0x200005f4
 8006bd0:	20000025 	.word	0x20000025

08006bd4 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8006bd8:	4b05      	ldr	r3, [pc, #20]	@ (8006bf0 <tud_inited+0x1c>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2bff      	cmp	r3, #255	@ 0xff
 8006bde:	bf14      	ite	ne
 8006be0:	2301      	movne	r3, #1
 8006be2:	2300      	moveq	r3, #0
 8006be4:	b2db      	uxtb	r3, r3
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	20000025 	.word	0x20000025

08006bf4 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08c      	sub	sp, #48	@ 0x30
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	6039      	str	r1, [r7, #0]
 8006bfe:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8006c00:	f7ff ffe8 	bl	8006bd4 <tud_inited>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e0d5      	b.n	8006dba <tud_rhport_init+0x1c6>
  }
  TU_ASSERT(rh_init);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d110      	bne.n	8006c36 <tud_rhport_init+0x42>
 8006c14:	f44f 72e9 	mov.w	r2, #466	@ 0x1d2
 8006c18:	496a      	ldr	r1, [pc, #424]	@ (8006dc4 <tud_rhport_init+0x1d0>)
 8006c1a:	486b      	ldr	r0, [pc, #428]	@ (8006dc8 <tud_rhport_init+0x1d4>)
 8006c1c:	f004 fd0a 	bl	800b634 <iprintf>
 8006c20:	4b6a      	ldr	r3, [pc, #424]	@ (8006dcc <tud_rhport_init+0x1d8>)
 8006c22:	61bb      	str	r3, [r7, #24]
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d000      	beq.n	8006c32 <tud_rhport_init+0x3e>
 8006c30:	be00      	bkpt	0x0000
 8006c32:	2300      	movs	r3, #0
 8006c34:	e0c1      	b.n	8006dba <tud_rhport_init+0x1c6>

  TU_LOG_USBD("USBD init on controller %u, speed = %s\r\n", rhport,
 8006c36:	79f9      	ldrb	r1, [r7, #7]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d101      	bne.n	8006c44 <tud_rhport_init+0x50>
 8006c40:	4b63      	ldr	r3, [pc, #396]	@ (8006dd0 <tud_rhport_init+0x1dc>)
 8006c42:	e000      	b.n	8006c46 <tud_rhport_init+0x52>
 8006c44:	4b63      	ldr	r3, [pc, #396]	@ (8006dd4 <tud_rhport_init+0x1e0>)
 8006c46:	461a      	mov	r2, r3
 8006c48:	4863      	ldr	r0, [pc, #396]	@ (8006dd8 <tud_rhport_init+0x1e4>)
 8006c4a:	f004 fcf3 	bl	800b634 <iprintf>
    rh_init->speed == TUSB_SPEED_HIGH ? "High" : "Full");
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
 8006c4e:	2134      	movs	r1, #52	@ 0x34
 8006c50:	4862      	ldr	r0, [pc, #392]	@ (8006ddc <tud_rhport_init+0x1e8>)
 8006c52:	f004 fcef 	bl	800b634 <iprintf>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
 8006c56:	210c      	movs	r1, #12
 8006c58:	4861      	ldr	r0, [pc, #388]	@ (8006de0 <tud_rhport_init+0x1ec>)
 8006c5a:	f004 fceb 	bl	800b634 <iprintf>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
 8006c5e:	210c      	movs	r1, #12
 8006c60:	4860      	ldr	r0, [pc, #384]	@ (8006de4 <tud_rhport_init+0x1f0>)
 8006c62:	f004 fce7 	bl	800b634 <iprintf>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));
 8006c66:	2114      	movs	r1, #20
 8006c68:	485f      	ldr	r0, [pc, #380]	@ (8006de8 <tud_rhport_init+0x1f4>)
 8006c6a:	f004 fce3 	bl	800b634 <iprintf>

  tu_varclr(&_usbd_dev);
 8006c6e:	2234      	movs	r2, #52	@ 0x34
 8006c70:	2100      	movs	r1, #0
 8006c72:	485e      	ldr	r0, [pc, #376]	@ (8006dec <tud_rhport_init+0x1f8>)
 8006c74:	f004 fe62 	bl	800b93c <memset>
  _usbd_queued_setup = 0;
 8006c78:	4b5d      	ldr	r3, [pc, #372]	@ (8006df0 <tud_rhport_init+0x1fc>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8006df4 <tud_rhport_init+0x200>)
 8006c80:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	3304      	adds	r3, #4
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff fd25 	bl	80066d6 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8006c8c:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8006c8e:	4a5a      	ldr	r2, [pc, #360]	@ (8006df8 <tud_rhport_init+0x204>)
 8006c90:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8006c92:	4b59      	ldr	r3, [pc, #356]	@ (8006df8 <tud_rhport_init+0x204>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d110      	bne.n	8006cbc <tud_rhport_init+0xc8>
 8006c9a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8006c9e:	4949      	ldr	r1, [pc, #292]	@ (8006dc4 <tud_rhport_init+0x1d0>)
 8006ca0:	4849      	ldr	r0, [pc, #292]	@ (8006dc8 <tud_rhport_init+0x1d4>)
 8006ca2:	f004 fcc7 	bl	800b634 <iprintf>
 8006ca6:	4b49      	ldr	r3, [pc, #292]	@ (8006dcc <tud_rhport_init+0x1d8>)
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d000      	beq.n	8006cb8 <tud_rhport_init+0xc4>
 8006cb6:	be00      	bkpt	0x0000
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e07e      	b.n	8006dba <tud_rhport_init+0x1c6>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8006cbc:	4b4f      	ldr	r3, [pc, #316]	@ (8006dfc <tud_rhport_init+0x208>)
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <tud_rhport_init+0xda>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8006cc2:	484f      	ldr	r0, [pc, #316]	@ (8006e00 <tud_rhport_init+0x20c>)
 8006cc4:	f3af 8000 	nop.w
 8006cc8:	4603      	mov	r3, r0
 8006cca:	4a4e      	ldr	r2, [pc, #312]	@ (8006e04 <tud_rhport_init+0x210>)
 8006ccc:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006cd4:	e046      	b.n	8006d64 <tud_rhport_init+0x170>
 8006cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cda:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8006ce0:	4b47      	ldr	r3, [pc, #284]	@ (8006e00 <tud_rhport_init+0x20c>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	7cfa      	ldrb	r2, [r7, #19]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d206      	bcs.n	8006cf8 <tud_rhport_init+0x104>
    driver = &_app_driver[drvid];
 8006cea:	4b46      	ldr	r3, [pc, #280]	@ (8006e04 <tud_rhport_init+0x210>)
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	7cfb      	ldrb	r3, [r7, #19]
 8006cf0:	015b      	lsls	r3, r3, #5
 8006cf2:	4413      	add	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]
 8006cf6:	e00d      	b.n	8006d14 <tud_rhport_init+0x120>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006cf8:	4b41      	ldr	r3, [pc, #260]	@ (8006e00 <tud_rhport_init+0x20c>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	7cfb      	ldrb	r3, [r7, #19]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	db07      	blt.n	8006d14 <tud_rhport_init+0x120>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006d04:	7cfb      	ldrb	r3, [r7, #19]
 8006d06:	4a3e      	ldr	r2, [pc, #248]	@ (8006e00 <tud_rhport_init+0x20c>)
 8006d08:	7812      	ldrb	r2, [r2, #0]
 8006d0a:	1a9b      	subs	r3, r3, r2
 8006d0c:	015b      	lsls	r3, r3, #5
 8006d0e:	4a3e      	ldr	r2, [pc, #248]	@ (8006e08 <tud_rhport_init+0x214>)
 8006d10:	4413      	add	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
  return driver;
 8006d14:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8006d16:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8006d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <tud_rhport_init+0x132>
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d110      	bne.n	8006d48 <tud_rhport_init+0x154>
 8006d26:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 8006d2a:	4926      	ldr	r1, [pc, #152]	@ (8006dc4 <tud_rhport_init+0x1d0>)
 8006d2c:	4826      	ldr	r0, [pc, #152]	@ (8006dc8 <tud_rhport_init+0x1d4>)
 8006d2e:	f004 fc81 	bl	800b634 <iprintf>
 8006d32:	4b26      	ldr	r3, [pc, #152]	@ (8006dcc <tud_rhport_init+0x1d8>)
 8006d34:	623b      	str	r3, [r7, #32]
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d000      	beq.n	8006d44 <tud_rhport_init+0x150>
 8006d42:	be00      	bkpt	0x0000
 8006d44:	2300      	movs	r3, #0
 8006d46:	e038      	b.n	8006dba <tud_rhport_init+0x1c6>
    TU_LOG_USBD("%s init\r\n", driver->name);
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	482f      	ldr	r0, [pc, #188]	@ (8006e0c <tud_rhport_init+0x218>)
 8006d50:	f004 fc70 	bl	800b634 <iprintf>
    driver->init();
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d5e:	3301      	adds	r3, #1
 8006d60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006d64:	4b26      	ldr	r3, [pc, #152]	@ (8006e00 <tud_rhport_init+0x20c>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	dab1      	bge.n	8006cd6 <tud_rhport_init+0xe2>
  }

  _usbd_rhport = rhport;
 8006d72:	4a27      	ldr	r2, [pc, #156]	@ (8006e10 <tud_rhport_init+0x21c>)
 8006d74:	79fb      	ldrb	r3, [r7, #7]
 8006d76:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8006d78:	79fb      	ldrb	r3, [r7, #7]
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 ffe1 	bl	8008d44 <dcd_init>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f083 0301 	eor.w	r3, r3, #1
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d010      	beq.n	8006db0 <tud_rhport_init+0x1bc>
 8006d8e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8006d92:	490c      	ldr	r1, [pc, #48]	@ (8006dc4 <tud_rhport_init+0x1d0>)
 8006d94:	480c      	ldr	r0, [pc, #48]	@ (8006dc8 <tud_rhport_init+0x1d4>)
 8006d96:	f004 fc4d 	bl	800b634 <iprintf>
 8006d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006dcc <tud_rhport_init+0x1d8>)
 8006d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d000      	beq.n	8006dac <tud_rhport_init+0x1b8>
 8006daa:	be00      	bkpt	0x0000
 8006dac:	2300      	movs	r3, #0
 8006dae:	e004      	b.n	8006dba <tud_rhport_init+0x1c6>
  dcd_int_enable(rhport);
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f001 ff88 	bl	8008cc8 <dcd_int_enable>

  return true;
 8006db8:	2301      	movs	r3, #1
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3730      	adds	r7, #48	@ 0x30
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	0800d08c 	.word	0x0800d08c
 8006dc8:	0800c9ac 	.word	0x0800c9ac
 8006dcc:	e000edf0 	.word	0xe000edf0
 8006dd0:	0800c9c4 	.word	0x0800c9c4
 8006dd4:	0800c9cc 	.word	0x0800c9cc
 8006dd8:	0800c9d4 	.word	0x0800c9d4
 8006ddc:	0800ca00 	.word	0x0800ca00
 8006de0:	0800ca20 	.word	0x0800ca20
 8006de4:	0800ca3c 	.word	0x0800ca3c
 8006de8:	0800ca58 	.word	0x0800ca58
 8006dec:	200005f4 	.word	0x200005f4
 8006df0:	20000628 	.word	0x20000628
 8006df4:	20000028 	.word	0x20000028
 8006df8:	200006f4 	.word	0x200006f4
 8006dfc:	00000000 	.word	0x00000000
 8006e00:	20000630 	.word	0x20000630
 8006e04:	2000062c 	.word	0x2000062c
 8006e08:	0800d028 	.word	0x0800d028
 8006e0c:	0800ca7c 	.word	0x0800ca7c
 8006e10:	20000025 	.word	0x20000025

08006e14 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006e1e:	2300      	movs	r3, #0
 8006e20:	77fb      	strb	r3, [r7, #31]
 8006e22:	e03a      	b.n	8006e9a <configuration_reset+0x86>
 8006e24:	7ffb      	ldrb	r3, [r7, #31]
 8006e26:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8006e2c:	4b28      	ldr	r3, [pc, #160]	@ (8006ed0 <configuration_reset+0xbc>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	7cfa      	ldrb	r2, [r7, #19]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d206      	bcs.n	8006e44 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8006e36:	4b27      	ldr	r3, [pc, #156]	@ (8006ed4 <configuration_reset+0xc0>)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	7cfb      	ldrb	r3, [r7, #19]
 8006e3c:	015b      	lsls	r3, r3, #5
 8006e3e:	4413      	add	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e00d      	b.n	8006e60 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006e44:	4b22      	ldr	r3, [pc, #136]	@ (8006ed0 <configuration_reset+0xbc>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	7cfb      	ldrb	r3, [r7, #19]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	db07      	blt.n	8006e60 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006e50:	7cfb      	ldrb	r3, [r7, #19]
 8006e52:	4a1f      	ldr	r2, [pc, #124]	@ (8006ed0 <configuration_reset+0xbc>)
 8006e54:	7812      	ldrb	r2, [r2, #0]
 8006e56:	1a9b      	subs	r3, r3, r2
 8006e58:	015b      	lsls	r3, r3, #5
 8006e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ed8 <configuration_reset+0xc4>)
 8006e5c:	4413      	add	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
  return driver;
 8006e60:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8006e62:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10f      	bne.n	8006e8a <configuration_reset+0x76>
 8006e6a:	f240 2225 	movw	r2, #549	@ 0x225
 8006e6e:	491b      	ldr	r1, [pc, #108]	@ (8006edc <configuration_reset+0xc8>)
 8006e70:	481b      	ldr	r0, [pc, #108]	@ (8006ee0 <configuration_reset+0xcc>)
 8006e72:	f004 fbdf 	bl	800b634 <iprintf>
 8006e76:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee4 <configuration_reset+0xd0>)
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d01f      	beq.n	8006ec6 <configuration_reset+0xb2>
 8006e86:	be00      	bkpt	0x0000
 8006e88:	e01d      	b.n	8006ec6 <configuration_reset+0xb2>
    driver->reset(rhport);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	79fa      	ldrb	r2, [r7, #7]
 8006e90:	4610      	mov	r0, r2
 8006e92:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006e94:	7ffb      	ldrb	r3, [r7, #31]
 8006e96:	3301      	adds	r3, #1
 8006e98:	77fb      	strb	r3, [r7, #31]
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed0 <configuration_reset+0xbc>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	7ffb      	ldrb	r3, [r7, #31]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	dabe      	bge.n	8006e24 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8006ea6:	2234      	movs	r2, #52	@ 0x34
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	480f      	ldr	r0, [pc, #60]	@ (8006ee8 <configuration_reset+0xd4>)
 8006eac:	f004 fd46 	bl	800b93c <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8006eb0:	2210      	movs	r2, #16
 8006eb2:	21ff      	movs	r1, #255	@ 0xff
 8006eb4:	480d      	ldr	r0, [pc, #52]	@ (8006eec <configuration_reset+0xd8>)
 8006eb6:	f004 fd41 	bl	800b93c <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8006eba:	2210      	movs	r2, #16
 8006ebc:	21ff      	movs	r1, #255	@ 0xff
 8006ebe:	480c      	ldr	r0, [pc, #48]	@ (8006ef0 <configuration_reset+0xdc>)
 8006ec0:	f004 fd3c 	bl	800b93c <memset>
 8006ec4:	e000      	b.n	8006ec8 <configuration_reset+0xb4>
    TU_ASSERT(driver,);
 8006ec6:	bf00      	nop
}
 8006ec8:	3720      	adds	r7, #32
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000630 	.word	0x20000630
 8006ed4:	2000062c 	.word	0x2000062c
 8006ed8:	0800d028 	.word	0x0800d028
 8006edc:	0800d09c 	.word	0x0800d09c
 8006ee0:	0800c9ac 	.word	0x0800c9ac
 8006ee4:	e000edf0 	.word	0xe000edf0
 8006ee8:	200005f4 	.word	0x200005f4
 8006eec:	200005f8 	.word	0x200005f8
 8006ef0:	20000608 	.word	0x20000608

08006ef4 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff ff87 	bl	8006e14 <configuration_reset>
  usbd_control_reset();
 8006f06:	f001 fd99 	bl	8008a3c <usbd_control_reset>
}
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8006f14:	b590      	push	{r4, r7, lr}
 8006f16:	b093      	sub	sp, #76	@ 0x4c
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8006f20:	f7ff fe58 	bl	8006bd4 <tud_inited>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f083 0301 	eor.w	r3, r3, #1
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 81fc 	bne.w	800732a <tud_task_ext+0x416>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8006f32:	4bb5      	ldr	r3, [pc, #724]	@ (8007208 <tud_task_ext+0x2f4>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f38:	f107 030c 	add.w	r3, r7, #12
 8006f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8006f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2000      	movs	r0, #0
 8006f48:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff fb35 	bl	80065c0 <tu_fifo_read>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2001      	movs	r0, #1
 8006f62:	4798      	blx	r3

  return success;
 8006f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f68:	f083 0301 	eor.w	r3, r3, #1
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f040 81dd 	bne.w	800732e <tud_task_ext+0x41a>

#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
 8006f74:	7b7b      	ldrb	r3, [r7, #13]
 8006f76:	2b06      	cmp	r3, #6
 8006f78:	d102      	bne.n	8006f80 <tud_task_ext+0x6c>
 8006f7a:	48a4      	ldr	r0, [pc, #656]	@ (800720c <tud_task_ext+0x2f8>)
 8006f7c:	f004 fbca 	bl	800b714 <puts>
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
 8006f80:	7b7b      	ldrb	r3, [r7, #13]
 8006f82:	2b08      	cmp	r3, #8
 8006f84:	d805      	bhi.n	8006f92 <tud_task_ext+0x7e>
 8006f86:	7b7b      	ldrb	r3, [r7, #13]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4ba1      	ldr	r3, [pc, #644]	@ (8007210 <tud_task_ext+0x2fc>)
 8006f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f90:	e000      	b.n	8006f94 <tud_task_ext+0x80>
 8006f92:	4ba0      	ldr	r3, [pc, #640]	@ (8007214 <tud_task_ext+0x300>)
 8006f94:	4619      	mov	r1, r3
 8006f96:	48a0      	ldr	r0, [pc, #640]	@ (8007218 <tud_task_ext+0x304>)
 8006f98:	f004 fb4c 	bl	800b634 <iprintf>
#endif

    switch (event.event_id) {
 8006f9c:	7b7b      	ldrb	r3, [r7, #13]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	2b07      	cmp	r3, #7
 8006fa2:	f200 81b0 	bhi.w	8007306 <tud_task_ext+0x3f2>
 8006fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fac <tud_task_ext+0x98>)
 8006fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fac:	08006fcd 	.word	0x08006fcd
 8006fb0:	08006fef 	.word	0x08006fef
 8006fb4:	080072d1 	.word	0x080072d1
 8006fb8:	08007255 	.word	0x08007255
 8006fbc:	08007299 	.word	0x08007299
 8006fc0:	08007003 	.word	0x08007003
 8006fc4:	080070d9 	.word	0x080070d9
 8006fc8:	080072bb 	.word	0x080072bb
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
 8006fcc:	7c3b      	ldrb	r3, [r7, #16]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	4b92      	ldr	r3, [pc, #584]	@ (800721c <tud_task_ext+0x308>)
 8006fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4891      	ldr	r0, [pc, #580]	@ (8007220 <tud_task_ext+0x30c>)
 8006fda:	f004 fb2b 	bl	800b634 <iprintf>
        usbd_reset(event.rhport);
 8006fde:	7b3b      	ldrb	r3, [r7, #12]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff ff87 	bl	8006ef4 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8006fe6:	7c3a      	ldrb	r2, [r7, #16]
 8006fe8:	4b8e      	ldr	r3, [pc, #568]	@ (8007224 <tud_task_ext+0x310>)
 8006fea:	709a      	strb	r2, [r3, #2]
        break;
 8006fec:	e19c      	b.n	8007328 <tud_task_ext+0x414>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
 8006fee:	4887      	ldr	r0, [pc, #540]	@ (800720c <tud_task_ext+0x2f8>)
 8006ff0:	f004 fb90 	bl	800b714 <puts>
        usbd_reset(event.rhport);
 8006ff4:	7b3b      	ldrb	r3, [r7, #12]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff ff7c 	bl	8006ef4 <usbd_reset>
        tud_umount_cb();
 8006ffc:	f7f9 fabc 	bl	8000578 <tud_umount_cb>
        break;
 8007000:	e192      	b.n	8007328 <tud_task_ext+0x414>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8007002:	4b89      	ldr	r3, [pc, #548]	@ (8007228 <tud_task_ext+0x314>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d110      	bne.n	800702e <tud_task_ext+0x11a>
 800700c:	f240 2265 	movw	r2, #613	@ 0x265
 8007010:	4986      	ldr	r1, [pc, #536]	@ (800722c <tud_task_ext+0x318>)
 8007012:	4887      	ldr	r0, [pc, #540]	@ (8007230 <tud_task_ext+0x31c>)
 8007014:	f004 fb0e 	bl	800b634 <iprintf>
 8007018:	4b86      	ldr	r3, [pc, #536]	@ (8007234 <tud_task_ext+0x320>)
 800701a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800701c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8184 	beq.w	8007332 <tud_task_ext+0x41e>
 800702a:	be00      	bkpt	0x0000
 800702c:	e181      	b.n	8007332 <tud_task_ext+0x41e>
        _usbd_queued_setup--;
 800702e:	4b7e      	ldr	r3, [pc, #504]	@ (8007228 <tud_task_ext+0x314>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	b2da      	uxtb	r2, r3
 8007038:	4b7b      	ldr	r3, [pc, #492]	@ (8007228 <tud_task_ext+0x314>)
 800703a:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
 800703c:	f107 030c 	add.w	r3, r7, #12
 8007040:	3304      	adds	r3, #4
 8007042:	2108      	movs	r1, #8
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff fcc9 	bl	80069dc <tu_print_buf>
        if (_usbd_queued_setup) {
 800704a:	4b77      	ldr	r3, [pc, #476]	@ (8007228 <tud_task_ext+0x314>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <tud_task_ext+0x148>
          TU_LOG_USBD("  Skipped since there is other SETUP in queue\r\n");
 8007054:	4878      	ldr	r0, [pc, #480]	@ (8007238 <tud_task_ext+0x324>)
 8007056:	f004 fb5d 	bl	800b714 <puts>
          break;
 800705a:	e165      	b.n	8007328 <tud_task_ext+0x414>
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 800705c:	4a71      	ldr	r2, [pc, #452]	@ (8007224 <tud_task_ext+0x310>)
 800705e:	7813      	ldrb	r3, [r2, #0]
 8007060:	f043 0301 	orr.w	r3, r3, #1
 8007064:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8007066:	4a6f      	ldr	r2, [pc, #444]	@ (8007224 <tud_task_ext+0x310>)
 8007068:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 800706c:	f36f 0300 	bfc	r3, #0, #1
 8007070:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8007074:	4a6b      	ldr	r2, [pc, #428]	@ (8007224 <tud_task_ext+0x310>)
 8007076:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 800707a:	f36f 0382 	bfc	r3, #2, #1
 800707e:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8007082:	4a68      	ldr	r2, [pc, #416]	@ (8007224 <tud_task_ext+0x310>)
 8007084:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8007088:	f36f 0300 	bfc	r3, #0, #1
 800708c:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8007090:	4a64      	ldr	r2, [pc, #400]	@ (8007224 <tud_task_ext+0x310>)
 8007092:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8007096:	f36f 0382 	bfc	r3, #2, #1
 800709a:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 800709e:	7b3a      	ldrb	r2, [r7, #12]
 80070a0:	f107 030c 	add.w	r3, r7, #12
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f000 f973 	bl	8007394 <process_control_request>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f083 0301 	eor.w	r3, r3, #1
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 812f 	beq.w	800731a <tud_task_ext+0x406>
          TU_LOG_USBD("  Stall EP0\r\n");
 80070bc:	485f      	ldr	r0, [pc, #380]	@ (800723c <tud_task_ext+0x328>)
 80070be:	f004 fb29 	bl	800b714 <puts>
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 80070c2:	7b3b      	ldrb	r3, [r7, #12]
 80070c4:	2100      	movs	r1, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f003 fc3a 	bl	800a940 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 80070cc:	7b3b      	ldrb	r3, [r7, #12]
 80070ce:	2180      	movs	r1, #128	@ 0x80
 80070d0:	4618      	mov	r0, r3
 80070d2:	f003 fc35 	bl	800a940 <dcd_edpt_stall>
        }
        break;
 80070d6:	e120      	b.n	800731a <tud_task_ext+0x406>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80070d8:	7c3b      	ldrb	r3, [r7, #16]
 80070da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80070de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80070e6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ee:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 80070f0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80070f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80070fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007100:	09db      	lsrs	r3, r3, #7
 8007102:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 8007104:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);
 8007108:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4619      	mov	r1, r3
 8007110:	484b      	ldr	r0, [pc, #300]	@ (8007240 <tud_task_ext+0x32c>)
 8007112:	f004 fa8f 	bl	800b634 <iprintf>

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8007116:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800711a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800711e:	4941      	ldr	r1, [pc, #260]	@ (8007224 <tud_task_ext+0x310>)
 8007120:	0052      	lsls	r2, r2, #1
 8007122:	440a      	add	r2, r1
 8007124:	4413      	add	r3, r2
 8007126:	f103 0220 	add.w	r2, r3, #32
 800712a:	7913      	ldrb	r3, [r2, #4]
 800712c:	f36f 0300 	bfc	r3, #0, #1
 8007130:	7113      	strb	r3, [r2, #4]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8007132:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8007136:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800713a:	493a      	ldr	r1, [pc, #232]	@ (8007224 <tud_task_ext+0x310>)
 800713c:	0052      	lsls	r2, r2, #1
 800713e:	440a      	add	r2, r1
 8007140:	4413      	add	r3, r2
 8007142:	f103 0220 	add.w	r2, r3, #32
 8007146:	7913      	ldrb	r3, [r2, #4]
 8007148:	f36f 0382 	bfc	r3, #2, #1
 800714c:	7113      	strb	r3, [r2, #4]

        if (0 == epnum) {
 800714e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007152:	2b00      	cmp	r3, #0
 8007154:	d107      	bne.n	8007166 <tud_task_ext+0x252>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8007156:	7b38      	ldrb	r0, [r7, #12]
 8007158:	7c7a      	ldrb	r2, [r7, #17]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007160:	f001 fca0 	bl	8008aa4 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8007164:	e0e0      	b.n	8007328 <tud_task_ext+0x414>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8007166:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800716a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800716e:	492d      	ldr	r1, [pc, #180]	@ (8007224 <tud_task_ext+0x310>)
 8007170:	0052      	lsls	r2, r2, #1
 8007172:	440a      	add	r2, r1
 8007174:	4413      	add	r3, r2
 8007176:	3314      	adds	r3, #20
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 800717e:	2300      	movs	r3, #0
 8007180:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8007182:	4b30      	ldr	r3, [pc, #192]	@ (8007244 <tud_task_ext+0x330>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800718a:	429a      	cmp	r2, r3
 800718c:	d207      	bcs.n	800719e <tud_task_ext+0x28a>
    driver = &_app_driver[drvid];
 800718e:	4b2e      	ldr	r3, [pc, #184]	@ (8007248 <tud_task_ext+0x334>)
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007196:	015b      	lsls	r3, r3, #5
 8007198:	4413      	add	r3, r2
 800719a:	623b      	str	r3, [r7, #32]
 800719c:	e00f      	b.n	80071be <tud_task_ext+0x2aa>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800719e:	4b29      	ldr	r3, [pc, #164]	@ (8007244 <tud_task_ext+0x330>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071a8:	429a      	cmp	r2, r3
 80071aa:	db08      	blt.n	80071be <tud_task_ext+0x2aa>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80071ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071b0:	4a24      	ldr	r2, [pc, #144]	@ (8007244 <tud_task_ext+0x330>)
 80071b2:	7812      	ldrb	r2, [r2, #0]
 80071b4:	1a9b      	subs	r3, r3, r2
 80071b6:	015b      	lsls	r3, r3, #5
 80071b8:	4a24      	ldr	r2, [pc, #144]	@ (800724c <tud_task_ext+0x338>)
 80071ba:	4413      	add	r3, r2
 80071bc:	623b      	str	r3, [r7, #32]
  return driver;
 80071be:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 80071c0:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 80071c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d110      	bne.n	80071ea <tud_task_ext+0x2d6>
 80071c8:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80071cc:	4917      	ldr	r1, [pc, #92]	@ (800722c <tud_task_ext+0x318>)
 80071ce:	4818      	ldr	r0, [pc, #96]	@ (8007230 <tud_task_ext+0x31c>)
 80071d0:	f004 fa30 	bl	800b634 <iprintf>
 80071d4:	4b17      	ldr	r3, [pc, #92]	@ (8007234 <tud_task_ext+0x320>)
 80071d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 80a8 	beq.w	8007336 <tud_task_ext+0x422>
 80071e6:	be00      	bkpt	0x0000
 80071e8:	e0a5      	b.n	8007336 <tud_task_ext+0x422>
          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
 80071ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4619      	mov	r1, r3
 80071f0:	4817      	ldr	r0, [pc, #92]	@ (8007250 <tud_task_ext+0x33c>)
 80071f2:	f004 fa1f 	bl	800b634 <iprintf>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 80071f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071f8:	699c      	ldr	r4, [r3, #24]
 80071fa:	7b38      	ldrb	r0, [r7, #12]
 80071fc:	7c7a      	ldrb	r2, [r7, #17]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007204:	47a0      	blx	r4
        break;
 8007206:	e08f      	b.n	8007328 <tud_task_ext+0x414>
 8007208:	200006f4 	.word	0x200006f4
 800720c:	0800c928 	.word	0x0800c928
 8007210:	0800d068 	.word	0x0800d068
 8007214:	0800cab4 	.word	0x0800cab4
 8007218:	0800cac0 	.word	0x0800cac0
 800721c:	0800d1a4 	.word	0x0800d1a4
 8007220:	0800cacc 	.word	0x0800cacc
 8007224:	200005f4 	.word	0x200005f4
 8007228:	20000628 	.word	0x20000628
 800722c:	0800d0b0 	.word	0x0800d0b0
 8007230:	0800c9ac 	.word	0x0800c9ac
 8007234:	e000edf0 	.word	0xe000edf0
 8007238:	0800cadc 	.word	0x0800cadc
 800723c:	0800cb0c 	.word	0x0800cb0c
 8007240:	0800cb1c 	.word	0x0800cb1c
 8007244:	20000630 	.word	0x20000630
 8007248:	2000062c 	.word	0x2000062c
 800724c:	0800d028 	.word	0x0800d028
 8007250:	0800cb38 	.word	0x0800cb38

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8007254:	4b3a      	ldr	r3, [pc, #232]	@ (8007340 <tud_task_ext+0x42c>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d016      	beq.n	8007290 <tud_task_ext+0x37c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
 8007262:	4b37      	ldr	r3, [pc, #220]	@ (8007340 <tud_task_ext+0x42c>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800726a:	b2db      	uxtb	r3, r3
 800726c:	4619      	mov	r1, r3
 800726e:	4835      	ldr	r0, [pc, #212]	@ (8007344 <tud_task_ext+0x430>)
 8007270:	f004 f9e0 	bl	800b634 <iprintf>
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8007274:	4b32      	ldr	r3, [pc, #200]	@ (8007340 <tud_task_ext+0x42c>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	bf14      	ite	ne
 8007282:	2301      	movne	r3, #1
 8007284:	2300      	moveq	r3, #0
 8007286:	b2db      	uxtb	r3, r3
 8007288:	4618      	mov	r0, r3
 800728a:	f7f9 f981 	bl	8000590 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 800728e:	e04b      	b.n	8007328 <tud_task_ext+0x414>
          TU_LOG_USBD(" Skipped\r\n");
 8007290:	482d      	ldr	r0, [pc, #180]	@ (8007348 <tud_task_ext+0x434>)
 8007292:	f004 fa3f 	bl	800b714 <puts>
        break;
 8007296:	e047      	b.n	8007328 <tud_task_ext+0x414>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 8007298:	4b29      	ldr	r3, [pc, #164]	@ (8007340 <tud_task_ext+0x42c>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <tud_task_ext+0x39e>
          TU_LOG_USBD("\r\n");
 80072a6:	4829      	ldr	r0, [pc, #164]	@ (800734c <tud_task_ext+0x438>)
 80072a8:	f004 fa34 	bl	800b714 <puts>
          tud_resume_cb();
 80072ac:	f7f9 f980 	bl	80005b0 <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80072b0:	e03a      	b.n	8007328 <tud_task_ext+0x414>
          TU_LOG_USBD(" Skipped\r\n");
 80072b2:	4825      	ldr	r0, [pc, #148]	@ (8007348 <tud_task_ext+0x434>)
 80072b4:	f004 fa2e 	bl	800b714 <puts>
        break;
 80072b8:	e036      	b.n	8007328 <tud_task_ext+0x414>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
 80072ba:	4824      	ldr	r0, [pc, #144]	@ (800734c <tud_task_ext+0x438>)
 80072bc:	f004 fa2a 	bl	800b714 <puts>
        if (event.func_call.func) event.func_call.func(event.func_call.param);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d02b      	beq.n	800731e <tud_task_ext+0x40a>
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4610      	mov	r0, r2
 80072cc:	4798      	blx	r3
        break;
 80072ce:	e026      	b.n	800731e <tud_task_ext+0x40a>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 80072d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007340 <tud_task_ext+0x42c>)
 80072d2:	78db      	ldrb	r3, [r3, #3]
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	61fb      	str	r3, [r7, #28]
 80072d8:	2300      	movs	r3, #0
 80072da:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80072dc:	7efb      	ldrb	r3, [r7, #27]
 80072de:	69fa      	ldr	r2, [r7, #28]
 80072e0:	fa22 f303 	lsr.w	r3, r2, r3
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	bf14      	ite	ne
 80072ec:	2301      	movne	r3, #1
 80072ee:	2300      	moveq	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d015      	beq.n	8007322 <tud_task_ext+0x40e>
          TU_LOG_USBD("\r\n");
 80072f6:	4815      	ldr	r0, [pc, #84]	@ (800734c <tud_task_ext+0x438>)
 80072f8:	f004 fa0c 	bl	800b714 <puts>
          tud_sof_cb(event.sof.frame_count);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff fb9b 	bl	8006a3a <tud_sof_cb>
        }
      break;
 8007304:	e00d      	b.n	8007322 <tud_task_ext+0x40e>

      default:
        TU_BREAKPOINT();
 8007306:	4b12      	ldr	r3, [pc, #72]	@ (8007350 <tud_task_ext+0x43c>)
 8007308:	637b      	str	r3, [r7, #52]	@ 0x34
 800730a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d007      	beq.n	8007326 <tud_task_ext+0x412>
 8007316:	be00      	bkpt	0x0000
        break;
 8007318:	e005      	b.n	8007326 <tud_task_ext+0x412>
        break;
 800731a:	bf00      	nop
 800731c:	e609      	b.n	8006f32 <tud_task_ext+0x1e>
        break;
 800731e:	bf00      	nop
 8007320:	e607      	b.n	8006f32 <tud_task_ext+0x1e>
      break;
 8007322:	bf00      	nop
 8007324:	e605      	b.n	8006f32 <tud_task_ext+0x1e>
        break;
 8007326:	bf00      	nop
  while (1) {
 8007328:	e603      	b.n	8006f32 <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 800732a:	bf00      	nop
 800732c:	e004      	b.n	8007338 <tud_task_ext+0x424>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 800732e:	bf00      	nop
 8007330:	e002      	b.n	8007338 <tud_task_ext+0x424>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8007332:	bf00      	nop
 8007334:	e000      	b.n	8007338 <tud_task_ext+0x424>
          TU_ASSERT(driver,);
 8007336:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 8007338:	374c      	adds	r7, #76	@ 0x4c
 800733a:	46bd      	mov	sp, r7
 800733c:	bd90      	pop	{r4, r7, pc}
 800733e:	bf00      	nop
 8007340:	200005f4 	.word	0x200005f4
 8007344:	0800cb50 	.word	0x0800cb50
 8007348:	0800cb68 	.word	0x0800cb68
 800734c:	0800c928 	.word	0x0800c928
 8007350:	e000edf0 	.word	0xe000edf0

08007354 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	4603      	mov	r3, r0
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	4618      	mov	r0, r3
 8007368:	f001 fb74 	bl	8008a54 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4619      	mov	r1, r3
 8007372:	4807      	ldr	r0, [pc, #28]	@ (8007390 <invoke_class_control+0x3c>)
 8007374:	f004 f95e 	bl	800b634 <iprintf>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	7bf8      	ldrb	r0, [r7, #15]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	2101      	movs	r1, #1
 8007382:	4798      	blx	r3
 8007384:	4603      	mov	r3, r0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	0800cb74 	.word	0x0800cb74

08007394 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8007394:	b580      	push	{r7, lr}
 8007396:	b09a      	sub	sp, #104	@ 0x68
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	6039      	str	r1, [r7, #0]
 800739e:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80073a0:	2000      	movs	r0, #0
 80073a2:	f001 fb57 	bl	8008a54 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b60      	cmp	r3, #96	@ 0x60
 80073b2:	d110      	bne.n	80073d6 <process_control_request+0x42>
 80073b4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80073b8:	49a9      	ldr	r1, [pc, #676]	@ (8007660 <process_control_request+0x2cc>)
 80073ba:	48aa      	ldr	r0, [pc, #680]	@ (8007664 <process_control_request+0x2d0>)
 80073bc:	f004 f93a 	bl	800b634 <iprintf>
 80073c0:	4ba9      	ldr	r3, [pc, #676]	@ (8007668 <process_control_request+0x2d4>)
 80073c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80073c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d000      	beq.n	80073d2 <process_control_request+0x3e>
 80073d0:	be00      	bkpt	0x0000
 80073d2:	2300      	movs	r3, #0
 80073d4:	e304      	b.n	80079e0 <process_control_request+0x64c>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b40      	cmp	r3, #64	@ 0x40
 80073e2:	d10a      	bne.n	80073fa <process_control_request+0x66>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80073e4:	48a1      	ldr	r0, [pc, #644]	@ (800766c <process_control_request+0x2d8>)
 80073e6:	f001 fb35 	bl	8008a54 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	2101      	movs	r1, #1
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff fb44 	bl	8006a7e <tud_vendor_control_xfer_cb>
 80073f6:	4603      	mov	r3, r0
 80073f8:	e2f2      	b.n	80079e0 <process_control_request+0x64c>
  }

#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
  if (TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type && p_request->bRequest <= TUSB_REQ_SYNCH_FRAME) {
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d114      	bne.n	8007432 <process_control_request+0x9e>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	2b0c      	cmp	r3, #12
 800740e:	d810      	bhi.n	8007432 <process_control_request+0x9e>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	785b      	ldrb	r3, [r3, #1]
 8007414:	461a      	mov	r2, r3
 8007416:	4b96      	ldr	r3, [pc, #600]	@ (8007670 <process_control_request+0x2dc>)
 8007418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741c:	4619      	mov	r1, r3
 800741e:	4895      	ldr	r0, [pc, #596]	@ (8007674 <process_control_request+0x2e0>)
 8007420:	f004 f908 	bl	800b634 <iprintf>
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	785b      	ldrb	r3, [r3, #1]
 8007428:	2b06      	cmp	r3, #6
 800742a:	d002      	beq.n	8007432 <process_control_request+0x9e>
 800742c:	4892      	ldr	r0, [pc, #584]	@ (8007678 <process_control_request+0x2e4>)
 800742e:	f004 f971 	bl	800b714 <puts>
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	f000 81e9 	beq.w	8007814 <process_control_request+0x480>
 8007442:	2b02      	cmp	r3, #2
 8007444:	f300 82bf 	bgt.w	80079c6 <process_control_request+0x632>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <process_control_request+0xc0>
 800744c:	2b01      	cmp	r3, #1
 800744e:	f000 8170 	beq.w	8007732 <process_control_request+0x39e>
 8007452:	e2b8      	b.n	80079c6 <process_control_request+0x632>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b20      	cmp	r3, #32
 8007460:	d143      	bne.n	80074ea <process_control_request+0x156>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	889b      	ldrh	r3, [r3, #4]
 8007466:	b29b      	uxth	r3, r3
 8007468:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800746a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800746c:	b2db      	uxtb	r3, r3
 800746e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007472:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007476:	2b0f      	cmp	r3, #15
 8007478:	d901      	bls.n	800747e <process_control_request+0xea>
 800747a:	2300      	movs	r3, #0
 800747c:	e2b0      	b.n	80079e0 <process_control_request+0x64c>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800747e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007482:	4a7e      	ldr	r2, [pc, #504]	@ (800767c <process_control_request+0x2e8>)
 8007484:	4413      	add	r3, r2
 8007486:	791b      	ldrb	r3, [r3, #4]
 8007488:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 800748c:	2300      	movs	r3, #0
 800748e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8007490:	4b7b      	ldr	r3, [pc, #492]	@ (8007680 <process_control_request+0x2ec>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007498:	429a      	cmp	r2, r3
 800749a:	d207      	bcs.n	80074ac <process_control_request+0x118>
    driver = &_app_driver[drvid];
 800749c:	4b79      	ldr	r3, [pc, #484]	@ (8007684 <process_control_request+0x2f0>)
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80074a4:	015b      	lsls	r3, r3, #5
 80074a6:	4413      	add	r3, r2
 80074a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074aa:	e00f      	b.n	80074cc <process_control_request+0x138>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80074ac:	4b74      	ldr	r3, [pc, #464]	@ (8007680 <process_control_request+0x2ec>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80074b6:	429a      	cmp	r2, r3
 80074b8:	db08      	blt.n	80074cc <process_control_request+0x138>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80074ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80074be:	4a70      	ldr	r2, [pc, #448]	@ (8007680 <process_control_request+0x2ec>)
 80074c0:	7812      	ldrb	r2, [r2, #0]
 80074c2:	1a9b      	subs	r3, r3, r2
 80074c4:	015b      	lsls	r3, r3, #5
 80074c6:	4a70      	ldr	r2, [pc, #448]	@ (8007688 <process_control_request+0x2f4>)
 80074c8:	4413      	add	r3, r2
 80074ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 80074cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80074ce:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 80074d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <process_control_request+0x146>
 80074d6:	2300      	movs	r3, #0
 80074d8:	e282      	b.n	80079e0 <process_control_request+0x64c>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff ff37 	bl	8007354 <invoke_class_control>
 80074e6:	4603      	mov	r3, r0
 80074e8:	e27a      	b.n	80079e0 <process_control_request+0x64c>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00a      	beq.n	800750e <process_control_request+0x17a>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 80074f8:	4b5b      	ldr	r3, [pc, #364]	@ (8007668 <process_control_request+0x2d4>)
 80074fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80074fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d000      	beq.n	800750a <process_control_request+0x176>
 8007508:	be00      	bkpt	0x0000
        return false;
 800750a:	2300      	movs	r3, #0
 800750c:	e268      	b.n	80079e0 <process_control_request+0x64c>
      }

      switch ( p_request->bRequest ) {
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	785b      	ldrb	r3, [r3, #1]
 8007512:	2b09      	cmp	r3, #9
 8007514:	f200 8100 	bhi.w	8007718 <process_control_request+0x384>
 8007518:	a201      	add	r2, pc, #4	@ (adr r2, 8007520 <process_control_request+0x18c>)
 800751a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751e:	bf00      	nop
 8007520:	080076e7 	.word	0x080076e7
 8007524:	080076bd 	.word	0x080076bd
 8007528:	08007719 	.word	0x08007719
 800752c:	08007691 	.word	0x08007691
 8007530:	08007719 	.word	0x08007719
 8007534:	08007549 	.word	0x08007549
 8007538:	08007647 	.word	0x08007647
 800753c:	08007719 	.word	0x08007719
 8007540:	0800756d 	.word	0x0800756d
 8007544:	08007585 	.word	0x08007585
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8007548:	6838      	ldr	r0, [r7, #0]
 800754a:	f001 fa91 	bl	8008a70 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	885b      	ldrh	r3, [r3, #2]
 8007552:	b29b      	uxth	r3, r3
 8007554:	b2da      	uxtb	r2, r3
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	4611      	mov	r1, r2
 800755a:	4618      	mov	r0, r3
 800755c:	f001 fc96 	bl	8008e8c <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8007560:	4a46      	ldr	r2, [pc, #280]	@ (800767c <process_control_request+0x2e8>)
 8007562:	7813      	ldrb	r3, [r2, #0]
 8007564:	f043 0302 	orr.w	r3, r3, #2
 8007568:	7013      	strb	r3, [r2, #0]
        break;
 800756a:	e0e1      	b.n	8007730 <process_control_request+0x39c>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 800756c:	4b43      	ldr	r3, [pc, #268]	@ (800767c <process_control_request+0x2e8>)
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8007574:	f107 0213 	add.w	r2, r7, #19
 8007578:	79f8      	ldrb	r0, [r7, #7]
 800757a:	2301      	movs	r3, #1
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	f001 f9db 	bl	8008938 <tud_control_xfer>
        }
        break;
 8007582:	e0d5      	b.n	8007730 <process_control_request+0x39c>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	885b      	ldrh	r3, [r3, #2]
 8007588:	b29b      	uxth	r3, r3
 800758a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 800758e:	4b3b      	ldr	r3, [pc, #236]	@ (800767c <process_control_request+0x2e8>)
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007598:	429a      	cmp	r2, r3
 800759a:	d04e      	beq.n	800763a <process_control_request+0x2a6>
            if ( _usbd_dev.cfg_num ) {
 800759c:	4b37      	ldr	r3, [pc, #220]	@ (800767c <process_control_request+0x2e8>)
 800759e:	785b      	ldrb	r3, [r3, #1]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01b      	beq.n	80075de <process_control_request+0x24a>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);
 80075a6:	4b35      	ldr	r3, [pc, #212]	@ (800767c <process_control_request+0x2e8>)
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	4619      	mov	r1, r3
 80075ae:	4837      	ldr	r0, [pc, #220]	@ (800768c <process_control_request+0x2f8>)
 80075b0:	f004 f840 	bl	800b634 <iprintf>

              // disable SOF
              dcd_sof_enable(rhport, false);
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 fc3f 	bl	8008e3c <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 80075be:	79fb      	ldrb	r3, [r7, #7]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f002 fe61 	bl	800a288 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80075c6:	4b2d      	ldr	r3, [pc, #180]	@ (800767c <process_control_request+0x2e8>)
 80075c8:	789b      	ldrb	r3, [r3, #2]
 80075ca:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fc1f 	bl	8006e14 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80075d6:	4a29      	ldr	r2, [pc, #164]	@ (800767c <process_control_request+0x2e8>)
 80075d8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80075dc:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 80075de:	4a27      	ldr	r2, [pc, #156]	@ (800767c <process_control_request+0x2e8>)
 80075e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80075e4:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 80075e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d023      	beq.n	8007636 <process_control_request+0x2a2>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 80075ee:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	4611      	mov	r1, r2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 f9fa 	bl	80079f0 <process_set_config>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f083 0301 	eor.w	r3, r3, #1
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d013      	beq.n	8007630 <process_control_request+0x29c>
                TU_MESS_FAILED();
 8007608:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800760c:	4914      	ldr	r1, [pc, #80]	@ (8007660 <process_control_request+0x2cc>)
 800760e:	4815      	ldr	r0, [pc, #84]	@ (8007664 <process_control_request+0x2d0>)
 8007610:	f004 f810 	bl	800b634 <iprintf>
                TU_BREAKPOINT();
 8007614:	4b14      	ldr	r3, [pc, #80]	@ (8007668 <process_control_request+0x2d4>)
 8007616:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007618:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d000      	beq.n	8007626 <process_control_request+0x292>
 8007624:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 8007626:	4b15      	ldr	r3, [pc, #84]	@ (800767c <process_control_request+0x2e8>)
 8007628:	2200      	movs	r2, #0
 800762a:	705a      	strb	r2, [r3, #1]
                return false;
 800762c:	2300      	movs	r3, #0
 800762e:	e1d7      	b.n	80079e0 <process_control_request+0x64c>
              }
              tud_mount_cb();
 8007630:	f7f8 ff96 	bl	8000560 <tud_mount_cb>
 8007634:	e001      	b.n	800763a <process_control_request+0x2a6>
            } else {
              tud_umount_cb();
 8007636:	f7f8 ff9f 	bl	8000578 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 800763a:	79fb      	ldrb	r3, [r7, #7]
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f001 f908 	bl	8008854 <tud_control_status>
        }
        break;
 8007644:	e074      	b.n	8007730 <process_control_request+0x39c>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8007646:	79fb      	ldrb	r3, [r7, #7]
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fb2e 	bl	8007cac <process_get_descriptor>
 8007650:	4603      	mov	r3, r0
 8007652:	f083 0301 	eor.w	r3, r3, #1
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d068      	beq.n	800772e <process_control_request+0x39a>
 800765c:	2300      	movs	r3, #0
 800765e:	e1bf      	b.n	80079e0 <process_control_request+0x64c>
 8007660:	0800d0c0 	.word	0x0800d0c0
 8007664:	0800c9ac 	.word	0x0800c9ac
 8007668:	e000edf0 	.word	0xe000edf0
 800766c:	08006a7f 	.word	0x08006a7f
 8007670:	0800d1b0 	.word	0x0800d1b0
 8007674:	0800cb8c 	.word	0x0800cb8c
 8007678:	0800c928 	.word	0x0800c928
 800767c:	200005f4 	.word	0x200005f4
 8007680:	20000630 	.word	0x20000630
 8007684:	2000062c 	.word	0x2000062c
 8007688:	0800d028 	.word	0x0800d028
 800768c:	0800cb94 	.word	0x0800cb94
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	885b      	ldrh	r3, [r3, #2]
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b01      	cmp	r3, #1
 8007698:	d10e      	bne.n	80076b8 <process_control_request+0x324>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
 800769a:	48a2      	ldr	r0, [pc, #648]	@ (8007924 <process_control_request+0x590>)
 800769c:	f004 f83a 	bl	800b714 <puts>
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 80076a0:	4aa1      	ldr	r2, [pc, #644]	@ (8007928 <process_control_request+0x594>)
 80076a2:	7813      	ldrb	r3, [r2, #0]
 80076a4:	f043 0308 	orr.w	r3, r3, #8
 80076a8:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f001 f8d0 	bl	8008854 <tud_control_status>
            break;
 80076b4:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 80076b6:	e03b      	b.n	8007730 <process_control_request+0x39c>
            default: return false;
 80076b8:	2300      	movs	r3, #0
 80076ba:	e191      	b.n	80079e0 <process_control_request+0x64c>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	885b      	ldrh	r3, [r3, #2]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d001      	beq.n	80076ca <process_control_request+0x336>
 80076c6:	2300      	movs	r3, #0
 80076c8:	e18a      	b.n	80079e0 <process_control_request+0x64c>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");
 80076ca:	4898      	ldr	r0, [pc, #608]	@ (800792c <process_control_request+0x598>)
 80076cc:	f004 f822 	bl	800b714 <puts>

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 80076d0:	4a95      	ldr	r2, [pc, #596]	@ (8007928 <process_control_request+0x594>)
 80076d2:	7813      	ldrb	r3, [r2, #0]
 80076d4:	f36f 03c3 	bfc	r3, #3, #1
 80076d8:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 f8b8 	bl	8008854 <tud_control_status>
        break;
 80076e4:	e024      	b.n	8007730 <process_control_request+0x39c>

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80076e6:	4b90      	ldr	r3, [pc, #576]	@ (8007928 <process_control_request+0x594>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	095b      	lsrs	r3, r3, #5
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	4b8c      	ldr	r3, [pc, #560]	@ (8007928 <process_control_request+0x594>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	089b      	lsrs	r3, r3, #2
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	b29b      	uxth	r3, r3
 8007702:	4313      	orrs	r3, r2
 8007704:	b29b      	uxth	r3, r3
 8007706:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 8007708:	f107 0210 	add.w	r2, r7, #16
 800770c:	79f8      	ldrb	r0, [r7, #7]
 800770e:	2302      	movs	r3, #2
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	f001 f911 	bl	8008938 <tud_control_xfer>
          break;
 8007716:	e00b      	b.n	8007730 <process_control_request+0x39c>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8007718:	4b85      	ldr	r3, [pc, #532]	@ (8007930 <process_control_request+0x59c>)
 800771a:	647b      	str	r3, [r7, #68]	@ 0x44
 800771c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d000      	beq.n	800772a <process_control_request+0x396>
 8007728:	be00      	bkpt	0x0000
 800772a:	2300      	movs	r3, #0
 800772c:	e158      	b.n	80079e0 <process_control_request+0x64c>
        break;
 800772e:	bf00      	nop
      }
    break;
 8007730:	e155      	b.n	80079de <process_control_request+0x64a>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	889b      	ldrh	r3, [r3, #4]
 8007736:	b29b      	uxth	r3, r3
 8007738:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800773a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800773c:	b2db      	uxtb	r3, r3
 800773e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007742:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007746:	2b0f      	cmp	r3, #15
 8007748:	d901      	bls.n	800774e <process_control_request+0x3ba>
 800774a:	2300      	movs	r3, #0
 800774c:	e148      	b.n	80079e0 <process_control_request+0x64c>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800774e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007752:	4a75      	ldr	r2, [pc, #468]	@ (8007928 <process_control_request+0x594>)
 8007754:	4413      	add	r3, r2
 8007756:	791b      	ldrb	r3, [r3, #4]
 8007758:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 800775c:	2300      	movs	r3, #0
 800775e:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8007760:	4b74      	ldr	r3, [pc, #464]	@ (8007934 <process_control_request+0x5a0>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8007768:	429a      	cmp	r2, r3
 800776a:	d207      	bcs.n	800777c <process_control_request+0x3e8>
    driver = &_app_driver[drvid];
 800776c:	4b72      	ldr	r3, [pc, #456]	@ (8007938 <process_control_request+0x5a4>)
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007774:	015b      	lsls	r3, r3, #5
 8007776:	4413      	add	r3, r2
 8007778:	623b      	str	r3, [r7, #32]
 800777a:	e00f      	b.n	800779c <process_control_request+0x408>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800777c:	4b6d      	ldr	r3, [pc, #436]	@ (8007934 <process_control_request+0x5a0>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007786:	429a      	cmp	r2, r3
 8007788:	db08      	blt.n	800779c <process_control_request+0x408>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800778a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800778e:	4a69      	ldr	r2, [pc, #420]	@ (8007934 <process_control_request+0x5a0>)
 8007790:	7812      	ldrb	r2, [r2, #0]
 8007792:	1a9b      	subs	r3, r3, r2
 8007794:	015b      	lsls	r3, r3, #5
 8007796:	4a69      	ldr	r2, [pc, #420]	@ (800793c <process_control_request+0x5a8>)
 8007798:	4413      	add	r3, r2
 800779a:	623b      	str	r3, [r7, #32]
  return driver;
 800779c:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800779e:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 80077a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <process_control_request+0x416>
 80077a6:	2300      	movs	r3, #0
 80077a8:	e11a      	b.n	80079e0 <process_control_request+0x64c>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 80077aa:	79fb      	ldrb	r3, [r7, #7]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff fdcf 	bl	8007354 <invoke_class_control>
 80077b6:	4603      	mov	r3, r0
 80077b8:	f083 0301 	eor.w	r3, r3, #1
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 810c 	beq.w	80079dc <process_control_request+0x648>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <process_control_request+0x442>
 80077d2:	2300      	movs	r3, #0
 80077d4:	e104      	b.n	80079e0 <process_control_request+0x64c>

        switch(p_request->bRequest) {
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	785b      	ldrb	r3, [r3, #1]
 80077da:	3b0a      	subs	r3, #10
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d816      	bhi.n	800780e <process_control_request+0x47a>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 80077e0:	2000      	movs	r0, #0
 80077e2:	f001 f937 	bl	8008a54 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b0a      	cmp	r3, #10
 80077ec:	d109      	bne.n	8007802 <process_control_request+0x46e>
              uint8_t alternate = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80077f2:	f107 020f 	add.w	r2, r7, #15
 80077f6:	79f8      	ldrb	r0, [r7, #7]
 80077f8:	2301      	movs	r3, #1
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	f001 f89c 	bl	8008938 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 8007800:	e007      	b.n	8007812 <process_control_request+0x47e>
              tud_control_status(rhport, p_request);
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	4618      	mov	r0, r3
 8007808:	f001 f824 	bl	8008854 <tud_control_status>
          break;
 800780c:	e001      	b.n	8007812 <process_control_request+0x47e>

          default: return false;
 800780e:	2300      	movs	r3, #0
 8007810:	e0e6      	b.n	80079e0 <process_control_request+0x64c>
        }
      }
      break;
 8007812:	e0e3      	b.n	80079dc <process_control_request+0x648>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	889b      	ldrh	r3, [r3, #4]
 8007818:	b29b      	uxth	r3, r3
 800781a:	83bb      	strh	r3, [r7, #28]
 800781c:	8bbb      	ldrh	r3, [r7, #28]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007824:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007828:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800782a:	7fbb      	ldrb	r3, [r7, #30]
 800782c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007830:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8007832:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8007836:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800783a:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800783c:	7ffb      	ldrb	r3, [r7, #31]
 800783e:	09db      	lsrs	r3, r3, #7
 8007840:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8007842:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8007846:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800784a:	2b07      	cmp	r3, #7
 800784c:	d910      	bls.n	8007870 <process_control_request+0x4dc>
 800784e:	f240 3295 	movw	r2, #917	@ 0x395
 8007852:	493b      	ldr	r1, [pc, #236]	@ (8007940 <process_control_request+0x5ac>)
 8007854:	483b      	ldr	r0, [pc, #236]	@ (8007944 <process_control_request+0x5b0>)
 8007856:	f003 feed 	bl	800b634 <iprintf>
 800785a:	4b35      	ldr	r3, [pc, #212]	@ (8007930 <process_control_request+0x59c>)
 800785c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800785e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d000      	beq.n	800786c <process_control_request+0x4d8>
 800786a:	be00      	bkpt	0x0000
 800786c:	2300      	movs	r3, #0
 800786e:	e0b7      	b.n	80079e0 <process_control_request+0x64c>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8007870:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8007874:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8007878:	492b      	ldr	r1, [pc, #172]	@ (8007928 <process_control_request+0x594>)
 800787a:	0052      	lsls	r2, r2, #1
 800787c:	440a      	add	r2, r1
 800787e:	4413      	add	r3, r2
 8007880:	3314      	adds	r3, #20
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 800788a:	4b2a      	ldr	r3, [pc, #168]	@ (8007934 <process_control_request+0x5a0>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	7efa      	ldrb	r2, [r7, #27]
 8007890:	429a      	cmp	r2, r3
 8007892:	d206      	bcs.n	80078a2 <process_control_request+0x50e>
    driver = &_app_driver[drvid];
 8007894:	4b28      	ldr	r3, [pc, #160]	@ (8007938 <process_control_request+0x5a4>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	7efb      	ldrb	r3, [r7, #27]
 800789a:	015b      	lsls	r3, r3, #5
 800789c:	4413      	add	r3, r2
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	e00d      	b.n	80078be <process_control_request+0x52a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80078a2:	4b24      	ldr	r3, [pc, #144]	@ (8007934 <process_control_request+0x5a0>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	7efb      	ldrb	r3, [r7, #27]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	db07      	blt.n	80078be <process_control_request+0x52a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80078ae:	7efb      	ldrb	r3, [r7, #27]
 80078b0:	4a20      	ldr	r2, [pc, #128]	@ (8007934 <process_control_request+0x5a0>)
 80078b2:	7812      	ldrb	r2, [r2, #0]
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	015b      	lsls	r3, r3, #5
 80078b8:	4a20      	ldr	r2, [pc, #128]	@ (800793c <process_control_request+0x5a8>)
 80078ba:	4413      	add	r3, r2
 80078bc:	617b      	str	r3, [r7, #20]
  return driver;
 80078be:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80078c0:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00c      	beq.n	80078ea <process_control_request+0x556>
        // Forward class request to its driver
        TU_VERIFY(driver);
 80078d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <process_control_request+0x546>
 80078d6:	2300      	movs	r3, #0
 80078d8:	e082      	b.n	80079e0 <process_control_request+0x64c>
        return invoke_class_control(rhport, driver, p_request);
 80078da:	79fb      	ldrb	r3, [r7, #7]
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff fd37 	bl	8007354 <invoke_class_control>
 80078e6:	4603      	mov	r3, r0
 80078e8:	e07a      	b.n	80079e0 <process_control_request+0x64c>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	785b      	ldrb	r3, [r3, #1]
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d02a      	beq.n	8007948 <process_control_request+0x5b4>
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	dc5a      	bgt.n	80079ac <process_control_request+0x618>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <process_control_request+0x56c>
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d024      	beq.n	8007948 <process_control_request+0x5b4>
 80078fe:	e055      	b.n	80079ac <process_control_request+0x618>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8007900:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8007904:	79fb      	ldrb	r3, [r7, #7]
 8007906:	4611      	mov	r1, r2
 8007908:	4618      	mov	r0, r3
 800790a:	f000 ff5b 	bl	80087c4 <usbd_edpt_stalled>
 800790e:	4603      	mov	r3, r0
 8007910:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8007912:	f107 020c 	add.w	r2, r7, #12
 8007916:	79f8      	ldrb	r0, [r7, #7]
 8007918:	2302      	movs	r3, #2
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	f001 f80c 	bl	8008938 <tud_control_xfer>
          }
          break;
 8007920:	e050      	b.n	80079c4 <process_control_request+0x630>
 8007922:	bf00      	nop
 8007924:	0800cbcc 	.word	0x0800cbcc
 8007928:	200005f4 	.word	0x200005f4
 800792c:	0800cbe8 	.word	0x0800cbe8
 8007930:	e000edf0 	.word	0xe000edf0
 8007934:	20000630 	.word	0x20000630
 8007938:	2000062c 	.word	0x2000062c
 800793c:	0800d028 	.word	0x0800d028
 8007940:	0800d0c0 	.word	0x0800d0c0
 8007944:	0800c9ac 	.word	0x0800c9ac

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	885b      	ldrh	r3, [r3, #2]
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d112      	bne.n	8007978 <process_control_request+0x5e4>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	785b      	ldrb	r3, [r3, #1]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d107      	bne.n	800796a <process_control_request+0x5d6>
                usbd_edpt_clear_stall(rhport, ep_addr);
 800795a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fee8 	bl	8008738 <usbd_edpt_clear_stall>
 8007968:	e006      	b.n	8007978 <process_control_request+0x5e4>
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 800796a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	4611      	mov	r1, r2
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fe9a 	bl	80086ac <usbd_edpt_stall>
              }
            }

            if (driver) {
 8007978:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800797a:	2b00      	cmp	r3, #0
 800797c:	d021      	beq.n	80079c2 <process_control_request+0x62e>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fce5 	bl	8007354 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 800798a:	2000      	movs	r0, #0
 800798c:	f001 f862 	bl	8008a54 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8007990:	4b15      	ldr	r3, [pc, #84]	@ (80079e8 <process_control_request+0x654>)
 8007992:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007996:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b00      	cmp	r3, #0
 800799e:	d110      	bne.n	80079c2 <process_control_request+0x62e>
 80079a0:	79fb      	ldrb	r3, [r7, #7]
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 ff55 	bl	8008854 <tud_control_status>
            }
          }
          break;
 80079aa:	e00a      	b.n	80079c2 <process_control_request+0x62e>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 80079ac:	4b0f      	ldr	r3, [pc, #60]	@ (80079ec <process_control_request+0x658>)
 80079ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d000      	beq.n	80079be <process_control_request+0x62a>
 80079bc:	be00      	bkpt	0x0000
            return false;
 80079be:	2300      	movs	r3, #0
 80079c0:	e00e      	b.n	80079e0 <process_control_request+0x64c>
          break;
 80079c2:	bf00      	nop
        }
      }
    }
    break;
 80079c4:	e00b      	b.n	80079de <process_control_request+0x64a>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 80079c6:	4b09      	ldr	r3, [pc, #36]	@ (80079ec <process_control_request+0x658>)
 80079c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d000      	beq.n	80079d8 <process_control_request+0x644>
 80079d6:	be00      	bkpt	0x0000
      return false;
 80079d8:	2300      	movs	r3, #0
 80079da:	e001      	b.n	80079e0 <process_control_request+0x64c>
      break;
 80079dc:	bf00      	nop
  }

  return true;
 80079de:	2301      	movs	r3, #1
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3768      	adds	r7, #104	@ 0x68
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	200005f4 	.word	0x200005f4
 80079ec:	e000edf0 	.word	0xe000edf0

080079f0 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b096      	sub	sp, #88	@ 0x58
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	460a      	mov	r2, r1
 80079fa:	71fb      	strb	r3, [r7, #7]
 80079fc:	4613      	mov	r3, r2
 80079fe:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8007a00:	79bb      	ldrb	r3, [r7, #6]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7f9 f806 	bl	8000a18 <tud_descriptor_configuration_cb>
 8007a0c:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8007a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <process_set_config+0x2c>
 8007a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d010      	beq.n	8007a3e <process_set_config+0x4e>
 8007a1c:	f240 32d6 	movw	r2, #982	@ 0x3d6
 8007a20:	4998      	ldr	r1, [pc, #608]	@ (8007c84 <process_set_config+0x294>)
 8007a22:	4899      	ldr	r0, [pc, #612]	@ (8007c88 <process_set_config+0x298>)
 8007a24:	f003 fe06 	bl	800b634 <iprintf>
 8007a28:	4b98      	ldr	r3, [pc, #608]	@ (8007c8c <process_set_config+0x29c>)
 8007a2a:	623b      	str	r3, [r7, #32]
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d000      	beq.n	8007a3a <process_set_config+0x4a>
 8007a38:	be00      	bkpt	0x0000
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	e11e      	b.n	8007c7c <process_set_config+0x28c>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8007a3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a40:	79db      	ldrb	r3, [r3, #7]
 8007a42:	115b      	asrs	r3, r3, #5
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	b2d9      	uxtb	r1, r3
 8007a4a:	4a91      	ldr	r2, [pc, #580]	@ (8007c90 <process_set_config+0x2a0>)
 8007a4c:	7813      	ldrb	r3, [r2, #0]
 8007a4e:	f361 1304 	bfi	r3, r1, #4, #1
 8007a52:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8007a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a56:	79db      	ldrb	r3, [r3, #7]
 8007a58:	119b      	asrs	r3, r3, #6
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	b2d9      	uxtb	r1, r3
 8007a60:	4a8b      	ldr	r2, [pc, #556]	@ (8007c90 <process_set_config+0x2a0>)
 8007a62:	7813      	ldrb	r3, [r2, #0]
 8007a64:	f361 1345 	bfi	r3, r1, #5, #1
 8007a68:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8007a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a6c:	3309      	adds	r3, #9
 8007a6e:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8007a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a72:	885b      	ldrh	r3, [r3, #2]
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	461a      	mov	r2, r3
 8007a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a7a:	4413      	add	r3, r2
 8007a7c:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 8007a7e:	e0f7      	b.n	8007c70 <process_set_config+0x280>
  {
    uint8_t assoc_itf_count = 1;
 8007a80:	2301      	movs	r3, #1
 8007a82:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8007a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a88:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8007a90:	2b0b      	cmp	r3, #11
 8007a92:	d10f      	bne.n	8007ab4 <process_set_config+0xc4>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8007a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a96:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8007a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a9a:	78db      	ldrb	r3, [r3, #3]
 8007a9c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8007aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aa2:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	461a      	mov	r2, r3
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8007ab2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ab6:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	3301      	adds	r3, #1
 8007abc:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d010      	beq.n	8007ae4 <process_set_config+0xf4>
 8007ac2:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8007ac6:	496f      	ldr	r1, [pc, #444]	@ (8007c84 <process_set_config+0x294>)
 8007ac8:	486f      	ldr	r0, [pc, #444]	@ (8007c88 <process_set_config+0x298>)
 8007aca:	f003 fdb3 	bl	800b634 <iprintf>
 8007ace:	4b6f      	ldr	r3, [pc, #444]	@ (8007c8c <process_set_config+0x29c>)
 8007ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d000      	beq.n	8007ae0 <process_set_config+0xf0>
 8007ade:	be00      	bkpt	0x0000
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e0cb      	b.n	8007c7c <process_set_config+0x28c>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8007ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae6:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8007ae8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8007af0:	2300      	movs	r3, #0
 8007af2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8007af6:	e09b      	b.n	8007c30 <process_set_config+0x240>
 8007af8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007afc:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8007b02:	4b64      	ldr	r3, [pc, #400]	@ (8007c94 <process_set_config+0x2a4>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	7bfa      	ldrb	r2, [r7, #15]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d206      	bcs.n	8007b1a <process_set_config+0x12a>
    driver = &_app_driver[drvid];
 8007b0c:	4b62      	ldr	r3, [pc, #392]	@ (8007c98 <process_set_config+0x2a8>)
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
 8007b12:	015b      	lsls	r3, r3, #5
 8007b14:	4413      	add	r3, r2
 8007b16:	60bb      	str	r3, [r7, #8]
 8007b18:	e00d      	b.n	8007b36 <process_set_config+0x146>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007b1a:	4b5e      	ldr	r3, [pc, #376]	@ (8007c94 <process_set_config+0x2a4>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	db07      	blt.n	8007b36 <process_set_config+0x146>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	4a5a      	ldr	r2, [pc, #360]	@ (8007c94 <process_set_config+0x2a4>)
 8007b2a:	7812      	ldrb	r2, [r2, #0]
 8007b2c:	1a9b      	subs	r3, r3, r2
 8007b2e:	015b      	lsls	r3, r3, #5
 8007b30:	4a5a      	ldr	r2, [pc, #360]	@ (8007c9c <process_set_config+0x2ac>)
 8007b32:	4413      	add	r3, r2
 8007b34:	60bb      	str	r3, [r7, #8]
  return driver;
 8007b36:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8007b38:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d110      	bne.n	8007b62 <process_set_config+0x172>
 8007b40:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 8007b44:	494f      	ldr	r1, [pc, #316]	@ (8007c84 <process_set_config+0x294>)
 8007b46:	4850      	ldr	r0, [pc, #320]	@ (8007c88 <process_set_config+0x298>)
 8007b48:	f003 fd74 	bl	800b634 <iprintf>
 8007b4c:	4b4f      	ldr	r3, [pc, #316]	@ (8007c8c <process_set_config+0x29c>)
 8007b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d000      	beq.n	8007b5e <process_set_config+0x16e>
 8007b5c:	be00      	bkpt	0x0000
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e08c      	b.n	8007c7c <process_set_config+0x28c>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8007b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007b68:	79f8      	ldrb	r0, [r7, #7]
 8007b6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b6c:	4798      	blx	r3
 8007b6e:	4603      	mov	r3, r0
 8007b70:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8007b72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d956      	bls.n	8007c26 <process_set_config+0x236>
 8007b78:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007b7a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d852      	bhi.n	8007c26 <process_set_config+0x236>
      {
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4619      	mov	r1, r3
 8007b86:	4846      	ldr	r0, [pc, #280]	@ (8007ca0 <process_set_config+0x2b0>)
 8007b88:	f003 fd54 	bl	800b634 <iprintf>

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8007b8c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d107      	bne.n	8007ba4 <process_set_config+0x1b4>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8007b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	4a42      	ldr	r2, [pc, #264]	@ (8007ca4 <process_set_config+0x2b4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d102      	bne.n	8007ba4 <process_set_config+0x1b4>
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8007baa:	e02a      	b.n	8007c02 <process_set_config+0x212>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8007bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bae:	789a      	ldrb	r2, [r3, #2]
 8007bb0:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8007bba:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007bbe:	4a34      	ldr	r2, [pc, #208]	@ (8007c90 <process_set_config+0x2a0>)
 8007bc0:	4413      	add	r3, r2
 8007bc2:	791b      	ldrb	r3, [r3, #4]
 8007bc4:	2bff      	cmp	r3, #255	@ 0xff
 8007bc6:	d010      	beq.n	8007bea <process_set_config+0x1fa>
 8007bc8:	f240 4219 	movw	r2, #1049	@ 0x419
 8007bcc:	492d      	ldr	r1, [pc, #180]	@ (8007c84 <process_set_config+0x294>)
 8007bce:	482e      	ldr	r0, [pc, #184]	@ (8007c88 <process_set_config+0x298>)
 8007bd0:	f003 fd30 	bl	800b634 <iprintf>
 8007bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8007c8c <process_set_config+0x29c>)
 8007bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d000      	beq.n	8007be6 <process_set_config+0x1f6>
 8007be4:	be00      	bkpt	0x0000
 8007be6:	2300      	movs	r3, #0
 8007be8:	e048      	b.n	8007c7c <process_set_config+0x28c>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8007bea:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007bee:	4a28      	ldr	r2, [pc, #160]	@ (8007c90 <process_set_config+0x2a0>)
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8007bf6:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8007bf8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8007c02:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8007c06:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d3ce      	bcc.n	8007bac <process_set_config+0x1bc>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8007c0e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007c12:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007c14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c16:	4824      	ldr	r0, [pc, #144]	@ (8007ca8 <process_set_config+0x2b8>)
 8007c18:	f003 fafc 	bl	800b214 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8007c1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c20:	4413      	add	r3, r2
 8007c22:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8007c24:	e00c      	b.n	8007c40 <process_set_config+0x250>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8007c26:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8007c30:	4b18      	ldr	r3, [pc, #96]	@ (8007c94 <process_set_config+0x2a4>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	f6bf af5c 	bge.w	8007af8 <process_set_config+0x108>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8007c40:	4b14      	ldr	r3, [pc, #80]	@ (8007c94 <process_set_config+0x2a4>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	da10      	bge.n	8007c70 <process_set_config+0x280>
 8007c4e:	f44f 6285 	mov.w	r2, #1064	@ 0x428
 8007c52:	490c      	ldr	r1, [pc, #48]	@ (8007c84 <process_set_config+0x294>)
 8007c54:	480c      	ldr	r0, [pc, #48]	@ (8007c88 <process_set_config+0x298>)
 8007c56:	f003 fced 	bl	800b634 <iprintf>
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c8c <process_set_config+0x29c>)
 8007c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d000      	beq.n	8007c6c <process_set_config+0x27c>
 8007c6a:	be00      	bkpt	0x0000
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	e005      	b.n	8007c7c <process_set_config+0x28c>
  while( p_desc < desc_end )
 8007c70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c74:	429a      	cmp	r2, r3
 8007c76:	f4ff af03 	bcc.w	8007a80 <process_set_config+0x90>
  }

  return true;
 8007c7a:	2301      	movs	r3, #1
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3758      	adds	r7, #88	@ 0x58
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	0800d0d8 	.word	0x0800d0d8
 8007c88:	0800c9ac 	.word	0x0800c9ac
 8007c8c:	e000edf0 	.word	0xe000edf0
 8007c90:	200005f4 	.word	0x200005f4
 8007c94:	20000630 	.word	0x20000630
 8007c98:	2000062c 	.word	0x2000062c
 8007c9c:	0800d028 	.word	0x0800d028
 8007ca0:	0800cc04 	.word	0x0800cc04
 8007ca4:	08004e11 	.word	0x08004e11
 8007ca8:	20000608 	.word	0x20000608

08007cac <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b094      	sub	sp, #80	@ 0x50
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	6039      	str	r1, [r7, #0]
 8007cb6:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	885b      	ldrh	r3, [r3, #2]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8007cc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cc2:	0a1b      	lsrs	r3, r3, #8
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	885b      	ldrh	r3, [r3, #2]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007cd4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8007cdc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	2b0e      	cmp	r3, #14
 8007ce4:	f200 80d8 	bhi.w	8007e98 <process_get_descriptor+0x1ec>
 8007ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf0 <process_get_descriptor+0x44>)
 8007cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cee:	bf00      	nop
 8007cf0:	08007d2d 	.word	0x08007d2d
 8007cf4:	08007da9 	.word	0x08007da9
 8007cf8:	08007e2d 	.word	0x08007e2d
 8007cfc:	08007e99 	.word	0x08007e99
 8007d00:	08007e99 	.word	0x08007e99
 8007d04:	08007e6d 	.word	0x08007e6d
 8007d08:	08007da9 	.word	0x08007da9
 8007d0c:	08007e99 	.word	0x08007e99
 8007d10:	08007e99 	.word	0x08007e99
 8007d14:	08007e99 	.word	0x08007e99
 8007d18:	08007e99 	.word	0x08007e99
 8007d1c:	08007e99 	.word	0x08007e99
 8007d20:	08007e99 	.word	0x08007e99
 8007d24:	08007e99 	.word	0x08007e99
 8007d28:	08007d71 	.word	0x08007d71
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");
 8007d2c:	485d      	ldr	r0, [pc, #372]	@ (8007ea4 <process_get_descriptor+0x1f8>)
 8007d2e:	f003 fcf1 	bl	800b714 <puts>

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8007d32:	f7f8 fe4d 	bl	80009d0 <tud_descriptor_device_cb>
 8007d36:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8007d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d110      	bne.n	8007d60 <process_get_descriptor+0xb4>
 8007d3e:	f240 423a 	movw	r2, #1082	@ 0x43a
 8007d42:	4959      	ldr	r1, [pc, #356]	@ (8007ea8 <process_get_descriptor+0x1fc>)
 8007d44:	4859      	ldr	r0, [pc, #356]	@ (8007eac <process_get_descriptor+0x200>)
 8007d46:	f003 fc75 	bl	800b634 <iprintf>
 8007d4a:	4b59      	ldr	r3, [pc, #356]	@ (8007eb0 <process_get_descriptor+0x204>)
 8007d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d000      	beq.n	8007d5c <process_get_descriptor+0xb0>
 8007d5a:	be00      	bkpt	0x0000
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e09c      	b.n	8007e9a <process_get_descriptor+0x1ee>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8007d60:	79f8      	ldrb	r0, [r7, #7]
 8007d62:	2312      	movs	r3, #18
 8007d64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	f000 fde6 	bl	8008938 <tud_control_xfer>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	e094      	b.n	8007e9a <process_get_descriptor+0x1ee>
      }
    }
    // break; // unreachable

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");
 8007d70:	4850      	ldr	r0, [pc, #320]	@ (8007eb4 <process_get_descriptor+0x208>)
 8007d72:	f003 fccf 	bl	800b714 <puts>

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8007d76:	f7fe fe69 	bl	8006a4c <tud_descriptor_bos_cb>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8007d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <process_get_descriptor+0xdc>
 8007d84:	2300      	movs	r3, #0
 8007d86:	e088      	b.n	8007e9a <process_get_descriptor+0x1ee>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8007d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d8a:	3302      	adds	r3, #2
 8007d8c:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8007d96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007d9c:	79f8      	ldrb	r0, [r7, #7]
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	f000 fdca 	bl	8008938 <tud_control_xfer>
 8007da4:	4603      	mov	r3, r0
 8007da6:	e078      	b.n	8007e9a <process_get_descriptor+0x1ee>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8007da8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d120      	bne.n	8007df2 <process_get_descriptor+0x146>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
 8007db0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007db4:	4619      	mov	r1, r3
 8007db6:	4840      	ldr	r0, [pc, #256]	@ (8007eb8 <process_get_descriptor+0x20c>)
 8007db8:	f003 fc3c 	bl	800b634 <iprintf>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8007dbc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7f8 fe29 	bl	8000a18 <tud_descriptor_configuration_cb>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8007dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d11f      	bne.n	8007e10 <process_get_descriptor+0x164>
 8007dd0:	f240 4261 	movw	r2, #1121	@ 0x461
 8007dd4:	4934      	ldr	r1, [pc, #208]	@ (8007ea8 <process_get_descriptor+0x1fc>)
 8007dd6:	4835      	ldr	r0, [pc, #212]	@ (8007eac <process_get_descriptor+0x200>)
 8007dd8:	f003 fc2c 	bl	800b634 <iprintf>
 8007ddc:	4b34      	ldr	r3, [pc, #208]	@ (8007eb0 <process_get_descriptor+0x204>)
 8007dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d000      	beq.n	8007dee <process_get_descriptor+0x142>
 8007dec:	be00      	bkpt	0x0000
 8007dee:	2300      	movs	r3, #0
 8007df0:	e053      	b.n	8007e9a <process_get_descriptor+0x1ee>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
 8007df2:	4832      	ldr	r0, [pc, #200]	@ (8007ebc <process_get_descriptor+0x210>)
 8007df4:	f003 fc8e 	bl	800b714 <puts>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8007df8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fe fe33 	bl	8006a68 <tud_descriptor_other_speed_configuration_cb>
 8007e02:	4603      	mov	r3, r0
 8007e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8007e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <process_get_descriptor+0x164>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e044      	b.n	8007e9a <process_get_descriptor+0x1ee>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8007e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e12:	3302      	adds	r3, #2
 8007e14:	61fb      	str	r3, [r7, #28]
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8007e1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e1e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007e20:	79f8      	ldrb	r0, [r7, #7]
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	f000 fd88 	bl	8008938 <tud_control_xfer>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	e036      	b.n	8007e9a <process_get_descriptor+0x1ee>
    }
    // break; // unreachable

    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);
 8007e2c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007e30:	4619      	mov	r1, r3
 8007e32:	4823      	ldr	r0, [pc, #140]	@ (8007ec0 <process_get_descriptor+0x214>)
 8007e34:	f003 fbfe 	bl	800b634 <iprintf>

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	889b      	ldrh	r3, [r3, #4]
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007e42:	4611      	mov	r1, r2
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7f8 fdf5 	bl	8000a34 <tud_descriptor_string_cb>
 8007e4a:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <process_get_descriptor+0x1aa>
 8007e52:	2300      	movs	r3, #0
 8007e54:	e021      	b.n	8007e9a <process_get_descriptor+0x1ee>
 8007e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e58:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8007e5e:	79f8      	ldrb	r0, [r7, #7]
 8007e60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e62:	6839      	ldr	r1, [r7, #0]
 8007e64:	f000 fd68 	bl	8008938 <tud_control_xfer>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	e016      	b.n	8007e9a <process_get_descriptor+0x1ee>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
 8007e6c:	4815      	ldr	r0, [pc, #84]	@ (8007ec4 <process_get_descriptor+0x218>)
 8007e6e:	f003 fc51 	bl	800b714 <puts>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8007e72:	f7fe fdf2 	bl	8006a5a <tud_descriptor_device_qualifier_cb>
 8007e76:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8007e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <process_get_descriptor+0x1d6>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e00b      	b.n	8007e9a <process_get_descriptor+0x1ee>
 8007e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e84:	617b      	str	r3, [r7, #20]
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8007e8a:	79f8      	ldrb	r0, [r7, #7]
 8007e8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	f000 fd52 	bl	8008938 <tud_control_xfer>
 8007e94:	4603      	mov	r3, r0
 8007e96:	e000      	b.n	8007e9a <process_get_descriptor+0x1ee>
    }
    // break; // unreachable

    default: return false;
 8007e98:	2300      	movs	r3, #0
  }
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3750      	adds	r7, #80	@ 0x50
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	0800cc14 	.word	0x0800cc14
 8007ea8:	0800d0ec 	.word	0x0800d0ec
 8007eac:	0800c9ac 	.word	0x0800c9ac
 8007eb0:	e000edf0 	.word	0xe000edf0
 8007eb4:	0800cc20 	.word	0x0800cc20
 8007eb8:	0800cc28 	.word	0x0800cc28
 8007ebc:	0800cc40 	.word	0x0800cc40
 8007ec0:	0800cc5c 	.word	0x0800cc5c
 8007ec4:	0800cc6c 	.word	0x0800cc6c

08007ec8 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b0a0      	sub	sp, #128	@ 0x80
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	785b      	ldrb	r3, [r3, #1]
 8007ede:	3b02      	subs	r3, #2
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	f200 8184 	bhi.w	80081ee <dcd_event_handler+0x326>
 8007ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8007eec <dcd_event_handler+0x24>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f01 	.word	0x08007f01
 8007ef0:	08007f71 	.word	0x08007f71
 8007ef4:	08007f2d 	.word	0x08007f2d
 8007ef8:	08007f4f 	.word	0x08007f4f
 8007efc:	080081d9 	.word	0x080081d9
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8007f00:	4aad      	ldr	r2, [pc, #692]	@ (80081b8 <dcd_event_handler+0x2f0>)
 8007f02:	7813      	ldrb	r3, [r2, #0]
 8007f04:	f36f 0300 	bfc	r3, #0, #1
 8007f08:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8007f0a:	4aab      	ldr	r2, [pc, #684]	@ (80081b8 <dcd_event_handler+0x2f0>)
 8007f0c:	7813      	ldrb	r3, [r2, #0]
 8007f0e:	f36f 0341 	bfc	r3, #1, #1
 8007f12:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8007f14:	4ba8      	ldr	r3, [pc, #672]	@ (80081b8 <dcd_event_handler+0x2f0>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8007f1a:	4aa7      	ldr	r2, [pc, #668]	@ (80081b8 <dcd_event_handler+0x2f0>)
 8007f1c:	7813      	ldrb	r3, [r2, #0]
 8007f1e:	f36f 0382 	bfc	r3, #2, #1
 8007f22:	7013      	strb	r3, [r2, #0]
      send = true;
 8007f24:	2301      	movs	r3, #1
 8007f26:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8007f2a:	e169      	b.n	8008200 <dcd_event_handler+0x338>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8007f2c:	4ba2      	ldr	r3, [pc, #648]	@ (80081b8 <dcd_event_handler+0x2f0>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 815d 	beq.w	80081f6 <dcd_event_handler+0x32e>
        _usbd_dev.suspended = 1;
 8007f3c:	4a9e      	ldr	r2, [pc, #632]	@ (80081b8 <dcd_event_handler+0x2f0>)
 8007f3e:	7813      	ldrb	r3, [r2, #0]
 8007f40:	f043 0304 	orr.w	r3, r3, #4
 8007f44:	7013      	strb	r3, [r2, #0]
        send = true;
 8007f46:	2301      	movs	r3, #1
 8007f48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8007f4c:	e153      	b.n	80081f6 <dcd_event_handler+0x32e>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8007f4e:	4b9a      	ldr	r3, [pc, #616]	@ (80081b8 <dcd_event_handler+0x2f0>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 814e 	beq.w	80081fa <dcd_event_handler+0x332>
        _usbd_dev.suspended = 0;
 8007f5e:	4a96      	ldr	r2, [pc, #600]	@ (80081b8 <dcd_event_handler+0x2f0>)
 8007f60:	7813      	ldrb	r3, [r2, #0]
 8007f62:	f36f 0382 	bfc	r3, #2, #1
 8007f66:	7013      	strb	r3, [r2, #0]
        send = true;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8007f6e:	e144      	b.n	80081fa <dcd_event_handler+0x332>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007f70:	2300      	movs	r3, #0
 8007f72:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8007f76:	e039      	b.n	8007fec <dcd_event_handler+0x124>
 8007f78:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007f7c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8007f84:	4b8d      	ldr	r3, [pc, #564]	@ (80081bc <dcd_event_handler+0x2f4>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d207      	bcs.n	8007fa0 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8007f90:	4b8b      	ldr	r3, [pc, #556]	@ (80081c0 <dcd_event_handler+0x2f8>)
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007f98:	015b      	lsls	r3, r3, #5
 8007f9a:	4413      	add	r3, r2
 8007f9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f9e:	e00f      	b.n	8007fc0 <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007fa0:	4b86      	ldr	r3, [pc, #536]	@ (80081bc <dcd_event_handler+0x2f4>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007faa:	429a      	cmp	r2, r3
 8007fac:	db08      	blt.n	8007fc0 <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007fae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007fb2:	4a82      	ldr	r2, [pc, #520]	@ (80081bc <dcd_event_handler+0x2f4>)
 8007fb4:	7812      	ldrb	r2, [r2, #0]
 8007fb6:	1a9b      	subs	r3, r3, r2
 8007fb8:	015b      	lsls	r3, r3, #5
 8007fba:	4a82      	ldr	r2, [pc, #520]	@ (80081c4 <dcd_event_handler+0x2fc>)
 8007fbc:	4413      	add	r3, r2
 8007fbe:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8007fc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8007fc2:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8007fc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00b      	beq.n	8007fe2 <dcd_event_handler+0x11a>
 8007fca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d007      	beq.n	8007fe2 <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8007fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	7810      	ldrb	r0, [r2, #0]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	6852      	ldr	r2, [r2, #4]
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007fe2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8007fec:	4b73      	ldr	r3, [pc, #460]	@ (80081bc <dcd_event_handler+0x2f4>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	dabe      	bge.n	8007f78 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8007ffa:	4b6f      	ldr	r3, [pc, #444]	@ (80081b8 <dcd_event_handler+0x2f0>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d060      	beq.n	80080ca <dcd_event_handler+0x202>
        _usbd_dev.suspended = 0;
 8008008:	4a6b      	ldr	r2, [pc, #428]	@ (80081b8 <dcd_event_handler+0x2f0>)
 800800a:	7813      	ldrb	r3, [r2, #0]
 800800c:	f36f 0382 	bfc	r3, #2, #1
 8008010:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8008012:	f107 0314 	add.w	r3, r7, #20
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	605a      	str	r2, [r3, #4]
 800801c:	609a      	str	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	753b      	strb	r3, [r7, #20]
 8008024:	2305      	movs	r3, #5
 8008026:	757b      	strb	r3, [r7, #21]
 8008028:	f107 0314 	add.w	r3, r7, #20
 800802c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800802e:	78fb      	ldrb	r3, [r7, #3]
 8008030:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008034:	4b64      	ldr	r3, [pc, #400]	@ (80081c8 <dcd_event_handler+0x300>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	667b      	str	r3, [r7, #100]	@ 0x64
 800803a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800803c:	663b      	str	r3, [r7, #96]	@ 0x60
 800803e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008042:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8008046:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800804a:	f083 0301 	eor.w	r3, r3, #1
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8008054:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2000      	movs	r0, #0
 800805a:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 800805c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800805e:	3304      	adds	r3, #4
 8008060:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe fae2 	bl	800662c <tu_fifo_write>
 8008068:	4603      	mov	r3, r0
 800806a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 800806e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008072:	f083 0301 	eor.w	r3, r3, #1
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 800807c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2001      	movs	r0, #1
 8008082:	4798      	blx	r3
  }

  return success;
 8008084:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8008088:	f083 0301 	eor.w	r3, r3, #1
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00f      	beq.n	80080b2 <dcd_event_handler+0x1ea>
 8008092:	f240 1265 	movw	r2, #357	@ 0x165
 8008096:	494d      	ldr	r1, [pc, #308]	@ (80081cc <dcd_event_handler+0x304>)
 8008098:	484d      	ldr	r0, [pc, #308]	@ (80081d0 <dcd_event_handler+0x308>)
 800809a:	f003 facb 	bl	800b634 <iprintf>
 800809e:	4b4d      	ldr	r3, [pc, #308]	@ (80081d4 <dcd_event_handler+0x30c>)
 80080a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00c      	beq.n	80080c8 <dcd_event_handler+0x200>
 80080ae:	be00      	bkpt	0x0000
 80080b0:	e00a      	b.n	80080c8 <dcd_event_handler+0x200>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 80080b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080b4:	7818      	ldrb	r0, [r3, #0]
 80080b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080b8:	785b      	ldrb	r3, [r3, #1]
 80080ba:	4619      	mov	r1, r3
 80080bc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80080c0:	461a      	mov	r2, r3
 80080c2:	f7fe fcad 	bl	8006a20 <tud_event_hook_cb>
  return true;
 80080c6:	e000      	b.n	80080ca <dcd_event_handler+0x202>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80080c8:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 80080ca:	4b3b      	ldr	r3, [pc, #236]	@ (80081b8 <dcd_event_handler+0x2f0>)
 80080cc:	78db      	ldrb	r3, [r3, #3]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80080d2:	2300      	movs	r3, #0
 80080d4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80080d8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80080dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80080de:	fa22 f303 	lsr.w	r3, r2, r3
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	bf14      	ite	ne
 80080ea:	2301      	movne	r3, #1
 80080ec:	2300      	moveq	r3, #0
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 8084 	beq.w	80081fe <dcd_event_handler+0x336>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 80080f6:	f107 0308 	add.w	r3, r7, #8
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	605a      	str	r2, [r3, #4]
 8008100:	609a      	str	r2, [r3, #8]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	723b      	strb	r3, [r7, #8]
 8008108:	2303      	movs	r3, #3
 800810a:	727b      	strb	r3, [r7, #9]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	f107 0308 	add.w	r3, r7, #8
 8008116:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 800811e:	4b2a      	ldr	r3, [pc, #168]	@ (80081c8 <dcd_event_handler+0x300>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	647b      	str	r3, [r7, #68]	@ 0x44
 8008124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008126:	643b      	str	r3, [r7, #64]	@ 0x40
 8008128:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800812c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8008130:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008134:	f083 0301 	eor.w	r3, r3, #1
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <dcd_event_handler+0x27e>
    qhdl->interrupt_set(false);
 800813e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2000      	movs	r0, #0
 8008144:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8008146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008148:	3304      	adds	r3, #4
 800814a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800814c:	4618      	mov	r0, r3
 800814e:	f7fe fa6d 	bl	800662c <tu_fifo_write>
 8008152:	4603      	mov	r3, r0
 8008154:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8008158:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800815c:	f083 0301 	eor.w	r3, r3, #1
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <dcd_event_handler+0x2a6>
    qhdl->interrupt_set(true);
 8008166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2001      	movs	r0, #1
 800816c:	4798      	blx	r3
  return success;
 800816e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008172:	f083 0301 	eor.w	r3, r3, #1
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00f      	beq.n	800819c <dcd_event_handler+0x2d4>
 800817c:	f240 1265 	movw	r2, #357	@ 0x165
 8008180:	4912      	ldr	r1, [pc, #72]	@ (80081cc <dcd_event_handler+0x304>)
 8008182:	4813      	ldr	r0, [pc, #76]	@ (80081d0 <dcd_event_handler+0x308>)
 8008184:	f003 fa56 	bl	800b634 <iprintf>
 8008188:	4b12      	ldr	r3, [pc, #72]	@ (80081d4 <dcd_event_handler+0x30c>)
 800818a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800818c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00c      	beq.n	80081b2 <dcd_event_handler+0x2ea>
 8008198:	be00      	bkpt	0x0000
 800819a:	e00a      	b.n	80081b2 <dcd_event_handler+0x2ea>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800819c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800819e:	7818      	ldrb	r0, [r3, #0]
 80081a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081a2:	785b      	ldrb	r3, [r3, #1]
 80081a4:	4619      	mov	r1, r3
 80081a6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80081aa:	461a      	mov	r2, r3
 80081ac:	f7fe fc38 	bl	8006a20 <tud_event_hook_cb>
  return true;
 80081b0:	e000      	b.n	80081b4 <dcd_event_handler+0x2ec>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80081b2:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 80081b4:	e023      	b.n	80081fe <dcd_event_handler+0x336>
 80081b6:	bf00      	nop
 80081b8:	200005f4 	.word	0x200005f4
 80081bc:	20000630 	.word	0x20000630
 80081c0:	2000062c 	.word	0x2000062c
 80081c4:	0800d028 	.word	0x0800d028
 80081c8:	200006f4 	.word	0x200006f4
 80081cc:	0800d104 	.word	0x0800d104
 80081d0:	0800c9ac 	.word	0x0800c9ac
 80081d4:	e000edf0 	.word	0xe000edf0

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 80081d8:	4b35      	ldr	r3, [pc, #212]	@ (80082b0 <dcd_event_handler+0x3e8>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	3301      	adds	r3, #1
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	4b33      	ldr	r3, [pc, #204]	@ (80082b0 <dcd_event_handler+0x3e8>)
 80081e4:	701a      	strb	r2, [r3, #0]
      send = true;
 80081e6:	2301      	movs	r3, #1
 80081e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 80081ec:	e008      	b.n	8008200 <dcd_event_handler+0x338>

    default:
      send = true;
 80081ee:	2301      	movs	r3, #1
 80081f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 80081f4:	e004      	b.n	8008200 <dcd_event_handler+0x338>
      break;
 80081f6:	bf00      	nop
 80081f8:	e002      	b.n	8008200 <dcd_event_handler+0x338>
      break;
 80081fa:	bf00      	nop
 80081fc:	e000      	b.n	8008200 <dcd_event_handler+0x338>
      break;
 80081fe:	bf00      	nop
  }

  if (send) {
 8008200:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008204:	2b00      	cmp	r3, #0
 8008206:	d04f      	beq.n	80082a8 <dcd_event_handler+0x3e0>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	637b      	str	r3, [r7, #52]	@ 0x34
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008212:	4b28      	ldr	r3, [pc, #160]	@ (80082b4 <dcd_event_handler+0x3ec>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800821c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8008224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008228:	f083 0301 	eor.w	r3, r3, #1
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <dcd_event_handler+0x372>
    qhdl->interrupt_set(false);
 8008232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2000      	movs	r0, #0
 8008238:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 800823a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823c:	3304      	adds	r3, #4
 800823e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe f9f3 	bl	800662c <tu_fifo_write>
 8008246:	4603      	mov	r3, r0
 8008248:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 800824c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008250:	f083 0301 	eor.w	r3, r3, #1
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <dcd_event_handler+0x39a>
    qhdl->interrupt_set(true);
 800825a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2001      	movs	r0, #1
 8008260:	4798      	blx	r3
  return success;
 8008262:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008266:	f083 0301 	eor.w	r3, r3, #1
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00f      	beq.n	8008290 <dcd_event_handler+0x3c8>
 8008270:	f240 1265 	movw	r2, #357	@ 0x165
 8008274:	4910      	ldr	r1, [pc, #64]	@ (80082b8 <dcd_event_handler+0x3f0>)
 8008276:	4811      	ldr	r0, [pc, #68]	@ (80082bc <dcd_event_handler+0x3f4>)
 8008278:	f003 f9dc 	bl	800b634 <iprintf>
 800827c:	4b10      	ldr	r3, [pc, #64]	@ (80082c0 <dcd_event_handler+0x3f8>)
 800827e:	623b      	str	r3, [r7, #32]
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00c      	beq.n	80082a6 <dcd_event_handler+0x3de>
 800828c:	be00      	bkpt	0x0000
 800828e:	e00a      	b.n	80082a6 <dcd_event_handler+0x3de>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8008290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008292:	7818      	ldrb	r0, [r3, #0]
 8008294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008296:	785b      	ldrb	r3, [r3, #1]
 8008298:	4619      	mov	r1, r3
 800829a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800829e:	461a      	mov	r2, r3
 80082a0:	f7fe fbbe 	bl	8006a20 <tud_event_hook_cb>
  return true;
 80082a4:	e000      	b.n	80082a8 <dcd_event_handler+0x3e0>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80082a6:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 80082a8:	bf00      	nop
 80082aa:	3780      	adds	r7, #128	@ 0x80
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20000628 	.word	0x20000628
 80082b4:	200006f4 	.word	0x200006f4
 80082b8:	0800d104 	.word	0x0800d104
 80082bc:	0800c9ac 	.word	0x0800c9ac
 80082c0:	e000edf0 	.word	0xe000edf0

080082c4 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 80082ce:	79fb      	ldrb	r3, [r7, #7]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d005      	beq.n	80082e0 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 80082d4:	4b07      	ldr	r3, [pc, #28]	@ (80082f4 <usbd_int_set+0x30>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 fcf5 	bl	8008cc8 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 80082de:	e004      	b.n	80082ea <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 80082e0:	4b04      	ldr	r3, [pc, #16]	@ (80082f4 <usbd_int_set+0x30>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 fd11 	bl	8008d0c <dcd_int_disable>
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20000025 	.word	0x20000025

080082f8 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08a      	sub	sp, #40	@ 0x28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6039      	str	r1, [r7, #0]
 8008300:	4611      	mov	r1, r2
 8008302:	461a      	mov	r2, r3
 8008304:	4603      	mov	r3, r0
 8008306:	71fb      	strb	r3, [r7, #7]
 8008308:	460b      	mov	r3, r1
 800830a:	71bb      	strb	r3, [r7, #6]
 800830c:	4613      	mov	r3, r2
 800830e:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8008310:	2300      	movs	r3, #0
 8008312:	627b      	str	r3, [r7, #36]	@ 0x24
 8008314:	e059      	b.n	80083ca <usbd_open_edpt_pair+0xd2>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	2b05      	cmp	r3, #5
 8008320:	d108      	bne.n	8008334 <usbd_open_edpt_pair+0x3c>
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	78db      	ldrb	r3, [r3, #3]
 8008326:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800832a:	b2db      	uxtb	r3, r3
 800832c:	461a      	mov	r2, r3
 800832e:	797b      	ldrb	r3, [r7, #5]
 8008330:	4293      	cmp	r3, r2
 8008332:	d010      	beq.n	8008356 <usbd_open_edpt_pair+0x5e>
 8008334:	f240 42e7 	movw	r2, #1255	@ 0x4e7
 8008338:	4928      	ldr	r1, [pc, #160]	@ (80083dc <usbd_open_edpt_pair+0xe4>)
 800833a:	4829      	ldr	r0, [pc, #164]	@ (80083e0 <usbd_open_edpt_pair+0xe8>)
 800833c:	f003 f97a 	bl	800b634 <iprintf>
 8008340:	4b28      	ldr	r3, [pc, #160]	@ (80083e4 <usbd_open_edpt_pair+0xec>)
 8008342:	61bb      	str	r3, [r7, #24]
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d000      	beq.n	8008352 <usbd_open_edpt_pair+0x5a>
 8008350:	be00      	bkpt	0x0000
 8008352:	2300      	movs	r3, #0
 8008354:	e03e      	b.n	80083d4 <usbd_open_edpt_pair+0xdc>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	6a39      	ldr	r1, [r7, #32]
 800835a:	4618      	mov	r0, r3
 800835c:	f000 f844 	bl	80083e8 <usbd_edpt_open>
 8008360:	4603      	mov	r3, r0
 8008362:	f083 0301 	eor.w	r3, r3, #1
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d010      	beq.n	800838e <usbd_open_edpt_pair+0x96>
 800836c:	f44f 629d 	mov.w	r2, #1256	@ 0x4e8
 8008370:	491a      	ldr	r1, [pc, #104]	@ (80083dc <usbd_open_edpt_pair+0xe4>)
 8008372:	481b      	ldr	r0, [pc, #108]	@ (80083e0 <usbd_open_edpt_pair+0xe8>)
 8008374:	f003 f95e 	bl	800b634 <iprintf>
 8008378:	4b1a      	ldr	r3, [pc, #104]	@ (80083e4 <usbd_open_edpt_pair+0xec>)
 800837a:	61fb      	str	r3, [r7, #28]
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d000      	beq.n	800838a <usbd_open_edpt_pair+0x92>
 8008388:	be00      	bkpt	0x0000
 800838a:	2300      	movs	r3, #0
 800838c:	e022      	b.n	80083d4 <usbd_open_edpt_pair+0xdc>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	789b      	ldrb	r3, [r3, #2]
 8008392:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	09db      	lsrs	r3, r3, #7
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b01      	cmp	r3, #1
 800839c:	d104      	bne.n	80083a8 <usbd_open_edpt_pair+0xb0>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	789a      	ldrb	r2, [r3, #2]
 80083a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a4:	701a      	strb	r2, [r3, #0]
 80083a6:	e003      	b.n	80083b0 <usbd_open_edpt_pair+0xb8>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	789a      	ldrb	r2, [r3, #2]
 80083ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ae:	701a      	strb	r2, [r3, #0]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	461a      	mov	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80083c2:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80083c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c6:	3301      	adds	r3, #1
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80083ca:	79bb      	ldrb	r3, [r7, #6]
 80083cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083ce:	429a      	cmp	r2, r3
 80083d0:	dba1      	blt.n	8008316 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80083d2:	2301      	movs	r3, #1
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3728      	adds	r7, #40	@ 0x28
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	0800d110 	.word	0x0800d110
 80083e0:	0800c9ac 	.word	0x0800c9ac
 80083e4:	e000edf0 	.word	0xe000edf0

080083e8 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	6039      	str	r1, [r7, #0]
 80083f2:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80083f4:	4b21      	ldr	r3, [pc, #132]	@ (800847c <usbd_edpt_open+0x94>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	789b      	ldrb	r3, [r3, #2]
 80083fe:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b07      	cmp	r3, #7
 800840a:	d910      	bls.n	800842e <usbd_edpt_open+0x46>
 800840c:	f240 520b 	movw	r2, #1291	@ 0x50b
 8008410:	491b      	ldr	r1, [pc, #108]	@ (8008480 <usbd_edpt_open+0x98>)
 8008412:	481c      	ldr	r0, [pc, #112]	@ (8008484 <usbd_edpt_open+0x9c>)
 8008414:	f003 f90e 	bl	800b634 <iprintf>
 8008418:	4b1b      	ldr	r3, [pc, #108]	@ (8008488 <usbd_edpt_open+0xa0>)
 800841a:	613b      	str	r3, [r7, #16]
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d000      	beq.n	800842a <usbd_edpt_open+0x42>
 8008428:	be00      	bkpt	0x0000
 800842a:	2300      	movs	r3, #0
 800842c:	e022      	b.n	8008474 <usbd_edpt_open+0x8c>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 800842e:	4b17      	ldr	r3, [pc, #92]	@ (800848c <usbd_edpt_open+0xa4>)
 8008430:	789b      	ldrb	r3, [r3, #2]
 8008432:	4619      	mov	r1, r3
 8008434:	6838      	ldr	r0, [r7, #0]
 8008436:	f002 fe51 	bl	800b0dc <tu_edpt_validate>
 800843a:	4603      	mov	r3, r0
 800843c:	f083 0301 	eor.w	r3, r3, #1
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d010      	beq.n	8008468 <usbd_edpt_open+0x80>
 8008446:	f240 520c 	movw	r2, #1292	@ 0x50c
 800844a:	490d      	ldr	r1, [pc, #52]	@ (8008480 <usbd_edpt_open+0x98>)
 800844c:	480d      	ldr	r0, [pc, #52]	@ (8008484 <usbd_edpt_open+0x9c>)
 800844e:	f003 f8f1 	bl	800b634 <iprintf>
 8008452:	4b0d      	ldr	r3, [pc, #52]	@ (8008488 <usbd_edpt_open+0xa0>)
 8008454:	617b      	str	r3, [r7, #20]
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b00      	cmp	r3, #0
 8008460:	d000      	beq.n	8008464 <usbd_edpt_open+0x7c>
 8008462:	be00      	bkpt	0x0000
 8008464:	2300      	movs	r3, #0
 8008466:	e005      	b.n	8008474 <usbd_edpt_open+0x8c>

  return dcd_edpt_open(rhport, desc_ep);
 8008468:	79fb      	ldrb	r3, [r7, #7]
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	4618      	mov	r0, r3
 800846e:	f001 fdd3 	bl	800a018 <dcd_edpt_open>
 8008472:	4603      	mov	r3, r0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	20000025 	.word	0x20000025
 8008480:	0800d124 	.word	0x0800d124
 8008484:	0800c9ac 	.word	0x0800c9ac
 8008488:	e000edf0 	.word	0xe000edf0
 800848c:	200005f4 	.word	0x200005f4

08008490 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	460a      	mov	r2, r1
 800849a:	71fb      	strb	r3, [r7, #7]
 800849c:	4613      	mov	r3, r2
 800849e:	71bb      	strb	r3, [r7, #6]
 80084a0:	79bb      	ldrb	r3, [r7, #6]
 80084a2:	73bb      	strb	r3, [r7, #14]
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084aa:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80084ac:	75fb      	strb	r3, [r7, #23]
 80084ae:	79bb      	ldrb	r3, [r7, #6]
 80084b0:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	09db      	lsrs	r3, r3, #7
 80084b6:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80084b8:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80084ba:	7dfa      	ldrb	r2, [r7, #23]
 80084bc:	7dbb      	ldrb	r3, [r7, #22]
 80084be:	0052      	lsls	r2, r2, #1
 80084c0:	4413      	add	r3, r2
 80084c2:	3320      	adds	r3, #32
 80084c4:	4a06      	ldr	r2, [pc, #24]	@ (80084e0 <usbd_edpt_claim+0x50>)
 80084c6:	4413      	add	r3, r2
 80084c8:	3304      	adds	r3, #4
 80084ca:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 80084cc:	2100      	movs	r1, #0
 80084ce:	6938      	ldr	r0, [r7, #16]
 80084d0:	f002 fda2 	bl	800b018 <tu_edpt_claim>
 80084d4:	4603      	mov	r3, r0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	200005f4 	.word	0x200005f4

080084e4 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	460a      	mov	r2, r1
 80084ee:	71fb      	strb	r3, [r7, #7]
 80084f0:	4613      	mov	r3, r2
 80084f2:	71bb      	strb	r3, [r7, #6]
 80084f4:	79bb      	ldrb	r3, [r7, #6]
 80084f6:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084fe:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008500:	75fb      	strb	r3, [r7, #23]
 8008502:	79bb      	ldrb	r3, [r7, #6]
 8008504:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	09db      	lsrs	r3, r3, #7
 800850a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800850c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800850e:	7dfa      	ldrb	r2, [r7, #23]
 8008510:	7dbb      	ldrb	r3, [r7, #22]
 8008512:	0052      	lsls	r2, r2, #1
 8008514:	4413      	add	r3, r2
 8008516:	3320      	adds	r3, #32
 8008518:	4a06      	ldr	r2, [pc, #24]	@ (8008534 <usbd_edpt_release+0x50>)
 800851a:	4413      	add	r3, r2
 800851c:	3304      	adds	r3, #4
 800851e:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8008520:	2100      	movs	r1, #0
 8008522:	6938      	ldr	r0, [r7, #16]
 8008524:	f002 fdb1 	bl	800b08a <tu_edpt_release>
 8008528:	4603      	mov	r3, r0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	200005f4 	.word	0x200005f4

08008538 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	603a      	str	r2, [r7, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	4603      	mov	r3, r0
 8008544:	71fb      	strb	r3, [r7, #7]
 8008546:	460b      	mov	r3, r1
 8008548:	71bb      	strb	r3, [r7, #6]
 800854a:	4613      	mov	r3, r2
 800854c:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800854e:	4b3a      	ldr	r3, [pc, #232]	@ (8008638 <usbd_edpt_xfer+0x100>)
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	71fb      	strb	r3, [r7, #7]
 8008554:	79bb      	ldrb	r3, [r7, #6]
 8008556:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008558:	7abb      	ldrb	r3, [r7, #10]
 800855a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800855e:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008560:	75fb      	strb	r3, [r7, #23]
 8008562:	79bb      	ldrb	r3, [r7, #6]
 8008564:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008566:	7afb      	ldrb	r3, [r7, #11]
 8008568:	09db      	lsrs	r3, r3, #7
 800856a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800856c:	75bb      	strb	r3, [r7, #22]

  // TODO skip ready() check for now since enumeration also use this API
  // TU_VERIFY(tud_ready());

  TU_LOG_USBD("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);
 800856e:	79bb      	ldrb	r3, [r7, #6]
 8008570:	88ba      	ldrh	r2, [r7, #4]
 8008572:	4619      	mov	r1, r3
 8008574:	4831      	ldr	r0, [pc, #196]	@ (800863c <usbd_edpt_xfer+0x104>)
 8008576:	f003 f85d 	bl	800b634 <iprintf>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800857a:	7dfa      	ldrb	r2, [r7, #23]
 800857c:	7dbb      	ldrb	r3, [r7, #22]
 800857e:	4930      	ldr	r1, [pc, #192]	@ (8008640 <usbd_edpt_xfer+0x108>)
 8008580:	0052      	lsls	r2, r2, #1
 8008582:	440a      	add	r2, r1
 8008584:	4413      	add	r3, r2
 8008586:	3320      	adds	r3, #32
 8008588:	791b      	ldrb	r3, [r3, #4]
 800858a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b00      	cmp	r3, #0
 8008592:	d010      	beq.n	80085b6 <usbd_edpt_xfer+0x7e>
 8008594:	f240 5239 	movw	r2, #1337	@ 0x539
 8008598:	492a      	ldr	r1, [pc, #168]	@ (8008644 <usbd_edpt_xfer+0x10c>)
 800859a:	482b      	ldr	r0, [pc, #172]	@ (8008648 <usbd_edpt_xfer+0x110>)
 800859c:	f003 f84a 	bl	800b634 <iprintf>
 80085a0:	4b2a      	ldr	r3, [pc, #168]	@ (800864c <usbd_edpt_xfer+0x114>)
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d000      	beq.n	80085b2 <usbd_edpt_xfer+0x7a>
 80085b0:	be00      	bkpt	0x0000
 80085b2:	2300      	movs	r3, #0
 80085b4:	e03b      	b.n	800862e <usbd_edpt_xfer+0xf6>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80085b6:	7dfa      	ldrb	r2, [r7, #23]
 80085b8:	7dbb      	ldrb	r3, [r7, #22]
 80085ba:	4921      	ldr	r1, [pc, #132]	@ (8008640 <usbd_edpt_xfer+0x108>)
 80085bc:	0052      	lsls	r2, r2, #1
 80085be:	440a      	add	r2, r1
 80085c0:	4413      	add	r3, r2
 80085c2:	f103 0220 	add.w	r2, r3, #32
 80085c6:	7913      	ldrb	r3, [r2, #4]
 80085c8:	f043 0301 	orr.w	r3, r3, #1
 80085cc:	7113      	strb	r3, [r2, #4]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 80085ce:	88bb      	ldrh	r3, [r7, #4]
 80085d0:	79b9      	ldrb	r1, [r7, #6]
 80085d2:	79f8      	ldrb	r0, [r7, #7]
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	f002 f975 	bl	800a8c4 <dcd_edpt_xfer>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <usbd_edpt_xfer+0xac>
    return true;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e024      	b.n	800862e <usbd_edpt_xfer+0xf6>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 80085e4:	7dfa      	ldrb	r2, [r7, #23]
 80085e6:	7dbb      	ldrb	r3, [r7, #22]
 80085e8:	4915      	ldr	r1, [pc, #84]	@ (8008640 <usbd_edpt_xfer+0x108>)
 80085ea:	0052      	lsls	r2, r2, #1
 80085ec:	440a      	add	r2, r1
 80085ee:	4413      	add	r3, r2
 80085f0:	f103 0220 	add.w	r2, r3, #32
 80085f4:	7913      	ldrb	r3, [r2, #4]
 80085f6:	f36f 0300 	bfc	r3, #0, #1
 80085fa:	7113      	strb	r3, [r2, #4]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80085fc:	7dfa      	ldrb	r2, [r7, #23]
 80085fe:	7dbb      	ldrb	r3, [r7, #22]
 8008600:	490f      	ldr	r1, [pc, #60]	@ (8008640 <usbd_edpt_xfer+0x108>)
 8008602:	0052      	lsls	r2, r2, #1
 8008604:	440a      	add	r2, r1
 8008606:	4413      	add	r3, r2
 8008608:	f103 0220 	add.w	r2, r3, #32
 800860c:	7913      	ldrb	r3, [r2, #4]
 800860e:	f36f 0382 	bfc	r3, #2, #1
 8008612:	7113      	strb	r3, [r2, #4]
    TU_LOG_USBD("FAILED\r\n");
 8008614:	480e      	ldr	r0, [pc, #56]	@ (8008650 <usbd_edpt_xfer+0x118>)
 8008616:	f003 f87d 	bl	800b714 <puts>
    TU_BREAKPOINT();
 800861a:	4b0c      	ldr	r3, [pc, #48]	@ (800864c <usbd_edpt_xfer+0x114>)
 800861c:	613b      	str	r3, [r7, #16]
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	d000      	beq.n	800862c <usbd_edpt_xfer+0xf4>
 800862a:	be00      	bkpt	0x0000
    return false;
 800862c:	2300      	movs	r3, #0
  }
}
 800862e:	4618      	mov	r0, r3
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	20000025 	.word	0x20000025
 800863c:	0800cc80 	.word	0x0800cc80
 8008640:	200005f4 	.word	0x200005f4
 8008644:	0800d134 	.word	0x0800d134
 8008648:	0800c9ac 	.word	0x0800c9ac
 800864c:	e000edf0 	.word	0xe000edf0
 8008650:	0800cca4 	.word	0x0800cca4

08008654 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	460a      	mov	r2, r1
 800865e:	71fb      	strb	r3, [r7, #7]
 8008660:	4613      	mov	r3, r2
 8008662:	71bb      	strb	r3, [r7, #6]
 8008664:	79bb      	ldrb	r3, [r7, #6]
 8008666:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008668:	7b3b      	ldrb	r3, [r7, #12]
 800866a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800866e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008670:	73fb      	strb	r3, [r7, #15]
 8008672:	79bb      	ldrb	r3, [r7, #6]
 8008674:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008676:	7b7b      	ldrb	r3, [r7, #13]
 8008678:	09db      	lsrs	r3, r3, #7
 800867a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800867c:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 800867e:	7bfa      	ldrb	r2, [r7, #15]
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	4909      	ldr	r1, [pc, #36]	@ (80086a8 <usbd_edpt_busy+0x54>)
 8008684:	0052      	lsls	r2, r2, #1
 8008686:	440a      	add	r2, r1
 8008688:	4413      	add	r3, r2
 800868a:	3320      	adds	r3, #32
 800868c:	791b      	ldrb	r3, [r3, #4]
 800868e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	bf14      	ite	ne
 8008698:	2301      	movne	r3, #1
 800869a:	2300      	moveq	r3, #0
 800869c:	b2db      	uxtb	r3, r3
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bc80      	pop	{r7}
 80086a6:	4770      	bx	lr
 80086a8:	200005f4 	.word	0x200005f4

080086ac <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	4603      	mov	r3, r0
 80086b4:	460a      	mov	r2, r1
 80086b6:	71fb      	strb	r3, [r7, #7]
 80086b8:	4613      	mov	r3, r2
 80086ba:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80086bc:	4b1b      	ldr	r3, [pc, #108]	@ (800872c <usbd_edpt_stall+0x80>)
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	71fb      	strb	r3, [r7, #7]
 80086c2:	79bb      	ldrb	r3, [r7, #6]
 80086c4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80086c6:	7b3b      	ldrb	r3, [r7, #12]
 80086c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086cc:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80086ce:	73fb      	strb	r3, [r7, #15]
 80086d0:	79bb      	ldrb	r3, [r7, #6]
 80086d2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80086d4:	7b7b      	ldrb	r3, [r7, #13]
 80086d6:	09db      	lsrs	r3, r3, #7
 80086d8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80086da:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
 80086dc:	79bb      	ldrb	r3, [r7, #6]
 80086de:	4619      	mov	r1, r3
 80086e0:	4813      	ldr	r0, [pc, #76]	@ (8008730 <usbd_edpt_stall+0x84>)
 80086e2:	f002 ffa7 	bl	800b634 <iprintf>
  dcd_edpt_stall(rhport, ep_addr);
 80086e6:	79ba      	ldrb	r2, [r7, #6]
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	4611      	mov	r1, r2
 80086ec:	4618      	mov	r0, r3
 80086ee:	f002 f927 	bl	800a940 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 80086f2:	7bfa      	ldrb	r2, [r7, #15]
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	490f      	ldr	r1, [pc, #60]	@ (8008734 <usbd_edpt_stall+0x88>)
 80086f8:	0052      	lsls	r2, r2, #1
 80086fa:	440a      	add	r2, r1
 80086fc:	4413      	add	r3, r2
 80086fe:	f103 0220 	add.w	r2, r3, #32
 8008702:	7913      	ldrb	r3, [r2, #4]
 8008704:	f043 0302 	orr.w	r3, r3, #2
 8008708:	7113      	strb	r3, [r2, #4]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800870a:	7bfa      	ldrb	r2, [r7, #15]
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	4909      	ldr	r1, [pc, #36]	@ (8008734 <usbd_edpt_stall+0x88>)
 8008710:	0052      	lsls	r2, r2, #1
 8008712:	440a      	add	r2, r1
 8008714:	4413      	add	r3, r2
 8008716:	f103 0220 	add.w	r2, r3, #32
 800871a:	7913      	ldrb	r3, [r2, #4]
 800871c:	f043 0301 	orr.w	r3, r3, #1
 8008720:	7113      	strb	r3, [r2, #4]
}
 8008722:	bf00      	nop
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20000025 	.word	0x20000025
 8008730:	0800cce0 	.word	0x0800cce0
 8008734:	200005f4 	.word	0x200005f4

08008738 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	4603      	mov	r3, r0
 8008740:	460a      	mov	r2, r1
 8008742:	71fb      	strb	r3, [r7, #7]
 8008744:	4613      	mov	r3, r2
 8008746:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008748:	4b1b      	ldr	r3, [pc, #108]	@ (80087b8 <usbd_edpt_clear_stall+0x80>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	71fb      	strb	r3, [r7, #7]
 800874e:	79bb      	ldrb	r3, [r7, #6]
 8008750:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008752:	7b3b      	ldrb	r3, [r7, #12]
 8008754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008758:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800875a:	73fb      	strb	r3, [r7, #15]
 800875c:	79bb      	ldrb	r3, [r7, #6]
 800875e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008760:	7b7b      	ldrb	r3, [r7, #13]
 8008762:	09db      	lsrs	r3, r3, #7
 8008764:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008766:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
 8008768:	79bb      	ldrb	r3, [r7, #6]
 800876a:	4619      	mov	r1, r3
 800876c:	4813      	ldr	r0, [pc, #76]	@ (80087bc <usbd_edpt_clear_stall+0x84>)
 800876e:	f002 ff61 	bl	800b634 <iprintf>
  dcd_edpt_clear_stall(rhport, ep_addr);
 8008772:	79ba      	ldrb	r2, [r7, #6]
 8008774:	79fb      	ldrb	r3, [r7, #7]
 8008776:	4611      	mov	r1, r2
 8008778:	4618      	mov	r0, r3
 800877a:	f002 f965 	bl	800aa48 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800877e:	7bfa      	ldrb	r2, [r7, #15]
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	490f      	ldr	r1, [pc, #60]	@ (80087c0 <usbd_edpt_clear_stall+0x88>)
 8008784:	0052      	lsls	r2, r2, #1
 8008786:	440a      	add	r2, r1
 8008788:	4413      	add	r3, r2
 800878a:	f103 0220 	add.w	r2, r3, #32
 800878e:	7913      	ldrb	r3, [r2, #4]
 8008790:	f36f 0341 	bfc	r3, #1, #1
 8008794:	7113      	strb	r3, [r2, #4]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008796:	7bfa      	ldrb	r2, [r7, #15]
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	4909      	ldr	r1, [pc, #36]	@ (80087c0 <usbd_edpt_clear_stall+0x88>)
 800879c:	0052      	lsls	r2, r2, #1
 800879e:	440a      	add	r2, r1
 80087a0:	4413      	add	r3, r2
 80087a2:	f103 0220 	add.w	r2, r3, #32
 80087a6:	7913      	ldrb	r3, [r2, #4]
 80087a8:	f36f 0300 	bfc	r3, #0, #1
 80087ac:	7113      	strb	r3, [r2, #4]
}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	20000025 	.word	0x20000025
 80087bc:	0800ccf4 	.word	0x0800ccf4
 80087c0:	200005f4 	.word	0x200005f4

080087c4 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	460a      	mov	r2, r1
 80087ce:	71fb      	strb	r3, [r7, #7]
 80087d0:	4613      	mov	r3, r2
 80087d2:	71bb      	strb	r3, [r7, #6]
 80087d4:	79bb      	ldrb	r3, [r7, #6]
 80087d6:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80087d8:	7b3b      	ldrb	r3, [r7, #12]
 80087da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087de:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80087e0:	73fb      	strb	r3, [r7, #15]
 80087e2:	79bb      	ldrb	r3, [r7, #6]
 80087e4:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80087e6:	7b7b      	ldrb	r3, [r7, #13]
 80087e8:	09db      	lsrs	r3, r3, #7
 80087ea:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80087ec:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 80087ee:	7bfa      	ldrb	r2, [r7, #15]
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	4909      	ldr	r1, [pc, #36]	@ (8008818 <usbd_edpt_stalled+0x54>)
 80087f4:	0052      	lsls	r2, r2, #1
 80087f6:	440a      	add	r2, r1
 80087f8:	4413      	add	r3, r2
 80087fa:	3320      	adds	r3, #32
 80087fc:	791b      	ldrb	r3, [r3, #4]
 80087fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	bf14      	ite	ne
 8008808:	2301      	movne	r3, #1
 800880a:	2300      	moveq	r3, #0
 800880c:	b2db      	uxtb	r3, r3
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	bc80      	pop	{r7}
 8008816:	4770      	bx	lr
 8008818:	200005f4 	.word	0x200005f4

0800881c <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	6039      	str	r1, [r7, #0]
 8008826:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <status_stage_xact+0x1e>
 8008836:	2300      	movs	r3, #0
 8008838:	e000      	b.n	800883c <status_stage_xact+0x20>
 800883a:	2380      	movs	r3, #128	@ 0x80
 800883c:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800883e:	7bf9      	ldrb	r1, [r7, #15]
 8008840:	79f8      	ldrb	r0, [r7, #7]
 8008842:	2300      	movs	r3, #0
 8008844:	2200      	movs	r2, #0
 8008846:	f7ff fe77 	bl	8008538 <usbd_edpt_xfer>
 800884a:	4603      	mov	r3, r0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	6039      	str	r1, [r7, #0]
 800885e:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 8008860:	4b0b      	ldr	r3, [pc, #44]	@ (8008890 <tud_control_status+0x3c>)
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	6810      	ldr	r0, [r2, #0]
 8008866:	6851      	ldr	r1, [r2, #4]
 8008868:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800886a:	4b09      	ldr	r3, [pc, #36]	@ (8008890 <tud_control_status+0x3c>)
 800886c:	2200      	movs	r2, #0
 800886e:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008870:	4b07      	ldr	r3, [pc, #28]	@ (8008890 <tud_control_status+0x3c>)
 8008872:	2200      	movs	r2, #0
 8008874:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8008876:	4b06      	ldr	r3, [pc, #24]	@ (8008890 <tud_control_status+0x3c>)
 8008878:	2200      	movs	r2, #0
 800887a:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff ffcb 	bl	800881c <status_stage_xact>
 8008886:	4603      	mov	r3, r0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	200006f8 	.word	0x200006f8

08008894 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af00      	add	r7, sp, #0
 800889a:	4603      	mov	r3, r0
 800889c:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800889e:	4b24      	ldr	r3, [pc, #144]	@ (8008930 <data_stage_xact+0x9c>)
 80088a0:	899a      	ldrh	r2, [r3, #12]
 80088a2:	4b23      	ldr	r3, [pc, #140]	@ (8008930 <data_stage_xact+0x9c>)
 80088a4:	89db      	ldrh	r3, [r3, #14]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	837b      	strh	r3, [r7, #26]
 80088ac:	2340      	movs	r3, #64	@ 0x40
 80088ae:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80088b0:	8b7a      	ldrh	r2, [r7, #26]
 80088b2:	8b3b      	ldrh	r3, [r7, #24]
 80088b4:	4293      	cmp	r3, r2
 80088b6:	bf28      	it	cs
 80088b8:	4613      	movcs	r3, r2
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 80088be:	2300      	movs	r3, #0
 80088c0:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 80088c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008930 <data_stage_xact+0x9c>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d01e      	beq.n	800890e <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 80088d0:	2380      	movs	r3, #128	@ 0x80
 80088d2:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 80088d4:	8bbb      	ldrh	r3, [r7, #28]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d019      	beq.n	800890e <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 80088da:	4b15      	ldr	r3, [pc, #84]	@ (8008930 <data_stage_xact+0x9c>)
 80088dc:	689a      	ldr	r2, [r3, #8]
 80088de:	8bbb      	ldrh	r3, [r7, #28]
 80088e0:	4914      	ldr	r1, [pc, #80]	@ (8008934 <data_stage_xact+0xa0>)
 80088e2:	6179      	str	r1, [r7, #20]
 80088e4:	2140      	movs	r1, #64	@ 0x40
 80088e6:	6139      	str	r1, [r7, #16]
 80088e8:	60fa      	str	r2, [r7, #12]
 80088ea:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d202      	bcs.n	80088fa <data_stage_xact+0x66>
    return -1;
 80088f4:	f04f 33ff 	mov.w	r3, #4294967295
 80088f8:	e005      	b.n	8008906 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	68f9      	ldr	r1, [r7, #12]
 80088fe:	6978      	ldr	r0, [r7, #20]
 8008900:	f003 f897 	bl	800ba32 <memcpy>
  return 0;
 8008904:	2300      	movs	r3, #0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <data_stage_xact+0x7a>
 800890a:	2300      	movs	r3, #0
 800890c:	e00b      	b.n	8008926 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 800890e:	8bbb      	ldrh	r3, [r7, #28]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <data_stage_xact+0x84>
 8008914:	4a07      	ldr	r2, [pc, #28]	@ (8008934 <data_stage_xact+0xa0>)
 8008916:	e000      	b.n	800891a <data_stage_xact+0x86>
 8008918:	2200      	movs	r2, #0
 800891a:	8bbb      	ldrh	r3, [r7, #28]
 800891c:	7ff9      	ldrb	r1, [r7, #31]
 800891e:	79f8      	ldrb	r0, [r7, #7]
 8008920:	f7ff fe0a 	bl	8008538 <usbd_edpt_xfer>
 8008924:	4603      	mov	r3, r0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3720      	adds	r7, #32
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	200006f8 	.word	0x200006f8
 8008934:	2000070c 	.word	0x2000070c

08008938 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	607a      	str	r2, [r7, #4]
 8008942:	461a      	mov	r2, r3
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
 8008948:	4613      	mov	r3, r2
 800894a:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 800894c:	4b37      	ldr	r3, [pc, #220]	@ (8008a2c <tud_control_xfer+0xf4>)
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	6810      	ldr	r0, [r2, #0]
 8008952:	6851      	ldr	r1, [r2, #4]
 8008954:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8008956:	4a35      	ldr	r2, [pc, #212]	@ (8008a2c <tud_control_xfer+0xf4>)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 800895c:	4b33      	ldr	r3, [pc, #204]	@ (8008a2c <tud_control_xfer+0xf4>)
 800895e:	2200      	movs	r2, #0
 8008960:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	88db      	ldrh	r3, [r3, #6]
 8008966:	b29a      	uxth	r2, r3
 8008968:	89bb      	ldrh	r3, [r7, #12]
 800896a:	827b      	strh	r3, [r7, #18]
 800896c:	4613      	mov	r3, r2
 800896e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008970:	8a7a      	ldrh	r2, [r7, #18]
 8008972:	8a3b      	ldrh	r3, [r7, #16]
 8008974:	4293      	cmp	r3, r2
 8008976:	bf28      	it	cs
 8008978:	4613      	movcs	r3, r2
 800897a:	b29a      	uxth	r2, r3
 800897c:	4b2b      	ldr	r3, [pc, #172]	@ (8008a2c <tud_control_xfer+0xf4>)
 800897e:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	88db      	ldrh	r3, [r3, #6]
 8008984:	b29b      	uxth	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d030      	beq.n	80089ec <tud_control_xfer+0xb4>
    if (_ctrl_xfer.data_len > 0U) {
 800898a:	4b28      	ldr	r3, [pc, #160]	@ (8008a2c <tud_control_xfer+0xf4>)
 800898c:	899b      	ldrh	r3, [r3, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d012      	beq.n	80089b8 <tud_control_xfer+0x80>
      TU_ASSERT(buffer);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10f      	bne.n	80089b8 <tud_control_xfer+0x80>
 8008998:	2272      	movs	r2, #114	@ 0x72
 800899a:	4925      	ldr	r1, [pc, #148]	@ (8008a30 <tud_control_xfer+0xf8>)
 800899c:	4825      	ldr	r0, [pc, #148]	@ (8008a34 <tud_control_xfer+0xfc>)
 800899e:	f002 fe49 	bl	800b634 <iprintf>
 80089a2:	4b25      	ldr	r3, [pc, #148]	@ (8008a38 <tud_control_xfer+0x100>)
 80089a4:	61bb      	str	r3, [r7, #24]
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d000      	beq.n	80089b4 <tud_control_xfer+0x7c>
 80089b2:	be00      	bkpt	0x0000
 80089b4:	2300      	movs	r3, #0
 80089b6:	e035      	b.n	8008a24 <tud_control_xfer+0xec>
    }
    TU_ASSERT(data_stage_xact(rhport));
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff ff6a 	bl	8008894 <data_stage_xact>
 80089c0:	4603      	mov	r3, r0
 80089c2:	f083 0301 	eor.w	r3, r3, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d02a      	beq.n	8008a22 <tud_control_xfer+0xea>
 80089cc:	2274      	movs	r2, #116	@ 0x74
 80089ce:	4918      	ldr	r1, [pc, #96]	@ (8008a30 <tud_control_xfer+0xf8>)
 80089d0:	4818      	ldr	r0, [pc, #96]	@ (8008a34 <tud_control_xfer+0xfc>)
 80089d2:	f002 fe2f 	bl	800b634 <iprintf>
 80089d6:	4b18      	ldr	r3, [pc, #96]	@ (8008a38 <tud_control_xfer+0x100>)
 80089d8:	617b      	str	r3, [r7, #20]
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d000      	beq.n	80089e8 <tud_control_xfer+0xb0>
 80089e6:	be00      	bkpt	0x0000
 80089e8:	2300      	movs	r3, #0
 80089ea:	e01b      	b.n	8008a24 <tud_control_xfer+0xec>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
 80089ee:	68b9      	ldr	r1, [r7, #8]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7ff ff13 	bl	800881c <status_stage_xact>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f083 0301 	eor.w	r3, r3, #1
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00f      	beq.n	8008a22 <tud_control_xfer+0xea>
 8008a02:	2276      	movs	r2, #118	@ 0x76
 8008a04:	490a      	ldr	r1, [pc, #40]	@ (8008a30 <tud_control_xfer+0xf8>)
 8008a06:	480b      	ldr	r0, [pc, #44]	@ (8008a34 <tud_control_xfer+0xfc>)
 8008a08:	f002 fe14 	bl	800b634 <iprintf>
 8008a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a38 <tud_control_xfer+0x100>)
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d000      	beq.n	8008a1e <tud_control_xfer+0xe6>
 8008a1c:	be00      	bkpt	0x0000
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e000      	b.n	8008a24 <tud_control_xfer+0xec>
  }

  return true;
 8008a22:	2301      	movs	r3, #1
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3720      	adds	r7, #32
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	200006f8 	.word	0x200006f8
 8008a30:	0800d144 	.word	0x0800d144
 8008a34:	0800cd10 	.word	0x0800cd10
 8008a38:	e000edf0 	.word	0xe000edf0

08008a3c <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8008a40:	2214      	movs	r2, #20
 8008a42:	2100      	movs	r1, #0
 8008a44:	4802      	ldr	r0, [pc, #8]	@ (8008a50 <usbd_control_reset+0x14>)
 8008a46:	f002 ff79 	bl	800b93c <memset>
}
 8008a4a:	bf00      	nop
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	200006f8 	.word	0x200006f8

08008a54 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8008a5c:	4a03      	ldr	r2, [pc, #12]	@ (8008a6c <usbd_control_set_complete_callback+0x18>)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6113      	str	r3, [r2, #16]
}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bc80      	pop	{r7}
 8008a6a:	4770      	bx	lr
 8008a6c:	200006f8 	.word	0x200006f8

08008a70 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 8008a78:	4b09      	ldr	r3, [pc, #36]	@ (8008aa0 <usbd_control_set_request+0x30>)
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6810      	ldr	r0, [r2, #0]
 8008a7e:	6851      	ldr	r1, [r2, #4]
 8008a80:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8008a82:	4b07      	ldr	r3, [pc, #28]	@ (8008aa0 <usbd_control_set_request+0x30>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008a88:	4b05      	ldr	r3, [pc, #20]	@ (8008aa0 <usbd_control_set_request+0x30>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8008a8e:	4b04      	ldr	r3, [pc, #16]	@ (8008aa0 <usbd_control_set_request+0x30>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	819a      	strh	r2, [r3, #12]
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bc80      	pop	{r7}
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	200006f8 	.word	0x200006f8

08008aa4 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b088      	sub	sp, #32
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	603b      	str	r3, [r7, #0]
 8008aac:	4603      	mov	r3, r0
 8008aae:	71fb      	strb	r3, [r7, #7]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	71bb      	strb	r3, [r7, #6]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	717b      	strb	r3, [r7, #5]
 8008ab8:	79bb      	ldrb	r3, [r7, #6]
 8008aba:	73fb      	strb	r3, [r7, #15]
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
 8008abe:	09db      	lsrs	r3, r3, #7
 8008ac0:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 8008ac2:	4a5c      	ldr	r2, [pc, #368]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008ac4:	7812      	ldrb	r2, [r2, #0]
 8008ac6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8008aca:	b2d2      	uxtb	r2, r2
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d023      	beq.n	8008b18 <usbd_control_xfer_cb+0x74>
    TU_ASSERT(0 == xferred_bytes);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00f      	beq.n	8008af6 <usbd_control_xfer_cb+0x52>
 8008ad6:	229d      	movs	r2, #157	@ 0x9d
 8008ad8:	4957      	ldr	r1, [pc, #348]	@ (8008c38 <usbd_control_xfer_cb+0x194>)
 8008ada:	4858      	ldr	r0, [pc, #352]	@ (8008c3c <usbd_control_xfer_cb+0x198>)
 8008adc:	f002 fdaa 	bl	800b634 <iprintf>
 8008ae0:	4b57      	ldr	r3, [pc, #348]	@ (8008c40 <usbd_control_xfer_cb+0x19c>)
 8008ae2:	613b      	str	r3, [r7, #16]
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d000      	beq.n	8008af2 <usbd_control_xfer_cb+0x4e>
 8008af0:	be00      	bkpt	0x0000
 8008af2:	2300      	movs	r3, #0
 8008af4:	e09a      	b.n	8008c2c <usbd_control_xfer_cb+0x188>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	494e      	ldr	r1, [pc, #312]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 ffce 	bl	8009a9c <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8008b00:	4b4c      	ldr	r3, [pc, #304]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <usbd_control_xfer_cb+0x70>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8008b08:	4b4a      	ldr	r3, [pc, #296]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	79f8      	ldrb	r0, [r7, #7]
 8008b0e:	4a49      	ldr	r2, [pc, #292]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b10:	2103      	movs	r1, #3
 8008b12:	4798      	blx	r3
    }

    return true;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e089      	b.n	8008c2c <usbd_control_xfer_cb+0x188>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 8008b18:	4b46      	ldr	r3, [pc, #280]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d113      	bne.n	8008b4e <usbd_control_xfer_cb+0xaa>
    TU_VERIFY(_ctrl_xfer.buffer);
 8008b26:	4b43      	ldr	r3, [pc, #268]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <usbd_control_xfer_cb+0x8e>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e07c      	b.n	8008c2c <usbd_control_xfer_cb+0x188>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8008b32:	4b40      	ldr	r3, [pc, #256]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	4942      	ldr	r1, [pc, #264]	@ (8008c44 <usbd_control_xfer_cb+0x1a0>)
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f002 ff79 	bl	800ba32 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
 8008b40:	4b3c      	ldr	r3, [pc, #240]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	2202      	movs	r2, #2
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f002 fbe3 	bl	800b314 <tu_print_mem>
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8008b4e:	4b39      	ldr	r3, [pc, #228]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b50:	89da      	ldrh	r2, [r3, #14]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	4413      	add	r3, r2
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	4b36      	ldr	r3, [pc, #216]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b5c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8008b5e:	4b35      	ldr	r3, [pc, #212]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	4413      	add	r3, r2
 8008b66:	4a33      	ldr	r2, [pc, #204]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b68:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 8008b6a:	4b32      	ldr	r3, [pc, #200]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b6c:	88da      	ldrh	r2, [r3, #6]
 8008b6e:	4b31      	ldr	r3, [pc, #196]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b70:	89db      	ldrh	r3, [r3, #14]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d002      	beq.n	8008b7c <usbd_control_xfer_cb+0xd8>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b3f      	cmp	r3, #63	@ 0x3f
 8008b7a:	d83b      	bhi.n	8008bf4 <usbd_control_xfer_cb+0x150>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8008b80:	4b2c      	ldr	r3, [pc, #176]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00c      	beq.n	8008ba2 <usbd_control_xfer_cb+0xfe>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
 8008b88:	4b2a      	ldr	r3, [pc, #168]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fd ff8f 	bl	8006ab0 <usbd_driver_print_control_complete_name>
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8008b92:	4b28      	ldr	r3, [pc, #160]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	79f8      	ldrb	r0, [r7, #7]
 8008b98:	4a26      	ldr	r2, [pc, #152]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008b9a:	2102      	movs	r1, #2
 8008b9c:	4798      	blx	r3
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 8008ba2:	7ffb      	ldrb	r3, [r7, #31]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d01a      	beq.n	8008bde <usbd_control_xfer_cb+0x13a>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 8008ba8:	79fb      	ldrb	r3, [r7, #7]
 8008baa:	4922      	ldr	r1, [pc, #136]	@ (8008c34 <usbd_control_xfer_cb+0x190>)
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff fe35 	bl	800881c <status_stage_xact>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	f083 0301 	eor.w	r3, r3, #1
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d034      	beq.n	8008c28 <usbd_control_xfer_cb+0x184>
 8008bbe:	22c5      	movs	r2, #197	@ 0xc5
 8008bc0:	491d      	ldr	r1, [pc, #116]	@ (8008c38 <usbd_control_xfer_cb+0x194>)
 8008bc2:	481e      	ldr	r0, [pc, #120]	@ (8008c3c <usbd_control_xfer_cb+0x198>)
 8008bc4:	f002 fd36 	bl	800b634 <iprintf>
 8008bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8008c40 <usbd_control_xfer_cb+0x19c>)
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d000      	beq.n	8008bda <usbd_control_xfer_cb+0x136>
 8008bd8:	be00      	bkpt	0x0000
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e026      	b.n	8008c2c <usbd_control_xfer_cb+0x188>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	2100      	movs	r1, #0
 8008be2:	4618      	mov	r0, r3
 8008be4:	f001 feac 	bl	800a940 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8008be8:	79fb      	ldrb	r3, [r7, #7]
 8008bea:	2180      	movs	r1, #128	@ 0x80
 8008bec:	4618      	mov	r0, r3
 8008bee:	f001 fea7 	bl	800a940 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8008bf2:	e019      	b.n	8008c28 <usbd_control_xfer_cb+0x184>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff fe4c 	bl	8008894 <data_stage_xact>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	f083 0301 	eor.w	r3, r3, #1
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d010      	beq.n	8008c2a <usbd_control_xfer_cb+0x186>
 8008c08:	22cd      	movs	r2, #205	@ 0xcd
 8008c0a:	490b      	ldr	r1, [pc, #44]	@ (8008c38 <usbd_control_xfer_cb+0x194>)
 8008c0c:	480b      	ldr	r0, [pc, #44]	@ (8008c3c <usbd_control_xfer_cb+0x198>)
 8008c0e:	f002 fd11 	bl	800b634 <iprintf>
 8008c12:	4b0b      	ldr	r3, [pc, #44]	@ (8008c40 <usbd_control_xfer_cb+0x19c>)
 8008c14:	61bb      	str	r3, [r7, #24]
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d000      	beq.n	8008c24 <usbd_control_xfer_cb+0x180>
 8008c22:	be00      	bkpt	0x0000
 8008c24:	2300      	movs	r3, #0
 8008c26:	e001      	b.n	8008c2c <usbd_control_xfer_cb+0x188>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8008c28:	bf00      	nop
  }

  return true;
 8008c2a:	2301      	movs	r3, #1
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3720      	adds	r7, #32
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	200006f8 	.word	0x200006f8
 8008c38:	0800d158 	.word	0x0800d158
 8008c3c:	0800cd10 	.word	0x0800cd10
 8008c40:	e000edf0 	.word	0xe000edf0
 8008c44:	2000070c 	.word	0x2000070c

08008c48 <__NVIC_EnableIRQ>:
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	db0b      	blt.n	8008c72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c5a:	79fb      	ldrb	r3, [r7, #7]
 8008c5c:	f003 021f 	and.w	r2, r3, #31
 8008c60:	4906      	ldr	r1, [pc, #24]	@ (8008c7c <__NVIC_EnableIRQ+0x34>)
 8008c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c66:	095b      	lsrs	r3, r3, #5
 8008c68:	2001      	movs	r0, #1
 8008c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8008c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008c72:	bf00      	nop
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bc80      	pop	{r7}
 8008c7a:	4770      	bx	lr
 8008c7c:	e000e100 	.word	0xe000e100

08008c80 <__NVIC_DisableIRQ>:
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	4603      	mov	r3, r0
 8008c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	db12      	blt.n	8008cb8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c92:	79fb      	ldrb	r3, [r7, #7]
 8008c94:	f003 021f 	and.w	r2, r3, #31
 8008c98:	490a      	ldr	r1, [pc, #40]	@ (8008cc4 <__NVIC_DisableIRQ+0x44>)
 8008c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c9e:	095b      	lsrs	r3, r3, #5
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8008ca6:	3320      	adds	r3, #32
 8008ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008cac:	f3bf 8f4f 	dsb	sy
}
 8008cb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008cb2:	f3bf 8f6f 	isb	sy
}
 8008cb6:	bf00      	nop
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bc80      	pop	{r7}
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	e000e100 	.word	0xe000e100

08008cc8 <dcd_int_enable>:
    #error Unknown arch in USB driver
  #endif
};
enum { FSDEV_IRQ_NUM = TU_ARRAY_SIZE(fsdev_irq) };

void dcd_int_enable(uint8_t rhport) {
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("dsb 0xF":::"memory");
 8008cd2:	f3bf 8f4f 	dsb	sy
}
 8008cd6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008cd8:	f3bf 8f6f 	isb	sy
}
 8008cdc:	bf00      	nop
    NVIC_EnableIRQ(USB_LP_IRQn);
    NVIC_EnableIRQ(USBWakeUp_RMP_IRQn);
  } else
  #endif
  {
    for (uint8_t i = 0; i < FSDEV_IRQ_NUM; i++) {
 8008cde:	2300      	movs	r3, #0
 8008ce0:	73fb      	strb	r3, [r7, #15]
 8008ce2:	e008      	b.n	8008cf6 <dcd_int_enable+0x2e>
      NVIC_EnableIRQ(fsdev_irq[i]);
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	4a08      	ldr	r2, [pc, #32]	@ (8008d08 <dcd_int_enable+0x40>)
 8008ce8:	56d3      	ldrsb	r3, [r2, r3]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff ffac 	bl	8008c48 <__NVIC_EnableIRQ>
    for (uint8_t i = 0; i < FSDEV_IRQ_NUM; i++) {
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	73fb      	strb	r3, [r7, #15]
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d9f3      	bls.n	8008ce4 <dcd_int_enable+0x1c>
    }
  }
}
 8008cfc:	bf00      	nop
 8008cfe:	bf00      	nop
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	0800d170 	.word	0x0800d170

08008d0c <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ(USB_LP_IRQn);
    NVIC_DisableIRQ(USBWakeUp_RMP_IRQn);
  } else
  #endif
  {
    for (uint8_t i = 0; i < FSDEV_IRQ_NUM; i++) {
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
 8008d1a:	e008      	b.n	8008d2e <dcd_int_disable+0x22>
      NVIC_DisableIRQ(fsdev_irq[i]);
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	4a08      	ldr	r2, [pc, #32]	@ (8008d40 <dcd_int_disable+0x34>)
 8008d20:	56d3      	ldrsb	r3, [r2, r3]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7ff ffac 	bl	8008c80 <__NVIC_DisableIRQ>
    for (uint8_t i = 0; i < FSDEV_IRQ_NUM; i++) {
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	73fb      	strb	r3, [r7, #15]
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d9f3      	bls.n	8008d1c <dcd_int_disable+0x10>
    }
  }

  // CMSIS has a membar after disabling interrupts
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	0800d170 	.word	0x0800d170

08008d44 <dcd_init>:
}

//--------------------------------------------------------------------+
// Controller API
//--------------------------------------------------------------------+
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b08a      	sub	sp, #40	@ 0x28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	6039      	str	r1, [r7, #0]
 8008d4e:	71fb      	strb	r3, [r7, #7]
  (void) rh_init;
  // Follow the RM mentions to use a special ordering of PDWN and FRES
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008d50:	2300      	movs	r3, #0
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	e003      	b.n	8008d5e <dcd_init+0x1a>
    asm("NOP");
 8008d56:	bf00      	nop
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	617b      	str	r3, [r7, #20]
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d62:	d9f8      	bls.n	8008d56 <dcd_init+0x12>
  }

  // Perform USB peripheral reset
  FSDEV_REG->CNTR = USB_CNTR_FRES | USB_CNTR_PDWN;
 8008d64:	4b33      	ldr	r3, [pc, #204]	@ (8008e34 <dcd_init+0xf0>)
 8008d66:	2203      	movs	r2, #3
 8008d68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	613b      	str	r3, [r7, #16]
 8008d70:	e003      	b.n	8008d7a <dcd_init+0x36>
    asm("NOP");
 8008d72:	bf00      	nop
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	3301      	adds	r3, #1
 8008d78:	613b      	str	r3, [r7, #16]
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d7e:	d9f8      	bls.n	8008d72 <dcd_init+0x2e>
  }

  FSDEV_REG->CNTR &= ~USB_CNTR_PDWN;
 8008d80:	4b2c      	ldr	r3, [pc, #176]	@ (8008e34 <dcd_init+0xf0>)
 8008d82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	4a2a      	ldr	r2, [pc, #168]	@ (8008e34 <dcd_init+0xf0>)
 8008d8a:	f023 0302 	bic.w	r3, r3, #2
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40

  // Wait startup time, for F042 and F070, this is <= 1 us.
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008d94:	2300      	movs	r3, #0
 8008d96:	60fb      	str	r3, [r7, #12]
 8008d98:	e003      	b.n	8008da2 <dcd_init+0x5e>
    asm("NOP");
 8008d9a:	bf00      	nop
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	60fb      	str	r3, [r7, #12]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2bc7      	cmp	r3, #199	@ 0xc7
 8008da6:	d9f8      	bls.n	8008d9a <dcd_init+0x56>
  }
  FSDEV_REG->CNTR = 0; // Enable USB
 8008da8:	4b22      	ldr	r3, [pc, #136]	@ (8008e34 <dcd_init+0xf0>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if !defined(FSDEV_BUS_32BIT)
  // BTABLE register does not exist any more on 32-bit bus devices
  FSDEV_REG->BTABLE = FSDEV_BTABLE_BASE;
 8008db0:	4b20      	ldr	r3, [pc, #128]	@ (8008e34 <dcd_init+0xf0>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
#endif

  FSDEV_REG->ISTR = 0; // Clear pending interrupts
 8008db8:	4b1e      	ldr	r3, [pc, #120]	@ (8008e34 <dcd_init+0xf0>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  // Reset endpoints to disabled
  for (uint32_t i = 0; i < FSDEV_EP_COUNT; i++) {
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dc4:	e01b      	b.n	8008dfe <dcd_init+0xba>
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	623b      	str	r3, [r7, #32]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61fb      	str	r3, [r7, #28]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline uint32_t ep_read(uint32_t ep_id) {
  return FSDEV_REG->ep[ep_id].reg;
}

TU_ATTR_ALWAYS_INLINE static inline void ep_write(uint32_t ep_id, uint32_t value, bool need_exclusive) {
  if (need_exclusive) {
 8008dd2:	7efb      	ldrb	r3, [r7, #27]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <dcd_init+0x9a>
    dcd_int_disable(0);
 8008dd8:	2000      	movs	r0, #0
 8008dda:	f7ff ff97 	bl	8008d0c <dcd_int_disable>
  }

  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8008dde:	4a15      	ldr	r2, [pc, #84]	@ (8008e34 <dcd_init+0xf0>)
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	b299      	uxth	r1, r3
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]

  if (need_exclusive) {
 8008dea:	7efb      	ldrb	r3, [r7, #27]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <dcd_init+0xb2>
    dcd_int_enable(0);
 8008df0:	2000      	movs	r0, #0
 8008df2:	f7ff ff69 	bl	8008cc8 <dcd_int_enable>
  }
}
 8008df6:	bf00      	nop
 8008df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e00:	2b07      	cmp	r3, #7
 8008e02:	d9e0      	bls.n	8008dc6 <dcd_init+0x82>
    // This doesn't clear all bits since some bits are "toggle", but does set the type to DISABLED.
    ep_write(i, 0u, false);
  }

  FSDEV_REG->CNTR |= USB_CNTR_RESETM | USB_CNTR_ESOFM | USB_CNTR_CTRM |
 8008e04:	4b0b      	ldr	r3, [pc, #44]	@ (8008e34 <dcd_init+0xf0>)
 8008e06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	4909      	ldr	r1, [pc, #36]	@ (8008e34 <dcd_init+0xf0>)
 8008e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e38 <dcd_init+0xf4>)
 8008e10:	4313      	orrs	r3, r2
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	f8a1 3040 	strh.w	r3, [r1, #64]	@ 0x40
      USB_CNTR_SUSPM | USB_CNTR_WKUPM | USB_CNTR_PMAOVRM;
  handle_bus_reset(rhport);
 8008e18:	79fb      	ldrb	r3, [r7, #7]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f864 	bl	8008ee8 <handle_bus_reset>

  // Enable pull-up if supported
  dcd_connect(rhport);
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fd fe39 	bl	8006a9a <dcd_connect>

  return true;
 8008e28:	2301      	movs	r3, #1
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3728      	adds	r7, #40	@ 0x28
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	40005c00 	.word	0x40005c00
 8008e38:	ffffdd00 	.word	0xffffdd00

08008e3c <dcd_sof_enable>:

void dcd_sof_enable(uint8_t rhport, bool en) {
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	460a      	mov	r2, r1
 8008e46:	71fb      	strb	r3, [r7, #7]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	71bb      	strb	r3, [r7, #6]
  (void)rhport;

  if (en) {
 8008e4c:	79bb      	ldrb	r3, [r7, #6]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00a      	beq.n	8008e68 <dcd_sof_enable+0x2c>
    FSDEV_REG->CNTR |= USB_CNTR_SOFM;
 8008e52:	4b0d      	ldr	r3, [pc, #52]	@ (8008e88 <dcd_sof_enable+0x4c>)
 8008e54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	4a0b      	ldr	r2, [pc, #44]	@ (8008e88 <dcd_sof_enable+0x4c>)
 8008e5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
  } else {
    FSDEV_REG->CNTR &= ~USB_CNTR_SOFM;
  }
}
 8008e66:	e009      	b.n	8008e7c <dcd_sof_enable+0x40>
    FSDEV_REG->CNTR &= ~USB_CNTR_SOFM;
 8008e68:	4b07      	ldr	r3, [pc, #28]	@ (8008e88 <dcd_sof_enable+0x4c>)
 8008e6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	4a05      	ldr	r2, [pc, #20]	@ (8008e88 <dcd_sof_enable+0x4c>)
 8008e72:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bc80      	pop	{r7}
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	40005c00 	.word	0x40005c00

08008e8c <dcd_set_address>:

// Receive Set Address request, mcu port must also include status IN response
void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	4603      	mov	r3, r0
 8008e94:	460a      	mov	r2, r1
 8008e96:	71fb      	strb	r3, [r7, #7]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	71bb      	strb	r3, [r7, #6]
  (void)dev_addr;

  // Respond with status
  dcd_edpt_xfer(rhport, TUSB_DIR_IN_MASK | 0x00, NULL, 0);
 8008e9c:	79f8      	ldrb	r0, [r7, #7]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2180      	movs	r1, #128	@ 0x80
 8008ea4:	f001 fd0e 	bl	800a8c4 <dcd_edpt_xfer>

  // DCD can only set address after status for this request is complete.
  // do it at dcd_edpt0_status_complete()
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	71fb      	strb	r3, [r7, #7]
  (void)rhport;

  FSDEV_REG->CNTR |= USB_CNTR_RESUME;
 8008eba:	4b09      	ldr	r3, [pc, #36]	@ (8008ee0 <dcd_remote_wakeup+0x30>)
 8008ebc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	4a07      	ldr	r2, [pc, #28]	@ (8008ee0 <dcd_remote_wakeup+0x30>)
 8008ec4:	f043 0310 	orr.w	r3, r3, #16
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
  remoteWakeCountdown = 4u; // required to be 1 to 15 ms, ESOF should trigger every 1ms.
 8008ece:	4b05      	ldr	r3, [pc, #20]	@ (8008ee4 <dcd_remote_wakeup+0x34>)
 8008ed0:	2204      	movs	r2, #4
 8008ed2:	701a      	strb	r2, [r3, #0]
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bc80      	pop	{r7}
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	40005c00 	.word	0x40005c00
 8008ee4:	2000086c 	.word	0x2000086c

08008ee8 <handle_bus_reset>:

static void handle_bus_reset(uint8_t rhport) {
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	71fb      	strb	r3, [r7, #7]
  FSDEV_REG->DADDR = 0u; // disable USB Function
 8008ef2:	4b19      	ldr	r3, [pc, #100]	@ (8008f58 <handle_bus_reset+0x70>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  for (uint32_t i = 0; i < FSDEV_EP_COUNT; i++) {
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]
 8008efe:	e019      	b.n	8008f34 <handle_bus_reset+0x4c>
    // Clear EP allocation status
    ep_alloc_status[i].ep_num = 0xFF;
 8008f00:	4a16      	ldr	r2, [pc, #88]	@ (8008f5c <handle_bus_reset+0x74>)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	21ff      	movs	r1, #255	@ 0xff
 8008f06:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    ep_alloc_status[i].ep_type = 0xFF;
 8008f0a:	4a14      	ldr	r2, [pc, #80]	@ (8008f5c <handle_bus_reset+0x74>)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	22ff      	movs	r2, #255	@ 0xff
 8008f14:	705a      	strb	r2, [r3, #1]
    ep_alloc_status[i].allocated[0] = false;
 8008f16:	4a11      	ldr	r2, [pc, #68]	@ (8008f5c <handle_bus_reset+0x74>)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4413      	add	r3, r2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	709a      	strb	r2, [r3, #2]
    ep_alloc_status[i].allocated[1] = false;
 8008f22:	4a0e      	ldr	r2, [pc, #56]	@ (8008f5c <handle_bus_reset+0x74>)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	70da      	strb	r2, [r3, #3]
  for (uint32_t i = 0; i < FSDEV_EP_COUNT; i++) {
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3301      	adds	r3, #1
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b07      	cmp	r3, #7
 8008f38:	d9e2      	bls.n	8008f00 <handle_bus_reset+0x18>
  }

  // Reset PMA allocation
  ep_buf_ptr = FSDEV_BTABLE_BASE + 8 * FSDEV_EP_COUNT;
 8008f3a:	4b09      	ldr	r3, [pc, #36]	@ (8008f60 <handle_bus_reset+0x78>)
 8008f3c:	2240      	movs	r2, #64	@ 0x40
 8008f3e:	801a      	strh	r2, [r3, #0]

  edpt0_open(rhport); // open control endpoint (both IN & OUT)
 8008f40:	79fb      	ldrb	r3, [r7, #7]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 ff58 	bl	8009df8 <edpt0_open>

  FSDEV_REG->DADDR = USB_DADDR_EF; // Enable USB Function
 8008f48:	4b03      	ldr	r3, [pc, #12]	@ (8008f58 <handle_bus_reset+0x70>)
 8008f4a:	2280      	movs	r2, #128	@ 0x80
 8008f4c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 8008f50:	bf00      	nop
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	40005c00 	.word	0x40005c00
 8008f5c:	2000084c 	.word	0x2000084c
 8008f60:	2000086e 	.word	0x2000086e

08008f64 <handle_ctr_tx>:

// Handle CTR interrupt for the TX/IN direction
static void handle_ctr_tx(uint32_t ep_id) {
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b092      	sub	sp, #72	@ 0x48
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return FSDEV_REG->ep[ep_id].reg;
 8008f70:	4a50      	ldr	r2, [pc, #320]	@ (80090b4 <handle_ctr_tx+0x150>)
 8008f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f74:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8008f78:	b29b      	uxth	r3, r3
  uint32_t ep_reg = ep_read(ep_id) | USB_EP_CTR_TX | USB_EP_CTR_RX;
 8008f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f82:	647b      	str	r3, [r7, #68]	@ 0x44

  uint8_t const ep_num = ep_reg & USB_EPADDR_FIELD;
 8008f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 030f 	and.w	r3, r3, #15
 8008f8c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f90:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  return &xfer_status[epnum][dir];
 8008f9e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008fa2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008fa6:	0052      	lsls	r2, r2, #1
 8008fa8:	4413      	add	r3, r2
 8008faa:	011b      	lsls	r3, r3, #4
 8008fac:	4a42      	ldr	r2, [pc, #264]	@ (80090b8 <handle_ctr_tx+0x154>)
 8008fae:	4413      	add	r3, r2
  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, TUSB_DIR_IN);
 8008fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fb4:	637b      	str	r3, [r7, #52]	@ 0x34
TU_ATTR_ALWAYS_INLINE static inline void ep_change_dtog(uint32_t* reg, tusb_dir_t dir, uint8_t state) {
  *reg ^= (state << (USB_EP_DTOG_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
}

TU_ATTR_ALWAYS_INLINE static inline bool ep_is_iso(uint32_t reg) {
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 8008fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fc0:	bf0c      	ite	eq
 8008fc2:	2301      	moveq	r3, #1
 8008fc4:	2300      	movne	r3, #0
 8008fc6:	b2db      	uxtb	r3, r3

  if (ep_is_iso(ep_reg)) {
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d03c      	beq.n	8009046 <handle_ctr_tx+0xe2>
    // Ignore spurious interrupts that we don't schedule
    // host can send IN token while there is no data to send, since ISO does not have NAK
    // this will result to zero length packet --> trigger interrupt (which cannot be masked)
    if (!xfer->iso_in_sending) {
 8008fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fce:	7bdb      	ldrb	r3, [r3, #15]
 8008fd0:	f083 0301 	eor.w	r3, r3, #1
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d167      	bne.n	80090aa <handle_ctr_tx+0x146>
      return;
    }
    xfer->iso_in_sending = false;
 8008fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fdc:	2200      	movs	r2, #0
 8008fde:	73da      	strb	r2, [r3, #15]
    uint8_t buf_id = (ep_reg & USB_EP_DTOG_TX) ? 0 : 1;
 8008fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	bf0c      	ite	eq
 8008fea:	2301      	moveq	r3, #1
 8008fec:	2300      	movne	r3, #0
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ff8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8008ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009000:	2300      	movs	r3, #0
 8009002:	84bb      	strh	r3, [r7, #36]	@ 0x24
#ifdef FSDEV_BUS_32BIT
  uint32_t count_addr = FSDEV_BTABLE->ep32[ep_id][buf_id].count_addr;
  count_addr = (count_addr & ~0x03FF0000u) | ((byte_count & 0x3FFu) << 16);
  FSDEV_BTABLE->ep32[ep_id][buf_id].count_addr = count_addr;
#else
  uint16_t cnt = FSDEV_BTABLE->ep16[ep_id][buf_id].count;
 8009004:	492d      	ldr	r1, [pc, #180]	@ (80090bc <handle_ctr_tx+0x158>)
 8009006:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800900a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800900c:	0052      	lsls	r2, r2, #1
 800900e:	4413      	add	r3, r2
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	440b      	add	r3, r1
 8009014:	889b      	ldrh	r3, [r3, #4]
 8009016:	847b      	strh	r3, [r7, #34]	@ 0x22
  cnt = (cnt & ~0x3FFU) | (byte_count & 0x3FFU);
 8009018:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800901a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800901e:	f023 0303 	bic.w	r3, r3, #3
 8009022:	b29a      	uxth	r2, r3
 8009024:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800902a:	b29b      	uxth	r3, r3
 800902c:	4313      	orrs	r3, r2
 800902e:	847b      	strh	r3, [r7, #34]	@ 0x22
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = cnt;
 8009030:	4922      	ldr	r1, [pc, #136]	@ (80090bc <handle_ctr_tx+0x158>)
 8009032:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009036:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009038:	0052      	lsls	r2, r2, #1
 800903a:	4413      	add	r3, r2
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	440b      	add	r3, r1
 8009040:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009042:	809a      	strh	r2, [r3, #4]
#endif
}
 8009044:	bf00      	nop
    btable_set_count(ep_id, buf_id, 0);
  }

  if (xfer->total_len != xfer->queued_len) {
 8009046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009048:	891a      	ldrh	r2, [r3, #8]
 800904a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800904c:	895b      	ldrh	r3, [r3, #10]
 800904e:	429a      	cmp	r2, r3
 8009050:	d006      	beq.n	8009060 <handle_ctr_tx+0xfc>
    dcd_transmit_packet(xfer, ep_id);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	b29b      	uxth	r3, r3
 8009056:	4619      	mov	r1, r3
 8009058:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800905a:	f001 f969 	bl	800a330 <dcd_transmit_packet>
 800905e:	e025      	b.n	80090ac <handle_ctr_tx+0x148>
  } else {
    dcd_event_xfer_complete(0, ep_num | TUSB_DIR_IN_MASK, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 8009060:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009064:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009068:	b2da      	uxtb	r2, r3
 800906a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800906c:	895b      	ldrh	r3, [r3, #10]
 800906e:	2100      	movs	r1, #0
 8009070:	f887 1021 	strb.w	r1, [r7, #33]	@ 0x21
 8009074:	f887 2020 	strb.w	r2, [r7, #32]
 8009078:	61fb      	str	r3, [r7, #28]
 800907a:	2300      	movs	r3, #0
 800907c:	76fb      	strb	r3, [r7, #27]
 800907e:	2301      	movs	r3, #1
 8009080:	76bb      	strb	r3, [r7, #26]
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009082:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009086:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8009088:	2307      	movs	r3, #7
 800908a:	737b      	strb	r3, [r7, #13]
  event.xfer_complete.ep_addr = ep_addr;
 800908c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009090:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 8009096:	7efb      	ldrb	r3, [r7, #27]
 8009098:	747b      	strb	r3, [r7, #17]
  dcd_event_handler(&event, in_isr);
 800909a:	7eba      	ldrb	r2, [r7, #26]
 800909c:	f107 030c 	add.w	r3, r7, #12
 80090a0:	4611      	mov	r1, r2
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe ff10 	bl	8007ec8 <dcd_event_handler>
}
 80090a8:	e000      	b.n	80090ac <handle_ctr_tx+0x148>
      return;
 80090aa:	bf00      	nop
  }
}
 80090ac:	3748      	adds	r7, #72	@ 0x48
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	40005c00 	.word	0x40005c00
 80090b8:	2000074c 	.word	0x2000074c
 80090bc:	40006000 	.word	0x40006000

080090c0 <handle_ctr_setup>:

static void handle_ctr_setup(uint32_t ep_id) {
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b0a2      	sub	sp, #136	@ 0x88
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090cc:	2301      	movs	r3, #1
 80090ce:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  count = FSDEV_BTABLE->ep16[ep_id][buf_id].count;
 80090d2:	497b      	ldr	r1, [pc, #492]	@ (80092c0 <handle_ctr_setup+0x200>)
 80090d4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80090d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80090da:	0052      	lsls	r2, r2, #1
 80090dc:	4413      	add	r3, r2
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	440b      	add	r3, r1
 80090e2:	889b      	ldrh	r3, [r3, #4]
 80090e4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  return count & 0x3FFU;
 80090e8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80090ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090f0:	b29b      	uxth	r3, r3
  uint16_t rx_count = btable_get_count(ep_id, BTABLE_BUF_RX);
 80090f2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80090fa:	2301      	movs	r3, #1
 80090fc:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
  return FSDEV_BTABLE->ep16[ep_id][buf_id].addr;
 8009100:	496f      	ldr	r1, [pc, #444]	@ (80092c0 <handle_ctr_setup+0x200>)
 8009102:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009106:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009108:	0052      	lsls	r2, r2, #1
 800910a:	4413      	add	r3, r2
 800910c:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8009110:	b29b      	uxth	r3, r3
  uint16_t rx_addr = btable_get_addr(ep_id, BTABLE_BUF_RX);
 8009112:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
  uint8_t setup_packet[8] TU_ATTR_ALIGNED(4);

  dcd_read_packet_memory(setup_packet, rx_addr, rx_count);
 8009116:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800911a:	f8b7 1084 	ldrh.w	r1, [r7, #132]	@ 0x84
 800911e:	f107 0318 	add.w	r3, r7, #24
 8009122:	4618      	mov	r0, r3
 8009124:	f001 fd9f 	bl	800ac66 <dcd_read_packet_memory>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800912c:	2300      	movs	r3, #0
 800912e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
  uint32_t reg = FSDEV_REG->ep[ep_id].reg;
 8009132:	4a64      	ldr	r2, [pc, #400]	@ (80092c4 <handle_ctr_setup+0x204>)
 8009134:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009136:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800913a:	b29b      	uxth	r3, r3
 800913c:	677b      	str	r3, [r7, #116]	@ 0x74
  reg |= USB_EP_CTR_TX | USB_EP_CTR_RX;
 800913e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009148:	677b      	str	r3, [r7, #116]	@ 0x74
  reg &= USB_EPREG_MASK;
 800914a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800914c:	f648 738f 	movw	r3, #36751	@ 0x8f8f
 8009150:	4013      	ands	r3, r2
 8009152:	677b      	str	r3, [r7, #116]	@ 0x74
  reg &= ~(1 << (USB_EP_CTR_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009154:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8009158:	2b01      	cmp	r3, #1
 800915a:	d102      	bne.n	8009162 <handle_ctr_setup+0xa2>
 800915c:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 8009160:	e001      	b.n	8009166 <handle_ctr_setup+0xa6>
 8009162:	f46f 4300 	mvn.w	r3, #32768	@ 0x8000
 8009166:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009168:	4013      	ands	r3, r2
 800916a:	677b      	str	r3, [r7, #116]	@ 0x74
 800916c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800916e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009172:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009174:	2300      	movs	r3, #0
 8009176:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  if (need_exclusive) {
 800917a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800917e:	2b00      	cmp	r3, #0
 8009180:	d002      	beq.n	8009188 <handle_ctr_setup+0xc8>
    dcd_int_disable(0);
 8009182:	2000      	movs	r0, #0
 8009184:	f7ff fdc2 	bl	8008d0c <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8009188:	4a4e      	ldr	r2, [pc, #312]	@ (80092c4 <handle_ctr_setup+0x204>)
 800918a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800918c:	b299      	uxth	r1, r3
 800918e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009190:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009194:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <handle_ctr_setup+0xe2>
    dcd_int_enable(0);
 800919c:	2000      	movs	r0, #0
 800919e:	f7ff fd93 	bl	8008cc8 <dcd_int_enable>
}
 80091a2:	bf00      	nop
}
 80091a4:	bf00      	nop

  // Clear CTR RX if another setup packet arrived before this, it will be discarded
  ep_write_clear_ctr(ep_id, TUSB_DIR_OUT);

  // Setup packet should always be 8 bytes. If not, we probably missed the packet
  if (rx_count == 8) {
 80091a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80091aa:	2b08      	cmp	r3, #8
 80091ac:	d11c      	bne.n	80091e8 <handle_ctr_setup+0x128>
 80091ae:	2300      	movs	r3, #0
 80091b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80091b4:	f107 0318 	add.w	r3, r7, #24
 80091b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80091ba:	2301      	movs	r3, #1
 80091bc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  event.rhport = rhport;
 80091c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091c4:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 80091c6:	2306      	movs	r3, #6
 80091c8:	727b      	strb	r3, [r7, #9]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 80091ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80091cc:	f107 030c 	add.w	r3, r7, #12
 80091d0:	6810      	ldr	r0, [r2, #0]
 80091d2:	6851      	ldr	r1, [r2, #4]
 80091d4:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 80091d6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80091da:	f107 0308 	add.w	r3, r7, #8
 80091de:	4611      	mov	r1, r2
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe fe71 	bl	8007ec8 <dcd_event_handler>
}
 80091e6:	e067      	b.n	80092b8 <handle_ctr_setup+0x1f8>
    dcd_event_setup_received(0, (uint8_t*) setup_packet, true);
    // Hardware should reset EP0 RX/TX to NAK and both toggle to 1
  } else {
    // Missed setup packet !!!
    TU_BREAKPOINT();
 80091e8:	4b37      	ldr	r3, [pc, #220]	@ (80092c8 <handle_ctr_setup+0x208>)
 80091ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0301 	and.w	r3, r3, #1
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d000      	beq.n	80091fe <handle_ctr_setup+0x13e>
 80091fc:	be00      	bkpt	0x0000
 80091fe:	2300      	movs	r3, #0
 8009200:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009202:	2301      	movs	r3, #1
 8009204:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009208:	2308      	movs	r3, #8
 800920a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800920e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009212:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009216:	f107 0317 	add.w	r3, r7, #23
 800921a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800921c:	f107 0316 	add.w	r3, r7, #22
 8009220:	63bb      	str	r3, [r7, #56]	@ 0x38
/* Aligned buffer size according to hardware */
TU_ATTR_ALWAYS_INLINE static inline uint16_t pma_align_buffer_size(uint16_t size, uint8_t* blsize, uint8_t* num_block) {
  /* The STM32 full speed USB peripheral supports only a limited set of
   * buffer sizes given by the RX buffer entry format in the USB_BTABLE. */
  uint16_t block_in_bytes;
  if (size > 62) {
 8009222:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009226:	2b3e      	cmp	r3, #62	@ 0x3e
 8009228:	d914      	bls.n	8009254 <handle_ctr_setup+0x194>
    block_in_bytes = 32;
 800922a:	2320      	movs	r3, #32
 800922c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    *blsize = 1;
 800922e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009230:	2201      	movs	r2, #1
 8009232:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 8009234:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009238:	633b      	str	r3, [r7, #48]	@ 0x30
 800923a:	2320      	movs	r3, #32
 800923c:	62fb      	str	r3, [r7, #44]	@ 0x2c
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800923e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009242:	4413      	add	r3, r2
 8009244:	1e5a      	subs	r2, r3, #1
 8009246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009248:	fbb2 f3f3 	udiv	r3, r2, r3
 800924c:	b2da      	uxtb	r2, r3
 800924e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009250:	701a      	strb	r2, [r3, #0]
 8009252:	e013      	b.n	800927c <handle_ctr_setup+0x1bc>
  } else {
    block_in_bytes = 2;
 8009254:	2302      	movs	r3, #2
 8009256:	86fb      	strh	r3, [r7, #54]	@ 0x36
    *blsize = 0;
 8009258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800925a:	2200      	movs	r2, #0
 800925c:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800925e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009262:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009264:	2302      	movs	r3, #2
 8009266:	627b      	str	r3, [r7, #36]	@ 0x24
 8009268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800926a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926c:	4413      	add	r3, r2
 800926e:	1e5a      	subs	r2, r3, #1
 8009270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009272:	fbb2 f3f3 	udiv	r3, r2, r3
 8009276:	b2da      	uxtb	r2, r3
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	701a      	strb	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline void btable_set_rx_bufsize(uint32_t ep_id, uint8_t buf_id, uint16_t wCount) {
  uint8_t blsize, num_block;
  (void) pma_align_buffer_size(wCount, &blsize, &num_block);

  /* Encode into register. When BLSIZE==1, we need to subtract 1 block count */
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	03db      	lsls	r3, r3, #15
 8009280:	b21a      	sxth	r2, r3
 8009282:	7dbb      	ldrb	r3, [r7, #22]
 8009284:	4619      	mov	r1, r3
 8009286:	7dfb      	ldrb	r3, [r7, #23]
 8009288:	1acb      	subs	r3, r1, r3
 800928a:	029b      	lsls	r3, r3, #10
 800928c:	b21b      	sxth	r3, r3
 800928e:	4313      	orrs	r3, r2
 8009290:	b21b      	sxth	r3, r3
 8009292:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (bl_nb == 0) {
 8009294:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009296:	2b00      	cmp	r3, #0
 8009298:	d102      	bne.n	80092a0 <handle_ctr_setup+0x1e0>
    // zlp but 0 is invalid value, set blsize to 1 (32 bytes)
    // Note: lower value can cause PMAOVR on setup with ch32v203
    bl_nb = 1 << 15;
 800929a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800929e:	847b      	strh	r3, [r7, #34]	@ 0x22
#ifdef FSDEV_BUS_32BIT
  uint32_t count_addr = FSDEV_BTABLE->ep32[ep_id][buf_id].count_addr;
  count_addr = (bl_nb << 16) | (count_addr & 0x0000FFFFu);
  FSDEV_BTABLE->ep32[ep_id][buf_id].count_addr = count_addr;
#else
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 80092a0:	4907      	ldr	r1, [pc, #28]	@ (80092c0 <handle_ctr_setup+0x200>)
 80092a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80092a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092a8:	0052      	lsls	r2, r2, #1
 80092aa:	4413      	add	r3, r2
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	440b      	add	r3, r1
 80092b0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80092b2:	809a      	strh	r2, [r3, #4]
#endif

}
 80092b4:	bf00      	nop
}
 80092b6:	bf00      	nop
    edpt0_prepare_setup();
  }
}
 80092b8:	bf00      	nop
 80092ba:	3788      	adds	r7, #136	@ 0x88
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	40006000 	.word	0x40006000
 80092c4:	40005c00 	.word	0x40005c00
 80092c8:	e000edf0 	.word	0xe000edf0

080092cc <handle_ctr_rx>:

// Handle CTR interrupt for the RX/OUT direction
static void handle_ctr_rx(uint32_t ep_id) {
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b0b2      	sub	sp, #200	@ 0xc8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  return FSDEV_REG->ep[ep_id].reg;
 80092da:	4aca      	ldr	r2, [pc, #808]	@ (8009604 <handle_ctr_rx+0x338>)
 80092dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80092e0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80092e4:	b29b      	uxth	r3, r3
  uint32_t ep_reg = ep_read(ep_id) | USB_EP_CTR_TX | USB_EP_CTR_RX;
 80092e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ee:	623b      	str	r3, [r7, #32]
  uint8_t const ep_num = ep_reg & USB_EPADDR_FIELD;
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	f003 030f 	and.w	r3, r3, #15
 80092f8:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
  bool const is_iso = ep_is_iso(ep_reg);
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 8009302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009306:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800930a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800930e:	bf0c      	ite	eq
 8009310:	2301      	moveq	r3, #1
 8009312:	2300      	movne	r3, #0
 8009314:	b2db      	uxtb	r3, r3
 8009316:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
 800931a:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800931e:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
 8009322:	2300      	movs	r3, #0
 8009324:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
  return &xfer_status[epnum][dir];
 8009328:	f897 20b9 	ldrb.w	r2, [r7, #185]	@ 0xb9
 800932c:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8009330:	0052      	lsls	r2, r2, #1
 8009332:	4413      	add	r3, r2
 8009334:	011b      	lsls	r3, r3, #4
 8009336:	4ab4      	ldr	r2, [pc, #720]	@ (8009608 <handle_ctr_rx+0x33c>)
 8009338:	4413      	add	r3, r2
  xfer_ctl_t* xfer = xfer_ctl_ptr(ep_num, TUSB_DIR_OUT);
 800933a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

  uint8_t buf_id;
  if (is_iso) {
 800933e:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00a      	beq.n	800935c <handle_ctr_rx+0x90>
    buf_id = (ep_reg & USB_EP_DTOG_RX) ? 0 : 1; // ISO are double buffered
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800934c:	2b00      	cmp	r3, #0
 800934e:	bf0c      	ite	eq
 8009350:	2301      	moveq	r3, #1
 8009352:	2300      	movne	r3, #0
 8009354:	b2db      	uxtb	r3, r3
 8009356:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 800935a:	e002      	b.n	8009362 <handle_ctr_rx+0x96>
  } else {
    buf_id = BTABLE_BUF_RX;
 800935c:	2301      	movs	r3, #1
 800935e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009368:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800936c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  count = FSDEV_BTABLE->ep16[ep_id][buf_id].count;
 8009370:	49a6      	ldr	r1, [pc, #664]	@ (800960c <handle_ctr_rx+0x340>)
 8009372:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8009376:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800937a:	0052      	lsls	r2, r2, #1
 800937c:	4413      	add	r3, r2
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	440b      	add	r3, r1
 8009382:	889b      	ldrh	r3, [r3, #4]
 8009384:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
  return count & 0x3FFU;
 8009388:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 800938c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009390:	b29b      	uxth	r3, r3
  }
  uint16_t const rx_count = btable_get_count(ep_id, buf_id);
 8009392:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800939c:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80093a0:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
  return FSDEV_BTABLE->ep16[ep_id][buf_id].addr;
 80093a4:	4999      	ldr	r1, [pc, #612]	@ (800960c <handle_ctr_rx+0x340>)
 80093a6:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 80093aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80093ae:	0052      	lsls	r2, r2, #1
 80093b0:	4413      	add	r3, r2
 80093b2:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80093b6:	b29b      	uxth	r3, r3
  uint16_t pma_addr = (uint16_t) btable_get_addr(ep_id, buf_id);
 80093b8:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc

  if (xfer->ff) {
 80093bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00a      	beq.n	80093dc <handle_ctr_rx+0x110>
    dcd_read_packet_memory_ff(xfer->ff, pma_addr, rx_count);
 80093c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093d0:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	@ 0xbc
 80093d4:	4618      	mov	r0, r3
 80093d6:	f001 fd3a 	bl	800ae4e <dcd_read_packet_memory_ff>
 80093da:	e00d      	b.n	80093f8 <handle_ctr_rx+0x12c>
  } else {
    dcd_read_packet_memory(xfer->buffer + xfer->queued_len, pma_addr, rx_count);
 80093dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80093e6:	8952      	ldrh	r2, [r2, #10]
 80093e8:	4413      	add	r3, r2
 80093ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093ee:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	@ 0xbc
 80093f2:	4618      	mov	r0, r3
 80093f4:	f001 fc37 	bl	800ac66 <dcd_read_packet_memory>
  }
  xfer->queued_len += rx_count;
 80093f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093fc:	895a      	ldrh	r2, [r3, #10]
 80093fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009402:	4413      	add	r3, r2
 8009404:	b29a      	uxth	r2, r3
 8009406:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800940a:	815a      	strh	r2, [r3, #10]

  if ((rx_count < xfer->max_packet_size) || (xfer->queued_len >= xfer->total_len)) {
 800940c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009410:	899b      	ldrh	r3, [r3, #12]
 8009412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009416:	429a      	cmp	r2, r3
 8009418:	d308      	bcc.n	800942c <handle_ctr_rx+0x160>
 800941a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800941e:	895a      	ldrh	r2, [r3, #10]
 8009420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009424:	891b      	ldrh	r3, [r3, #8]
 8009426:	429a      	cmp	r2, r3
 8009428:	f0c0 80a2 	bcc.w	8009570 <handle_ctr_rx+0x2a4>
    // all bytes received or short packet

    // For ch32v203: reset rx bufsize to mps to prevent race condition to cause PMAOVR (occurs with msc write10)
    btable_set_rx_bufsize(ep_id, BTABLE_BUF_RX, xfer->max_packet_size);
 800942c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009430:	899a      	ldrh	r2, [r3, #12]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009438:	2301      	movs	r3, #1
 800943a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800943e:	4613      	mov	r3, r2
 8009440:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8009444:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009448:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800944c:	f107 031f 	add.w	r3, r7, #31
 8009450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009454:	f107 031e 	add.w	r3, r7, #30
 8009458:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (size > 62) {
 800945c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009460:	2b3e      	cmp	r3, #62	@ 0x3e
 8009462:	d917      	bls.n	8009494 <handle_ctr_rx+0x1c8>
    block_in_bytes = 32;
 8009464:	2320      	movs	r3, #32
 8009466:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    *blsize = 1;
 800946a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800946e:	2201      	movs	r2, #1
 8009470:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 8009472:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009476:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009478:	2320      	movs	r3, #32
 800947a:	677b      	str	r3, [r7, #116]	@ 0x74
 800947c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800947e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009480:	4413      	add	r3, r2
 8009482:	1e5a      	subs	r2, r3, #1
 8009484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009486:	fbb2 f3f3 	udiv	r3, r2, r3
 800948a:	b2da      	uxtb	r2, r3
 800948c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009490:	701a      	strb	r2, [r3, #0]
 8009492:	e016      	b.n	80094c2 <handle_ctr_rx+0x1f6>
    block_in_bytes = 2;
 8009494:	2302      	movs	r3, #2
 8009496:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    *blsize = 0;
 800949a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800949e:	2200      	movs	r2, #0
 80094a0:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 80094a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80094a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80094a8:	2302      	movs	r3, #2
 80094aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094ac:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80094ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094b0:	4413      	add	r3, r2
 80094b2:	1e5a      	subs	r2, r3, #1
 80094b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80094c0:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 80094c2:	7ffb      	ldrb	r3, [r7, #31]
 80094c4:	03db      	lsls	r3, r3, #15
 80094c6:	b21a      	sxth	r2, r3
 80094c8:	7fbb      	ldrb	r3, [r7, #30]
 80094ca:	4619      	mov	r1, r3
 80094cc:	7ffb      	ldrb	r3, [r7, #31]
 80094ce:	1acb      	subs	r3, r1, r3
 80094d0:	029b      	lsls	r3, r3, #10
 80094d2:	b21b      	sxth	r3, r3
 80094d4:	4313      	orrs	r3, r2
 80094d6:	b21b      	sxth	r3, r3
 80094d8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
  if (bl_nb == 0) {
 80094dc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d103      	bne.n	80094ec <handle_ctr_rx+0x220>
    bl_nb = 1 << 15;
 80094e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094e8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 80094ec:	4947      	ldr	r1, [pc, #284]	@ (800960c <handle_ctr_rx+0x340>)
 80094ee:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80094f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80094f6:	0052      	lsls	r2, r2, #1
 80094f8:	4413      	add	r3, r2
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	440b      	add	r3, r1
 80094fe:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 8009502:	809a      	strh	r2, [r3, #4]
}
 8009504:	bf00      	nop

    dcd_event_xfer_complete(0, ep_num, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 8009506:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800950a:	895b      	ldrh	r3, [r3, #10]
 800950c:	461a      	mov	r2, r3
 800950e:	2300      	movs	r3, #0
 8009510:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8009514:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8009518:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 800951c:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8009520:	2300      	movs	r3, #0
 8009522:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8009526:	2301      	movs	r3, #1
 8009528:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
  event.rhport = rhport;
 800952c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8009530:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8009532:	2307      	movs	r3, #7
 8009534:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8009536:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800953a:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800953c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009540:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8009542:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8009546:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8009548:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800954c:	f107 0310 	add.w	r3, r7, #16
 8009550:	4611      	mov	r1, r2
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe fcb8 	bl	8007ec8 <dcd_event_handler>
}
 8009558:	bf00      	nop

    // ch32 seems to unconditionally accept ZLP on EP0 OUT, which can incorrectly use queued_len of previous
    // transfer. So reset total_len and queued_len to 0.
    xfer->total_len = xfer->queued_len = 0;
 800955a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800955e:	2200      	movs	r2, #0
 8009560:	815a      	strh	r2, [r3, #10]
 8009562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009566:	895a      	ldrh	r2, [r3, #10]
 8009568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800956c:	811a      	strh	r2, [r3, #8]
 800956e:	e0bc      	b.n	80096ea <handle_ctr_rx+0x41e>
  } else {
    // Set endpoint active again for receiving more data. Note that isochronous endpoints stay active always
    if (!is_iso) {
 8009570:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8009574:	f083 0301 	eor.w	r3, r3, #1
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d07a      	beq.n	8009674 <handle_ctr_rx+0x3a8>
      uint16_t const cnt = tu_min16(xfer->total_len - xfer->queued_len, xfer->max_packet_size);
 800957e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009582:	891a      	ldrh	r2, [r3, #8]
 8009584:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009588:	895b      	ldrh	r3, [r3, #10]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	b29a      	uxth	r2, r3
 800958e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009592:	899b      	ldrh	r3, [r3, #12]
 8009594:	87ba      	strh	r2, [r7, #60]	@ 0x3c
 8009596:	877b      	strh	r3, [r7, #58]	@ 0x3a
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8009598:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800959a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800959c:	4293      	cmp	r3, r2
 800959e:	bf28      	it	cs
 80095a0:	4613      	movcs	r3, r2
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80095ac:	2301      	movs	r3, #1
 80095ae:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 80095b2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 80095b6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80095ba:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80095be:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80095c2:	f107 030f 	add.w	r3, r7, #15
 80095c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095c8:	f107 030e 	add.w	r3, r7, #14
 80095cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (size > 62) {
 80095ce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80095d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80095d4:	d91c      	bls.n	8009610 <handle_ctr_rx+0x344>
    block_in_bytes = 32;
 80095d6:	2320      	movs	r3, #32
 80095d8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    *blsize = 1;
 80095dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095de:	2201      	movs	r2, #1
 80095e0:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 80095e2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80095e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095e8:	2320      	movs	r3, #32
 80095ea:	64bb      	str	r3, [r7, #72]	@ 0x48
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 80095ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095f0:	4413      	add	r3, r2
 80095f2:	1e5a      	subs	r2, r3, #1
 80095f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095fe:	701a      	strb	r2, [r3, #0]
 8009600:	e01b      	b.n	800963a <handle_ctr_rx+0x36e>
 8009602:	bf00      	nop
 8009604:	40005c00 	.word	0x40005c00
 8009608:	2000074c 	.word	0x2000074c
 800960c:	40006000 	.word	0x40006000
    block_in_bytes = 2;
 8009610:	2302      	movs	r3, #2
 8009612:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    *blsize = 0;
 8009616:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009618:	2200      	movs	r2, #0
 800961a:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800961c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8009620:	647b      	str	r3, [r7, #68]	@ 0x44
 8009622:	2302      	movs	r3, #2
 8009624:	643b      	str	r3, [r7, #64]	@ 0x40
 8009626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800962a:	4413      	add	r3, r2
 800962c:	1e5a      	subs	r2, r3, #1
 800962e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009630:	fbb2 f3f3 	udiv	r3, r2, r3
 8009634:	b2da      	uxtb	r2, r3
 8009636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009638:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	03db      	lsls	r3, r3, #15
 800963e:	b21a      	sxth	r2, r3
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	4619      	mov	r1, r3
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	1acb      	subs	r3, r1, r3
 8009648:	029b      	lsls	r3, r3, #10
 800964a:	b21b      	sxth	r3, r3
 800964c:	4313      	orrs	r3, r2
 800964e:	b21b      	sxth	r3, r3
 8009650:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (bl_nb == 0) {
 8009652:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <handle_ctr_rx+0x392>
    bl_nb = 1 << 15;
 8009658:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800965c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 800965e:	4925      	ldr	r1, [pc, #148]	@ (80096f4 <handle_ctr_rx+0x428>)
 8009660:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009664:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009666:	0052      	lsls	r2, r2, #1
 8009668:	4413      	add	r3, r2
 800966a:	00db      	lsls	r3, r3, #3
 800966c:	440b      	add	r3, r1
 800966e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8009670:	809a      	strh	r2, [r3, #4]
}
 8009672:	bf00      	nop
      btable_set_rx_bufsize(ep_id, BTABLE_BUF_RX, cnt);
    }
    ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(TUSB_DIR_OUT); // will change RX Status, reserved other toggle bits
 8009674:	6a3a      	ldr	r2, [r7, #32]
 8009676:	f64b 738f 	movw	r3, #49039	@ 0xbf8f
 800967a:	4013      	ands	r3, r2
 800967c:	623b      	str	r3, [r7, #32]
 800967e:	f107 0320 	add.w	r3, r7, #32
 8009682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009684:	2300      	movs	r3, #0
 8009686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800968a:	2303      	movs	r3, #3
 800968c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8009698:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800969c:	2a01      	cmp	r2, #1
 800969e:	d101      	bne.n	80096a4 <handle_ctr_rx+0x3d8>
 80096a0:	2204      	movs	r2, #4
 80096a2:	e000      	b.n	80096a6 <handle_ctr_rx+0x3da>
 80096a4:	220c      	movs	r2, #12
 80096a6:	fa01 f202 	lsl.w	r2, r1, r2
 80096aa:	405a      	eors	r2, r3
 80096ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ae:	601a      	str	r2, [r3, #0]
}
 80096b0:	bf00      	nop
    ep_change_status(&ep_reg, TUSB_DIR_OUT, EP_STAT_VALID);
    ep_write(ep_id, ep_reg, false);
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	637a      	str	r2, [r7, #52]	@ 0x34
 80096b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80096ba:	2300      	movs	r3, #0
 80096bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (need_exclusive) {
 80096c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <handle_ctr_rx+0x402>
    dcd_int_disable(0);
 80096c8:	2000      	movs	r0, #0
 80096ca:	f7ff fb1f 	bl	8008d0c <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 80096ce:	4a0a      	ldr	r2, [pc, #40]	@ (80096f8 <handle_ctr_rx+0x42c>)
 80096d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d2:	b299      	uxth	r1, r3
 80096d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 80096da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <handle_ctr_rx+0x41c>
    dcd_int_enable(0);
 80096e2:	2000      	movs	r0, #0
 80096e4:	f7ff faf0 	bl	8008cc8 <dcd_int_enable>
}
 80096e8:	bf00      	nop
  }
}
 80096ea:	bf00      	nop
 80096ec:	37c8      	adds	r7, #200	@ 0xc8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	40006000 	.word	0x40006000
 80096f8:	40005c00 	.word	0x40005c00

080096fc <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport) {
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b0a4      	sub	sp, #144	@ 0x90
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	71fb      	strb	r3, [r7, #7]
  uint32_t int_status = FSDEV_REG->ISTR;
 8009706:	4bbd      	ldr	r3, [pc, #756]	@ (80099fc <dcd_int_handler+0x300>)
 8009708:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800970c:	b29b      	uxth	r3, r3
 800970e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* Put SOF flag at the beginning of ISR in case to get least amount of jitter if it is used for timing purposes */
  if (int_status & USB_ISTR_SOF) {
 8009712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800971a:	2b00      	cmp	r3, #0
 800971c:	d021      	beq.n	8009762 <dcd_int_handler+0x66>
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_SOF;
 800971e:	4bb7      	ldr	r3, [pc, #732]	@ (80099fc <dcd_int_handler+0x300>)
 8009720:	f64f 52ff 	movw	r2, #65023	@ 0xfdff
 8009724:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    dcd_event_sof(0, FSDEV_REG->FNR & USB_FNR_FN, true);
 8009728:	4bb4      	ldr	r3, [pc, #720]	@ (80099fc <dcd_int_handler+0x300>)
 800972a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800972e:	b29b      	uxth	r3, r3
 8009730:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009734:	2200      	movs	r2, #0
 8009736:	f887 207f 	strb.w	r2, [r7, #127]	@ 0x7f
 800973a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800973c:	2301      	movs	r3, #1
 800973e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8009742:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009746:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 8009748:	2303      	movs	r3, #3
 800974a:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800974c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800974e:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8009750:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8009754:	f107 0308 	add.w	r3, r7, #8
 8009758:	4611      	mov	r1, r2
 800975a:	4618      	mov	r0, r3
 800975c:	f7fe fbb4 	bl	8007ec8 <dcd_event_handler>
}
 8009760:	bf00      	nop
  }

  if (int_status & USB_ISTR_RESET) {
 8009762:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800976a:	2b00      	cmp	r3, #0
 800976c:	d023      	beq.n	80097b6 <dcd_int_handler+0xba>
    // USBRST is start of reset.
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_RESET;
 800976e:	4ba3      	ldr	r3, [pc, #652]	@ (80099fc <dcd_int_handler+0x300>)
 8009770:	f64f 32ff 	movw	r2, #64511	@ 0xfbff
 8009774:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    handle_bus_reset(rhport);
 8009778:	79fb      	ldrb	r3, [r7, #7]
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff fbb4 	bl	8008ee8 <handle_bus_reset>
 8009780:	2300      	movs	r3, #0
 8009782:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8009786:	2300      	movs	r3, #0
 8009788:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800978c:	2301      	movs	r3, #1
 800978e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
  event.rhport = rhport;
 8009792:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8009796:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_BUS_RESET;
 8009798:	2301      	movs	r3, #1
 800979a:	757b      	strb	r3, [r7, #21]
  event.bus_reset.speed = speed;
 800979c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80097a0:	763b      	strb	r3, [r7, #24]
  dcd_event_handler(&event, in_isr);
 80097a2:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 80097a6:	f107 0314 	add.w	r3, r7, #20
 80097aa:	4611      	mov	r1, r2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fe fb8b 	bl	8007ec8 <dcd_event_handler>
}
 80097b2:	bf00      	nop
    dcd_event_bus_reset(0, TUSB_SPEED_FULL, true);
    return; // Don't do the rest of the things here; perhaps they've been cleared?
 80097b4:	e16a      	b.n	8009a8c <dcd_int_handler+0x390>
  }

  if (int_status & USB_ISTR_WKUP) {
 80097b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d032      	beq.n	8009828 <dcd_int_handler+0x12c>
    FSDEV_REG->CNTR &= ~USB_CNTR_LPMODE;
 80097c2:	4b8e      	ldr	r3, [pc, #568]	@ (80099fc <dcd_int_handler+0x300>)
 80097c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	4a8c      	ldr	r2, [pc, #560]	@ (80099fc <dcd_int_handler+0x300>)
 80097cc:	f023 0304 	bic.w	r3, r3, #4
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    FSDEV_REG->CNTR &= ~USB_CNTR_FSUSP;
 80097d6:	4b89      	ldr	r3, [pc, #548]	@ (80099fc <dcd_int_handler+0x300>)
 80097d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80097dc:	b29b      	uxth	r3, r3
 80097de:	4a87      	ldr	r2, [pc, #540]	@ (80099fc <dcd_int_handler+0x300>)
 80097e0:	f023 0308 	bic.w	r3, r3, #8
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40

    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_WKUP;
 80097ea:	4b84      	ldr	r3, [pc, #528]	@ (80099fc <dcd_int_handler+0x300>)
 80097ec:	f64e 72ff 	movw	r2, #61439	@ 0xefff
 80097f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 80097f4:	2300      	movs	r3, #0
 80097f6:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 80097fa:	2305      	movs	r3, #5
 80097fc:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8009800:	2301      	movs	r3, #1
 8009802:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
  event.rhport = rhport;
 8009806:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800980a:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800980e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8009812:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 8009816:	f897 2071 	ldrb.w	r2, [r7, #113]	@ 0x71
 800981a:	f107 0320 	add.w	r3, r7, #32
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f7fe fb51 	bl	8007ec8 <dcd_event_handler>
}
 8009826:	bf00      	nop
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
  }

  if (int_status & USB_ISTR_SUSP) {
 8009828:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800982c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009830:	2b00      	cmp	r3, #0
 8009832:	d032      	beq.n	800989a <dcd_int_handler+0x19e>
    /* Suspend is asserted for both suspend and unplug events. without Vbus monitoring,
     * these events cannot be differentiated, so we only trigger suspend. */

    /* Force low-power mode in the macrocell */
    FSDEV_REG->CNTR |= USB_CNTR_FSUSP;
 8009834:	4b71      	ldr	r3, [pc, #452]	@ (80099fc <dcd_int_handler+0x300>)
 8009836:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800983a:	b29b      	uxth	r3, r3
 800983c:	4a6f      	ldr	r2, [pc, #444]	@ (80099fc <dcd_int_handler+0x300>)
 800983e:	f043 0308 	orr.w	r3, r3, #8
 8009842:	b29b      	uxth	r3, r3
 8009844:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    FSDEV_REG->CNTR |= USB_CNTR_LPMODE;
 8009848:	4b6c      	ldr	r3, [pc, #432]	@ (80099fc <dcd_int_handler+0x300>)
 800984a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800984e:	b29b      	uxth	r3, r3
 8009850:	4a6a      	ldr	r2, [pc, #424]	@ (80099fc <dcd_int_handler+0x300>)
 8009852:	f043 0304 	orr.w	r3, r3, #4
 8009856:	b29b      	uxth	r3, r3
 8009858:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_SUSP;
 800985c:	4b67      	ldr	r3, [pc, #412]	@ (80099fc <dcd_int_handler+0x300>)
 800985e:	f24f 72ff 	movw	r2, #63487	@ 0xf7ff
 8009862:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8009866:	2300      	movs	r3, #0
 8009868:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 800986c:	2304      	movs	r3, #4
 800986e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8009872:	2301      	movs	r3, #1
 8009874:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
  event.rhport = rhport;
 8009878:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800987c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 8009880:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009884:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 8009888:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800988c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009890:	4611      	mov	r1, r2
 8009892:	4618      	mov	r0, r3
 8009894:	f7fe fb18 	bl	8007ec8 <dcd_event_handler>
}
 8009898:	bf00      	nop
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
  }

  if (int_status & USB_ISTR_ESOF) {
 800989a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800989e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 80d4 	beq.w	8009a50 <dcd_int_handler+0x354>
    if (remoteWakeCountdown == 1u) {
 80098a8:	4b55      	ldr	r3, [pc, #340]	@ (8009a00 <dcd_int_handler+0x304>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d109      	bne.n	80098c4 <dcd_int_handler+0x1c8>
      FSDEV_REG->CNTR &= ~USB_CNTR_RESUME;
 80098b0:	4b52      	ldr	r3, [pc, #328]	@ (80099fc <dcd_int_handler+0x300>)
 80098b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	4a50      	ldr	r2, [pc, #320]	@ (80099fc <dcd_int_handler+0x300>)
 80098ba:	f023 0310 	bic.w	r3, r3, #16
 80098be:	b29b      	uxth	r3, r3
 80098c0:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    }
    if (remoteWakeCountdown > 0u) {
 80098c4:	4b4e      	ldr	r3, [pc, #312]	@ (8009a00 <dcd_int_handler+0x304>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d005      	beq.n	80098d8 <dcd_int_handler+0x1dc>
      remoteWakeCountdown--;
 80098cc:	4b4c      	ldr	r3, [pc, #304]	@ (8009a00 <dcd_int_handler+0x304>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	4b4a      	ldr	r3, [pc, #296]	@ (8009a00 <dcd_int_handler+0x304>)
 80098d6:	701a      	strb	r2, [r3, #0]
    }
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_ESOF;
 80098d8:	4b48      	ldr	r3, [pc, #288]	@ (80099fc <dcd_int_handler+0x300>)
 80098da:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80098de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  // loop to handle all pending CTR interrupts
  while (FSDEV_REG->ISTR & USB_ISTR_CTR) {
 80098e2:	e0b5      	b.n	8009a50 <dcd_int_handler+0x354>
    // skip DIR bit, and use CTR TX/RX instead, since there is chance we have both TX/RX completed in one interrupt
    uint32_t const ep_id = FSDEV_REG->ISTR & USB_ISTR_EP_ID;
 80098e4:	4b45      	ldr	r3, [pc, #276]	@ (80099fc <dcd_int_handler+0x300>)
 80098e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	f003 030f 	and.w	r3, r3, #15
 80098f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  return FSDEV_REG->ep[ep_id].reg;
 80098fa:	4a40      	ldr	r2, [pc, #256]	@ (80099fc <dcd_int_handler+0x300>)
 80098fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098fe:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8009902:	b29b      	uxth	r3, r3
    uint32_t const ep_reg = ep_read(ep_id);
 8009904:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (ep_reg & USB_EP_CTR_RX) {
 8009908:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800990c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d04e      	beq.n	80099b2 <dcd_int_handler+0x2b6>
      while (cycle_count > 0U) {
        cycle_count--; // each count take 3 cycles (1 for sub, jump, and compare)
      }
      #endif

      if (ep_reg & USB_EP_SETUP) {
 8009914:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800991c:	2b00      	cmp	r3, #0
 800991e:	d004      	beq.n	800992a <dcd_int_handler+0x22e>
        handle_ctr_setup(ep_id); // CTR will be clear after copied setup packet
 8009920:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8009924:	f7ff fbcc 	bl	80090c0 <handle_ctr_setup>
 8009928:	e043      	b.n	80099b2 <dcd_int_handler+0x2b6>
 800992a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800992e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009930:	2300      	movs	r3, #0
 8009932:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
  uint32_t reg = FSDEV_REG->ep[ep_id].reg;
 8009936:	4a31      	ldr	r2, [pc, #196]	@ (80099fc <dcd_int_handler+0x300>)
 8009938:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800993a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800993e:	b29b      	uxth	r3, r3
 8009940:	65fb      	str	r3, [r7, #92]	@ 0x5c
  reg |= USB_EP_CTR_TX | USB_EP_CTR_RX;
 8009942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800994c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  reg &= USB_EPREG_MASK;
 800994e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009950:	f648 738f 	movw	r3, #36751	@ 0x8f8f
 8009954:	4013      	ands	r3, r2
 8009956:	65fb      	str	r3, [r7, #92]	@ 0x5c
  reg &= ~(1 << (USB_EP_CTR_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009958:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800995c:	2b01      	cmp	r3, #1
 800995e:	d102      	bne.n	8009966 <dcd_int_handler+0x26a>
 8009960:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 8009964:	e001      	b.n	800996a <dcd_int_handler+0x26e>
 8009966:	f46f 4300 	mvn.w	r3, #32768	@ 0x8000
 800996a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800996c:	4013      	ands	r3, r2
 800996e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009972:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009974:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009976:	657b      	str	r3, [r7, #84]	@ 0x54
 8009978:	2300      	movs	r3, #0
 800997a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  if (need_exclusive) {
 800997e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <dcd_int_handler+0x290>
    dcd_int_disable(0);
 8009986:	2000      	movs	r0, #0
 8009988:	f7ff f9c0 	bl	8008d0c <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800998c:	4a1b      	ldr	r2, [pc, #108]	@ (80099fc <dcd_int_handler+0x300>)
 800998e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009990:	b299      	uxth	r1, r3
 8009992:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009994:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009998:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <dcd_int_handler+0x2aa>
    dcd_int_enable(0);
 80099a0:	2000      	movs	r0, #0
 80099a2:	f7ff f991 	bl	8008cc8 <dcd_int_enable>
}
 80099a6:	bf00      	nop
}
 80099a8:	bf00      	nop
      } else {
        ep_write_clear_ctr(ep_id, TUSB_DIR_OUT);
        handle_ctr_rx(ep_id);
 80099aa:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80099ae:	f7ff fc8d 	bl	80092cc <handle_ctr_rx>
      }
    }

    if (ep_reg & USB_EP_CTR_TX) {
 80099b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80099b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d048      	beq.n	8009a50 <dcd_int_handler+0x354>
 80099be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099c4:	2301      	movs	r3, #1
 80099c6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint32_t reg = FSDEV_REG->ep[ep_id].reg;
 80099ca:	4a0c      	ldr	r2, [pc, #48]	@ (80099fc <dcd_int_handler+0x300>)
 80099cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ce:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	647b      	str	r3, [r7, #68]	@ 0x44
  reg |= USB_EP_CTR_TX | USB_EP_CTR_RX;
 80099d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099e0:	647b      	str	r3, [r7, #68]	@ 0x44
  reg &= USB_EPREG_MASK;
 80099e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099e4:	f648 738f 	movw	r3, #36751	@ 0x8f8f
 80099e8:	4013      	ands	r3, r2
 80099ea:	647b      	str	r3, [r7, #68]	@ 0x44
  reg &= ~(1 << (USB_EP_CTR_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 80099ec:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d107      	bne.n	8009a04 <dcd_int_handler+0x308>
 80099f4:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 80099f8:	e006      	b.n	8009a08 <dcd_int_handler+0x30c>
 80099fa:	bf00      	nop
 80099fc:	40005c00 	.word	0x40005c00
 8009a00:	2000086c 	.word	0x2000086c
 8009a04:	f46f 4300 	mvn.w	r3, #32768	@ 0x8000
 8009a08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a10:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a16:	2300      	movs	r3, #0
 8009a18:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (need_exclusive) {
 8009a1c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <dcd_int_handler+0x32e>
    dcd_int_disable(0);
 8009a24:	2000      	movs	r0, #0
 8009a26:	f7ff f971 	bl	8008d0c <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8009a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8009a94 <dcd_int_handler+0x398>)
 8009a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a2e:	b299      	uxth	r1, r3
 8009a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a32:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009a36:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <dcd_int_handler+0x348>
    dcd_int_enable(0);
 8009a3e:	2000      	movs	r0, #0
 8009a40:	f7ff f942 	bl	8008cc8 <dcd_int_enable>
}
 8009a44:	bf00      	nop
}
 8009a46:	bf00      	nop
      ep_write_clear_ctr(ep_id, TUSB_DIR_IN);
      handle_ctr_tx(ep_id);
 8009a48:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8009a4c:	f7ff fa8a 	bl	8008f64 <handle_ctr_tx>
  while (FSDEV_REG->ISTR & USB_ISTR_CTR) {
 8009a50:	4b10      	ldr	r3, [pc, #64]	@ (8009a94 <dcd_int_handler+0x398>)
 8009a52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	b21b      	sxth	r3, r3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f6ff af42 	blt.w	80098e4 <dcd_int_handler+0x1e8>
    }
  }

  if (int_status & USB_ISTR_PMAOVR) {
 8009a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00f      	beq.n	8009a8c <dcd_int_handler+0x390>
    TU_BREAKPOINT();
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a98 <dcd_int_handler+0x39c>)
 8009a6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0301 	and.w	r3, r3, #1
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d000      	beq.n	8009a82 <dcd_int_handler+0x386>
 8009a80:	be00      	bkpt	0x0000
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_PMAOVR;
 8009a82:	4b04      	ldr	r3, [pc, #16]	@ (8009a94 <dcd_int_handler+0x398>)
 8009a84:	f64b 72ff 	movw	r2, #49151	@ 0xbfff
 8009a88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 8009a8c:	3790      	adds	r7, #144	@ 0x90
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	40005c00 	.word	0x40005c00
 8009a98:	e000edf0 	.word	0xe000edf0

08009a9c <dcd_edpt0_status_complete>:
// Endpoint API
//--------------------------------------------------------------------+

// Invoked when a control transfer's status stage is complete.
// May help DCD to prepare for next control transfer, this API is optional.
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const *request) {
 8009a9c:	b480      	push	{r7}
 8009a9e:	b08f      	sub	sp, #60	@ 0x3c
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	6039      	str	r1, [r7, #0]
 8009aa6:	71fb      	strb	r3, [r7, #7]
  (void)rhport;

  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	f003 031f 	and.w	r3, r3, #31
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d117      	bne.n	8009ae6 <dcd_edpt0_status_complete+0x4a>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009abe:	b2db      	uxtb	r3, r3
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d110      	bne.n	8009ae6 <dcd_edpt0_status_complete+0x4a>
      request->bRequest == TUSB_REQ_SET_ADDRESS) {
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	785b      	ldrb	r3, [r3, #1]
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8009ac8:	2b05      	cmp	r3, #5
 8009aca:	d10c      	bne.n	8009ae6 <dcd_edpt0_status_complete+0x4a>
    uint8_t const dev_addr = (uint8_t)request->wValue;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	885b      	ldrh	r3, [r3, #2]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    FSDEV_REG->DADDR = (USB_DADDR_EF | dev_addr);
 8009ad6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ada:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ade:	b2da      	uxtb	r2, r3
 8009ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8009ba0 <dcd_edpt0_status_complete+0x104>)
 8009ae2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009aea:	2301      	movs	r3, #1
 8009aec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009af0:	2308      	movs	r3, #8
 8009af2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009af4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009af6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009af8:	f107 0309 	add.w	r3, r7, #9
 8009afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009afe:	f107 0308 	add.w	r3, r7, #8
 8009b02:	623b      	str	r3, [r7, #32]
  if (size > 62) {
 8009b04:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009b06:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b08:	d913      	bls.n	8009b32 <dcd_edpt0_status_complete+0x96>
    block_in_bytes = 32;
 8009b0a:	2320      	movs	r3, #32
 8009b0c:	83fb      	strh	r3, [r7, #30]
    *blsize = 1;
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b10:	2201      	movs	r2, #1
 8009b12:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 8009b14:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009b16:	61bb      	str	r3, [r7, #24]
 8009b18:	2320      	movs	r3, #32
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	4413      	add	r3, r2
 8009b22:	1e5a      	subs	r2, r3, #1
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	701a      	strb	r2, [r3, #0]
 8009b30:	e012      	b.n	8009b58 <dcd_edpt0_status_complete+0xbc>
    block_in_bytes = 2;
 8009b32:	2302      	movs	r3, #2
 8009b34:	83fb      	strh	r3, [r7, #30]
    *blsize = 0;
 8009b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b38:	2200      	movs	r2, #0
 8009b3a:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 8009b3c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009b3e:	613b      	str	r3, [r7, #16]
 8009b40:	2302      	movs	r3, #2
 8009b42:	60fb      	str	r3, [r7, #12]
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	4413      	add	r3, r2
 8009b4a:	1e5a      	subs	r2, r3, #1
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 8009b58:	7a7b      	ldrb	r3, [r7, #9]
 8009b5a:	03db      	lsls	r3, r3, #15
 8009b5c:	b21a      	sxth	r2, r3
 8009b5e:	7a3b      	ldrb	r3, [r7, #8]
 8009b60:	4619      	mov	r1, r3
 8009b62:	7a7b      	ldrb	r3, [r7, #9]
 8009b64:	1acb      	subs	r3, r1, r3
 8009b66:	029b      	lsls	r3, r3, #10
 8009b68:	b21b      	sxth	r3, r3
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	b21b      	sxth	r3, r3
 8009b6e:	817b      	strh	r3, [r7, #10]
  if (bl_nb == 0) {
 8009b70:	897b      	ldrh	r3, [r7, #10]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d102      	bne.n	8009b7c <dcd_edpt0_status_complete+0xe0>
    bl_nb = 1 << 15;
 8009b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b7a:	817b      	strh	r3, [r7, #10]
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 8009b7c:	4909      	ldr	r1, [pc, #36]	@ (8009ba4 <dcd_edpt0_status_complete+0x108>)
 8009b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b84:	0052      	lsls	r2, r2, #1
 8009b86:	4413      	add	r3, r2
 8009b88:	00db      	lsls	r3, r3, #3
 8009b8a:	440b      	add	r3, r1
 8009b8c:	897a      	ldrh	r2, [r7, #10]
 8009b8e:	809a      	strh	r2, [r3, #4]
}
 8009b90:	bf00      	nop
}
 8009b92:	bf00      	nop
  }

  edpt0_prepare_setup();
}
 8009b94:	bf00      	nop
 8009b96:	373c      	adds	r7, #60	@ 0x3c
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bc80      	pop	{r7}
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	40005c00 	.word	0x40005c00
 8009ba4:	40006000 	.word	0x40006000

08009ba8 <dcd_pma_alloc>:
 * Allocate a section of PMA
 * In case of double buffering, high 16bit is the address of 2nd buffer
 * During failure, TU_ASSERT is used. If this happens, rework/reallocate memory manually.
 */
static uint32_t dcd_pma_alloc(uint16_t len, bool dbuf)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b08e      	sub	sp, #56	@ 0x38
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	460a      	mov	r2, r1
 8009bb2:	80fb      	strh	r3, [r7, #6]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	717b      	strb	r3, [r7, #5]
 8009bb8:	88fb      	ldrh	r3, [r7, #6]
 8009bba:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009bbc:	f107 030b 	add.w	r3, r7, #11
 8009bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bc2:	f107 030a 	add.w	r3, r7, #10
 8009bc6:	623b      	str	r3, [r7, #32]
  if (size > 62) {
 8009bc8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009bca:	2b3e      	cmp	r3, #62	@ 0x3e
 8009bcc:	d913      	bls.n	8009bf6 <dcd_pma_alloc+0x4e>
    block_in_bytes = 32;
 8009bce:	2320      	movs	r3, #32
 8009bd0:	83fb      	strh	r3, [r7, #30]
    *blsize = 1;
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 8009bd8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009bda:	61bb      	str	r3, [r7, #24]
 8009bdc:	2320      	movs	r3, #32
 8009bde:	617b      	str	r3, [r7, #20]
 8009be0:	69ba      	ldr	r2, [r7, #24]
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	4413      	add	r3, r2
 8009be6:	1e5a      	subs	r2, r3, #1
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	701a      	strb	r2, [r3, #0]
 8009bf4:	e012      	b.n	8009c1c <dcd_pma_alloc+0x74>
    block_in_bytes = 2;
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	83fb      	strh	r3, [r7, #30]
    *blsize = 0;
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 8009c00:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009c02:	613b      	str	r3, [r7, #16]
 8009c04:	2302      	movs	r3, #2
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	1e5a      	subs	r2, r3, #1
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	701a      	strb	r2, [r3, #0]
  return (*num_block) * block_in_bytes;
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	461a      	mov	r2, r3
 8009c22:	8bfb      	ldrh	r3, [r7, #30]
 8009c24:	fb02 f303 	mul.w	r3, r2, r3
 8009c28:	b29b      	uxth	r3, r3
  uint8_t blsize, num_block;
  uint16_t aligned_len = pma_align_buffer_size(len, &blsize, &num_block);
 8009c2a:	867b      	strh	r3, [r7, #50]	@ 0x32
  (void) blsize;
  (void) num_block;

  uint32_t addr = ep_buf_ptr;
 8009c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8009c98 <dcd_pma_alloc+0xf0>)
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	637b      	str	r3, [r7, #52]	@ 0x34
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + aligned_len); // increment buffer pointer
 8009c32:	4b19      	ldr	r3, [pc, #100]	@ (8009c98 <dcd_pma_alloc+0xf0>)
 8009c34:	881a      	ldrh	r2, [r3, #0]
 8009c36:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009c38:	4413      	add	r3, r2
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	4b16      	ldr	r3, [pc, #88]	@ (8009c98 <dcd_pma_alloc+0xf0>)
 8009c3e:	801a      	strh	r2, [r3, #0]

  if (dbuf) {
 8009c40:	797b      	ldrb	r3, [r7, #5]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00c      	beq.n	8009c60 <dcd_pma_alloc+0xb8>
    addr |= ((uint32_t)ep_buf_ptr) << 16;
 8009c46:	4b14      	ldr	r3, [pc, #80]	@ (8009c98 <dcd_pma_alloc+0xf0>)
 8009c48:	881b      	ldrh	r3, [r3, #0]
 8009c4a:	041b      	lsls	r3, r3, #16
 8009c4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	637b      	str	r3, [r7, #52]	@ 0x34
    ep_buf_ptr = (uint16_t)(ep_buf_ptr + aligned_len); // increment buffer pointer
 8009c52:	4b11      	ldr	r3, [pc, #68]	@ (8009c98 <dcd_pma_alloc+0xf0>)
 8009c54:	881a      	ldrh	r2, [r3, #0]
 8009c56:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009c58:	4413      	add	r3, r2
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8009c98 <dcd_pma_alloc+0xf0>)
 8009c5e:	801a      	strh	r2, [r3, #0]
  }

  // Verify packet buffer is not overflowed
  TU_ASSERT(ep_buf_ptr <= FSDEV_PMA_SIZE, 0xFFFF);
 8009c60:	4b0d      	ldr	r3, [pc, #52]	@ (8009c98 <dcd_pma_alloc+0xf0>)
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c68:	d911      	bls.n	8009c8e <dcd_pma_alloc+0xe6>
 8009c6a:	f240 12fd 	movw	r2, #509	@ 0x1fd
 8009c6e:	490b      	ldr	r1, [pc, #44]	@ (8009c9c <dcd_pma_alloc+0xf4>)
 8009c70:	480b      	ldr	r0, [pc, #44]	@ (8009ca0 <dcd_pma_alloc+0xf8>)
 8009c72:	f001 fcdf 	bl	800b634 <iprintf>
 8009c76:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca4 <dcd_pma_alloc+0xfc>)
 8009c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d000      	beq.n	8009c88 <dcd_pma_alloc+0xe0>
 8009c86:	be00      	bkpt	0x0000
 8009c88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c8c:	e000      	b.n	8009c90 <dcd_pma_alloc+0xe8>

  return addr;
 8009c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3738      	adds	r7, #56	@ 0x38
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	2000086e 	.word	0x2000086e
 8009c9c:	0800d174 	.word	0x0800d174
 8009ca0:	0800cd28 	.word	0x0800cd28
 8009ca4:	e000edf0 	.word	0xe000edf0

08009ca8 <dcd_ep_alloc>:

/***
 * Allocate hardware endpoint
 */
static uint8_t dcd_ep_alloc(uint8_t ep_addr, uint8_t ep_type)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	460a      	mov	r2, r1
 8009cb2:	71fb      	strb	r3, [r7, #7]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	71bb      	strb	r3, [r7, #6]
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009cbc:	7bbb      	ldrb	r3, [r7, #14]
 8009cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cc2:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009cc4:	75bb      	strb	r3, [r7, #22]
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009cca:	7bfb      	ldrb	r3, [r7, #15]
 8009ccc:	09db      	lsrs	r3, r3, #7
 8009cce:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009cd0:	757b      	strb	r3, [r7, #21]

  for (uint8_t i = 0; i < FSDEV_EP_COUNT; i++) {
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	75fb      	strb	r3, [r7, #23]
 8009cd6:	e070      	b.n	8009dba <dcd_ep_alloc+0x112>
    // Check if already allocated
    if (ep_alloc_status[i].allocated[dir] &&
 8009cd8:	7dfa      	ldrb	r2, [r7, #23]
 8009cda:	7d7b      	ldrb	r3, [r7, #21]
 8009cdc:	4942      	ldr	r1, [pc, #264]	@ (8009de8 <dcd_ep_alloc+0x140>)
 8009cde:	0092      	lsls	r2, r2, #2
 8009ce0:	440a      	add	r2, r1
 8009ce2:	4413      	add	r3, r2
 8009ce4:	3302      	adds	r3, #2
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d010      	beq.n	8009d0e <dcd_ep_alloc+0x66>
        ep_alloc_status[i].ep_type == ep_type &&
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
 8009cee:	4a3e      	ldr	r2, [pc, #248]	@ (8009de8 <dcd_ep_alloc+0x140>)
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	785b      	ldrb	r3, [r3, #1]
    if (ep_alloc_status[i].allocated[dir] &&
 8009cf6:	79ba      	ldrb	r2, [r7, #6]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d108      	bne.n	8009d0e <dcd_ep_alloc+0x66>
        ep_alloc_status[i].ep_num == epnum) {
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
 8009cfe:	4a3a      	ldr	r2, [pc, #232]	@ (8009de8 <dcd_ep_alloc+0x140>)
 8009d00:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
        ep_alloc_status[i].ep_type == ep_type &&
 8009d04:	7dba      	ldrb	r2, [r7, #22]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d101      	bne.n	8009d0e <dcd_ep_alloc+0x66>
      return i;
 8009d0a:	7dfb      	ldrb	r3, [r7, #23]
 8009d0c:	e068      	b.n	8009de0 <dcd_ep_alloc+0x138>
    }

    // If EP of current direction is not allocated
    // Except for ISO endpoint, both direction should be free
    if (!ep_alloc_status[i].allocated[dir] &&
 8009d0e:	7dfa      	ldrb	r2, [r7, #23]
 8009d10:	7d7b      	ldrb	r3, [r7, #21]
 8009d12:	4935      	ldr	r1, [pc, #212]	@ (8009de8 <dcd_ep_alloc+0x140>)
 8009d14:	0092      	lsls	r2, r2, #2
 8009d16:	440a      	add	r2, r1
 8009d18:	4413      	add	r3, r2
 8009d1a:	3302      	adds	r3, #2
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	f083 0301 	eor.w	r3, r3, #1
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d045      	beq.n	8009db4 <dcd_ep_alloc+0x10c>
 8009d28:	79bb      	ldrb	r3, [r7, #6]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d110      	bne.n	8009d50 <dcd_ep_alloc+0xa8>
        (ep_type != TUSB_XFER_ISOCHRONOUS || !ep_alloc_status[i].allocated[dir ^ 1])) {
 8009d2e:	7dfb      	ldrb	r3, [r7, #23]
 8009d30:	7d7a      	ldrb	r2, [r7, #21]
 8009d32:	f082 0201 	eor.w	r2, r2, #1
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	4611      	mov	r1, r2
 8009d3a:	4a2b      	ldr	r2, [pc, #172]	@ (8009de8 <dcd_ep_alloc+0x140>)
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	440b      	add	r3, r1
 8009d42:	3302      	adds	r3, #2
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	f083 0301 	eor.w	r3, r3, #1
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d031      	beq.n	8009db4 <dcd_ep_alloc+0x10c>
      // Check if EP number is the same
      if (ep_alloc_status[i].ep_num == 0xFF || ep_alloc_status[i].ep_num == epnum) {
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	4a25      	ldr	r2, [pc, #148]	@ (8009de8 <dcd_ep_alloc+0x140>)
 8009d54:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8009d58:	2bff      	cmp	r3, #255	@ 0xff
 8009d5a:	d006      	beq.n	8009d6a <dcd_ep_alloc+0xc2>
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
 8009d5e:	4a22      	ldr	r2, [pc, #136]	@ (8009de8 <dcd_ep_alloc+0x140>)
 8009d60:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8009d64:	7dba      	ldrb	r2, [r7, #22]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d124      	bne.n	8009db4 <dcd_ep_alloc+0x10c>
        // One EP pair has to be the same type
        if (ep_alloc_status[i].ep_type == 0xFF || ep_alloc_status[i].ep_type == ep_type) {
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8009de8 <dcd_ep_alloc+0x140>)
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	785b      	ldrb	r3, [r3, #1]
 8009d74:	2bff      	cmp	r3, #255	@ 0xff
 8009d76:	d007      	beq.n	8009d88 <dcd_ep_alloc+0xe0>
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
 8009d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8009de8 <dcd_ep_alloc+0x140>)
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	785b      	ldrb	r3, [r3, #1]
 8009d82:	79ba      	ldrb	r2, [r7, #6]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d115      	bne.n	8009db4 <dcd_ep_alloc+0x10c>
          ep_alloc_status[i].ep_num = epnum;
 8009d88:	7dfb      	ldrb	r3, [r7, #23]
 8009d8a:	4917      	ldr	r1, [pc, #92]	@ (8009de8 <dcd_ep_alloc+0x140>)
 8009d8c:	7dba      	ldrb	r2, [r7, #22]
 8009d8e:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
          ep_alloc_status[i].ep_type = ep_type;
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	4a14      	ldr	r2, [pc, #80]	@ (8009de8 <dcd_ep_alloc+0x140>)
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	79ba      	ldrb	r2, [r7, #6]
 8009d9c:	705a      	strb	r2, [r3, #1]
          ep_alloc_status[i].allocated[dir] = true;
 8009d9e:	7dfa      	ldrb	r2, [r7, #23]
 8009da0:	7d7b      	ldrb	r3, [r7, #21]
 8009da2:	4911      	ldr	r1, [pc, #68]	@ (8009de8 <dcd_ep_alloc+0x140>)
 8009da4:	0092      	lsls	r2, r2, #2
 8009da6:	440a      	add	r2, r1
 8009da8:	4413      	add	r3, r2
 8009daa:	3302      	adds	r3, #2
 8009dac:	2201      	movs	r2, #1
 8009dae:	701a      	strb	r2, [r3, #0]

          return i;
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
 8009db2:	e015      	b.n	8009de0 <dcd_ep_alloc+0x138>
  for (uint8_t i = 0; i < FSDEV_EP_COUNT; i++) {
 8009db4:	7dfb      	ldrb	r3, [r7, #23]
 8009db6:	3301      	adds	r3, #1
 8009db8:	75fb      	strb	r3, [r7, #23]
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
 8009dbc:	2b07      	cmp	r3, #7
 8009dbe:	d98b      	bls.n	8009cd8 <dcd_ep_alloc+0x30>
      }
    }
  }

  // Allocation failed
  TU_ASSERT(0);
 8009dc0:	f240 2225 	movw	r2, #549	@ 0x225
 8009dc4:	4909      	ldr	r1, [pc, #36]	@ (8009dec <dcd_ep_alloc+0x144>)
 8009dc6:	480a      	ldr	r0, [pc, #40]	@ (8009df0 <dcd_ep_alloc+0x148>)
 8009dc8:	f001 fc34 	bl	800b634 <iprintf>
 8009dcc:	4b09      	ldr	r3, [pc, #36]	@ (8009df4 <dcd_ep_alloc+0x14c>)
 8009dce:	613b      	str	r3, [r7, #16]
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d000      	beq.n	8009dde <dcd_ep_alloc+0x136>
 8009ddc:	be00      	bkpt	0x0000
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	2000084c 	.word	0x2000084c
 8009dec:	0800d184 	.word	0x0800d184
 8009df0:	0800cd28 	.word	0x0800cd28
 8009df4:	e000edf0 	.word	0xe000edf0

08009df8 <edpt0_open>:

void edpt0_open(uint8_t rhport) {
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b09c      	sub	sp, #112	@ 0x70
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dcd_ep_alloc(0x0, TUSB_XFER_CONTROL);
 8009e02:	2100      	movs	r1, #0
 8009e04:	2000      	movs	r0, #0
 8009e06:	f7ff ff4f 	bl	8009ca8 <dcd_ep_alloc>
  dcd_ep_alloc(0x80, TUSB_XFER_CONTROL);
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	2080      	movs	r0, #128	@ 0x80
 8009e0e:	f7ff ff4b 	bl	8009ca8 <dcd_ep_alloc>

  xfer_status[0][0].max_packet_size = CFG_TUD_ENDPOINT0_SIZE;
 8009e12:	4b7e      	ldr	r3, [pc, #504]	@ (800a00c <edpt0_open+0x214>)
 8009e14:	2240      	movs	r2, #64	@ 0x40
 8009e16:	819a      	strh	r2, [r3, #12]
  xfer_status[0][0].ep_idx = 0;
 8009e18:	4b7c      	ldr	r3, [pc, #496]	@ (800a00c <edpt0_open+0x214>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	739a      	strb	r2, [r3, #14]

  xfer_status[0][1].max_packet_size = CFG_TUD_ENDPOINT0_SIZE;
 8009e1e:	4b7b      	ldr	r3, [pc, #492]	@ (800a00c <edpt0_open+0x214>)
 8009e20:	2240      	movs	r2, #64	@ 0x40
 8009e22:	839a      	strh	r2, [r3, #28]
  xfer_status[0][1].ep_idx = 0;
 8009e24:	4b79      	ldr	r3, [pc, #484]	@ (800a00c <edpt0_open+0x214>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	779a      	strb	r2, [r3, #30]

  uint16_t pma_addr0 = dcd_pma_alloc(CFG_TUD_ENDPOINT0_SIZE, false);
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	2040      	movs	r0, #64	@ 0x40
 8009e2e:	f7ff febb 	bl	8009ba8 <dcd_pma_alloc>
 8009e32:	4603      	mov	r3, r0
 8009e34:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t pma_addr1 = dcd_pma_alloc(CFG_TUD_ENDPOINT0_SIZE, false);
 8009e38:	2100      	movs	r1, #0
 8009e3a:	2040      	movs	r0, #64	@ 0x40
 8009e3c:	f7ff feb4 	bl	8009ba8 <dcd_pma_alloc>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8009e46:	2300      	movs	r3, #0
 8009e48:	617b      	str	r3, [r7, #20]
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	74fb      	strb	r3, [r7, #19]
 8009e4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009e52:	823b      	strh	r3, [r7, #16]
  FSDEV_BTABLE->ep16[ep_id][buf_id].addr = addr;
 8009e54:	496e      	ldr	r1, [pc, #440]	@ (800a010 <edpt0_open+0x218>)
 8009e56:	7cfb      	ldrb	r3, [r7, #19]
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	0052      	lsls	r2, r2, #1
 8009e5c:	4413      	add	r3, r2
 8009e5e:	8a3a      	ldrh	r2, [r7, #16]
 8009e60:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
}
 8009e64:	bf00      	nop
 8009e66:	2300      	movs	r3, #0
 8009e68:	61fb      	str	r3, [r7, #28]
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	76fb      	strb	r3, [r7, #27]
 8009e6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e72:	833b      	strh	r3, [r7, #24]
  FSDEV_BTABLE->ep16[ep_id][buf_id].addr = addr;
 8009e74:	4966      	ldr	r1, [pc, #408]	@ (800a010 <edpt0_open+0x218>)
 8009e76:	7efb      	ldrb	r3, [r7, #27]
 8009e78:	69fa      	ldr	r2, [r7, #28]
 8009e7a:	0052      	lsls	r2, r2, #1
 8009e7c:	4413      	add	r3, r2
 8009e7e:	8b3a      	ldrh	r2, [r7, #24]
 8009e80:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
}
 8009e84:	bf00      	nop
 8009e86:	2300      	movs	r3, #0
 8009e88:	623b      	str	r3, [r7, #32]
  return FSDEV_REG->ep[ep_id].reg;
 8009e8a:	4a62      	ldr	r2, [pc, #392]	@ (800a014 <edpt0_open+0x21c>)
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8009e92:	b29b      	uxth	r3, r3

  btable_set_addr(0, BTABLE_BUF_RX, pma_addr0);
  btable_set_addr(0, BTABLE_BUF_TX, pma_addr1);

  uint32_t ep_reg = ep_read(0) & ~USB_EPREG_MASK; // only get toggle bits
 8009e94:	f423 430f 	bic.w	r3, r3, #36608	@ 0x8f00
 8009e98:	f023 038f 	bic.w	r3, r3, #143	@ 0x8f
 8009e9c:	60fb      	str	r3, [r7, #12]
  ep_reg |= USB_EP_CONTROL;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009ea4:	60fb      	str	r3, [r7, #12]
 8009ea6:	f107 030c 	add.w	r3, r7, #12
 8009eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009eac:	2301      	movs	r3, #1
 8009eae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8009ec0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009ec4:	2a01      	cmp	r2, #1
 8009ec6:	d101      	bne.n	8009ecc <edpt0_open+0xd4>
 8009ec8:	2204      	movs	r2, #4
 8009eca:	e000      	b.n	8009ece <edpt0_open+0xd6>
 8009ecc:	220c      	movs	r2, #12
 8009ece:	fa01 f202 	lsl.w	r2, r1, r2
 8009ed2:	405a      	eors	r2, r3
 8009ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed6:	601a      	str	r2, [r3, #0]
}
 8009ed8:	bf00      	nop
 8009eda:	f107 030c 	add.w	r3, r7, #12
 8009ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8009ef4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8009ef8:	2a01      	cmp	r2, #1
 8009efa:	d101      	bne.n	8009f00 <edpt0_open+0x108>
 8009efc:	2204      	movs	r2, #4
 8009efe:	e000      	b.n	8009f02 <edpt0_open+0x10a>
 8009f00:	220c      	movs	r2, #12
 8009f02:	fa01 f202 	lsl.w	r2, r1, r2
 8009f06:	405a      	eors	r2, r3
 8009f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0a:	601a      	str	r2, [r3, #0]
}
 8009f0c:	bf00      	nop
 8009f0e:	2300      	movs	r3, #0
 8009f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f12:	2301      	movs	r3, #1
 8009f14:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8009f18:	2308      	movs	r3, #8
 8009f1a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8009f1e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8009f22:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009f26:	f107 030b 	add.w	r3, r7, #11
 8009f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f2c:	f107 030a 	add.w	r3, r7, #10
 8009f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (size > 62) {
 8009f32:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009f36:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f38:	d915      	bls.n	8009f66 <edpt0_open+0x16e>
    block_in_bytes = 32;
 8009f3a:	2320      	movs	r3, #32
 8009f3c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    *blsize = 1;
 8009f40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f42:	2201      	movs	r2, #1
 8009f44:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 8009f46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f4c:	2320      	movs	r3, #32
 8009f4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f54:	4413      	add	r3, r2
 8009f56:	1e5a      	subs	r2, r3, #1
 8009f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f62:	701a      	strb	r2, [r3, #0]
 8009f64:	e014      	b.n	8009f90 <edpt0_open+0x198>
    block_in_bytes = 2;
 8009f66:	2302      	movs	r3, #2
 8009f68:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    *blsize = 0;
 8009f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f6e:	2200      	movs	r2, #0
 8009f70:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 8009f72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f78:	2302      	movs	r3, #2
 8009f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f80:	4413      	add	r3, r2
 8009f82:	1e5a      	subs	r2, r3, #1
 8009f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8a:	b2da      	uxtb	r2, r3
 8009f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f8e:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 8009f90:	7afb      	ldrb	r3, [r7, #11]
 8009f92:	03db      	lsls	r3, r3, #15
 8009f94:	b21a      	sxth	r2, r3
 8009f96:	7abb      	ldrb	r3, [r7, #10]
 8009f98:	4619      	mov	r1, r3
 8009f9a:	7afb      	ldrb	r3, [r7, #11]
 8009f9c:	1acb      	subs	r3, r1, r3
 8009f9e:	029b      	lsls	r3, r3, #10
 8009fa0:	b21b      	sxth	r3, r3
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	b21b      	sxth	r3, r3
 8009fa6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  if (bl_nb == 0) {
 8009fa8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d102      	bne.n	8009fb4 <edpt0_open+0x1bc>
    bl_nb = 1 << 15;
 8009fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fb2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 8009fb4:	4916      	ldr	r1, [pc, #88]	@ (800a010 <edpt0_open+0x218>)
 8009fb6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009fba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009fbc:	0052      	lsls	r2, r2, #1
 8009fbe:	4413      	add	r3, r2
 8009fc0:	00db      	lsls	r3, r3, #3
 8009fc2:	440b      	add	r3, r1
 8009fc4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009fc6:	809a      	strh	r2, [r3, #4]
}
 8009fc8:	bf00      	nop
}
 8009fca:	bf00      	nop
  ep_change_status(&ep_reg, TUSB_DIR_IN, EP_STAT_NAK);
  ep_change_status(&ep_reg, TUSB_DIR_OUT, EP_STAT_NAK);
  // no need to explicitly set DTOG bits since we aren't masked DTOG bit

  edpt0_prepare_setup(); // prepare for setup packet
  ep_write(0, ep_reg, false);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009fd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
  if (need_exclusive) {
 8009fda:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <edpt0_open+0x1f0>
    dcd_int_disable(0);
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	f7fe fe92 	bl	8008d0c <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8009fe8:	4a0a      	ldr	r2, [pc, #40]	@ (800a014 <edpt0_open+0x21c>)
 8009fea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fec:	b299      	uxth	r1, r3
 8009fee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ff0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009ff4:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d002      	beq.n	800a002 <edpt0_open+0x20a>
    dcd_int_enable(0);
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	f7fe fe63 	bl	8008cc8 <dcd_int_enable>
}
 800a002:	bf00      	nop
}
 800a004:	bf00      	nop
 800a006:	3770      	adds	r7, #112	@ 0x70
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	2000074c 	.word	0x2000074c
 800a010:	40006000 	.word	0x40006000
 800a014:	40005c00 	.word	0x40005c00

0800a018 <dcd_edpt_open>:

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const *desc_ep) {
 800a018:	b580      	push	{r7, lr}
 800a01a:	b096      	sub	sp, #88	@ 0x58
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	4603      	mov	r3, r0
 800a020:	6039      	str	r1, [r7, #0]
 800a022:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  uint8_t const ep_addr = desc_ep->bEndpointAddress;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	789b      	ldrb	r3, [r3, #2]
 800a028:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800a02c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a030:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a034:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800a038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a03c:	b2db      	uxtb	r3, r3
  uint8_t const ep_num = tu_edpt_number(ep_addr);
 800a03e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 800a042:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a046:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a04a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a04e:	09db      	lsrs	r3, r3, #7
 800a050:	b2db      	uxtb	r3, r3
  tusb_dir_t const dir = tu_edpt_dir(ep_addr);
 800a052:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800a05a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a05c:	889b      	ldrh	r3, [r3, #4]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a064:	b29b      	uxth	r3, r3
  const uint16_t packet_size = tu_edpt_packet_size(desc_ep);
 800a066:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
  uint8_t const ep_idx = dcd_ep_alloc(ep_addr, desc_ep->bmAttributes.xfer);
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	78db      	ldrb	r3, [r3, #3]
 800a06e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a072:	b2db      	uxtb	r3, r3
 800a074:	461a      	mov	r2, r3
 800a076:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a07a:	4611      	mov	r1, r2
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7ff fe13 	bl	8009ca8 <dcd_ep_alloc>
 800a082:	4603      	mov	r3, r0
 800a084:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
  TU_ASSERT(ep_idx < FSDEV_EP_COUNT);
 800a088:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800a08c:	2b07      	cmp	r3, #7
 800a08e:	d910      	bls.n	800a0b2 <dcd_edpt_open+0x9a>
 800a090:	f240 224b 	movw	r2, #587	@ 0x24b
 800a094:	4976      	ldr	r1, [pc, #472]	@ (800a270 <dcd_edpt_open+0x258>)
 800a096:	4877      	ldr	r0, [pc, #476]	@ (800a274 <dcd_edpt_open+0x25c>)
 800a098:	f001 facc 	bl	800b634 <iprintf>
 800a09c:	4b76      	ldr	r3, [pc, #472]	@ (800a278 <dcd_edpt_open+0x260>)
 800a09e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f003 0301 	and.w	r3, r3, #1
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d000      	beq.n	800a0ae <dcd_edpt_open+0x96>
 800a0ac:	be00      	bkpt	0x0000
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	e0d9      	b.n	800a266 <dcd_edpt_open+0x24e>

  uint32_t ep_reg = ep_read(ep_idx) & ~USB_EPREG_MASK;
 800a0b2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800a0b6:	637b      	str	r3, [r7, #52]	@ 0x34
  return FSDEV_REG->ep[ep_id].reg;
 800a0b8:	4a70      	ldr	r2, [pc, #448]	@ (800a27c <dcd_edpt_open+0x264>)
 800a0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0bc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	f423 430f 	bic.w	r3, r3, #36608	@ 0x8f00
 800a0c6:	f023 038f 	bic.w	r3, r3, #143	@ 0x8f
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a0d0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a0d4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a0d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0dc:	b2db      	uxtb	r3, r3
  ep_reg |= tu_edpt_number(ep_addr) | USB_EP_CTR_TX | USB_EP_CTR_RX;
 800a0de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	60fb      	str	r3, [r7, #12]

  // Set type
  switch (desc_ep->bmAttributes.xfer) {
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	78db      	ldrb	r3, [r3, #3]
 800a0f2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d002      	beq.n	800a102 <dcd_edpt_open+0xea>
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d003      	beq.n	800a108 <dcd_edpt_open+0xf0>
 800a100:	e007      	b.n	800a112 <dcd_edpt_open+0xfa>
    case TUSB_XFER_BULK:
      ep_reg |= USB_EP_BULK;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	60fb      	str	r3, [r7, #12]
      break;
 800a106:	e015      	b.n	800a134 <dcd_edpt_open+0x11c>
    case TUSB_XFER_INTERRUPT:
      ep_reg |= USB_EP_INTERRUPT;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800a10e:	60fb      	str	r3, [r7, #12]
      break;
 800a110:	e010      	b.n	800a134 <dcd_edpt_open+0x11c>

    default:
      // Note: ISO endpoint should use alloc / active functions
      TU_ASSERT(false);
 800a112:	f240 225b 	movw	r2, #603	@ 0x25b
 800a116:	4956      	ldr	r1, [pc, #344]	@ (800a270 <dcd_edpt_open+0x258>)
 800a118:	4856      	ldr	r0, [pc, #344]	@ (800a274 <dcd_edpt_open+0x25c>)
 800a11a:	f001 fa8b 	bl	800b634 <iprintf>
 800a11e:	4b56      	ldr	r3, [pc, #344]	@ (800a278 <dcd_edpt_open+0x260>)
 800a120:	647b      	str	r3, [r7, #68]	@ 0x44
 800a122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 0301 	and.w	r3, r3, #1
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d000      	beq.n	800a130 <dcd_edpt_open+0x118>
 800a12e:	be00      	bkpt	0x0000
 800a130:	2300      	movs	r3, #0
 800a132:	e098      	b.n	800a266 <dcd_edpt_open+0x24e>
  }

  /* Create a packet memory buffer area. */
  uint16_t pma_addr = dcd_pma_alloc(packet_size, false);
 800a134:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800a138:	2100      	movs	r1, #0
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7ff fd34 	bl	8009ba8 <dcd_pma_alloc>
 800a140:	4603      	mov	r3, r0
 800a142:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  btable_set_addr(ep_idx, dir == TUSB_DIR_IN ? BTABLE_BUF_TX : BTABLE_BUF_RX, pma_addr);
 800a146:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800a14a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800a14e:	2a01      	cmp	r2, #1
 800a150:	bf14      	ite	ne
 800a152:	2201      	movne	r2, #1
 800a154:	2200      	moveq	r2, #0
 800a156:	b2d2      	uxtb	r2, r2
 800a158:	623b      	str	r3, [r7, #32]
 800a15a:	4613      	mov	r3, r2
 800a15c:	77fb      	strb	r3, [r7, #31]
 800a15e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a162:	83bb      	strh	r3, [r7, #28]
  FSDEV_BTABLE->ep16[ep_id][buf_id].addr = addr;
 800a164:	4946      	ldr	r1, [pc, #280]	@ (800a280 <dcd_edpt_open+0x268>)
 800a166:	7ffb      	ldrb	r3, [r7, #31]
 800a168:	6a3a      	ldr	r2, [r7, #32]
 800a16a:	0052      	lsls	r2, r2, #1
 800a16c:	4413      	add	r3, r2
 800a16e:	8bba      	ldrh	r2, [r7, #28]
 800a170:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
}
 800a174:	bf00      	nop
 800a176:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800a17a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800a17e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800a182:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  return &xfer_status[epnum][dir];
 800a186:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800a18a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a18e:	0052      	lsls	r2, r2, #1
 800a190:	4413      	add	r3, r2
 800a192:	011b      	lsls	r3, r3, #4
 800a194:	4a3b      	ldr	r2, [pc, #236]	@ (800a284 <dcd_edpt_open+0x26c>)
 800a196:	4413      	add	r3, r2

  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 800a198:	64bb      	str	r3, [r7, #72]	@ 0x48
  xfer->max_packet_size = packet_size;
 800a19a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a19c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 800a1a0:	819a      	strh	r2, [r3, #12]
  xfer->ep_idx = ep_idx;
 800a1a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1a4:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 800a1a8:	739a      	strb	r2, [r3, #14]
 800a1aa:	f107 030c 	add.w	r3, r7, #12
 800a1ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1b0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800a1b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a1b8:	2302      	movs	r3, #2
 800a1ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800a1c6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a1ca:	2a01      	cmp	r2, #1
 800a1cc:	d101      	bne.n	800a1d2 <dcd_edpt_open+0x1ba>
 800a1ce:	2204      	movs	r2, #4
 800a1d0:	e000      	b.n	800a1d4 <dcd_edpt_open+0x1bc>
 800a1d2:	220c      	movs	r2, #12
 800a1d4:	fa01 f202 	lsl.w	r2, r1, r2
 800a1d8:	405a      	eors	r2, r3
 800a1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1dc:	601a      	str	r2, [r3, #0]
}
 800a1de:	bf00      	nop
 800a1e0:	f107 030c 	add.w	r3, r7, #12
 800a1e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1e6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800a1ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  *reg ^= (state << (USB_EP_DTOG_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800a1fc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a200:	2a01      	cmp	r2, #1
 800a202:	d101      	bne.n	800a208 <dcd_edpt_open+0x1f0>
 800a204:	2206      	movs	r2, #6
 800a206:	e000      	b.n	800a20a <dcd_edpt_open+0x1f2>
 800a208:	220e      	movs	r2, #14
 800a20a:	fa01 f202 	lsl.w	r2, r1, r2
 800a20e:	405a      	eors	r2, r3
 800a210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a212:	601a      	str	r2, [r3, #0]
}
 800a214:	bf00      	nop

  ep_change_status(&ep_reg, dir, EP_STAT_NAK);
  ep_change_dtog(&ep_reg, dir, 0);

  // reserve other direction toggle bits
  if (dir == TUSB_DIR_IN) {
 800a216:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d104      	bne.n	800a228 <dcd_edpt_open+0x210>
    ep_reg &= ~(USB_EPRX_STAT | USB_EP_DTOG_RX);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a224:	60fb      	str	r3, [r7, #12]
 800a226:	e003      	b.n	800a230 <dcd_edpt_open+0x218>
  } else {
    ep_reg &= ~(USB_EPTX_STAT | USB_EP_DTOG_TX);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a22e:	60fb      	str	r3, [r7, #12]
  }

  ep_write(ep_idx, ep_reg, true);
 800a230:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	61ba      	str	r2, [r7, #24]
 800a238:	617b      	str	r3, [r7, #20]
 800a23a:	2301      	movs	r3, #1
 800a23c:	74fb      	strb	r3, [r7, #19]
  if (need_exclusive) {
 800a23e:	7cfb      	ldrb	r3, [r7, #19]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <dcd_edpt_open+0x232>
    dcd_int_disable(0);
 800a244:	2000      	movs	r0, #0
 800a246:	f7fe fd61 	bl	8008d0c <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800a24a:	4a0c      	ldr	r2, [pc, #48]	@ (800a27c <dcd_edpt_open+0x264>)
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	b299      	uxth	r1, r3
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800a256:	7cfb      	ldrb	r3, [r7, #19]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <dcd_edpt_open+0x24a>
    dcd_int_enable(0);
 800a25c:	2000      	movs	r0, #0
 800a25e:	f7fe fd33 	bl	8008cc8 <dcd_int_enable>
}
 800a262:	bf00      	nop

  return true;
 800a264:	2301      	movs	r3, #1
}
 800a266:	4618      	mov	r0, r3
 800a268:	3758      	adds	r7, #88	@ 0x58
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	0800d194 	.word	0x0800d194
 800a274:	0800cd28 	.word	0x0800cd28
 800a278:	e000edf0 	.word	0xe000edf0
 800a27c:	40005c00 	.word	0x40005c00
 800a280:	40006000 	.word	0x40006000
 800a284:	2000074c 	.word	0x2000074c

0800a288 <dcd_edpt_close_all>:

void dcd_edpt_close_all(uint8_t rhport) {
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	4603      	mov	r3, r0
 800a290:	71fb      	strb	r3, [r7, #7]
  dcd_int_disable(rhport);
 800a292:	79fb      	ldrb	r3, [r7, #7]
 800a294:	4618      	mov	r0, r3
 800a296:	f7fe fd39 	bl	8008d0c <dcd_int_disable>

  for (uint32_t i = 1; i < FSDEV_EP_COUNT; i++) {
 800a29a:	2301      	movs	r3, #1
 800a29c:	617b      	str	r3, [r7, #20]
 800a29e:	e032      	b.n	800a306 <dcd_edpt_close_all+0x7e>
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	613b      	str	r3, [r7, #16]
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	60fb      	str	r3, [r7, #12]
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	72fb      	strb	r3, [r7, #11]
  if (need_exclusive) {
 800a2ac:	7afb      	ldrb	r3, [r7, #11]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <dcd_edpt_close_all+0x30>
    dcd_int_disable(0);
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	f7fe fd2a 	bl	8008d0c <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800a2b8:	4a1a      	ldr	r2, [pc, #104]	@ (800a324 <dcd_edpt_close_all+0x9c>)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	b299      	uxth	r1, r3
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800a2c4:	7afb      	ldrb	r3, [r7, #11]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <dcd_edpt_close_all+0x48>
    dcd_int_enable(0);
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	f7fe fcfc 	bl	8008cc8 <dcd_int_enable>
}
 800a2d0:	bf00      	nop
    // Reset endpoint
    ep_write(i, 0, false);
    // Clear EP allocation status
    ep_alloc_status[i].ep_num = 0xFF;
 800a2d2:	4a15      	ldr	r2, [pc, #84]	@ (800a328 <dcd_edpt_close_all+0xa0>)
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	21ff      	movs	r1, #255	@ 0xff
 800a2d8:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    ep_alloc_status[i].ep_type = 0xFF;
 800a2dc:	4a12      	ldr	r2, [pc, #72]	@ (800a328 <dcd_edpt_close_all+0xa0>)
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	22ff      	movs	r2, #255	@ 0xff
 800a2e6:	705a      	strb	r2, [r3, #1]
    ep_alloc_status[i].allocated[0] = false;
 800a2e8:	4a0f      	ldr	r2, [pc, #60]	@ (800a328 <dcd_edpt_close_all+0xa0>)
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	709a      	strb	r2, [r3, #2]
    ep_alloc_status[i].allocated[1] = false;
 800a2f4:	4a0c      	ldr	r2, [pc, #48]	@ (800a328 <dcd_edpt_close_all+0xa0>)
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	70da      	strb	r2, [r3, #3]
  for (uint32_t i = 1; i < FSDEV_EP_COUNT; i++) {
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	3301      	adds	r3, #1
 800a304:	617b      	str	r3, [r7, #20]
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b07      	cmp	r3, #7
 800a30a:	d9c9      	bls.n	800a2a0 <dcd_edpt_close_all+0x18>
  }

  dcd_int_enable(rhport);
 800a30c:	79fb      	ldrb	r3, [r7, #7]
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fcda 	bl	8008cc8 <dcd_int_enable>

  // Reset PMA allocation
  ep_buf_ptr = FSDEV_BTABLE_BASE + 8 * CFG_TUD_ENDPPOINT_MAX + 2 * CFG_TUD_ENDPOINT0_SIZE;
 800a314:	4b05      	ldr	r3, [pc, #20]	@ (800a32c <dcd_edpt_close_all+0xa4>)
 800a316:	22c0      	movs	r2, #192	@ 0xc0
 800a318:	801a      	strh	r2, [r3, #0]
}
 800a31a:	bf00      	nop
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	40005c00 	.word	0x40005c00
 800a328:	2000084c 	.word	0x2000084c
 800a32c:	2000086e 	.word	0x2000086e

0800a330 <dcd_transmit_packet>:

  return true;
}

// Currently, single-buffered, and only 64 bytes at a time (max)
static void dcd_transmit_packet(xfer_ctl_t *xfer, uint16_t ep_ix) {
 800a330:	b580      	push	{r7, lr}
 800a332:	b092      	sub	sp, #72	@ 0x48
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	460b      	mov	r3, r1
 800a33a:	807b      	strh	r3, [r7, #2]
  uint16_t len = tu_min16(xfer->total_len - xfer->queued_len, xfer->max_packet_size);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	891a      	ldrh	r2, [r3, #8]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	895b      	ldrh	r3, [r3, #10]
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	b29a      	uxth	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	899b      	ldrh	r3, [r3, #12]
 800a34c:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800a34e:	86bb      	strh	r3, [r7, #52]	@ 0x34
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a350:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a352:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a354:	4293      	cmp	r3, r2
 800a356:	bf28      	it	cs
 800a358:	4613      	movcs	r3, r2
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  uint32_t ep_reg = ep_read(ep_ix) | USB_EP_CTR_TX | USB_EP_CTR_RX; // reserve CTR
 800a360:	887b      	ldrh	r3, [r7, #2]
 800a362:	63bb      	str	r3, [r7, #56]	@ 0x38
  return FSDEV_REG->ep[ep_id].reg;
 800a364:	4a61      	ldr	r2, [pc, #388]	@ (800a4ec <dcd_transmit_packet+0x1bc>)
 800a366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a368:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a376:	60bb      	str	r3, [r7, #8]

  bool const is_iso = ep_is_iso(ep_reg);
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 800a37c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a37e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a386:	bf0c      	ite	eq
 800a388:	2301      	moveq	r3, #1
 800a38a:	2300      	movne	r3, #0
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  uint8_t buf_id;
  if (is_iso) {
 800a392:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a396:	2b00      	cmp	r3, #0
 800a398:	d007      	beq.n	800a3aa <dcd_transmit_packet+0x7a>
    buf_id = (ep_reg & USB_EP_DTOG_TX) ? 1 : 0;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	099b      	lsrs	r3, r3, #6
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a3a8:	e002      	b.n	800a3b0 <dcd_transmit_packet+0x80>
  } else {
    buf_id = BTABLE_BUF_TX;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }
  uint16_t addr_ptr = (uint16_t) btable_get_addr(ep_ix, buf_id);
 800a3b0:	887b      	ldrh	r3, [r7, #2]
 800a3b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a3b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  return FSDEV_BTABLE->ep16[ep_id][buf_id].addr;
 800a3bc:	494c      	ldr	r1, [pc, #304]	@ (800a4f0 <dcd_transmit_packet+0x1c0>)
 800a3be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a3c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3c4:	0052      	lsls	r2, r2, #1
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

  if (xfer->ff) {
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d009      	beq.n	800a3ee <dcd_transmit_packet+0xbe>
    dcd_write_packet_memory_ff(xfer->ff, addr_ptr, len);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800a3e2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 fc8d 	bl	800ad06 <dcd_write_packet_memory_ff>
 800a3ec:	e00b      	b.n	800a406 <dcd_transmit_packet+0xd6>
  } else {
    dcd_write_packet_memory(addr_ptr, &(xfer->buffer[xfer->queued_len]), len);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	8952      	ldrh	r2, [r2, #10]
 800a3f6:	1899      	adds	r1, r3, r2
 800a3f8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800a3fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a400:	4618      	mov	r0, r3
 800a402:	f000 fbd9 	bl	800abb8 <dcd_write_packet_memory>
  }
  xfer->queued_len += len;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	895a      	ldrh	r2, [r3, #10]
 800a40a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a40e:	4413      	add	r3, r2
 800a410:	b29a      	uxth	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	815a      	strh	r2, [r3, #10]

  btable_set_count(ep_ix, buf_id, len);
 800a416:	887b      	ldrh	r3, [r7, #2]
 800a418:	623b      	str	r3, [r7, #32]
 800a41a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a41e:	77fb      	strb	r3, [r7, #31]
 800a420:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a424:	83bb      	strh	r3, [r7, #28]
  uint16_t cnt = FSDEV_BTABLE->ep16[ep_id][buf_id].count;
 800a426:	4932      	ldr	r1, [pc, #200]	@ (800a4f0 <dcd_transmit_packet+0x1c0>)
 800a428:	7ffb      	ldrb	r3, [r7, #31]
 800a42a:	6a3a      	ldr	r2, [r7, #32]
 800a42c:	0052      	lsls	r2, r2, #1
 800a42e:	4413      	add	r3, r2
 800a430:	00db      	lsls	r3, r3, #3
 800a432:	440b      	add	r3, r1
 800a434:	889b      	ldrh	r3, [r3, #4]
 800a436:	837b      	strh	r3, [r7, #26]
  cnt = (cnt & ~0x3FFU) | (byte_count & 0x3FFU);
 800a438:	8b7b      	ldrh	r3, [r7, #26]
 800a43a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800a43e:	f023 0303 	bic.w	r3, r3, #3
 800a442:	b29a      	uxth	r2, r3
 800a444:	8bbb      	ldrh	r3, [r7, #28]
 800a446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	4313      	orrs	r3, r2
 800a44e:	837b      	strh	r3, [r7, #26]
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = cnt;
 800a450:	4927      	ldr	r1, [pc, #156]	@ (800a4f0 <dcd_transmit_packet+0x1c0>)
 800a452:	7ffb      	ldrb	r3, [r7, #31]
 800a454:	6a3a      	ldr	r2, [r7, #32]
 800a456:	0052      	lsls	r2, r2, #1
 800a458:	4413      	add	r3, r2
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	440b      	add	r3, r1
 800a45e:	8b7a      	ldrh	r2, [r7, #26]
 800a460:	809a      	strh	r2, [r3, #4]
}
 800a462:	bf00      	nop
 800a464:	f107 0308 	add.w	r3, r7, #8
 800a468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a46a:	2301      	movs	r3, #1
 800a46c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a470:	2303      	movs	r3, #3
 800a472:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800a47e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a482:	2a01      	cmp	r2, #1
 800a484:	d101      	bne.n	800a48a <dcd_transmit_packet+0x15a>
 800a486:	2204      	movs	r2, #4
 800a488:	e000      	b.n	800a48c <dcd_transmit_packet+0x15c>
 800a48a:	220c      	movs	r2, #12
 800a48c:	fa01 f202 	lsl.w	r2, r1, r2
 800a490:	405a      	eors	r2, r3
 800a492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a494:	601a      	str	r2, [r3, #0]
}
 800a496:	bf00      	nop
  ep_change_status(&ep_reg, TUSB_DIR_IN, EP_STAT_VALID);

  if (is_iso) {
 800a498:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <dcd_transmit_packet+0x176>
    xfer->iso_in_sending = true;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	73da      	strb	r2, [r3, #15]
  }
  ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(TUSB_DIR_IN); // only change TX Status, reserve other toggle bits
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	f648 73bf 	movw	r3, #36799	@ 0x8fbf
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	60bb      	str	r3, [r7, #8]
  ep_write(ep_ix, ep_reg, true);
 800a4b0:	887a      	ldrh	r2, [r7, #2]
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	617a      	str	r2, [r7, #20]
 800a4b6:	613b      	str	r3, [r7, #16]
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	73fb      	strb	r3, [r7, #15]
  if (need_exclusive) {
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d002      	beq.n	800a4c8 <dcd_transmit_packet+0x198>
    dcd_int_disable(0);
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	f7fe fc22 	bl	8008d0c <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800a4c8:	4a08      	ldr	r2, [pc, #32]	@ (800a4ec <dcd_transmit_packet+0x1bc>)
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	b299      	uxth	r1, r3
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <dcd_transmit_packet+0x1b0>
    dcd_int_enable(0);
 800a4da:	2000      	movs	r0, #0
 800a4dc:	f7fe fbf4 	bl	8008cc8 <dcd_int_enable>
}
 800a4e0:	bf00      	nop
}
 800a4e2:	bf00      	nop
 800a4e4:	3748      	adds	r7, #72	@ 0x48
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	40005c00 	.word	0x40005c00
 800a4f0:	40006000 	.word	0x40006000

0800a4f4 <edpt_xfer>:

static bool edpt_xfer(uint8_t rhport, uint8_t ep_num, tusb_dir_t dir) {
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b0b2      	sub	sp, #200	@ 0xc8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	71fb      	strb	r3, [r7, #7]
 800a4fe:	460b      	mov	r3, r1
 800a500:	71bb      	strb	r3, [r7, #6]
 800a502:	4613      	mov	r3, r2
 800a504:	717b      	strb	r3, [r7, #5]
 800a506:	79bb      	ldrb	r3, [r7, #6]
 800a508:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 800a50c:	797b      	ldrb	r3, [r7, #5]
 800a50e:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
  return &xfer_status[epnum][dir];
 800a512:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 800a516:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 800a51a:	0052      	lsls	r2, r2, #1
 800a51c:	4413      	add	r3, r2
 800a51e:	011b      	lsls	r3, r3, #4
 800a520:	4aae      	ldr	r2, [pc, #696]	@ (800a7dc <edpt_xfer+0x2e8>)
 800a522:	4413      	add	r3, r2
  (void) rhport;

  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 800a524:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint8_t const ep_idx = xfer->ep_idx;
 800a528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a52c:	7b9b      	ldrb	r3, [r3, #14]
 800a52e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

  if (dir == TUSB_DIR_IN) {
 800a532:	797b      	ldrb	r3, [r7, #5]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d108      	bne.n	800a54a <edpt_xfer+0x56>
    dcd_transmit_packet(xfer, ep_idx);
 800a538:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	4619      	mov	r1, r3
 800a540:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 800a544:	f7ff fef4 	bl	800a330 <dcd_transmit_packet>
 800a548:	e1b3      	b.n	800a8b2 <edpt_xfer+0x3be>
  } else {
    uint32_t ep_reg = ep_read(ep_idx) | USB_EP_CTR_TX | USB_EP_CTR_RX; // reserve CTR
 800a54a:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800a54e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return FSDEV_REG->ep[ep_id].reg;
 800a552:	4aa3      	ldr	r2, [pc, #652]	@ (800a7e0 <edpt_xfer+0x2ec>)
 800a554:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a558:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a566:	617b      	str	r3, [r7, #20]
    ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(dir);
 800a568:	797b      	ldrb	r3, [r7, #5]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d102      	bne.n	800a574 <edpt_xfer+0x80>
 800a56e:	f648 72bf 	movw	r2, #36799	@ 0x8fbf
 800a572:	e001      	b.n	800a578 <edpt_xfer+0x84>
 800a574:	f64b 728f 	movw	r2, #49039	@ 0xbf8f
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	4013      	ands	r3, r2
 800a57c:	617b      	str	r3, [r7, #20]

    uint16_t cnt = tu_min16(xfer->total_len, xfer->max_packet_size);
 800a57e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a582:	891a      	ldrh	r2, [r3, #8]
 800a584:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a588:	899b      	ldrh	r3, [r3, #12]
 800a58a:	f8a7 20b2 	strh.w	r2, [r7, #178]	@ 0xb2
 800a58e:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
 800a592:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 800a596:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800a59a:	4293      	cmp	r3, r2
 800a59c:	bf28      	it	cs
 800a59e:	4613      	movcs	r3, r2
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0

    if (ep_is_iso(ep_reg)) {
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 800a5ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a5b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a5b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5b8:	bf0c      	ite	eq
 800a5ba:	2301      	moveq	r3, #1
 800a5bc:	2300      	movne	r3, #0
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f000 80dc 	beq.w	800a77e <edpt_xfer+0x28a>
      btable_set_rx_bufsize(ep_idx, 0, cnt);
 800a5c6:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800a5ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800a5d4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 800a5d8:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 800a5dc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800a5e0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 800a5e4:	f107 0311 	add.w	r3, r7, #17
 800a5e8:	677b      	str	r3, [r7, #116]	@ 0x74
 800a5ea:	f107 0310 	add.w	r3, r7, #16
 800a5ee:	673b      	str	r3, [r7, #112]	@ 0x70
  if (size > 62) {
 800a5f0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a5f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5f6:	d915      	bls.n	800a624 <edpt_xfer+0x130>
    block_in_bytes = 32;
 800a5f8:	2320      	movs	r3, #32
 800a5fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    *blsize = 1;
 800a5fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a600:	2201      	movs	r2, #1
 800a602:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 800a604:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a608:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a60a:	2320      	movs	r3, #32
 800a60c:	667b      	str	r3, [r7, #100]	@ 0x64
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800a60e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a612:	4413      	add	r3, r2
 800a614:	1e5a      	subs	r2, r3, #1
 800a616:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a618:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a620:	701a      	strb	r2, [r3, #0]
 800a622:	e014      	b.n	800a64e <edpt_xfer+0x15a>
    block_in_bytes = 2;
 800a624:	2302      	movs	r3, #2
 800a626:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    *blsize = 0;
 800a62a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a62c:	2200      	movs	r2, #0
 800a62e:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800a630:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a634:	663b      	str	r3, [r7, #96]	@ 0x60
 800a636:	2302      	movs	r3, #2
 800a638:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a63a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a63c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a63e:	4413      	add	r3, r2
 800a640:	1e5a      	subs	r2, r3, #1
 800a642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a644:	fbb2 f3f3 	udiv	r3, r2, r3
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a64c:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 800a64e:	7c7b      	ldrb	r3, [r7, #17]
 800a650:	03db      	lsls	r3, r3, #15
 800a652:	b21a      	sxth	r2, r3
 800a654:	7c3b      	ldrb	r3, [r7, #16]
 800a656:	4619      	mov	r1, r3
 800a658:	7c7b      	ldrb	r3, [r7, #17]
 800a65a:	1acb      	subs	r3, r1, r3
 800a65c:	029b      	lsls	r3, r3, #10
 800a65e:	b21b      	sxth	r3, r3
 800a660:	4313      	orrs	r3, r2
 800a662:	b21b      	sxth	r3, r3
 800a664:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  if (bl_nb == 0) {
 800a668:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d103      	bne.n	800a678 <edpt_xfer+0x184>
    bl_nb = 1 << 15;
 800a670:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a674:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 800a678:	495a      	ldr	r1, [pc, #360]	@ (800a7e4 <edpt_xfer+0x2f0>)
 800a67a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800a67e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a682:	0052      	lsls	r2, r2, #1
 800a684:	4413      	add	r3, r2
 800a686:	00db      	lsls	r3, r3, #3
 800a688:	440b      	add	r3, r1
 800a68a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800a68e:	809a      	strh	r2, [r3, #4]
}
 800a690:	bf00      	nop
      btable_set_rx_bufsize(ep_idx, 1, cnt);
 800a692:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800a696:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a69a:	2301      	movs	r3, #1
 800a69c:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 800a6a0:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 800a6a4:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
 800a6a8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 800a6ac:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800a6b0:	f107 030f 	add.w	r3, r7, #15
 800a6b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a6b8:	f107 030e 	add.w	r3, r7, #14
 800a6bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (size > 62) {
 800a6c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a6c4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6c6:	d91c      	bls.n	800a702 <edpt_xfer+0x20e>
    block_in_bytes = 32;
 800a6c8:	2320      	movs	r3, #32
 800a6ca:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    *blsize = 1;
 800a6ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 800a6d6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a6da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6de:	2320      	movs	r3, #32
 800a6e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a6e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a6e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6ec:	4413      	add	r3, r2
 800a6ee:	1e5a      	subs	r2, r3, #1
 800a6f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a6fe:	701a      	strb	r2, [r3, #0]
 800a700:	e01b      	b.n	800a73a <edpt_xfer+0x246>
    block_in_bytes = 2;
 800a702:	2302      	movs	r3, #2
 800a704:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    *blsize = 0;
 800a708:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a70c:	2200      	movs	r2, #0
 800a70e:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800a710:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a714:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a718:	2302      	movs	r3, #2
 800a71a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a71e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800a722:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a726:	4413      	add	r3, r2
 800a728:	1e5a      	subs	r2, r3, #1
 800a72a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a72e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a732:	b2da      	uxtb	r2, r3
 800a734:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a738:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 800a73a:	7bfb      	ldrb	r3, [r7, #15]
 800a73c:	03db      	lsls	r3, r3, #15
 800a73e:	b21a      	sxth	r2, r3
 800a740:	7bbb      	ldrb	r3, [r7, #14]
 800a742:	4619      	mov	r1, r3
 800a744:	7bfb      	ldrb	r3, [r7, #15]
 800a746:	1acb      	subs	r3, r1, r3
 800a748:	029b      	lsls	r3, r3, #10
 800a74a:	b21b      	sxth	r3, r3
 800a74c:	4313      	orrs	r3, r2
 800a74e:	b21b      	sxth	r3, r3
 800a750:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  if (bl_nb == 0) {
 800a754:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d103      	bne.n	800a764 <edpt_xfer+0x270>
    bl_nb = 1 << 15;
 800a75c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a760:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 800a764:	491f      	ldr	r1, [pc, #124]	@ (800a7e4 <edpt_xfer+0x2f0>)
 800a766:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800a76a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a76e:	0052      	lsls	r2, r2, #1
 800a770:	4413      	add	r3, r2
 800a772:	00db      	lsls	r3, r3, #3
 800a774:	440b      	add	r3, r1
 800a776:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800a77a:	809a      	strh	r2, [r3, #4]
}
 800a77c:	e066      	b.n	800a84c <edpt_xfer+0x358>
    } else {
      btable_set_rx_bufsize(ep_idx, BTABLE_BUF_RX, cnt);
 800a77e:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800a782:	657b      	str	r3, [r7, #84]	@ 0x54
 800a784:	2301      	movs	r3, #1
 800a786:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800a78a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 800a78e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800a792:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800a796:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a79a:	f107 0313 	add.w	r3, r7, #19
 800a79e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7a0:	f107 0312 	add.w	r3, r7, #18
 800a7a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (size > 62) {
 800a7a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a7aa:	2b3e      	cmp	r3, #62	@ 0x3e
 800a7ac:	d91c      	bls.n	800a7e8 <edpt_xfer+0x2f4>
    block_in_bytes = 32;
 800a7ae:	2320      	movs	r3, #32
 800a7b0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    *blsize = 1;
 800a7b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 800a7ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a7c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c8:	4413      	add	r3, r2
 800a7ca:	1e5a      	subs	r2, r3, #1
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7d6:	701a      	strb	r2, [r3, #0]
 800a7d8:	e01b      	b.n	800a812 <edpt_xfer+0x31e>
 800a7da:	bf00      	nop
 800a7dc:	2000074c 	.word	0x2000074c
 800a7e0:	40005c00 	.word	0x40005c00
 800a7e4:	40006000 	.word	0x40006000
    block_in_bytes = 2;
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    *blsize = 0;
 800a7ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800a7f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a7f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a802:	4413      	add	r3, r2
 800a804:	1e5a      	subs	r2, r3, #1
 800a806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a808:	fbb2 f3f3 	udiv	r3, r2, r3
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a810:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 800a812:	7cfb      	ldrb	r3, [r7, #19]
 800a814:	03db      	lsls	r3, r3, #15
 800a816:	b21a      	sxth	r2, r3
 800a818:	7cbb      	ldrb	r3, [r7, #18]
 800a81a:	4619      	mov	r1, r3
 800a81c:	7cfb      	ldrb	r3, [r7, #19]
 800a81e:	1acb      	subs	r3, r1, r3
 800a820:	029b      	lsls	r3, r3, #10
 800a822:	b21b      	sxth	r3, r3
 800a824:	4313      	orrs	r3, r2
 800a826:	b21b      	sxth	r3, r3
 800a828:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  if (bl_nb == 0) {
 800a82a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d102      	bne.n	800a836 <edpt_xfer+0x342>
    bl_nb = 1 << 15;
 800a830:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a834:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 800a836:	4921      	ldr	r1, [pc, #132]	@ (800a8bc <edpt_xfer+0x3c8>)
 800a838:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800a83c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a83e:	0052      	lsls	r2, r2, #1
 800a840:	4413      	add	r3, r2
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	440b      	add	r3, r1
 800a846:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a848:	809a      	strh	r2, [r3, #4]
}
 800a84a:	bf00      	nop
 800a84c:	f107 0314 	add.w	r3, r7, #20
 800a850:	61fb      	str	r3, [r7, #28]
 800a852:	797b      	ldrb	r3, [r7, #5]
 800a854:	76fb      	strb	r3, [r7, #27]
 800a856:	2303      	movs	r3, #3
 800a858:	76bb      	strb	r3, [r7, #26]
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	7eb9      	ldrb	r1, [r7, #26]
 800a860:	7efa      	ldrb	r2, [r7, #27]
 800a862:	2a01      	cmp	r2, #1
 800a864:	d101      	bne.n	800a86a <edpt_xfer+0x376>
 800a866:	2204      	movs	r2, #4
 800a868:	e000      	b.n	800a86c <edpt_xfer+0x378>
 800a86a:	220c      	movs	r2, #12
 800a86c:	fa01 f202 	lsl.w	r2, r1, r2
 800a870:	405a      	eors	r2, r3
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	601a      	str	r2, [r3, #0]
}
 800a876:	bf00      	nop
    }

    ep_change_status(&ep_reg, dir, EP_STAT_VALID);
    ep_write(ep_idx, ep_reg, true);
 800a878:	f897 20c3 	ldrb.w	r2, [r7, #195]	@ 0xc3
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a880:	627b      	str	r3, [r7, #36]	@ 0x24
 800a882:	2301      	movs	r3, #1
 800a884:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (need_exclusive) {
 800a888:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <edpt_xfer+0x3a2>
    dcd_int_disable(0);
 800a890:	2000      	movs	r0, #0
 800a892:	f7fe fa3b 	bl	8008d0c <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800a896:	4a0a      	ldr	r2, [pc, #40]	@ (800a8c0 <edpt_xfer+0x3cc>)
 800a898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89a:	b299      	uxth	r1, r3
 800a89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800a8a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d002      	beq.n	800a8b0 <edpt_xfer+0x3bc>
    dcd_int_enable(0);
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	f7fe fa0c 	bl	8008cc8 <dcd_int_enable>
}
 800a8b0:	bf00      	nop
  }

  return true;
 800a8b2:	2301      	movs	r3, #1
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	37c8      	adds	r7, #200	@ 0xc8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	40006000 	.word	0x40006000
 800a8c0:	40005c00 	.word	0x40005c00

0800a8c4 <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t *buffer, uint16_t total_bytes) {
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	603a      	str	r2, [r7, #0]
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	71fb      	strb	r3, [r7, #7]
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	71bb      	strb	r3, [r7, #6]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	80bb      	strh	r3, [r7, #4]
 800a8da:	79bb      	ldrb	r3, [r7, #6]
 800a8dc:	733b      	strb	r3, [r7, #12]
 800a8de:	7b3b      	ldrb	r3, [r7, #12]
 800a8e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8e4:	b2db      	uxtb	r3, r3
  uint8_t const ep_num = tu_edpt_number(ep_addr);
 800a8e6:	75fb      	strb	r3, [r7, #23]
 800a8e8:	79bb      	ldrb	r3, [r7, #6]
 800a8ea:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a8ec:	7b7b      	ldrb	r3, [r7, #13]
 800a8ee:	09db      	lsrs	r3, r3, #7
 800a8f0:	b2db      	uxtb	r3, r3
  tusb_dir_t const dir = tu_edpt_dir(ep_addr);
 800a8f2:	75bb      	strb	r3, [r7, #22]
 800a8f4:	7dfb      	ldrb	r3, [r7, #23]
 800a8f6:	73fb      	strb	r3, [r7, #15]
 800a8f8:	7dbb      	ldrb	r3, [r7, #22]
 800a8fa:	73bb      	strb	r3, [r7, #14]
  return &xfer_status[epnum][dir];
 800a8fc:	7bfa      	ldrb	r2, [r7, #15]
 800a8fe:	7bbb      	ldrb	r3, [r7, #14]
 800a900:	0052      	lsls	r2, r2, #1
 800a902:	4413      	add	r3, r2
 800a904:	011b      	lsls	r3, r3, #4
 800a906:	4a0d      	ldr	r2, [pc, #52]	@ (800a93c <dcd_edpt_xfer+0x78>)
 800a908:	4413      	add	r3, r2
  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 800a90a:	613b      	str	r3, [r7, #16]

  xfer->buffer = buffer;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	2200      	movs	r2, #0
 800a916:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	88ba      	ldrh	r2, [r7, #4]
 800a91c:	811a      	strh	r2, [r3, #8]
  xfer->queued_len = 0;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	2200      	movs	r2, #0
 800a922:	815a      	strh	r2, [r3, #10]

  return edpt_xfer(rhport, ep_num, dir);
 800a924:	7dba      	ldrb	r2, [r7, #22]
 800a926:	7df9      	ldrb	r1, [r7, #23]
 800a928:	79fb      	ldrb	r3, [r7, #7]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7ff fde2 	bl	800a4f4 <edpt_xfer>
 800a930:	4603      	mov	r3, r0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	2000074c 	.word	0x2000074c

0800a940 <dcd_edpt_stall>:
  xfer->queued_len = 0;

  return edpt_xfer(rhport, ep_num, dir);
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800a940:	b580      	push	{r7, lr}
 800a942:	b08e      	sub	sp, #56	@ 0x38
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	460a      	mov	r2, r1
 800a94a:	71fb      	strb	r3, [r7, #7]
 800a94c:	4613      	mov	r3, r2
 800a94e:	71bb      	strb	r3, [r7, #6]
 800a950:	79bb      	ldrb	r3, [r7, #6]
 800a952:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a956:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a95a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a95e:	b2db      	uxtb	r3, r3
  (void)rhport;
  uint8_t const ep_num = tu_edpt_number(ep_addr);
 800a960:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a964:	79bb      	ldrb	r3, [r7, #6]
 800a966:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a96a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a96e:	09db      	lsrs	r3, r3, #7
 800a970:	b2db      	uxtb	r3, r3
  tusb_dir_t const dir = tu_edpt_dir(ep_addr);
 800a972:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800a976:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a97a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a97e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a982:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return &xfer_status[epnum][dir];
 800a986:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a98a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a98e:	0052      	lsls	r2, r2, #1
 800a990:	4413      	add	r3, r2
 800a992:	011b      	lsls	r3, r3, #4
 800a994:	4a2a      	ldr	r2, [pc, #168]	@ (800aa40 <dcd_edpt_stall+0x100>)
 800a996:	4413      	add	r3, r2
  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 800a998:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t const ep_idx = xfer->ep_idx;
 800a99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99c:	7b9b      	ldrb	r3, [r3, #14]
 800a99e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  uint32_t ep_reg = ep_read(ep_idx) | USB_EP_CTR_TX | USB_EP_CTR_RX; // reserve CTR bits
 800a9a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return FSDEV_REG->ep[ep_id].reg;
 800a9a8:	4a26      	ldr	r2, [pc, #152]	@ (800aa44 <dcd_edpt_stall+0x104>)
 800a9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ac:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9ba:	60fb      	str	r3, [r7, #12]
  ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(dir);
 800a9bc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d102      	bne.n	800a9ca <dcd_edpt_stall+0x8a>
 800a9c4:	f648 72bf 	movw	r2, #36799	@ 0x8fbf
 800a9c8:	e001      	b.n	800a9ce <dcd_edpt_stall+0x8e>
 800a9ca:	f64b 728f 	movw	r2, #49039	@ 0xbf8f
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	60fb      	str	r3, [r7, #12]
 800a9d4:	f107 030c 	add.w	r3, r7, #12
 800a9d8:	617b      	str	r3, [r7, #20]
 800a9da:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a9de:	74fb      	strb	r3, [r7, #19]
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	74bb      	strb	r3, [r7, #18]
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	7cb9      	ldrb	r1, [r7, #18]
 800a9ea:	7cfa      	ldrb	r2, [r7, #19]
 800a9ec:	2a01      	cmp	r2, #1
 800a9ee:	d101      	bne.n	800a9f4 <dcd_edpt_stall+0xb4>
 800a9f0:	2204      	movs	r2, #4
 800a9f2:	e000      	b.n	800a9f6 <dcd_edpt_stall+0xb6>
 800a9f4:	220c      	movs	r2, #12
 800a9f6:	fa01 f202 	lsl.w	r2, r1, r2
 800a9fa:	405a      	eors	r2, r3
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	601a      	str	r2, [r3, #0]
}
 800aa00:	bf00      	nop
  ep_change_status(&ep_reg, dir, EP_STAT_STALL);

  ep_write(ep_idx, ep_reg, true);
 800aa02:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	623a      	str	r2, [r7, #32]
 800aa0a:	61fb      	str	r3, [r7, #28]
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	76fb      	strb	r3, [r7, #27]
  if (need_exclusive) {
 800aa10:	7efb      	ldrb	r3, [r7, #27]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d002      	beq.n	800aa1c <dcd_edpt_stall+0xdc>
    dcd_int_disable(0);
 800aa16:	2000      	movs	r0, #0
 800aa18:	f7fe f978 	bl	8008d0c <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800aa1c:	4a09      	ldr	r2, [pc, #36]	@ (800aa44 <dcd_edpt_stall+0x104>)
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	b299      	uxth	r1, r3
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800aa28:	7efb      	ldrb	r3, [r7, #27]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <dcd_edpt_stall+0xf4>
    dcd_int_enable(0);
 800aa2e:	2000      	movs	r0, #0
 800aa30:	f7fe f94a 	bl	8008cc8 <dcd_int_enable>
}
 800aa34:	bf00      	nop
}
 800aa36:	bf00      	nop
 800aa38:	3738      	adds	r7, #56	@ 0x38
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	2000074c 	.word	0x2000074c
 800aa44:	40005c00 	.word	0x40005c00

0800aa48 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b090      	sub	sp, #64	@ 0x40
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	4603      	mov	r3, r0
 800aa50:	460a      	mov	r2, r1
 800aa52:	71fb      	strb	r3, [r7, #7]
 800aa54:	4613      	mov	r3, r2
 800aa56:	71bb      	strb	r3, [r7, #6]
 800aa58:	79bb      	ldrb	r3, [r7, #6]
 800aa5a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800aa5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800aa62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa66:	b2db      	uxtb	r3, r3
  (void)rhport;

  uint8_t const ep_num = tu_edpt_number(ep_addr);
 800aa68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800aa6c:	79bb      	ldrb	r3, [r7, #6]
 800aa6e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800aa72:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800aa76:	09db      	lsrs	r3, r3, #7
 800aa78:	b2db      	uxtb	r3, r3
  tusb_dir_t const dir = tu_edpt_dir(ep_addr);
 800aa7a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800aa7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aa82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800aa86:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800aa8a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  return &xfer_status[epnum][dir];
 800aa8e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800aa92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa96:	0052      	lsls	r2, r2, #1
 800aa98:	4413      	add	r3, r2
 800aa9a:	011b      	lsls	r3, r3, #4
 800aa9c:	4a44      	ldr	r2, [pc, #272]	@ (800abb0 <dcd_edpt_clear_stall+0x168>)
 800aa9e:	4413      	add	r3, r2
  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 800aaa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const ep_idx = xfer->ep_idx;
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa4:	7b9b      	ldrb	r3, [r3, #14]
 800aaa6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  uint32_t ep_reg = ep_read(ep_idx) | USB_EP_CTR_TX | USB_EP_CTR_RX; // reserve CTR bits
 800aaaa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aaae:	633b      	str	r3, [r7, #48]	@ 0x30
  return FSDEV_REG->ep[ep_id].reg;
 800aab0:	4a40      	ldr	r2, [pc, #256]	@ (800abb4 <dcd_edpt_clear_stall+0x16c>)
 800aab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aabe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aac2:	60bb      	str	r3, [r7, #8]
  ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(dir) | EP_DTOG_MASK(dir);
 800aac4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d102      	bne.n	800aad2 <dcd_edpt_clear_stall+0x8a>
 800aacc:	f648 72bf 	movw	r2, #36799	@ 0x8fbf
 800aad0:	e001      	b.n	800aad6 <dcd_edpt_clear_stall+0x8e>
 800aad2:	f64b 728f 	movw	r2, #49039	@ 0xbf8f
 800aad6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d101      	bne.n	800aae2 <dcd_edpt_clear_stall+0x9a>
 800aade:	2340      	movs	r3, #64	@ 0x40
 800aae0:	e001      	b.n	800aae6 <dcd_edpt_clear_stall+0x9e>
 800aae2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aae6:	431a      	orrs	r2, r3
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	4013      	ands	r3, r2
 800aaec:	60bb      	str	r3, [r7, #8]

  if (!ep_is_iso(ep_reg)) {
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 800aaf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aaf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aafc:	bf0c      	ite	eq
 800aafe:	2301      	moveq	r3, #1
 800ab00:	2300      	movne	r3, #0
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f083 0301 	eor.w	r3, r3, #1
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d01a      	beq.n	800ab44 <dcd_edpt_clear_stall+0xfc>
 800ab0e:	f107 0308 	add.w	r3, r7, #8
 800ab12:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab14:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ab18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800ab22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 800ab2a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800ab2e:	2a01      	cmp	r2, #1
 800ab30:	d101      	bne.n	800ab36 <dcd_edpt_clear_stall+0xee>
 800ab32:	2204      	movs	r2, #4
 800ab34:	e000      	b.n	800ab38 <dcd_edpt_clear_stall+0xf0>
 800ab36:	220c      	movs	r2, #12
 800ab38:	fa01 f202 	lsl.w	r2, r1, r2
 800ab3c:	405a      	eors	r2, r3
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab40:	601a      	str	r2, [r3, #0]
}
 800ab42:	bf00      	nop
 800ab44:	f107 0308 	add.w	r3, r7, #8
 800ab48:	613b      	str	r3, [r7, #16]
 800ab4a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ab4e:	73fb      	strb	r3, [r7, #15]
 800ab50:	2300      	movs	r3, #0
 800ab52:	73bb      	strb	r3, [r7, #14]
  *reg ^= (state << (USB_EP_DTOG_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	7bb9      	ldrb	r1, [r7, #14]
 800ab5a:	7bfa      	ldrb	r2, [r7, #15]
 800ab5c:	2a01      	cmp	r2, #1
 800ab5e:	d101      	bne.n	800ab64 <dcd_edpt_clear_stall+0x11c>
 800ab60:	2206      	movs	r2, #6
 800ab62:	e000      	b.n	800ab66 <dcd_edpt_clear_stall+0x11e>
 800ab64:	220e      	movs	r2, #14
 800ab66:	fa01 f202 	lsl.w	r2, r1, r2
 800ab6a:	405a      	eors	r2, r3
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	601a      	str	r2, [r3, #0]
}
 800ab70:	bf00      	nop
    ep_change_status(&ep_reg, dir, EP_STAT_NAK);
  }
  ep_change_dtog(&ep_reg, dir, 0); // Reset to DATA0
  ep_write(ep_idx, ep_reg, true);
 800ab72:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	61fa      	str	r2, [r7, #28]
 800ab7a:	61bb      	str	r3, [r7, #24]
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	75fb      	strb	r3, [r7, #23]
  if (need_exclusive) {
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <dcd_edpt_clear_stall+0x144>
    dcd_int_disable(0);
 800ab86:	2000      	movs	r0, #0
 800ab88:	f7fe f8c0 	bl	8008d0c <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800ab8c:	4a09      	ldr	r2, [pc, #36]	@ (800abb4 <dcd_edpt_clear_stall+0x16c>)
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	b299      	uxth	r1, r3
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d002      	beq.n	800aba4 <dcd_edpt_clear_stall+0x15c>
    dcd_int_enable(0);
 800ab9e:	2000      	movs	r0, #0
 800aba0:	f7fe f892 	bl	8008cc8 <dcd_int_enable>
}
 800aba4:	bf00      	nop
}
 800aba6:	bf00      	nop
 800aba8:	3740      	adds	r7, #64	@ 0x40
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	2000074c 	.word	0x2000074c
 800abb4:	40005c00 	.word	0x40005c00

0800abb8 <dcd_write_packet_memory>:
//--------------------------------------------------------------------+

// Write to packet memory area (PMA) from user memory
// - Packet memory must be either strictly 16-bit or 32-bit depending on FSDEV_BUS_32BIT
// - Uses unaligned for RAM (since M0 cannot access unaligned address)
static bool dcd_write_packet_memory(uint16_t dst, const void *__restrict src, uint16_t nbytes) {
 800abb8:	b480      	push	{r7}
 800abba:	b089      	sub	sp, #36	@ 0x24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	4603      	mov	r3, r0
 800abc0:	6039      	str	r1, [r7, #0]
 800abc2:	80fb      	strh	r3, [r7, #6]
 800abc4:	4613      	mov	r3, r2
 800abc6:	80bb      	strh	r3, [r7, #4]
  if (nbytes == 0) return true;
 800abc8:	88bb      	ldrh	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d101      	bne.n	800abd2 <dcd_write_packet_memory+0x1a>
 800abce:	2301      	movs	r3, #1
 800abd0:	e044      	b.n	800ac5c <dcd_write_packet_memory+0xa4>
  uint32_t n_write = nbytes / FSDEV_BUS_SIZE;
 800abd2:	88bb      	ldrh	r3, [r7, #4]
 800abd4:	085b      	lsrs	r3, r3, #1
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	61fb      	str	r3, [r7, #28]

  fsdev_pma_buf_t* pma_buf = PMA_BUF_AT(dst);
 800abda:	88fb      	ldrh	r3, [r7, #6]
 800abdc:	005b      	lsls	r3, r3, #1
 800abde:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800abe2:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 800abe6:	61bb      	str	r3, [r7, #24]
  const uint8_t *src8 = src;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	617b      	str	r3, [r7, #20]

  while (n_write--) {
 800abec:	e00b      	b.n	800ac06 <dcd_write_packet_memory+0x4e>
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	60bb      	str	r3, [r7, #8]
  return *((uint16_t const *) mem);
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	881a      	ldrh	r2, [r3, #0]
    pma_buf->value = fsdevbus_unaligned_read(src8);
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	801a      	strh	r2, [r3, #0]
    src8 += FSDEV_BUS_SIZE;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	3302      	adds	r3, #2
 800abfe:	617b      	str	r3, [r7, #20]
    pma_buf++;
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	3304      	adds	r3, #4
 800ac04:	61bb      	str	r3, [r7, #24]
  while (n_write--) {
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	1e5a      	subs	r2, r3, #1
 800ac0a:	61fa      	str	r2, [r7, #28]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1ee      	bne.n	800abee <dcd_write_packet_memory+0x36>
  }

  // odd bytes e.g 1 for 16-bit or 1-3 for 32-bit
  uint16_t odd = nbytes & (FSDEV_BUS_SIZE - 1);
 800ac10:	88bb      	ldrh	r3, [r7, #4]
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	81fb      	strh	r3, [r7, #14]
  if (odd) {
 800ac18:	89fb      	ldrh	r3, [r7, #14]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d01d      	beq.n	800ac5a <dcd_write_packet_memory+0xa2>
    fsdev_bus_t temp = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	827b      	strh	r3, [r7, #18]
    for(uint16_t i = 0; i < odd; i++) {
 800ac22:	2300      	movs	r3, #0
 800ac24:	823b      	strh	r3, [r7, #16]
 800ac26:	e011      	b.n	800ac4c <dcd_write_packet_memory+0x94>
      temp |= *src8++ << (i * 8);
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	617a      	str	r2, [r7, #20]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	461a      	mov	r2, r3
 800ac32:	8a3b      	ldrh	r3, [r7, #16]
 800ac34:	00db      	lsls	r3, r3, #3
 800ac36:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3a:	b21a      	sxth	r2, r3
 800ac3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	b21b      	sxth	r3, r3
 800ac44:	827b      	strh	r3, [r7, #18]
    for(uint16_t i = 0; i < odd; i++) {
 800ac46:	8a3b      	ldrh	r3, [r7, #16]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	823b      	strh	r3, [r7, #16]
 800ac4c:	8a3a      	ldrh	r2, [r7, #16]
 800ac4e:	89fb      	ldrh	r3, [r7, #14]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d3e9      	bcc.n	800ac28 <dcd_write_packet_memory+0x70>
    }
    pma_buf->value = temp;
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	8a7a      	ldrh	r2, [r7, #18]
 800ac58:	801a      	strh	r2, [r3, #0]
  }

  return true;
 800ac5a:	2301      	movs	r3, #1
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3724      	adds	r7, #36	@ 0x24
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bc80      	pop	{r7}
 800ac64:	4770      	bx	lr

0800ac66 <dcd_read_packet_memory>:

// Read from packet memory area (PMA) to user memory.
// - Packet memory must be either strictly 16-bit or 32-bit depending on FSDEV_BUS_32BIT
// - Uses unaligned for RAM (since M0 cannot access unaligned address)
static bool dcd_read_packet_memory(void *__restrict dst, uint16_t src, uint16_t nbytes) {
 800ac66:	b480      	push	{r7}
 800ac68:	b089      	sub	sp, #36	@ 0x24
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	460b      	mov	r3, r1
 800ac70:	807b      	strh	r3, [r7, #2]
 800ac72:	4613      	mov	r3, r2
 800ac74:	803b      	strh	r3, [r7, #0]
  if (nbytes == 0) return true;
 800ac76:	883b      	ldrh	r3, [r7, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <dcd_read_packet_memory+0x1a>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e03d      	b.n	800acfc <dcd_read_packet_memory+0x96>
  uint32_t n_read = nbytes / FSDEV_BUS_SIZE;
 800ac80:	883b      	ldrh	r3, [r7, #0]
 800ac82:	085b      	lsrs	r3, r3, #1
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	61fb      	str	r3, [r7, #28]

  fsdev_pma_buf_t* pma_buf = PMA_BUF_AT(src);
 800ac88:	887b      	ldrh	r3, [r7, #2]
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac90:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 800ac94:	61bb      	str	r3, [r7, #24]
  uint8_t *dst8 = (uint8_t *)dst;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	617b      	str	r3, [r7, #20]

  while (n_read--) {
 800ac9a:	e010      	b.n	800acbe <dcd_read_packet_memory+0x58>
    fsdevbus_unaligned_write(dst8, (fsdev_bus_t ) pma_buf->value);
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	881b      	ldrh	r3, [r3, #0]
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	60fb      	str	r3, [r7, #12]
 800aca6:	4613      	mov	r3, r2
 800aca8:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write16(void *mem, uint16_t value) {
  *((uint16_t *) mem) = value;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	897a      	ldrh	r2, [r7, #10]
 800acae:	801a      	strh	r2, [r3, #0]
}
 800acb0:	bf00      	nop
    dst8 += FSDEV_BUS_SIZE;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	3302      	adds	r3, #2
 800acb6:	617b      	str	r3, [r7, #20]
    pma_buf++;
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	3304      	adds	r3, #4
 800acbc:	61bb      	str	r3, [r7, #24]
  while (n_read--) {
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	1e5a      	subs	r2, r3, #1
 800acc2:	61fa      	str	r2, [r7, #28]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1e9      	bne.n	800ac9c <dcd_read_packet_memory+0x36>
  }

  // odd bytes e.g 1 for 16-bit or 1-3 for 32-bit
  uint16_t odd = nbytes & (FSDEV_BUS_SIZE - 1);
 800acc8:	883b      	ldrh	r3, [r7, #0]
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	827b      	strh	r3, [r7, #18]
  if (odd) {
 800acd0:	8a7b      	ldrh	r3, [r7, #18]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d011      	beq.n	800acfa <dcd_read_packet_memory+0x94>
    fsdev_bus_t temp = pma_buf->value;
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	823b      	strh	r3, [r7, #16]
    while (odd--) {
 800acdc:	e008      	b.n	800acf0 <dcd_read_packet_memory+0x8a>
      *dst8++ = (uint8_t) (temp & 0xfful);
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	1c5a      	adds	r2, r3, #1
 800ace2:	617a      	str	r2, [r7, #20]
 800ace4:	8a3a      	ldrh	r2, [r7, #16]
 800ace6:	b2d2      	uxtb	r2, r2
 800ace8:	701a      	strb	r2, [r3, #0]
      temp >>= 8;
 800acea:	8a3b      	ldrh	r3, [r7, #16]
 800acec:	0a1b      	lsrs	r3, r3, #8
 800acee:	823b      	strh	r3, [r7, #16]
    while (odd--) {
 800acf0:	8a7b      	ldrh	r3, [r7, #18]
 800acf2:	1e5a      	subs	r2, r3, #1
 800acf4:	827a      	strh	r2, [r7, #18]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1f1      	bne.n	800acde <dcd_read_packet_memory+0x78>
    }
  }

  return true;
 800acfa:	2301      	movs	r3, #1
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3724      	adds	r7, #36	@ 0x24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bc80      	pop	{r7}
 800ad04:	4770      	bx	lr

0800ad06 <dcd_write_packet_memory_ff>:

// Write to PMA from FIFO
static bool dcd_write_packet_memory_ff(tu_fifo_t *ff, uint16_t dst, uint16_t wNBytes) {
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b08e      	sub	sp, #56	@ 0x38
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	460b      	mov	r3, r1
 800ad10:	807b      	strh	r3, [r7, #2]
 800ad12:	4613      	mov	r3, r2
 800ad14:	803b      	strh	r3, [r7, #0]
  if (wNBytes == 0) return true;
 800ad16:	883b      	ldrh	r3, [r7, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d101      	bne.n	800ad20 <dcd_write_packet_memory_ff+0x1a>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e092      	b.n	800ae46 <dcd_write_packet_memory_ff+0x140>

  // Since we copy from a ring buffer FIFO, a wrap might occur making it necessary to conduct two copies
  tu_fifo_buffer_info_t info;
  tu_fifo_get_read_info(ff, &info);
 800ad20:	f107 0310 	add.w	r3, r7, #16
 800ad24:	4619      	mov	r1, r3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7fb fd25 	bl	8006776 <tu_fifo_get_read_info>

  uint16_t cnt_lin = tu_min16(wNBytes, info.len_lin);
 800ad2c:	8a3a      	ldrh	r2, [r7, #16]
 800ad2e:	883b      	ldrh	r3, [r7, #0]
 800ad30:	843b      	strh	r3, [r7, #32]
 800ad32:	4613      	mov	r3, r2
 800ad34:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800ad36:	8c3a      	ldrh	r2, [r7, #32]
 800ad38:	8bfb      	ldrh	r3, [r7, #30]
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	bf28      	it	cs
 800ad3e:	4613      	movcs	r3, r2
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint16_t cnt_wrap = tu_min16(wNBytes - cnt_lin, info.len_wrap);
 800ad44:	883a      	ldrh	r2, [r7, #0]
 800ad46:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	b29a      	uxth	r2, r3
 800ad4c:	8a7b      	ldrh	r3, [r7, #18]
 800ad4e:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800ad50:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ad52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ad54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ad56:	4293      	cmp	r3, r2
 800ad58:	bf28      	it	cs
 800ad5a:	4613      	movcs	r3, r2
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t const cnt_total = cnt_lin + cnt_wrap;
 800ad60:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800ad62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad64:	4413      	add	r3, r2
 800ad66:	857b      	strh	r3, [r7, #42]	@ 0x2a

  // We want to read from the FIFO and write it into the PMA, if LIN part is ODD and has WRAPPED part,
  // last lin byte will be combined with wrapped part To ensure PMA is always access aligned
  uint16_t lin_even = cnt_lin & ~(FSDEV_BUS_SIZE - 1);
 800ad68:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ad6a:	f023 0301 	bic.w	r3, r3, #1
 800ad6e:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t lin_odd = cnt_lin & (FSDEV_BUS_SIZE - 1);
 800ad70:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint8_t const *src8 = (uint8_t const*) info.ptr_lin;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	633b      	str	r3, [r7, #48]	@ 0x30

  // write even linear part
  dcd_write_packet_memory(dst, src8, lin_even);
 800ad7c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ad7e:	887b      	ldrh	r3, [r7, #2]
 800ad80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7ff ff18 	bl	800abb8 <dcd_write_packet_memory>
  dst += lin_even;
 800ad88:	887a      	ldrh	r2, [r7, #2]
 800ad8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad8c:	4413      	add	r3, r2
 800ad8e:	807b      	strh	r3, [r7, #2]
  src8 += lin_even;
 800ad90:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad94:	4413      	add	r3, r2
 800ad96:	633b      	str	r3, [r7, #48]	@ 0x30

  if (lin_odd == 0) {
 800ad98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d102      	bne.n	800ada4 <dcd_write_packet_memory_ff+0x9e>
    src8 = (uint8_t const*) info.ptr_wrap;
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	633b      	str	r3, [r7, #48]	@ 0x30
 800ada2:	e044      	b.n	800ae2e <dcd_write_packet_memory_ff+0x128>
  } else {
    // Combine last linear bytes + first wrapped bytes to form fsdev bus width data
    fsdev_bus_t temp = 0;
 800ada4:	2300      	movs	r3, #0
 800ada6:	81fb      	strh	r3, [r7, #14]
    uint16_t i;
    for(i = 0; i < lin_odd; i++) {
 800ada8:	2300      	movs	r3, #0
 800adaa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800adac:	e012      	b.n	800add4 <dcd_write_packet_memory_ff+0xce>
      temp |= *src8++ << (i * 8);
 800adae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	633a      	str	r2, [r7, #48]	@ 0x30
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	fa02 f303 	lsl.w	r3, r2, r3
 800adc0:	b21a      	sxth	r2, r3
 800adc2:	89fb      	ldrh	r3, [r7, #14]
 800adc4:	b21b      	sxth	r3, r3
 800adc6:	4313      	orrs	r3, r2
 800adc8:	b21b      	sxth	r3, r3
 800adca:	b29b      	uxth	r3, r3
 800adcc:	81fb      	strh	r3, [r7, #14]
    for(i = 0; i < lin_odd; i++) {
 800adce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800add0:	3301      	adds	r3, #1
 800add2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800add4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800add6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800add8:	429a      	cmp	r2, r3
 800adda:	d3e8      	bcc.n	800adae <dcd_write_packet_memory_ff+0xa8>
    }

    src8 = (uint8_t const*) info.ptr_wrap;
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	633b      	str	r3, [r7, #48]	@ 0x30
    for(; i < FSDEV_BUS_SIZE && cnt_wrap > 0; i++, cnt_wrap--) {
 800ade0:	e015      	b.n	800ae0e <dcd_write_packet_memory_ff+0x108>
      temp |= *src8++ << (i * 8);
 800ade2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade4:	1c5a      	adds	r2, r3, #1
 800ade6:	633a      	str	r2, [r7, #48]	@ 0x30
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	461a      	mov	r2, r3
 800adec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800adee:	00db      	lsls	r3, r3, #3
 800adf0:	fa02 f303 	lsl.w	r3, r2, r3
 800adf4:	b21a      	sxth	r2, r3
 800adf6:	89fb      	ldrh	r3, [r7, #14]
 800adf8:	b21b      	sxth	r3, r3
 800adfa:	4313      	orrs	r3, r2
 800adfc:	b21b      	sxth	r3, r3
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	81fb      	strh	r3, [r7, #14]
    for(; i < FSDEV_BUS_SIZE && cnt_wrap > 0; i++, cnt_wrap--) {
 800ae02:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ae04:	3301      	adds	r3, #1
 800ae06:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800ae08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ae0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d802      	bhi.n	800ae1a <dcd_write_packet_memory_ff+0x114>
 800ae14:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1e3      	bne.n	800ade2 <dcd_write_packet_memory_ff+0xdc>
    }

    dcd_write_packet_memory(dst, &temp, FSDEV_BUS_SIZE);
 800ae1a:	f107 010e 	add.w	r1, r7, #14
 800ae1e:	887b      	ldrh	r3, [r7, #2]
 800ae20:	2202      	movs	r2, #2
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff fec8 	bl	800abb8 <dcd_write_packet_memory>
    dst += FSDEV_BUS_SIZE;
 800ae28:	887b      	ldrh	r3, [r7, #2]
 800ae2a:	3302      	adds	r3, #2
 800ae2c:	807b      	strh	r3, [r7, #2]
  }

  // write the rest of the wrapped part
  dcd_write_packet_memory(dst, src8, cnt_wrap);
 800ae2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ae30:	887b      	ldrh	r3, [r7, #2]
 800ae32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7ff febf 	bl	800abb8 <dcd_write_packet_memory>

  tu_fifo_advance_read_pointer(ff, cnt_total);
 800ae3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7fb fc82 	bl	8006748 <tu_fifo_advance_read_pointer>
  return true;
 800ae44:	2301      	movs	r3, #1
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3738      	adds	r7, #56	@ 0x38
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <dcd_read_packet_memory_ff>:

// Read from PMA to FIFO
static bool dcd_read_packet_memory_ff(tu_fifo_t *ff, uint16_t src, uint16_t wNBytes) {
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b08e      	sub	sp, #56	@ 0x38
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	460b      	mov	r3, r1
 800ae58:	807b      	strh	r3, [r7, #2]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	803b      	strh	r3, [r7, #0]
  if (wNBytes == 0) return true;
 800ae5e:	883b      	ldrh	r3, [r7, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d101      	bne.n	800ae68 <dcd_read_packet_memory_ff+0x1a>
 800ae64:	2301      	movs	r3, #1
 800ae66:	e084      	b.n	800af72 <dcd_read_packet_memory_ff+0x124>

  // Since we copy into a ring buffer FIFO, a wrap might occur making it necessary to conduct two copies
  // Check for first linear part
  tu_fifo_buffer_info_t info;
  tu_fifo_get_write_info(ff, &info); // We want to read from the FIFO
 800ae68:	f107 0310 	add.w	r3, r7, #16
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7fb fd21 	bl	80068b6 <tu_fifo_get_write_info>

  uint16_t cnt_lin = tu_min16(wNBytes, info.len_lin);
 800ae74:	8a3a      	ldrh	r2, [r7, #16]
 800ae76:	883b      	ldrh	r3, [r7, #0]
 800ae78:	843b      	strh	r3, [r7, #32]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	83fb      	strh	r3, [r7, #30]
 800ae7e:	8c3a      	ldrh	r2, [r7, #32]
 800ae80:	8bfb      	ldrh	r3, [r7, #30]
 800ae82:	4293      	cmp	r3, r2
 800ae84:	bf28      	it	cs
 800ae86:	4613      	movcs	r3, r2
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint16_t cnt_wrap = tu_min16(wNBytes - cnt_lin, info.len_wrap);
 800ae8c:	883a      	ldrh	r2, [r7, #0]
 800ae8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	8a7b      	ldrh	r3, [r7, #18]
 800ae96:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800ae98:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ae9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ae9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	bf28      	it	cs
 800aea2:	4613      	movcs	r3, r2
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t cnt_total = cnt_lin + cnt_wrap;
 800aea8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800aeaa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aeac:	4413      	add	r3, r2
 800aeae:	857b      	strh	r3, [r7, #42]	@ 0x2a

  // We want to read from the FIFO and write it into the PMA, if LIN part is ODD and has WRAPPED part,
  // last lin byte will be combined with wrapped part To ensure PMA is always access aligned

  uint16_t lin_even = cnt_lin & ~(FSDEV_BUS_SIZE - 1);
 800aeb0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800aeb2:	f023 0301 	bic.w	r3, r3, #1
 800aeb6:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t lin_odd = cnt_lin & (FSDEV_BUS_SIZE - 1);
 800aeb8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint8_t *dst8 = (uint8_t *) info.ptr_lin;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	633b      	str	r3, [r7, #48]	@ 0x30

  // read even linear part
  dcd_read_packet_memory(dst8, src, lin_even);
 800aec4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aec6:	887b      	ldrh	r3, [r7, #2]
 800aec8:	4619      	mov	r1, r3
 800aeca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aecc:	f7ff fecb 	bl	800ac66 <dcd_read_packet_memory>
  dst8 += lin_even;
 800aed0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aed4:	4413      	add	r3, r2
 800aed6:	633b      	str	r3, [r7, #48]	@ 0x30
  src += lin_even;
 800aed8:	887a      	ldrh	r2, [r7, #2]
 800aeda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aedc:	4413      	add	r3, r2
 800aede:	807b      	strh	r3, [r7, #2]

  if (lin_odd == 0) {
 800aee0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d102      	bne.n	800aeec <dcd_read_packet_memory_ff+0x9e>
    dst8 = (uint8_t *) info.ptr_wrap;
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	633b      	str	r3, [r7, #48]	@ 0x30
 800aeea:	e036      	b.n	800af5a <dcd_read_packet_memory_ff+0x10c>
  } else {
    // Combine last linear bytes + first wrapped bytes to form fsdev bus width data
    fsdev_bus_t temp;
    dcd_read_packet_memory(&temp, src, FSDEV_BUS_SIZE);
 800aeec:	8879      	ldrh	r1, [r7, #2]
 800aeee:	f107 030e 	add.w	r3, r7, #14
 800aef2:	2202      	movs	r2, #2
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7ff feb6 	bl	800ac66 <dcd_read_packet_memory>
    src += FSDEV_BUS_SIZE;
 800aefa:	887b      	ldrh	r3, [r7, #2]
 800aefc:	3302      	adds	r3, #2
 800aefe:	807b      	strh	r3, [r7, #2]

    uint16_t i;
    for (i = 0; i < lin_odd; i++) {
 800af00:	2300      	movs	r3, #0
 800af02:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800af04:	e00c      	b.n	800af20 <dcd_read_packet_memory_ff+0xd2>
      *dst8++ = (uint8_t) (temp & 0xfful);
 800af06:	89f9      	ldrh	r1, [r7, #14]
 800af08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0a:	1c5a      	adds	r2, r3, #1
 800af0c:	633a      	str	r2, [r7, #48]	@ 0x30
 800af0e:	b2ca      	uxtb	r2, r1
 800af10:	701a      	strb	r2, [r3, #0]
      temp >>= 8;
 800af12:	89fb      	ldrh	r3, [r7, #14]
 800af14:	0a1b      	lsrs	r3, r3, #8
 800af16:	b29b      	uxth	r3, r3
 800af18:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < lin_odd; i++) {
 800af1a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800af1c:	3301      	adds	r3, #1
 800af1e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800af20:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800af22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800af24:	429a      	cmp	r2, r3
 800af26:	d3ee      	bcc.n	800af06 <dcd_read_packet_memory_ff+0xb8>
    }

    dst8 = (uint8_t *) info.ptr_wrap;
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	633b      	str	r3, [r7, #48]	@ 0x30
    for (; i < FSDEV_BUS_SIZE && cnt_wrap > 0; i++, cnt_wrap--) {
 800af2c:	e00f      	b.n	800af4e <dcd_read_packet_memory_ff+0x100>
      *dst8++ = (uint8_t) (temp & 0xfful);
 800af2e:	89f9      	ldrh	r1, [r7, #14]
 800af30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	633a      	str	r2, [r7, #48]	@ 0x30
 800af36:	b2ca      	uxtb	r2, r1
 800af38:	701a      	strb	r2, [r3, #0]
      temp >>= 8;
 800af3a:	89fb      	ldrh	r3, [r7, #14]
 800af3c:	0a1b      	lsrs	r3, r3, #8
 800af3e:	b29b      	uxth	r3, r3
 800af40:	81fb      	strh	r3, [r7, #14]
    for (; i < FSDEV_BUS_SIZE && cnt_wrap > 0; i++, cnt_wrap--) {
 800af42:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800af44:	3301      	adds	r3, #1
 800af46:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800af48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af4a:	3b01      	subs	r3, #1
 800af4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800af4e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800af50:	2b01      	cmp	r3, #1
 800af52:	d802      	bhi.n	800af5a <dcd_read_packet_memory_ff+0x10c>
 800af54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1e9      	bne.n	800af2e <dcd_read_packet_memory_ff+0xe0>
    }
  }

  // read the rest of the wrapped part
  dcd_read_packet_memory(dst8, src, cnt_wrap);
 800af5a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800af5c:	887b      	ldrh	r3, [r7, #2]
 800af5e:	4619      	mov	r1, r3
 800af60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af62:	f7ff fe80 	bl	800ac66 <dcd_read_packet_memory>

  tu_fifo_advance_write_pointer(ff, cnt_total);
 800af66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800af68:	4619      	mov	r1, r3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7fb fbd5 	bl	800671a <tu_fifo_advance_write_pointer>
  return true;
 800af70:	2301      	movs	r3, #1
}
 800af72:	4618      	mov	r0, r3
 800af74:	3738      	adds	r7, #56	@ 0x38
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
	...

0800af7c <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	6039      	str	r1, [r7, #0]
 800af86:	71fb      	strb	r3, [r7, #7]
    return true;
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800af88:	79fb      	ldrb	r3, [r7, #7]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d803      	bhi.n	800af96 <tusb_rhport_init+0x1a>
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10f      	bne.n	800afb6 <tusb_rhport_init+0x3a>
 800af96:	225a      	movs	r2, #90	@ 0x5a
 800af98:	491b      	ldr	r1, [pc, #108]	@ (800b008 <tusb_rhport_init+0x8c>)
 800af9a:	481c      	ldr	r0, [pc, #112]	@ (800b00c <tusb_rhport_init+0x90>)
 800af9c:	f000 fb4a 	bl	800b634 <iprintf>
 800afa0:	4b1b      	ldr	r3, [pc, #108]	@ (800b010 <tusb_rhport_init+0x94>)
 800afa2:	60bb      	str	r3, [r7, #8]
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 0301 	and.w	r3, r3, #1
 800afac:	2b00      	cmp	r3, #0
 800afae:	d000      	beq.n	800afb2 <tusb_rhport_init+0x36>
 800afb0:	be00      	bkpt	0x0000
 800afb2:	2300      	movs	r3, #0
 800afb4:	e024      	b.n	800b000 <tusb_rhport_init+0x84>
  _tusb_rhport_role[rhport] = rh_init->role;
 800afb6:	79fb      	ldrb	r3, [r7, #7]
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	7811      	ldrb	r1, [r2, #0]
 800afbc:	4a15      	ldr	r2, [pc, #84]	@ (800b014 <tusb_rhport_init+0x98>)
 800afbe:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d11a      	bne.n	800affe <tusb_rhport_init+0x82>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800afc8:	79fb      	ldrb	r3, [r7, #7]
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fb fe11 	bl	8006bf4 <tud_rhport_init>
 800afd2:	4603      	mov	r3, r0
 800afd4:	f083 0301 	eor.w	r3, r3, #1
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00f      	beq.n	800affe <tusb_rhport_init+0x82>
 800afde:	225f      	movs	r2, #95	@ 0x5f
 800afe0:	4909      	ldr	r1, [pc, #36]	@ (800b008 <tusb_rhport_init+0x8c>)
 800afe2:	480a      	ldr	r0, [pc, #40]	@ (800b00c <tusb_rhport_init+0x90>)
 800afe4:	f000 fb26 	bl	800b634 <iprintf>
 800afe8:	4b09      	ldr	r3, [pc, #36]	@ (800b010 <tusb_rhport_init+0x94>)
 800afea:	60fb      	str	r3, [r7, #12]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d000      	beq.n	800affa <tusb_rhport_init+0x7e>
 800aff8:	be00      	bkpt	0x0000
 800affa:	2300      	movs	r3, #0
 800affc:	e000      	b.n	800b000 <tusb_rhport_init+0x84>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800affe:	2301      	movs	r3, #1
}
 800b000:	4618      	mov	r0, r3
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	0800d1e4 	.word	0x0800d1e4
 800b00c:	0800cd40 	.word	0x0800cd40
 800b010:	e000edf0 	.word	0xe000edf0
 800b014:	20000870 	.word	0x20000870

0800b018 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d106      	bne.n	800b03e <tu_edpt_claim+0x26>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d001      	beq.n	800b042 <tu_edpt_claim+0x2a>
 800b03e:	2300      	movs	r3, #0
 800b040:	e01e      	b.n	800b080 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d108      	bne.n	800b062 <tu_edpt_claim+0x4a>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <tu_edpt_claim+0x4a>
 800b05e:	2301      	movs	r3, #1
 800b060:	e000      	b.n	800b064 <tu_edpt_claim+0x4c>
 800b062:	2300      	movs	r3, #0
 800b064:	73fb      	strb	r3, [r7, #15]
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	f003 0301 	and.w	r3, r3, #1
 800b06c:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d004      	beq.n	800b07e <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	7813      	ldrb	r3, [r2, #0]
 800b078:	f043 0304 	orr.w	r3, r3, #4
 800b07c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800b07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3714      	adds	r7, #20
 800b084:	46bd      	mov	sp, r7
 800b086:	bc80      	pop	{r7}
 800b088:	4770      	bx	lr

0800b08a <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800b08a:	b480      	push	{r7}
 800b08c:	b085      	sub	sp, #20
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d108      	bne.n	800b0b4 <tu_edpt_release+0x2a>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d101      	bne.n	800b0b4 <tu_edpt_release+0x2a>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e000      	b.n	800b0b6 <tu_edpt_release+0x2c>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	73fb      	strb	r3, [r7, #15]
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	f003 0301 	and.w	r3, r3, #1
 800b0be:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	7813      	ldrb	r3, [r2, #0]
 800b0ca:	f36f 0382 	bfc	r3, #2, #1
 800b0ce:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bc80      	pop	{r7}
 800b0da:	4770      	bx	lr

0800b0dc <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed) {
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08a      	sub	sp, #40	@ 0x28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	70fb      	strb	r3, [r7, #3]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	889b      	ldrh	r3, [r3, #4]
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0f6:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800b0f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	789b      	ldrb	r3, [r3, #2]
 800b0fe:	4619      	mov	r1, r3
 800b100:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b102:	461a      	mov	r2, r3
 800b104:	483f      	ldr	r0, [pc, #252]	@ (800b204 <tu_edpt_validate+0x128>)
 800b106:	f000 fa95 	bl	800b634 <iprintf>

  switch (desc_ep->bmAttributes.xfer) {
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	78db      	ldrb	r3, [r3, #3]
 800b10e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b03      	cmp	r3, #3
 800b116:	d04d      	beq.n	800b1b4 <tu_edpt_validate+0xd8>
 800b118:	2b03      	cmp	r3, #3
 800b11a:	dc67      	bgt.n	800b1ec <tu_edpt_validate+0x110>
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d002      	beq.n	800b126 <tu_edpt_validate+0x4a>
 800b120:	2b02      	cmp	r3, #2
 800b122:	d01d      	beq.n	800b160 <tu_edpt_validate+0x84>
 800b124:	e062      	b.n	800b1ec <tu_edpt_validate+0x110>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800b126:	78fb      	ldrb	r3, [r7, #3]
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d102      	bne.n	800b132 <tu_edpt_validate+0x56>
 800b12c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b130:	e001      	b.n	800b136 <tu_edpt_validate+0x5a>
 800b132:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800b136:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 800b138:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b13a:	8afb      	ldrh	r3, [r7, #22]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d957      	bls.n	800b1f0 <tu_edpt_validate+0x114>
 800b140:	22d1      	movs	r2, #209	@ 0xd1
 800b142:	4931      	ldr	r1, [pc, #196]	@ (800b208 <tu_edpt_validate+0x12c>)
 800b144:	4831      	ldr	r0, [pc, #196]	@ (800b20c <tu_edpt_validate+0x130>)
 800b146:	f000 fa75 	bl	800b634 <iprintf>
 800b14a:	4b31      	ldr	r3, [pc, #196]	@ (800b210 <tu_edpt_validate+0x134>)
 800b14c:	613b      	str	r3, [r7, #16]
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f003 0301 	and.w	r3, r3, #1
 800b156:	2b00      	cmp	r3, #0
 800b158:	d000      	beq.n	800b15c <tu_edpt_validate+0x80>
 800b15a:	be00      	bkpt	0x0000
 800b15c:	2300      	movs	r3, #0
 800b15e:	e04d      	b.n	800b1fc <tu_edpt_validate+0x120>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800b160:	78fb      	ldrb	r3, [r7, #3]
 800b162:	2b02      	cmp	r3, #2
 800b164:	d113      	bne.n	800b18e <tu_edpt_validate+0xb2>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800b166:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b16c:	d042      	beq.n	800b1f4 <tu_edpt_validate+0x118>
 800b16e:	22d8      	movs	r2, #216	@ 0xd8
 800b170:	4925      	ldr	r1, [pc, #148]	@ (800b208 <tu_edpt_validate+0x12c>)
 800b172:	4826      	ldr	r0, [pc, #152]	@ (800b20c <tu_edpt_validate+0x130>)
 800b174:	f000 fa5e 	bl	800b634 <iprintf>
 800b178:	4b25      	ldr	r3, [pc, #148]	@ (800b210 <tu_edpt_validate+0x134>)
 800b17a:	61bb      	str	r3, [r7, #24]
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 0301 	and.w	r3, r3, #1
 800b184:	2b00      	cmp	r3, #0
 800b186:	d000      	beq.n	800b18a <tu_edpt_validate+0xae>
 800b188:	be00      	bkpt	0x0000
 800b18a:	2300      	movs	r3, #0
 800b18c:	e036      	b.n	800b1fc <tu_edpt_validate+0x120>
      } else {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 800b18e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b190:	2b40      	cmp	r3, #64	@ 0x40
 800b192:	d92f      	bls.n	800b1f4 <tu_edpt_validate+0x118>
 800b194:	22db      	movs	r2, #219	@ 0xdb
 800b196:	491c      	ldr	r1, [pc, #112]	@ (800b208 <tu_edpt_validate+0x12c>)
 800b198:	481c      	ldr	r0, [pc, #112]	@ (800b20c <tu_edpt_validate+0x130>)
 800b19a:	f000 fa4b 	bl	800b634 <iprintf>
 800b19e:	4b1c      	ldr	r3, [pc, #112]	@ (800b210 <tu_edpt_validate+0x134>)
 800b1a0:	61fb      	str	r3, [r7, #28]
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f003 0301 	and.w	r3, r3, #1
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d000      	beq.n	800b1b0 <tu_edpt_validate+0xd4>
 800b1ae:	be00      	bkpt	0x0000
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	e023      	b.n	800b1fc <tu_edpt_validate+0x120>
      }
      break;

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800b1b4:	78fb      	ldrb	r3, [r7, #3]
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d102      	bne.n	800b1c0 <tu_edpt_validate+0xe4>
 800b1ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1be:	e000      	b.n	800b1c2 <tu_edpt_validate+0xe6>
 800b1c0:	2340      	movs	r3, #64	@ 0x40
 800b1c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800b1c4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b1c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d915      	bls.n	800b1f8 <tu_edpt_validate+0x11c>
 800b1cc:	22e1      	movs	r2, #225	@ 0xe1
 800b1ce:	490e      	ldr	r1, [pc, #56]	@ (800b208 <tu_edpt_validate+0x12c>)
 800b1d0:	480e      	ldr	r0, [pc, #56]	@ (800b20c <tu_edpt_validate+0x130>)
 800b1d2:	f000 fa2f 	bl	800b634 <iprintf>
 800b1d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b210 <tu_edpt_validate+0x134>)
 800b1d8:	623b      	str	r3, [r7, #32]
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 0301 	and.w	r3, r3, #1
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d000      	beq.n	800b1e8 <tu_edpt_validate+0x10c>
 800b1e6:	be00      	bkpt	0x0000
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	e007      	b.n	800b1fc <tu_edpt_validate+0x120>
      break;
    }

    default:
      return false;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	e005      	b.n	800b1fc <tu_edpt_validate+0x120>
      break;
 800b1f0:	bf00      	nop
 800b1f2:	e002      	b.n	800b1fa <tu_edpt_validate+0x11e>
      break;
 800b1f4:	bf00      	nop
 800b1f6:	e000      	b.n	800b1fa <tu_edpt_validate+0x11e>
      break;
 800b1f8:	bf00      	nop
  }

  return true;
 800b1fa:	2301      	movs	r3, #1
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3728      	adds	r7, #40	@ 0x28
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	0800cd58 	.word	0x0800cd58
 800b208:	0800d1f8 	.word	0x0800d1f8
 800b20c:	0800cd40 	.word	0x0800cd40
 800b210:	e000edf0 	.word	0xe000edf0

0800b214 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800b214:	b580      	push	{r7, lr}
 800b216:	b08c      	sub	sp, #48	@ 0x30
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	4611      	mov	r1, r2
 800b220:	461a      	mov	r2, r3
 800b222:	460b      	mov	r3, r1
 800b224:	80fb      	strh	r3, [r7, #6]
 800b226:	4613      	mov	r3, r2
 800b228:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800b22e:	88fb      	ldrh	r3, [r7, #6]
 800b230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b232:	4413      	add	r3, r2
 800b234:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800b236:	e02e      	b.n	800b296 <tu_edpt_bind_driver+0x82>
 800b238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23a:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800b23c:	6a3b      	ldr	r3, [r7, #32]
 800b23e:	3301      	adds	r3, #1
 800b240:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800b242:	2b05      	cmp	r3, #5
 800b244:	d11d      	bne.n	800b282 <tu_edpt_bind_driver+0x6e>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800b246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b248:	789b      	ldrb	r3, [r3, #2]
 800b24a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
 800b24e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b252:	797a      	ldrb	r2, [r7, #5]
 800b254:	4619      	mov	r1, r3
 800b256:	4814      	ldr	r0, [pc, #80]	@ (800b2a8 <tu_edpt_bind_driver+0x94>)
 800b258:	f000 f9ec 	bl	800b634 <iprintf>
 800b25c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b260:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b262:	7fbb      	ldrb	r3, [r7, #30]
 800b264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b268:	b2db      	uxtb	r3, r3
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800b26a:	005b      	lsls	r3, r3, #1
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	4413      	add	r3, r2
 800b270:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b274:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b276:	7ffa      	ldrb	r2, [r7, #31]
 800b278:	09d2      	lsrs	r2, r2, #7
 800b27a:	b2d2      	uxtb	r2, r2
 800b27c:	4611      	mov	r1, r2
 800b27e:	797a      	ldrb	r2, [r7, #5]
 800b280:	545a      	strb	r2, [r3, r1]
 800b282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b284:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	461a      	mov	r2, r3
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800b294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800b296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d3cc      	bcc.n	800b238 <tu_edpt_bind_driver+0x24>
  }
}
 800b29e:	bf00      	nop
 800b2a0:	bf00      	nop
 800b2a2:	3730      	adds	r7, #48	@ 0x30
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	0800cd78 	.word	0x0800cd78

0800b2ac <dump_str_line>:
char const* const tu_str_xfer_result[] = {
    "OK", "FAILED", "STALLED", "TIMEOUT"
};
#endif

static void dump_str_line(uint8_t const* buf, uint16_t count) {
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	807b      	strh	r3, [r7, #2]
  tu_printf("  |");
 800b2b8:	4813      	ldr	r0, [pc, #76]	@ (800b308 <dump_str_line+0x5c>)
 800b2ba:	f000 f9bb 	bl	800b634 <iprintf>
  // each line is 16 bytes
  for (uint16_t i = 0; i < count; i++) {
 800b2be:	2300      	movs	r3, #0
 800b2c0:	81fb      	strh	r3, [r7, #14]
 800b2c2:	e016      	b.n	800b2f2 <dump_str_line+0x46>
    int ch = buf[i];
 800b2c4:	89fb      	ldrh	r3, [r7, #14]
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	60bb      	str	r3, [r7, #8]
    tu_printf("%c", isprint(ch) ? ch : '.');
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	4a0e      	ldr	r2, [pc, #56]	@ (800b30c <dump_str_line+0x60>)
 800b2d4:	4413      	add	r3, r2
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d001      	beq.n	800b2e4 <dump_str_line+0x38>
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	e000      	b.n	800b2e6 <dump_str_line+0x3a>
 800b2e4:	232e      	movs	r3, #46	@ 0x2e
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 f9b6 	bl	800b658 <putchar>
  for (uint16_t i = 0; i < count; i++) {
 800b2ec:	89fb      	ldrh	r3, [r7, #14]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	81fb      	strh	r3, [r7, #14]
 800b2f2:	89fa      	ldrh	r2, [r7, #14]
 800b2f4:	887b      	ldrh	r3, [r7, #2]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d3e4      	bcc.n	800b2c4 <dump_str_line+0x18>
  }
  tu_printf("|\r\n");
 800b2fa:	4805      	ldr	r0, [pc, #20]	@ (800b310 <dump_str_line+0x64>)
 800b2fc:	f000 fa0a 	bl	800b714 <puts>
}
 800b300:	bf00      	nop
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	0800ce80 	.word	0x0800ce80
 800b30c:	0800d209 	.word	0x0800d209
 800b310:	0800ce84 	.word	0x0800ce84

0800b314 <tu_print_mem>:
/* Print out memory contents
 *  - buf   : buffer
 *  - count : number of item
 *  - indent: prefix spaces on every line
 */
void tu_print_mem(void const* buf, uint32_t count, uint8_t indent) {
 800b314:	b580      	push	{r7, lr}
 800b316:	b094      	sub	sp, #80	@ 0x50
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	4613      	mov	r3, r2
 800b320:	71fb      	strb	r3, [r7, #7]
  uint8_t const size = 1; // fixed 1 byte for now
 800b322:	2301      	movs	r3, #1
 800b324:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (!buf || !count) {
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d002      	beq.n	800b334 <tu_print_mem+0x20>
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d103      	bne.n	800b33c <tu_print_mem+0x28>
    tu_printf("NULL\r\n");
 800b334:	485b      	ldr	r0, [pc, #364]	@ (800b4a4 <tu_print_mem+0x190>)
 800b336:	f000 f9ed 	bl	800b714 <puts>
 800b33a:	e0b0      	b.n	800b49e <tu_print_mem+0x18a>
    return;
  }

  uint8_t const* buf8 = (uint8_t const*) buf;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  char format[] = "%00X";
 800b340:	4a59      	ldr	r2, [pc, #356]	@ (800b4a8 <tu_print_mem+0x194>)
 800b342:	f107 0318 	add.w	r3, r7, #24
 800b346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b34a:	6018      	str	r0, [r3, #0]
 800b34c:	3304      	adds	r3, #4
 800b34e:	7019      	strb	r1, [r3, #0]
  format[2] += (uint8_t) (2 * size); // 1 byte = 2 hex digits
 800b350:	7eba      	ldrb	r2, [r7, #26]
 800b352:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b356:	005b      	lsls	r3, r3, #1
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	4413      	add	r3, r2
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	76bb      	strb	r3, [r7, #26]
  const uint8_t item_per_line = 16 / size;
 800b360:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b364:	2210      	movs	r2, #16
 800b366:	fb92 f3f3 	sdiv	r3, r2, r3
 800b36a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

  for (unsigned int i = 0; i < count; i++) {
 800b36e:	2300      	movs	r3, #0
 800b370:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b372:	e056      	b.n	800b422 <tu_print_mem+0x10e>
    unsigned int value = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	617b      	str	r3, [r7, #20]

    if (i % item_per_line == 0) {
 800b378:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800b37c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b37e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b382:	fb01 f202 	mul.w	r2, r1, r2
 800b386:	1a9b      	subs	r3, r3, r2
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d123      	bne.n	800b3d4 <tu_print_mem+0xc0>
      // Print Ascii
      if (i != 0) dump_str_line(buf8 - 16, 16);
 800b38c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d005      	beq.n	800b39e <tu_print_mem+0x8a>
 800b392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b394:	3b10      	subs	r3, #16
 800b396:	2110      	movs	r1, #16
 800b398:	4618      	mov	r0, r3
 800b39a:	f7ff ff87 	bl	800b2ac <dump_str_line>
      for (uint8_t s = 0; s < indent; s++) tu_printf(" ");
 800b39e:	2300      	movs	r3, #0
 800b3a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b3a4:	e007      	b.n	800b3b6 <tu_print_mem+0xa2>
 800b3a6:	2020      	movs	r0, #32
 800b3a8:	f000 f956 	bl	800b658 <putchar>
 800b3ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b3b6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800b3ba:	79fb      	ldrb	r3, [r7, #7]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d3f2      	bcc.n	800b3a6 <tu_print_mem+0x92>
      // print offset or absolute address
      tu_printf("%04X: ", 16 * i / item_per_line);
 800b3c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3c2:	011a      	lsls	r2, r3, #4
 800b3c4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	4837      	ldr	r0, [pc, #220]	@ (800b4ac <tu_print_mem+0x198>)
 800b3d0:	f000 f930 	bl	800b634 <iprintf>
    }

    tu_memcpy_s(&value, sizeof(value), buf8, size);
 800b3d4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b3d8:	f107 0214 	add.w	r2, r7, #20
 800b3dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3de:	2204      	movs	r2, #4
 800b3e0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b3e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3e4:	627a      	str	r2, [r7, #36]	@ 0x24
 800b3e6:	623b      	str	r3, [r7, #32]
}

// This is a backport of memcpy_s from c11
TU_ATTR_ALWAYS_INLINE static inline int tu_memcpy_s(void *dest, size_t destsz, const void *src, size_t count) {
  // TODO may check if desst and src is not NULL
  if ( count > destsz ) {
 800b3e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3ea:	6a3b      	ldr	r3, [r7, #32]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d305      	bcc.n	800b3fc <tu_print_mem+0xe8>
    return -1;
  }
  memcpy(dest, src, count);
 800b3f0:	6a3a      	ldr	r2, [r7, #32]
 800b3f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b3f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b3f6:	f000 fb1c 	bl	800ba32 <memcpy>
  return 0;
 800b3fa:	e000      	b.n	800b3fe <tu_print_mem+0xea>
    return -1;
 800b3fc:	bf00      	nop
    buf8 += size;
 800b3fe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b402:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b404:	4413      	add	r3, r2
 800b406:	64fb      	str	r3, [r7, #76]	@ 0x4c

    tu_printf(" ");
 800b408:	2020      	movs	r0, #32
 800b40a:	f000 f925 	bl	800b658 <putchar>
    tu_printf(format, value);
 800b40e:	697a      	ldr	r2, [r7, #20]
 800b410:	f107 0318 	add.w	r3, r7, #24
 800b414:	4611      	mov	r1, r2
 800b416:	4618      	mov	r0, r3
 800b418:	f000 f90c 	bl	800b634 <iprintf>
  for (unsigned int i = 0; i < count; i++) {
 800b41c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b41e:	3301      	adds	r3, #1
 800b420:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b422:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	429a      	cmp	r2, r3
 800b428:	d3a4      	bcc.n	800b374 <tu_print_mem+0x60>
  }

  // fill up last row to 16 for printing ascii
  const uint32_t remain = count % 16;
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	f003 030f 	and.w	r3, r3, #15
 800b430:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t nback = (uint8_t) (remain ? remain : 16);
 800b432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <tu_print_mem+0x12a>
 800b438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	e000      	b.n	800b440 <tu_print_mem+0x12c>
 800b43e:	2310      	movs	r3, #16
 800b440:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (remain) {
 800b444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b446:	2b00      	cmp	r3, #0
 800b448:	d01d      	beq.n	800b486 <tu_print_mem+0x172>
    for (uint32_t i = 0; i < 16 - remain; i++) {
 800b44a:	2300      	movs	r3, #0
 800b44c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b44e:	e014      	b.n	800b47a <tu_print_mem+0x166>
      tu_printf(" ");
 800b450:	2020      	movs	r0, #32
 800b452:	f000 f901 	bl	800b658 <putchar>
      for (int j = 0; j < 2 * size; j++) tu_printf(" ");
 800b456:	2300      	movs	r3, #0
 800b458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b45a:	e005      	b.n	800b468 <tu_print_mem+0x154>
 800b45c:	2020      	movs	r0, #32
 800b45e:	f000 f8fb 	bl	800b658 <putchar>
 800b462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b464:	3301      	adds	r3, #1
 800b466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b468:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b470:	429a      	cmp	r2, r3
 800b472:	dbf3      	blt.n	800b45c <tu_print_mem+0x148>
    for (uint32_t i = 0; i < 16 - remain; i++) {
 800b474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b476:	3301      	adds	r3, #1
 800b478:	643b      	str	r3, [r7, #64]	@ 0x40
 800b47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b47c:	f1c3 0310 	rsb	r3, r3, #16
 800b480:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b482:	429a      	cmp	r2, r3
 800b484:	d3e4      	bcc.n	800b450 <tu_print_mem+0x13c>
    }
  }

  dump_str_line(buf8 - nback, nback);
 800b486:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b48a:	425b      	negs	r3, r3
 800b48c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b48e:	4413      	add	r3, r2
 800b490:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800b494:	b292      	uxth	r2, r2
 800b496:	4611      	mov	r1, r2
 800b498:	4618      	mov	r0, r3
 800b49a:	f7ff ff07 	bl	800b2ac <dump_str_line>
}
 800b49e:	3750      	adds	r7, #80	@ 0x50
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	0800ce88 	.word	0x0800ce88
 800b4a8:	0800ce98 	.word	0x0800ce98
 800b4ac:	0800ce90 	.word	0x0800ce90

0800b4b0 <std>:
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	b510      	push	{r4, lr}
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b4ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4be:	6083      	str	r3, [r0, #8]
 800b4c0:	8181      	strh	r1, [r0, #12]
 800b4c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b4c4:	81c2      	strh	r2, [r0, #14]
 800b4c6:	6183      	str	r3, [r0, #24]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	2208      	movs	r2, #8
 800b4cc:	305c      	adds	r0, #92	@ 0x5c
 800b4ce:	f000 fa35 	bl	800b93c <memset>
 800b4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b508 <std+0x58>)
 800b4d4:	6224      	str	r4, [r4, #32]
 800b4d6:	6263      	str	r3, [r4, #36]	@ 0x24
 800b4d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b50c <std+0x5c>)
 800b4da:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b4dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b510 <std+0x60>)
 800b4de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b4e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b514 <std+0x64>)
 800b4e2:	6323      	str	r3, [r4, #48]	@ 0x30
 800b4e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b518 <std+0x68>)
 800b4e6:	429c      	cmp	r4, r3
 800b4e8:	d006      	beq.n	800b4f8 <std+0x48>
 800b4ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b4ee:	4294      	cmp	r4, r2
 800b4f0:	d002      	beq.n	800b4f8 <std+0x48>
 800b4f2:	33d0      	adds	r3, #208	@ 0xd0
 800b4f4:	429c      	cmp	r4, r3
 800b4f6:	d105      	bne.n	800b504 <std+0x54>
 800b4f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b500:	f000 ba94 	b.w	800ba2c <__retarget_lock_init_recursive>
 800b504:	bd10      	pop	{r4, pc}
 800b506:	bf00      	nop
 800b508:	0800b78d 	.word	0x0800b78d
 800b50c:	0800b7af 	.word	0x0800b7af
 800b510:	0800b7e7 	.word	0x0800b7e7
 800b514:	0800b80b 	.word	0x0800b80b
 800b518:	20000874 	.word	0x20000874

0800b51c <stdio_exit_handler>:
 800b51c:	4a02      	ldr	r2, [pc, #8]	@ (800b528 <stdio_exit_handler+0xc>)
 800b51e:	4903      	ldr	r1, [pc, #12]	@ (800b52c <stdio_exit_handler+0x10>)
 800b520:	4803      	ldr	r0, [pc, #12]	@ (800b530 <stdio_exit_handler+0x14>)
 800b522:	f000 b869 	b.w	800b5f8 <_fwalk_sglue>
 800b526:	bf00      	nop
 800b528:	20000038 	.word	0x20000038
 800b52c:	0800c591 	.word	0x0800c591
 800b530:	20000048 	.word	0x20000048

0800b534 <cleanup_stdio>:
 800b534:	6841      	ldr	r1, [r0, #4]
 800b536:	4b0c      	ldr	r3, [pc, #48]	@ (800b568 <cleanup_stdio+0x34>)
 800b538:	b510      	push	{r4, lr}
 800b53a:	4299      	cmp	r1, r3
 800b53c:	4604      	mov	r4, r0
 800b53e:	d001      	beq.n	800b544 <cleanup_stdio+0x10>
 800b540:	f001 f826 	bl	800c590 <_fflush_r>
 800b544:	68a1      	ldr	r1, [r4, #8]
 800b546:	4b09      	ldr	r3, [pc, #36]	@ (800b56c <cleanup_stdio+0x38>)
 800b548:	4299      	cmp	r1, r3
 800b54a:	d002      	beq.n	800b552 <cleanup_stdio+0x1e>
 800b54c:	4620      	mov	r0, r4
 800b54e:	f001 f81f 	bl	800c590 <_fflush_r>
 800b552:	68e1      	ldr	r1, [r4, #12]
 800b554:	4b06      	ldr	r3, [pc, #24]	@ (800b570 <cleanup_stdio+0x3c>)
 800b556:	4299      	cmp	r1, r3
 800b558:	d004      	beq.n	800b564 <cleanup_stdio+0x30>
 800b55a:	4620      	mov	r0, r4
 800b55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b560:	f001 b816 	b.w	800c590 <_fflush_r>
 800b564:	bd10      	pop	{r4, pc}
 800b566:	bf00      	nop
 800b568:	20000874 	.word	0x20000874
 800b56c:	200008dc 	.word	0x200008dc
 800b570:	20000944 	.word	0x20000944

0800b574 <global_stdio_init.part.0>:
 800b574:	b510      	push	{r4, lr}
 800b576:	4b0b      	ldr	r3, [pc, #44]	@ (800b5a4 <global_stdio_init.part.0+0x30>)
 800b578:	4c0b      	ldr	r4, [pc, #44]	@ (800b5a8 <global_stdio_init.part.0+0x34>)
 800b57a:	4a0c      	ldr	r2, [pc, #48]	@ (800b5ac <global_stdio_init.part.0+0x38>)
 800b57c:	4620      	mov	r0, r4
 800b57e:	601a      	str	r2, [r3, #0]
 800b580:	2104      	movs	r1, #4
 800b582:	2200      	movs	r2, #0
 800b584:	f7ff ff94 	bl	800b4b0 <std>
 800b588:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b58c:	2201      	movs	r2, #1
 800b58e:	2109      	movs	r1, #9
 800b590:	f7ff ff8e 	bl	800b4b0 <std>
 800b594:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b598:	2202      	movs	r2, #2
 800b59a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b59e:	2112      	movs	r1, #18
 800b5a0:	f7ff bf86 	b.w	800b4b0 <std>
 800b5a4:	200009ac 	.word	0x200009ac
 800b5a8:	20000874 	.word	0x20000874
 800b5ac:	0800b51d 	.word	0x0800b51d

0800b5b0 <__sfp_lock_acquire>:
 800b5b0:	4801      	ldr	r0, [pc, #4]	@ (800b5b8 <__sfp_lock_acquire+0x8>)
 800b5b2:	f000 ba3c 	b.w	800ba2e <__retarget_lock_acquire_recursive>
 800b5b6:	bf00      	nop
 800b5b8:	200009b5 	.word	0x200009b5

0800b5bc <__sfp_lock_release>:
 800b5bc:	4801      	ldr	r0, [pc, #4]	@ (800b5c4 <__sfp_lock_release+0x8>)
 800b5be:	f000 ba37 	b.w	800ba30 <__retarget_lock_release_recursive>
 800b5c2:	bf00      	nop
 800b5c4:	200009b5 	.word	0x200009b5

0800b5c8 <__sinit>:
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	f7ff fff0 	bl	800b5b0 <__sfp_lock_acquire>
 800b5d0:	6a23      	ldr	r3, [r4, #32]
 800b5d2:	b11b      	cbz	r3, 800b5dc <__sinit+0x14>
 800b5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5d8:	f7ff bff0 	b.w	800b5bc <__sfp_lock_release>
 800b5dc:	4b04      	ldr	r3, [pc, #16]	@ (800b5f0 <__sinit+0x28>)
 800b5de:	6223      	str	r3, [r4, #32]
 800b5e0:	4b04      	ldr	r3, [pc, #16]	@ (800b5f4 <__sinit+0x2c>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1f5      	bne.n	800b5d4 <__sinit+0xc>
 800b5e8:	f7ff ffc4 	bl	800b574 <global_stdio_init.part.0>
 800b5ec:	e7f2      	b.n	800b5d4 <__sinit+0xc>
 800b5ee:	bf00      	nop
 800b5f0:	0800b535 	.word	0x0800b535
 800b5f4:	200009ac 	.word	0x200009ac

0800b5f8 <_fwalk_sglue>:
 800b5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5fc:	4607      	mov	r7, r0
 800b5fe:	4688      	mov	r8, r1
 800b600:	4614      	mov	r4, r2
 800b602:	2600      	movs	r6, #0
 800b604:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b608:	f1b9 0901 	subs.w	r9, r9, #1
 800b60c:	d505      	bpl.n	800b61a <_fwalk_sglue+0x22>
 800b60e:	6824      	ldr	r4, [r4, #0]
 800b610:	2c00      	cmp	r4, #0
 800b612:	d1f7      	bne.n	800b604 <_fwalk_sglue+0xc>
 800b614:	4630      	mov	r0, r6
 800b616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b61a:	89ab      	ldrh	r3, [r5, #12]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d907      	bls.n	800b630 <_fwalk_sglue+0x38>
 800b620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b624:	3301      	adds	r3, #1
 800b626:	d003      	beq.n	800b630 <_fwalk_sglue+0x38>
 800b628:	4629      	mov	r1, r5
 800b62a:	4638      	mov	r0, r7
 800b62c:	47c0      	blx	r8
 800b62e:	4306      	orrs	r6, r0
 800b630:	3568      	adds	r5, #104	@ 0x68
 800b632:	e7e9      	b.n	800b608 <_fwalk_sglue+0x10>

0800b634 <iprintf>:
 800b634:	b40f      	push	{r0, r1, r2, r3}
 800b636:	b507      	push	{r0, r1, r2, lr}
 800b638:	4906      	ldr	r1, [pc, #24]	@ (800b654 <iprintf+0x20>)
 800b63a:	ab04      	add	r3, sp, #16
 800b63c:	6808      	ldr	r0, [r1, #0]
 800b63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b642:	6881      	ldr	r1, [r0, #8]
 800b644:	9301      	str	r3, [sp, #4]
 800b646:	f000 fc79 	bl	800bf3c <_vfiprintf_r>
 800b64a:	b003      	add	sp, #12
 800b64c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b650:	b004      	add	sp, #16
 800b652:	4770      	bx	lr
 800b654:	20000044 	.word	0x20000044

0800b658 <putchar>:
 800b658:	4b02      	ldr	r3, [pc, #8]	@ (800b664 <putchar+0xc>)
 800b65a:	4601      	mov	r1, r0
 800b65c:	6818      	ldr	r0, [r3, #0]
 800b65e:	6882      	ldr	r2, [r0, #8]
 800b660:	f001 b81f 	b.w	800c6a2 <_putc_r>
 800b664:	20000044 	.word	0x20000044

0800b668 <_puts_r>:
 800b668:	6a03      	ldr	r3, [r0, #32]
 800b66a:	b570      	push	{r4, r5, r6, lr}
 800b66c:	4605      	mov	r5, r0
 800b66e:	460e      	mov	r6, r1
 800b670:	6884      	ldr	r4, [r0, #8]
 800b672:	b90b      	cbnz	r3, 800b678 <_puts_r+0x10>
 800b674:	f7ff ffa8 	bl	800b5c8 <__sinit>
 800b678:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b67a:	07db      	lsls	r3, r3, #31
 800b67c:	d405      	bmi.n	800b68a <_puts_r+0x22>
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	0598      	lsls	r0, r3, #22
 800b682:	d402      	bmi.n	800b68a <_puts_r+0x22>
 800b684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b686:	f000 f9d2 	bl	800ba2e <__retarget_lock_acquire_recursive>
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	0719      	lsls	r1, r3, #28
 800b68e:	d502      	bpl.n	800b696 <_puts_r+0x2e>
 800b690:	6923      	ldr	r3, [r4, #16]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d135      	bne.n	800b702 <_puts_r+0x9a>
 800b696:	4621      	mov	r1, r4
 800b698:	4628      	mov	r0, r5
 800b69a:	f000 f8f9 	bl	800b890 <__swsetup_r>
 800b69e:	b380      	cbz	r0, 800b702 <_puts_r+0x9a>
 800b6a0:	f04f 35ff 	mov.w	r5, #4294967295
 800b6a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6a6:	07da      	lsls	r2, r3, #31
 800b6a8:	d405      	bmi.n	800b6b6 <_puts_r+0x4e>
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	059b      	lsls	r3, r3, #22
 800b6ae:	d402      	bmi.n	800b6b6 <_puts_r+0x4e>
 800b6b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6b2:	f000 f9bd 	bl	800ba30 <__retarget_lock_release_recursive>
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	da04      	bge.n	800b6c8 <_puts_r+0x60>
 800b6be:	69a2      	ldr	r2, [r4, #24]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	dc17      	bgt.n	800b6f4 <_puts_r+0x8c>
 800b6c4:	290a      	cmp	r1, #10
 800b6c6:	d015      	beq.n	800b6f4 <_puts_r+0x8c>
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	6022      	str	r2, [r4, #0]
 800b6ce:	7019      	strb	r1, [r3, #0]
 800b6d0:	68a3      	ldr	r3, [r4, #8]
 800b6d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	60a3      	str	r3, [r4, #8]
 800b6da:	2900      	cmp	r1, #0
 800b6dc:	d1ed      	bne.n	800b6ba <_puts_r+0x52>
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	da11      	bge.n	800b706 <_puts_r+0x9e>
 800b6e2:	4622      	mov	r2, r4
 800b6e4:	210a      	movs	r1, #10
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f000 f893 	bl	800b812 <__swbuf_r>
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d0d7      	beq.n	800b6a0 <_puts_r+0x38>
 800b6f0:	250a      	movs	r5, #10
 800b6f2:	e7d7      	b.n	800b6a4 <_puts_r+0x3c>
 800b6f4:	4622      	mov	r2, r4
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	f000 f88b 	bl	800b812 <__swbuf_r>
 800b6fc:	3001      	adds	r0, #1
 800b6fe:	d1e7      	bne.n	800b6d0 <_puts_r+0x68>
 800b700:	e7ce      	b.n	800b6a0 <_puts_r+0x38>
 800b702:	3e01      	subs	r6, #1
 800b704:	e7e4      	b.n	800b6d0 <_puts_r+0x68>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	1c5a      	adds	r2, r3, #1
 800b70a:	6022      	str	r2, [r4, #0]
 800b70c:	220a      	movs	r2, #10
 800b70e:	701a      	strb	r2, [r3, #0]
 800b710:	e7ee      	b.n	800b6f0 <_puts_r+0x88>
	...

0800b714 <puts>:
 800b714:	4b02      	ldr	r3, [pc, #8]	@ (800b720 <puts+0xc>)
 800b716:	4601      	mov	r1, r0
 800b718:	6818      	ldr	r0, [r3, #0]
 800b71a:	f7ff bfa5 	b.w	800b668 <_puts_r>
 800b71e:	bf00      	nop
 800b720:	20000044 	.word	0x20000044

0800b724 <sniprintf>:
 800b724:	b40c      	push	{r2, r3}
 800b726:	b530      	push	{r4, r5, lr}
 800b728:	4b17      	ldr	r3, [pc, #92]	@ (800b788 <sniprintf+0x64>)
 800b72a:	1e0c      	subs	r4, r1, #0
 800b72c:	681d      	ldr	r5, [r3, #0]
 800b72e:	b09d      	sub	sp, #116	@ 0x74
 800b730:	da08      	bge.n	800b744 <sniprintf+0x20>
 800b732:	238b      	movs	r3, #139	@ 0x8b
 800b734:	f04f 30ff 	mov.w	r0, #4294967295
 800b738:	602b      	str	r3, [r5, #0]
 800b73a:	b01d      	add	sp, #116	@ 0x74
 800b73c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b740:	b002      	add	sp, #8
 800b742:	4770      	bx	lr
 800b744:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b748:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b74c:	bf0c      	ite	eq
 800b74e:	4623      	moveq	r3, r4
 800b750:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b754:	9304      	str	r3, [sp, #16]
 800b756:	9307      	str	r3, [sp, #28]
 800b758:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b75c:	9002      	str	r0, [sp, #8]
 800b75e:	9006      	str	r0, [sp, #24]
 800b760:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b764:	4628      	mov	r0, r5
 800b766:	ab21      	add	r3, sp, #132	@ 0x84
 800b768:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b76a:	a902      	add	r1, sp, #8
 800b76c:	9301      	str	r3, [sp, #4]
 800b76e:	f000 fac1 	bl	800bcf4 <_svfiprintf_r>
 800b772:	1c43      	adds	r3, r0, #1
 800b774:	bfbc      	itt	lt
 800b776:	238b      	movlt	r3, #139	@ 0x8b
 800b778:	602b      	strlt	r3, [r5, #0]
 800b77a:	2c00      	cmp	r4, #0
 800b77c:	d0dd      	beq.n	800b73a <sniprintf+0x16>
 800b77e:	2200      	movs	r2, #0
 800b780:	9b02      	ldr	r3, [sp, #8]
 800b782:	701a      	strb	r2, [r3, #0]
 800b784:	e7d9      	b.n	800b73a <sniprintf+0x16>
 800b786:	bf00      	nop
 800b788:	20000044 	.word	0x20000044

0800b78c <__sread>:
 800b78c:	b510      	push	{r4, lr}
 800b78e:	460c      	mov	r4, r1
 800b790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b794:	f000 f8fc 	bl	800b990 <_read_r>
 800b798:	2800      	cmp	r0, #0
 800b79a:	bfab      	itete	ge
 800b79c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b79e:	89a3      	ldrhlt	r3, [r4, #12]
 800b7a0:	181b      	addge	r3, r3, r0
 800b7a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b7a6:	bfac      	ite	ge
 800b7a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b7aa:	81a3      	strhlt	r3, [r4, #12]
 800b7ac:	bd10      	pop	{r4, pc}

0800b7ae <__swrite>:
 800b7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b2:	461f      	mov	r7, r3
 800b7b4:	898b      	ldrh	r3, [r1, #12]
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	05db      	lsls	r3, r3, #23
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	4616      	mov	r6, r2
 800b7be:	d505      	bpl.n	800b7cc <__swrite+0x1e>
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c8:	f000 f8d0 	bl	800b96c <_lseek_r>
 800b7cc:	89a3      	ldrh	r3, [r4, #12]
 800b7ce:	4632      	mov	r2, r6
 800b7d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7d4:	81a3      	strh	r3, [r4, #12]
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	463b      	mov	r3, r7
 800b7da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e2:	f000 b8e7 	b.w	800b9b4 <_write_r>

0800b7e6 <__sseek>:
 800b7e6:	b510      	push	{r4, lr}
 800b7e8:	460c      	mov	r4, r1
 800b7ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ee:	f000 f8bd 	bl	800b96c <_lseek_r>
 800b7f2:	1c43      	adds	r3, r0, #1
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	bf15      	itete	ne
 800b7f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b7fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b7fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b802:	81a3      	strheq	r3, [r4, #12]
 800b804:	bf18      	it	ne
 800b806:	81a3      	strhne	r3, [r4, #12]
 800b808:	bd10      	pop	{r4, pc}

0800b80a <__sclose>:
 800b80a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b80e:	f000 b89d 	b.w	800b94c <_close_r>

0800b812 <__swbuf_r>:
 800b812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b814:	460e      	mov	r6, r1
 800b816:	4614      	mov	r4, r2
 800b818:	4605      	mov	r5, r0
 800b81a:	b118      	cbz	r0, 800b824 <__swbuf_r+0x12>
 800b81c:	6a03      	ldr	r3, [r0, #32]
 800b81e:	b90b      	cbnz	r3, 800b824 <__swbuf_r+0x12>
 800b820:	f7ff fed2 	bl	800b5c8 <__sinit>
 800b824:	69a3      	ldr	r3, [r4, #24]
 800b826:	60a3      	str	r3, [r4, #8]
 800b828:	89a3      	ldrh	r3, [r4, #12]
 800b82a:	071a      	lsls	r2, r3, #28
 800b82c:	d501      	bpl.n	800b832 <__swbuf_r+0x20>
 800b82e:	6923      	ldr	r3, [r4, #16]
 800b830:	b943      	cbnz	r3, 800b844 <__swbuf_r+0x32>
 800b832:	4621      	mov	r1, r4
 800b834:	4628      	mov	r0, r5
 800b836:	f000 f82b 	bl	800b890 <__swsetup_r>
 800b83a:	b118      	cbz	r0, 800b844 <__swbuf_r+0x32>
 800b83c:	f04f 37ff 	mov.w	r7, #4294967295
 800b840:	4638      	mov	r0, r7
 800b842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	6922      	ldr	r2, [r4, #16]
 800b848:	b2f6      	uxtb	r6, r6
 800b84a:	1a98      	subs	r0, r3, r2
 800b84c:	6963      	ldr	r3, [r4, #20]
 800b84e:	4637      	mov	r7, r6
 800b850:	4283      	cmp	r3, r0
 800b852:	dc05      	bgt.n	800b860 <__swbuf_r+0x4e>
 800b854:	4621      	mov	r1, r4
 800b856:	4628      	mov	r0, r5
 800b858:	f000 fe9a 	bl	800c590 <_fflush_r>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d1ed      	bne.n	800b83c <__swbuf_r+0x2a>
 800b860:	68a3      	ldr	r3, [r4, #8]
 800b862:	3b01      	subs	r3, #1
 800b864:	60a3      	str	r3, [r4, #8]
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	6022      	str	r2, [r4, #0]
 800b86c:	701e      	strb	r6, [r3, #0]
 800b86e:	6962      	ldr	r2, [r4, #20]
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	429a      	cmp	r2, r3
 800b874:	d004      	beq.n	800b880 <__swbuf_r+0x6e>
 800b876:	89a3      	ldrh	r3, [r4, #12]
 800b878:	07db      	lsls	r3, r3, #31
 800b87a:	d5e1      	bpl.n	800b840 <__swbuf_r+0x2e>
 800b87c:	2e0a      	cmp	r6, #10
 800b87e:	d1df      	bne.n	800b840 <__swbuf_r+0x2e>
 800b880:	4621      	mov	r1, r4
 800b882:	4628      	mov	r0, r5
 800b884:	f000 fe84 	bl	800c590 <_fflush_r>
 800b888:	2800      	cmp	r0, #0
 800b88a:	d0d9      	beq.n	800b840 <__swbuf_r+0x2e>
 800b88c:	e7d6      	b.n	800b83c <__swbuf_r+0x2a>
	...

0800b890 <__swsetup_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4b29      	ldr	r3, [pc, #164]	@ (800b938 <__swsetup_r+0xa8>)
 800b894:	4605      	mov	r5, r0
 800b896:	6818      	ldr	r0, [r3, #0]
 800b898:	460c      	mov	r4, r1
 800b89a:	b118      	cbz	r0, 800b8a4 <__swsetup_r+0x14>
 800b89c:	6a03      	ldr	r3, [r0, #32]
 800b89e:	b90b      	cbnz	r3, 800b8a4 <__swsetup_r+0x14>
 800b8a0:	f7ff fe92 	bl	800b5c8 <__sinit>
 800b8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8a8:	0719      	lsls	r1, r3, #28
 800b8aa:	d422      	bmi.n	800b8f2 <__swsetup_r+0x62>
 800b8ac:	06da      	lsls	r2, r3, #27
 800b8ae:	d407      	bmi.n	800b8c0 <__swsetup_r+0x30>
 800b8b0:	2209      	movs	r2, #9
 800b8b2:	602a      	str	r2, [r5, #0]
 800b8b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8bc:	81a3      	strh	r3, [r4, #12]
 800b8be:	e033      	b.n	800b928 <__swsetup_r+0x98>
 800b8c0:	0758      	lsls	r0, r3, #29
 800b8c2:	d512      	bpl.n	800b8ea <__swsetup_r+0x5a>
 800b8c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8c6:	b141      	cbz	r1, 800b8da <__swsetup_r+0x4a>
 800b8c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8cc:	4299      	cmp	r1, r3
 800b8ce:	d002      	beq.n	800b8d6 <__swsetup_r+0x46>
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f000 f8bd 	bl	800ba50 <_free_r>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b8e0:	81a3      	strh	r3, [r4, #12]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	6063      	str	r3, [r4, #4]
 800b8e6:	6923      	ldr	r3, [r4, #16]
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f043 0308 	orr.w	r3, r3, #8
 800b8f0:	81a3      	strh	r3, [r4, #12]
 800b8f2:	6923      	ldr	r3, [r4, #16]
 800b8f4:	b94b      	cbnz	r3, 800b90a <__swsetup_r+0x7a>
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b8fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b900:	d003      	beq.n	800b90a <__swsetup_r+0x7a>
 800b902:	4621      	mov	r1, r4
 800b904:	4628      	mov	r0, r5
 800b906:	f000 fe90 	bl	800c62a <__smakebuf_r>
 800b90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b90e:	f013 0201 	ands.w	r2, r3, #1
 800b912:	d00a      	beq.n	800b92a <__swsetup_r+0x9a>
 800b914:	2200      	movs	r2, #0
 800b916:	60a2      	str	r2, [r4, #8]
 800b918:	6962      	ldr	r2, [r4, #20]
 800b91a:	4252      	negs	r2, r2
 800b91c:	61a2      	str	r2, [r4, #24]
 800b91e:	6922      	ldr	r2, [r4, #16]
 800b920:	b942      	cbnz	r2, 800b934 <__swsetup_r+0xa4>
 800b922:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b926:	d1c5      	bne.n	800b8b4 <__swsetup_r+0x24>
 800b928:	bd38      	pop	{r3, r4, r5, pc}
 800b92a:	0799      	lsls	r1, r3, #30
 800b92c:	bf58      	it	pl
 800b92e:	6962      	ldrpl	r2, [r4, #20]
 800b930:	60a2      	str	r2, [r4, #8]
 800b932:	e7f4      	b.n	800b91e <__swsetup_r+0x8e>
 800b934:	2000      	movs	r0, #0
 800b936:	e7f7      	b.n	800b928 <__swsetup_r+0x98>
 800b938:	20000044 	.word	0x20000044

0800b93c <memset>:
 800b93c:	4603      	mov	r3, r0
 800b93e:	4402      	add	r2, r0
 800b940:	4293      	cmp	r3, r2
 800b942:	d100      	bne.n	800b946 <memset+0xa>
 800b944:	4770      	bx	lr
 800b946:	f803 1b01 	strb.w	r1, [r3], #1
 800b94a:	e7f9      	b.n	800b940 <memset+0x4>

0800b94c <_close_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	2300      	movs	r3, #0
 800b950:	4d05      	ldr	r5, [pc, #20]	@ (800b968 <_close_r+0x1c>)
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	602b      	str	r3, [r5, #0]
 800b958:	f7f4 ffcd 	bl	80008f6 <_close>
 800b95c:	1c43      	adds	r3, r0, #1
 800b95e:	d102      	bne.n	800b966 <_close_r+0x1a>
 800b960:	682b      	ldr	r3, [r5, #0]
 800b962:	b103      	cbz	r3, 800b966 <_close_r+0x1a>
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	bd38      	pop	{r3, r4, r5, pc}
 800b968:	200009b0 	.word	0x200009b0

0800b96c <_lseek_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4604      	mov	r4, r0
 800b970:	4608      	mov	r0, r1
 800b972:	4611      	mov	r1, r2
 800b974:	2200      	movs	r2, #0
 800b976:	4d05      	ldr	r5, [pc, #20]	@ (800b98c <_lseek_r+0x20>)
 800b978:	602a      	str	r2, [r5, #0]
 800b97a:	461a      	mov	r2, r3
 800b97c:	f7f4 ffdf 	bl	800093e <_lseek>
 800b980:	1c43      	adds	r3, r0, #1
 800b982:	d102      	bne.n	800b98a <_lseek_r+0x1e>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	b103      	cbz	r3, 800b98a <_lseek_r+0x1e>
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	200009b0 	.word	0x200009b0

0800b990 <_read_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	4604      	mov	r4, r0
 800b994:	4608      	mov	r0, r1
 800b996:	4611      	mov	r1, r2
 800b998:	2200      	movs	r2, #0
 800b99a:	4d05      	ldr	r5, [pc, #20]	@ (800b9b0 <_read_r+0x20>)
 800b99c:	602a      	str	r2, [r5, #0]
 800b99e:	461a      	mov	r2, r3
 800b9a0:	f7f4 ff8c 	bl	80008bc <_read>
 800b9a4:	1c43      	adds	r3, r0, #1
 800b9a6:	d102      	bne.n	800b9ae <_read_r+0x1e>
 800b9a8:	682b      	ldr	r3, [r5, #0]
 800b9aa:	b103      	cbz	r3, 800b9ae <_read_r+0x1e>
 800b9ac:	6023      	str	r3, [r4, #0]
 800b9ae:	bd38      	pop	{r3, r4, r5, pc}
 800b9b0:	200009b0 	.word	0x200009b0

0800b9b4 <_write_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	2200      	movs	r2, #0
 800b9be:	4d05      	ldr	r5, [pc, #20]	@ (800b9d4 <_write_r+0x20>)
 800b9c0:	602a      	str	r2, [r5, #0]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	f7f4 fc34 	bl	8000230 <_write>
 800b9c8:	1c43      	adds	r3, r0, #1
 800b9ca:	d102      	bne.n	800b9d2 <_write_r+0x1e>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	b103      	cbz	r3, 800b9d2 <_write_r+0x1e>
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	bd38      	pop	{r3, r4, r5, pc}
 800b9d4:	200009b0 	.word	0x200009b0

0800b9d8 <__errno>:
 800b9d8:	4b01      	ldr	r3, [pc, #4]	@ (800b9e0 <__errno+0x8>)
 800b9da:	6818      	ldr	r0, [r3, #0]
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	20000044 	.word	0x20000044

0800b9e4 <__libc_init_array>:
 800b9e4:	b570      	push	{r4, r5, r6, lr}
 800b9e6:	2600      	movs	r6, #0
 800b9e8:	4d0c      	ldr	r5, [pc, #48]	@ (800ba1c <__libc_init_array+0x38>)
 800b9ea:	4c0d      	ldr	r4, [pc, #52]	@ (800ba20 <__libc_init_array+0x3c>)
 800b9ec:	1b64      	subs	r4, r4, r5
 800b9ee:	10a4      	asrs	r4, r4, #2
 800b9f0:	42a6      	cmp	r6, r4
 800b9f2:	d109      	bne.n	800ba08 <__libc_init_array+0x24>
 800b9f4:	f000 ff1a 	bl	800c82c <_init>
 800b9f8:	2600      	movs	r6, #0
 800b9fa:	4d0a      	ldr	r5, [pc, #40]	@ (800ba24 <__libc_init_array+0x40>)
 800b9fc:	4c0a      	ldr	r4, [pc, #40]	@ (800ba28 <__libc_init_array+0x44>)
 800b9fe:	1b64      	subs	r4, r4, r5
 800ba00:	10a4      	asrs	r4, r4, #2
 800ba02:	42a6      	cmp	r6, r4
 800ba04:	d105      	bne.n	800ba12 <__libc_init_array+0x2e>
 800ba06:	bd70      	pop	{r4, r5, r6, pc}
 800ba08:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba0c:	4798      	blx	r3
 800ba0e:	3601      	adds	r6, #1
 800ba10:	e7ee      	b.n	800b9f0 <__libc_init_array+0xc>
 800ba12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba16:	4798      	blx	r3
 800ba18:	3601      	adds	r6, #1
 800ba1a:	e7f2      	b.n	800ba02 <__libc_init_array+0x1e>
 800ba1c:	0800d348 	.word	0x0800d348
 800ba20:	0800d348 	.word	0x0800d348
 800ba24:	0800d348 	.word	0x0800d348
 800ba28:	0800d34c 	.word	0x0800d34c

0800ba2c <__retarget_lock_init_recursive>:
 800ba2c:	4770      	bx	lr

0800ba2e <__retarget_lock_acquire_recursive>:
 800ba2e:	4770      	bx	lr

0800ba30 <__retarget_lock_release_recursive>:
 800ba30:	4770      	bx	lr

0800ba32 <memcpy>:
 800ba32:	440a      	add	r2, r1
 800ba34:	4291      	cmp	r1, r2
 800ba36:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba3a:	d100      	bne.n	800ba3e <memcpy+0xc>
 800ba3c:	4770      	bx	lr
 800ba3e:	b510      	push	{r4, lr}
 800ba40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba44:	4291      	cmp	r1, r2
 800ba46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba4a:	d1f9      	bne.n	800ba40 <memcpy+0xe>
 800ba4c:	bd10      	pop	{r4, pc}
	...

0800ba50 <_free_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4605      	mov	r5, r0
 800ba54:	2900      	cmp	r1, #0
 800ba56:	d040      	beq.n	800bada <_free_r+0x8a>
 800ba58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba5c:	1f0c      	subs	r4, r1, #4
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	bfb8      	it	lt
 800ba62:	18e4      	addlt	r4, r4, r3
 800ba64:	f000 f8de 	bl	800bc24 <__malloc_lock>
 800ba68:	4a1c      	ldr	r2, [pc, #112]	@ (800badc <_free_r+0x8c>)
 800ba6a:	6813      	ldr	r3, [r2, #0]
 800ba6c:	b933      	cbnz	r3, 800ba7c <_free_r+0x2c>
 800ba6e:	6063      	str	r3, [r4, #4]
 800ba70:	6014      	str	r4, [r2, #0]
 800ba72:	4628      	mov	r0, r5
 800ba74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba78:	f000 b8da 	b.w	800bc30 <__malloc_unlock>
 800ba7c:	42a3      	cmp	r3, r4
 800ba7e:	d908      	bls.n	800ba92 <_free_r+0x42>
 800ba80:	6820      	ldr	r0, [r4, #0]
 800ba82:	1821      	adds	r1, r4, r0
 800ba84:	428b      	cmp	r3, r1
 800ba86:	bf01      	itttt	eq
 800ba88:	6819      	ldreq	r1, [r3, #0]
 800ba8a:	685b      	ldreq	r3, [r3, #4]
 800ba8c:	1809      	addeq	r1, r1, r0
 800ba8e:	6021      	streq	r1, [r4, #0]
 800ba90:	e7ed      	b.n	800ba6e <_free_r+0x1e>
 800ba92:	461a      	mov	r2, r3
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	b10b      	cbz	r3, 800ba9c <_free_r+0x4c>
 800ba98:	42a3      	cmp	r3, r4
 800ba9a:	d9fa      	bls.n	800ba92 <_free_r+0x42>
 800ba9c:	6811      	ldr	r1, [r2, #0]
 800ba9e:	1850      	adds	r0, r2, r1
 800baa0:	42a0      	cmp	r0, r4
 800baa2:	d10b      	bne.n	800babc <_free_r+0x6c>
 800baa4:	6820      	ldr	r0, [r4, #0]
 800baa6:	4401      	add	r1, r0
 800baa8:	1850      	adds	r0, r2, r1
 800baaa:	4283      	cmp	r3, r0
 800baac:	6011      	str	r1, [r2, #0]
 800baae:	d1e0      	bne.n	800ba72 <_free_r+0x22>
 800bab0:	6818      	ldr	r0, [r3, #0]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	4408      	add	r0, r1
 800bab6:	6010      	str	r0, [r2, #0]
 800bab8:	6053      	str	r3, [r2, #4]
 800baba:	e7da      	b.n	800ba72 <_free_r+0x22>
 800babc:	d902      	bls.n	800bac4 <_free_r+0x74>
 800babe:	230c      	movs	r3, #12
 800bac0:	602b      	str	r3, [r5, #0]
 800bac2:	e7d6      	b.n	800ba72 <_free_r+0x22>
 800bac4:	6820      	ldr	r0, [r4, #0]
 800bac6:	1821      	adds	r1, r4, r0
 800bac8:	428b      	cmp	r3, r1
 800baca:	bf01      	itttt	eq
 800bacc:	6819      	ldreq	r1, [r3, #0]
 800bace:	685b      	ldreq	r3, [r3, #4]
 800bad0:	1809      	addeq	r1, r1, r0
 800bad2:	6021      	streq	r1, [r4, #0]
 800bad4:	6063      	str	r3, [r4, #4]
 800bad6:	6054      	str	r4, [r2, #4]
 800bad8:	e7cb      	b.n	800ba72 <_free_r+0x22>
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	200009bc 	.word	0x200009bc

0800bae0 <sbrk_aligned>:
 800bae0:	b570      	push	{r4, r5, r6, lr}
 800bae2:	4e0f      	ldr	r6, [pc, #60]	@ (800bb20 <sbrk_aligned+0x40>)
 800bae4:	460c      	mov	r4, r1
 800bae6:	6831      	ldr	r1, [r6, #0]
 800bae8:	4605      	mov	r5, r0
 800baea:	b911      	cbnz	r1, 800baf2 <sbrk_aligned+0x12>
 800baec:	f000 fe4a 	bl	800c784 <_sbrk_r>
 800baf0:	6030      	str	r0, [r6, #0]
 800baf2:	4621      	mov	r1, r4
 800baf4:	4628      	mov	r0, r5
 800baf6:	f000 fe45 	bl	800c784 <_sbrk_r>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	d103      	bne.n	800bb06 <sbrk_aligned+0x26>
 800bafe:	f04f 34ff 	mov.w	r4, #4294967295
 800bb02:	4620      	mov	r0, r4
 800bb04:	bd70      	pop	{r4, r5, r6, pc}
 800bb06:	1cc4      	adds	r4, r0, #3
 800bb08:	f024 0403 	bic.w	r4, r4, #3
 800bb0c:	42a0      	cmp	r0, r4
 800bb0e:	d0f8      	beq.n	800bb02 <sbrk_aligned+0x22>
 800bb10:	1a21      	subs	r1, r4, r0
 800bb12:	4628      	mov	r0, r5
 800bb14:	f000 fe36 	bl	800c784 <_sbrk_r>
 800bb18:	3001      	adds	r0, #1
 800bb1a:	d1f2      	bne.n	800bb02 <sbrk_aligned+0x22>
 800bb1c:	e7ef      	b.n	800bafe <sbrk_aligned+0x1e>
 800bb1e:	bf00      	nop
 800bb20:	200009b8 	.word	0x200009b8

0800bb24 <_malloc_r>:
 800bb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb28:	1ccd      	adds	r5, r1, #3
 800bb2a:	f025 0503 	bic.w	r5, r5, #3
 800bb2e:	3508      	adds	r5, #8
 800bb30:	2d0c      	cmp	r5, #12
 800bb32:	bf38      	it	cc
 800bb34:	250c      	movcc	r5, #12
 800bb36:	2d00      	cmp	r5, #0
 800bb38:	4606      	mov	r6, r0
 800bb3a:	db01      	blt.n	800bb40 <_malloc_r+0x1c>
 800bb3c:	42a9      	cmp	r1, r5
 800bb3e:	d904      	bls.n	800bb4a <_malloc_r+0x26>
 800bb40:	230c      	movs	r3, #12
 800bb42:	6033      	str	r3, [r6, #0]
 800bb44:	2000      	movs	r0, #0
 800bb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc20 <_malloc_r+0xfc>
 800bb4e:	f000 f869 	bl	800bc24 <__malloc_lock>
 800bb52:	f8d8 3000 	ldr.w	r3, [r8]
 800bb56:	461c      	mov	r4, r3
 800bb58:	bb44      	cbnz	r4, 800bbac <_malloc_r+0x88>
 800bb5a:	4629      	mov	r1, r5
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	f7ff ffbf 	bl	800bae0 <sbrk_aligned>
 800bb62:	1c43      	adds	r3, r0, #1
 800bb64:	4604      	mov	r4, r0
 800bb66:	d158      	bne.n	800bc1a <_malloc_r+0xf6>
 800bb68:	f8d8 4000 	ldr.w	r4, [r8]
 800bb6c:	4627      	mov	r7, r4
 800bb6e:	2f00      	cmp	r7, #0
 800bb70:	d143      	bne.n	800bbfa <_malloc_r+0xd6>
 800bb72:	2c00      	cmp	r4, #0
 800bb74:	d04b      	beq.n	800bc0e <_malloc_r+0xea>
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	4639      	mov	r1, r7
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	eb04 0903 	add.w	r9, r4, r3
 800bb80:	f000 fe00 	bl	800c784 <_sbrk_r>
 800bb84:	4581      	cmp	r9, r0
 800bb86:	d142      	bne.n	800bc0e <_malloc_r+0xea>
 800bb88:	6821      	ldr	r1, [r4, #0]
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	1a6d      	subs	r5, r5, r1
 800bb8e:	4629      	mov	r1, r5
 800bb90:	f7ff ffa6 	bl	800bae0 <sbrk_aligned>
 800bb94:	3001      	adds	r0, #1
 800bb96:	d03a      	beq.n	800bc0e <_malloc_r+0xea>
 800bb98:	6823      	ldr	r3, [r4, #0]
 800bb9a:	442b      	add	r3, r5
 800bb9c:	6023      	str	r3, [r4, #0]
 800bb9e:	f8d8 3000 	ldr.w	r3, [r8]
 800bba2:	685a      	ldr	r2, [r3, #4]
 800bba4:	bb62      	cbnz	r2, 800bc00 <_malloc_r+0xdc>
 800bba6:	f8c8 7000 	str.w	r7, [r8]
 800bbaa:	e00f      	b.n	800bbcc <_malloc_r+0xa8>
 800bbac:	6822      	ldr	r2, [r4, #0]
 800bbae:	1b52      	subs	r2, r2, r5
 800bbb0:	d420      	bmi.n	800bbf4 <_malloc_r+0xd0>
 800bbb2:	2a0b      	cmp	r2, #11
 800bbb4:	d917      	bls.n	800bbe6 <_malloc_r+0xc2>
 800bbb6:	1961      	adds	r1, r4, r5
 800bbb8:	42a3      	cmp	r3, r4
 800bbba:	6025      	str	r5, [r4, #0]
 800bbbc:	bf18      	it	ne
 800bbbe:	6059      	strne	r1, [r3, #4]
 800bbc0:	6863      	ldr	r3, [r4, #4]
 800bbc2:	bf08      	it	eq
 800bbc4:	f8c8 1000 	streq.w	r1, [r8]
 800bbc8:	5162      	str	r2, [r4, r5]
 800bbca:	604b      	str	r3, [r1, #4]
 800bbcc:	4630      	mov	r0, r6
 800bbce:	f000 f82f 	bl	800bc30 <__malloc_unlock>
 800bbd2:	f104 000b 	add.w	r0, r4, #11
 800bbd6:	1d23      	adds	r3, r4, #4
 800bbd8:	f020 0007 	bic.w	r0, r0, #7
 800bbdc:	1ac2      	subs	r2, r0, r3
 800bbde:	bf1c      	itt	ne
 800bbe0:	1a1b      	subne	r3, r3, r0
 800bbe2:	50a3      	strne	r3, [r4, r2]
 800bbe4:	e7af      	b.n	800bb46 <_malloc_r+0x22>
 800bbe6:	6862      	ldr	r2, [r4, #4]
 800bbe8:	42a3      	cmp	r3, r4
 800bbea:	bf0c      	ite	eq
 800bbec:	f8c8 2000 	streq.w	r2, [r8]
 800bbf0:	605a      	strne	r2, [r3, #4]
 800bbf2:	e7eb      	b.n	800bbcc <_malloc_r+0xa8>
 800bbf4:	4623      	mov	r3, r4
 800bbf6:	6864      	ldr	r4, [r4, #4]
 800bbf8:	e7ae      	b.n	800bb58 <_malloc_r+0x34>
 800bbfa:	463c      	mov	r4, r7
 800bbfc:	687f      	ldr	r7, [r7, #4]
 800bbfe:	e7b6      	b.n	800bb6e <_malloc_r+0x4a>
 800bc00:	461a      	mov	r2, r3
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	d1fb      	bne.n	800bc00 <_malloc_r+0xdc>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	6053      	str	r3, [r2, #4]
 800bc0c:	e7de      	b.n	800bbcc <_malloc_r+0xa8>
 800bc0e:	230c      	movs	r3, #12
 800bc10:	4630      	mov	r0, r6
 800bc12:	6033      	str	r3, [r6, #0]
 800bc14:	f000 f80c 	bl	800bc30 <__malloc_unlock>
 800bc18:	e794      	b.n	800bb44 <_malloc_r+0x20>
 800bc1a:	6005      	str	r5, [r0, #0]
 800bc1c:	e7d6      	b.n	800bbcc <_malloc_r+0xa8>
 800bc1e:	bf00      	nop
 800bc20:	200009bc 	.word	0x200009bc

0800bc24 <__malloc_lock>:
 800bc24:	4801      	ldr	r0, [pc, #4]	@ (800bc2c <__malloc_lock+0x8>)
 800bc26:	f7ff bf02 	b.w	800ba2e <__retarget_lock_acquire_recursive>
 800bc2a:	bf00      	nop
 800bc2c:	200009b4 	.word	0x200009b4

0800bc30 <__malloc_unlock>:
 800bc30:	4801      	ldr	r0, [pc, #4]	@ (800bc38 <__malloc_unlock+0x8>)
 800bc32:	f7ff befd 	b.w	800ba30 <__retarget_lock_release_recursive>
 800bc36:	bf00      	nop
 800bc38:	200009b4 	.word	0x200009b4

0800bc3c <__ssputs_r>:
 800bc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc40:	461f      	mov	r7, r3
 800bc42:	688e      	ldr	r6, [r1, #8]
 800bc44:	4682      	mov	sl, r0
 800bc46:	42be      	cmp	r6, r7
 800bc48:	460c      	mov	r4, r1
 800bc4a:	4690      	mov	r8, r2
 800bc4c:	680b      	ldr	r3, [r1, #0]
 800bc4e:	d82d      	bhi.n	800bcac <__ssputs_r+0x70>
 800bc50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc58:	d026      	beq.n	800bca8 <__ssputs_r+0x6c>
 800bc5a:	6965      	ldr	r5, [r4, #20]
 800bc5c:	6909      	ldr	r1, [r1, #16]
 800bc5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc62:	eba3 0901 	sub.w	r9, r3, r1
 800bc66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc6a:	1c7b      	adds	r3, r7, #1
 800bc6c:	444b      	add	r3, r9
 800bc6e:	106d      	asrs	r5, r5, #1
 800bc70:	429d      	cmp	r5, r3
 800bc72:	bf38      	it	cc
 800bc74:	461d      	movcc	r5, r3
 800bc76:	0553      	lsls	r3, r2, #21
 800bc78:	d527      	bpl.n	800bcca <__ssputs_r+0x8e>
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	f7ff ff52 	bl	800bb24 <_malloc_r>
 800bc80:	4606      	mov	r6, r0
 800bc82:	b360      	cbz	r0, 800bcde <__ssputs_r+0xa2>
 800bc84:	464a      	mov	r2, r9
 800bc86:	6921      	ldr	r1, [r4, #16]
 800bc88:	f7ff fed3 	bl	800ba32 <memcpy>
 800bc8c:	89a3      	ldrh	r3, [r4, #12]
 800bc8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bc92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc96:	81a3      	strh	r3, [r4, #12]
 800bc98:	6126      	str	r6, [r4, #16]
 800bc9a:	444e      	add	r6, r9
 800bc9c:	6026      	str	r6, [r4, #0]
 800bc9e:	463e      	mov	r6, r7
 800bca0:	6165      	str	r5, [r4, #20]
 800bca2:	eba5 0509 	sub.w	r5, r5, r9
 800bca6:	60a5      	str	r5, [r4, #8]
 800bca8:	42be      	cmp	r6, r7
 800bcaa:	d900      	bls.n	800bcae <__ssputs_r+0x72>
 800bcac:	463e      	mov	r6, r7
 800bcae:	4632      	mov	r2, r6
 800bcb0:	4641      	mov	r1, r8
 800bcb2:	6820      	ldr	r0, [r4, #0]
 800bcb4:	f000 fd29 	bl	800c70a <memmove>
 800bcb8:	2000      	movs	r0, #0
 800bcba:	68a3      	ldr	r3, [r4, #8]
 800bcbc:	1b9b      	subs	r3, r3, r6
 800bcbe:	60a3      	str	r3, [r4, #8]
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	4433      	add	r3, r6
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcca:	462a      	mov	r2, r5
 800bccc:	f000 fd78 	bl	800c7c0 <_realloc_r>
 800bcd0:	4606      	mov	r6, r0
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d1e0      	bne.n	800bc98 <__ssputs_r+0x5c>
 800bcd6:	4650      	mov	r0, sl
 800bcd8:	6921      	ldr	r1, [r4, #16]
 800bcda:	f7ff feb9 	bl	800ba50 <_free_r>
 800bcde:	230c      	movs	r3, #12
 800bce0:	f8ca 3000 	str.w	r3, [sl]
 800bce4:	89a3      	ldrh	r3, [r4, #12]
 800bce6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcee:	81a3      	strh	r3, [r4, #12]
 800bcf0:	e7e9      	b.n	800bcc6 <__ssputs_r+0x8a>
	...

0800bcf4 <_svfiprintf_r>:
 800bcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf8:	4698      	mov	r8, r3
 800bcfa:	898b      	ldrh	r3, [r1, #12]
 800bcfc:	4607      	mov	r7, r0
 800bcfe:	061b      	lsls	r3, r3, #24
 800bd00:	460d      	mov	r5, r1
 800bd02:	4614      	mov	r4, r2
 800bd04:	b09d      	sub	sp, #116	@ 0x74
 800bd06:	d510      	bpl.n	800bd2a <_svfiprintf_r+0x36>
 800bd08:	690b      	ldr	r3, [r1, #16]
 800bd0a:	b973      	cbnz	r3, 800bd2a <_svfiprintf_r+0x36>
 800bd0c:	2140      	movs	r1, #64	@ 0x40
 800bd0e:	f7ff ff09 	bl	800bb24 <_malloc_r>
 800bd12:	6028      	str	r0, [r5, #0]
 800bd14:	6128      	str	r0, [r5, #16]
 800bd16:	b930      	cbnz	r0, 800bd26 <_svfiprintf_r+0x32>
 800bd18:	230c      	movs	r3, #12
 800bd1a:	603b      	str	r3, [r7, #0]
 800bd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd20:	b01d      	add	sp, #116	@ 0x74
 800bd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd26:	2340      	movs	r3, #64	@ 0x40
 800bd28:	616b      	str	r3, [r5, #20]
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd2e:	2320      	movs	r3, #32
 800bd30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd34:	2330      	movs	r3, #48	@ 0x30
 800bd36:	f04f 0901 	mov.w	r9, #1
 800bd3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd3e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800bed8 <_svfiprintf_r+0x1e4>
 800bd42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd46:	4623      	mov	r3, r4
 800bd48:	469a      	mov	sl, r3
 800bd4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd4e:	b10a      	cbz	r2, 800bd54 <_svfiprintf_r+0x60>
 800bd50:	2a25      	cmp	r2, #37	@ 0x25
 800bd52:	d1f9      	bne.n	800bd48 <_svfiprintf_r+0x54>
 800bd54:	ebba 0b04 	subs.w	fp, sl, r4
 800bd58:	d00b      	beq.n	800bd72 <_svfiprintf_r+0x7e>
 800bd5a:	465b      	mov	r3, fp
 800bd5c:	4622      	mov	r2, r4
 800bd5e:	4629      	mov	r1, r5
 800bd60:	4638      	mov	r0, r7
 800bd62:	f7ff ff6b 	bl	800bc3c <__ssputs_r>
 800bd66:	3001      	adds	r0, #1
 800bd68:	f000 80a7 	beq.w	800beba <_svfiprintf_r+0x1c6>
 800bd6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd6e:	445a      	add	r2, fp
 800bd70:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd72:	f89a 3000 	ldrb.w	r3, [sl]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f000 809f 	beq.w	800beba <_svfiprintf_r+0x1c6>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd86:	f10a 0a01 	add.w	sl, sl, #1
 800bd8a:	9304      	str	r3, [sp, #16]
 800bd8c:	9307      	str	r3, [sp, #28]
 800bd8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd92:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd94:	4654      	mov	r4, sl
 800bd96:	2205      	movs	r2, #5
 800bd98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd9c:	484e      	ldr	r0, [pc, #312]	@ (800bed8 <_svfiprintf_r+0x1e4>)
 800bd9e:	f000 fd01 	bl	800c7a4 <memchr>
 800bda2:	9a04      	ldr	r2, [sp, #16]
 800bda4:	b9d8      	cbnz	r0, 800bdde <_svfiprintf_r+0xea>
 800bda6:	06d0      	lsls	r0, r2, #27
 800bda8:	bf44      	itt	mi
 800bdaa:	2320      	movmi	r3, #32
 800bdac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdb0:	0711      	lsls	r1, r2, #28
 800bdb2:	bf44      	itt	mi
 800bdb4:	232b      	movmi	r3, #43	@ 0x2b
 800bdb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdba:	f89a 3000 	ldrb.w	r3, [sl]
 800bdbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdc0:	d015      	beq.n	800bdee <_svfiprintf_r+0xfa>
 800bdc2:	4654      	mov	r4, sl
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	f04f 0c0a 	mov.w	ip, #10
 800bdca:	9a07      	ldr	r2, [sp, #28]
 800bdcc:	4621      	mov	r1, r4
 800bdce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdd2:	3b30      	subs	r3, #48	@ 0x30
 800bdd4:	2b09      	cmp	r3, #9
 800bdd6:	d94b      	bls.n	800be70 <_svfiprintf_r+0x17c>
 800bdd8:	b1b0      	cbz	r0, 800be08 <_svfiprintf_r+0x114>
 800bdda:	9207      	str	r2, [sp, #28]
 800bddc:	e014      	b.n	800be08 <_svfiprintf_r+0x114>
 800bdde:	eba0 0308 	sub.w	r3, r0, r8
 800bde2:	fa09 f303 	lsl.w	r3, r9, r3
 800bde6:	4313      	orrs	r3, r2
 800bde8:	46a2      	mov	sl, r4
 800bdea:	9304      	str	r3, [sp, #16]
 800bdec:	e7d2      	b.n	800bd94 <_svfiprintf_r+0xa0>
 800bdee:	9b03      	ldr	r3, [sp, #12]
 800bdf0:	1d19      	adds	r1, r3, #4
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	9103      	str	r1, [sp, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	bfbb      	ittet	lt
 800bdfa:	425b      	neglt	r3, r3
 800bdfc:	f042 0202 	orrlt.w	r2, r2, #2
 800be00:	9307      	strge	r3, [sp, #28]
 800be02:	9307      	strlt	r3, [sp, #28]
 800be04:	bfb8      	it	lt
 800be06:	9204      	strlt	r2, [sp, #16]
 800be08:	7823      	ldrb	r3, [r4, #0]
 800be0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800be0c:	d10a      	bne.n	800be24 <_svfiprintf_r+0x130>
 800be0e:	7863      	ldrb	r3, [r4, #1]
 800be10:	2b2a      	cmp	r3, #42	@ 0x2a
 800be12:	d132      	bne.n	800be7a <_svfiprintf_r+0x186>
 800be14:	9b03      	ldr	r3, [sp, #12]
 800be16:	3402      	adds	r4, #2
 800be18:	1d1a      	adds	r2, r3, #4
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	9203      	str	r2, [sp, #12]
 800be1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be22:	9305      	str	r3, [sp, #20]
 800be24:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800bedc <_svfiprintf_r+0x1e8>
 800be28:	2203      	movs	r2, #3
 800be2a:	4650      	mov	r0, sl
 800be2c:	7821      	ldrb	r1, [r4, #0]
 800be2e:	f000 fcb9 	bl	800c7a4 <memchr>
 800be32:	b138      	cbz	r0, 800be44 <_svfiprintf_r+0x150>
 800be34:	2240      	movs	r2, #64	@ 0x40
 800be36:	9b04      	ldr	r3, [sp, #16]
 800be38:	eba0 000a 	sub.w	r0, r0, sl
 800be3c:	4082      	lsls	r2, r0
 800be3e:	4313      	orrs	r3, r2
 800be40:	3401      	adds	r4, #1
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be48:	2206      	movs	r2, #6
 800be4a:	4825      	ldr	r0, [pc, #148]	@ (800bee0 <_svfiprintf_r+0x1ec>)
 800be4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be50:	f000 fca8 	bl	800c7a4 <memchr>
 800be54:	2800      	cmp	r0, #0
 800be56:	d036      	beq.n	800bec6 <_svfiprintf_r+0x1d2>
 800be58:	4b22      	ldr	r3, [pc, #136]	@ (800bee4 <_svfiprintf_r+0x1f0>)
 800be5a:	bb1b      	cbnz	r3, 800bea4 <_svfiprintf_r+0x1b0>
 800be5c:	9b03      	ldr	r3, [sp, #12]
 800be5e:	3307      	adds	r3, #7
 800be60:	f023 0307 	bic.w	r3, r3, #7
 800be64:	3308      	adds	r3, #8
 800be66:	9303      	str	r3, [sp, #12]
 800be68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be6a:	4433      	add	r3, r6
 800be6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be6e:	e76a      	b.n	800bd46 <_svfiprintf_r+0x52>
 800be70:	460c      	mov	r4, r1
 800be72:	2001      	movs	r0, #1
 800be74:	fb0c 3202 	mla	r2, ip, r2, r3
 800be78:	e7a8      	b.n	800bdcc <_svfiprintf_r+0xd8>
 800be7a:	2300      	movs	r3, #0
 800be7c:	f04f 0c0a 	mov.w	ip, #10
 800be80:	4619      	mov	r1, r3
 800be82:	3401      	adds	r4, #1
 800be84:	9305      	str	r3, [sp, #20]
 800be86:	4620      	mov	r0, r4
 800be88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be8c:	3a30      	subs	r2, #48	@ 0x30
 800be8e:	2a09      	cmp	r2, #9
 800be90:	d903      	bls.n	800be9a <_svfiprintf_r+0x1a6>
 800be92:	2b00      	cmp	r3, #0
 800be94:	d0c6      	beq.n	800be24 <_svfiprintf_r+0x130>
 800be96:	9105      	str	r1, [sp, #20]
 800be98:	e7c4      	b.n	800be24 <_svfiprintf_r+0x130>
 800be9a:	4604      	mov	r4, r0
 800be9c:	2301      	movs	r3, #1
 800be9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bea2:	e7f0      	b.n	800be86 <_svfiprintf_r+0x192>
 800bea4:	ab03      	add	r3, sp, #12
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	462a      	mov	r2, r5
 800beaa:	4638      	mov	r0, r7
 800beac:	4b0e      	ldr	r3, [pc, #56]	@ (800bee8 <_svfiprintf_r+0x1f4>)
 800beae:	a904      	add	r1, sp, #16
 800beb0:	f3af 8000 	nop.w
 800beb4:	1c42      	adds	r2, r0, #1
 800beb6:	4606      	mov	r6, r0
 800beb8:	d1d6      	bne.n	800be68 <_svfiprintf_r+0x174>
 800beba:	89ab      	ldrh	r3, [r5, #12]
 800bebc:	065b      	lsls	r3, r3, #25
 800bebe:	f53f af2d 	bmi.w	800bd1c <_svfiprintf_r+0x28>
 800bec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bec4:	e72c      	b.n	800bd20 <_svfiprintf_r+0x2c>
 800bec6:	ab03      	add	r3, sp, #12
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	462a      	mov	r2, r5
 800becc:	4638      	mov	r0, r7
 800bece:	4b06      	ldr	r3, [pc, #24]	@ (800bee8 <_svfiprintf_r+0x1f4>)
 800bed0:	a904      	add	r1, sp, #16
 800bed2:	f000 f9bd 	bl	800c250 <_printf_i>
 800bed6:	e7ed      	b.n	800beb4 <_svfiprintf_r+0x1c0>
 800bed8:	0800d30a 	.word	0x0800d30a
 800bedc:	0800d310 	.word	0x0800d310
 800bee0:	0800d314 	.word	0x0800d314
 800bee4:	00000000 	.word	0x00000000
 800bee8:	0800bc3d 	.word	0x0800bc3d

0800beec <__sfputc_r>:
 800beec:	6893      	ldr	r3, [r2, #8]
 800beee:	b410      	push	{r4}
 800bef0:	3b01      	subs	r3, #1
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	6093      	str	r3, [r2, #8]
 800bef6:	da07      	bge.n	800bf08 <__sfputc_r+0x1c>
 800bef8:	6994      	ldr	r4, [r2, #24]
 800befa:	42a3      	cmp	r3, r4
 800befc:	db01      	blt.n	800bf02 <__sfputc_r+0x16>
 800befe:	290a      	cmp	r1, #10
 800bf00:	d102      	bne.n	800bf08 <__sfputc_r+0x1c>
 800bf02:	bc10      	pop	{r4}
 800bf04:	f7ff bc85 	b.w	800b812 <__swbuf_r>
 800bf08:	6813      	ldr	r3, [r2, #0]
 800bf0a:	1c58      	adds	r0, r3, #1
 800bf0c:	6010      	str	r0, [r2, #0]
 800bf0e:	7019      	strb	r1, [r3, #0]
 800bf10:	4608      	mov	r0, r1
 800bf12:	bc10      	pop	{r4}
 800bf14:	4770      	bx	lr

0800bf16 <__sfputs_r>:
 800bf16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf18:	4606      	mov	r6, r0
 800bf1a:	460f      	mov	r7, r1
 800bf1c:	4614      	mov	r4, r2
 800bf1e:	18d5      	adds	r5, r2, r3
 800bf20:	42ac      	cmp	r4, r5
 800bf22:	d101      	bne.n	800bf28 <__sfputs_r+0x12>
 800bf24:	2000      	movs	r0, #0
 800bf26:	e007      	b.n	800bf38 <__sfputs_r+0x22>
 800bf28:	463a      	mov	r2, r7
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf30:	f7ff ffdc 	bl	800beec <__sfputc_r>
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	d1f3      	bne.n	800bf20 <__sfputs_r+0xa>
 800bf38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf3c <_vfiprintf_r>:
 800bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf40:	460d      	mov	r5, r1
 800bf42:	4614      	mov	r4, r2
 800bf44:	4698      	mov	r8, r3
 800bf46:	4606      	mov	r6, r0
 800bf48:	b09d      	sub	sp, #116	@ 0x74
 800bf4a:	b118      	cbz	r0, 800bf54 <_vfiprintf_r+0x18>
 800bf4c:	6a03      	ldr	r3, [r0, #32]
 800bf4e:	b90b      	cbnz	r3, 800bf54 <_vfiprintf_r+0x18>
 800bf50:	f7ff fb3a 	bl	800b5c8 <__sinit>
 800bf54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf56:	07d9      	lsls	r1, r3, #31
 800bf58:	d405      	bmi.n	800bf66 <_vfiprintf_r+0x2a>
 800bf5a:	89ab      	ldrh	r3, [r5, #12]
 800bf5c:	059a      	lsls	r2, r3, #22
 800bf5e:	d402      	bmi.n	800bf66 <_vfiprintf_r+0x2a>
 800bf60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf62:	f7ff fd64 	bl	800ba2e <__retarget_lock_acquire_recursive>
 800bf66:	89ab      	ldrh	r3, [r5, #12]
 800bf68:	071b      	lsls	r3, r3, #28
 800bf6a:	d501      	bpl.n	800bf70 <_vfiprintf_r+0x34>
 800bf6c:	692b      	ldr	r3, [r5, #16]
 800bf6e:	b99b      	cbnz	r3, 800bf98 <_vfiprintf_r+0x5c>
 800bf70:	4629      	mov	r1, r5
 800bf72:	4630      	mov	r0, r6
 800bf74:	f7ff fc8c 	bl	800b890 <__swsetup_r>
 800bf78:	b170      	cbz	r0, 800bf98 <_vfiprintf_r+0x5c>
 800bf7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf7c:	07dc      	lsls	r4, r3, #31
 800bf7e:	d504      	bpl.n	800bf8a <_vfiprintf_r+0x4e>
 800bf80:	f04f 30ff 	mov.w	r0, #4294967295
 800bf84:	b01d      	add	sp, #116	@ 0x74
 800bf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf8a:	89ab      	ldrh	r3, [r5, #12]
 800bf8c:	0598      	lsls	r0, r3, #22
 800bf8e:	d4f7      	bmi.n	800bf80 <_vfiprintf_r+0x44>
 800bf90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf92:	f7ff fd4d 	bl	800ba30 <__retarget_lock_release_recursive>
 800bf96:	e7f3      	b.n	800bf80 <_vfiprintf_r+0x44>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf9c:	2320      	movs	r3, #32
 800bf9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bfa2:	2330      	movs	r3, #48	@ 0x30
 800bfa4:	f04f 0901 	mov.w	r9, #1
 800bfa8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c158 <_vfiprintf_r+0x21c>
 800bfb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfb4:	4623      	mov	r3, r4
 800bfb6:	469a      	mov	sl, r3
 800bfb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfbc:	b10a      	cbz	r2, 800bfc2 <_vfiprintf_r+0x86>
 800bfbe:	2a25      	cmp	r2, #37	@ 0x25
 800bfc0:	d1f9      	bne.n	800bfb6 <_vfiprintf_r+0x7a>
 800bfc2:	ebba 0b04 	subs.w	fp, sl, r4
 800bfc6:	d00b      	beq.n	800bfe0 <_vfiprintf_r+0xa4>
 800bfc8:	465b      	mov	r3, fp
 800bfca:	4622      	mov	r2, r4
 800bfcc:	4629      	mov	r1, r5
 800bfce:	4630      	mov	r0, r6
 800bfd0:	f7ff ffa1 	bl	800bf16 <__sfputs_r>
 800bfd4:	3001      	adds	r0, #1
 800bfd6:	f000 80a7 	beq.w	800c128 <_vfiprintf_r+0x1ec>
 800bfda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfdc:	445a      	add	r2, fp
 800bfde:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfe0:	f89a 3000 	ldrb.w	r3, [sl]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f000 809f 	beq.w	800c128 <_vfiprintf_r+0x1ec>
 800bfea:	2300      	movs	r3, #0
 800bfec:	f04f 32ff 	mov.w	r2, #4294967295
 800bff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bff4:	f10a 0a01 	add.w	sl, sl, #1
 800bff8:	9304      	str	r3, [sp, #16]
 800bffa:	9307      	str	r3, [sp, #28]
 800bffc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c000:	931a      	str	r3, [sp, #104]	@ 0x68
 800c002:	4654      	mov	r4, sl
 800c004:	2205      	movs	r2, #5
 800c006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c00a:	4853      	ldr	r0, [pc, #332]	@ (800c158 <_vfiprintf_r+0x21c>)
 800c00c:	f000 fbca 	bl	800c7a4 <memchr>
 800c010:	9a04      	ldr	r2, [sp, #16]
 800c012:	b9d8      	cbnz	r0, 800c04c <_vfiprintf_r+0x110>
 800c014:	06d1      	lsls	r1, r2, #27
 800c016:	bf44      	itt	mi
 800c018:	2320      	movmi	r3, #32
 800c01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c01e:	0713      	lsls	r3, r2, #28
 800c020:	bf44      	itt	mi
 800c022:	232b      	movmi	r3, #43	@ 0x2b
 800c024:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c028:	f89a 3000 	ldrb.w	r3, [sl]
 800c02c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c02e:	d015      	beq.n	800c05c <_vfiprintf_r+0x120>
 800c030:	4654      	mov	r4, sl
 800c032:	2000      	movs	r0, #0
 800c034:	f04f 0c0a 	mov.w	ip, #10
 800c038:	9a07      	ldr	r2, [sp, #28]
 800c03a:	4621      	mov	r1, r4
 800c03c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c040:	3b30      	subs	r3, #48	@ 0x30
 800c042:	2b09      	cmp	r3, #9
 800c044:	d94b      	bls.n	800c0de <_vfiprintf_r+0x1a2>
 800c046:	b1b0      	cbz	r0, 800c076 <_vfiprintf_r+0x13a>
 800c048:	9207      	str	r2, [sp, #28]
 800c04a:	e014      	b.n	800c076 <_vfiprintf_r+0x13a>
 800c04c:	eba0 0308 	sub.w	r3, r0, r8
 800c050:	fa09 f303 	lsl.w	r3, r9, r3
 800c054:	4313      	orrs	r3, r2
 800c056:	46a2      	mov	sl, r4
 800c058:	9304      	str	r3, [sp, #16]
 800c05a:	e7d2      	b.n	800c002 <_vfiprintf_r+0xc6>
 800c05c:	9b03      	ldr	r3, [sp, #12]
 800c05e:	1d19      	adds	r1, r3, #4
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	9103      	str	r1, [sp, #12]
 800c064:	2b00      	cmp	r3, #0
 800c066:	bfbb      	ittet	lt
 800c068:	425b      	neglt	r3, r3
 800c06a:	f042 0202 	orrlt.w	r2, r2, #2
 800c06e:	9307      	strge	r3, [sp, #28]
 800c070:	9307      	strlt	r3, [sp, #28]
 800c072:	bfb8      	it	lt
 800c074:	9204      	strlt	r2, [sp, #16]
 800c076:	7823      	ldrb	r3, [r4, #0]
 800c078:	2b2e      	cmp	r3, #46	@ 0x2e
 800c07a:	d10a      	bne.n	800c092 <_vfiprintf_r+0x156>
 800c07c:	7863      	ldrb	r3, [r4, #1]
 800c07e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c080:	d132      	bne.n	800c0e8 <_vfiprintf_r+0x1ac>
 800c082:	9b03      	ldr	r3, [sp, #12]
 800c084:	3402      	adds	r4, #2
 800c086:	1d1a      	adds	r2, r3, #4
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	9203      	str	r2, [sp, #12]
 800c08c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c090:	9305      	str	r3, [sp, #20]
 800c092:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c15c <_vfiprintf_r+0x220>
 800c096:	2203      	movs	r2, #3
 800c098:	4650      	mov	r0, sl
 800c09a:	7821      	ldrb	r1, [r4, #0]
 800c09c:	f000 fb82 	bl	800c7a4 <memchr>
 800c0a0:	b138      	cbz	r0, 800c0b2 <_vfiprintf_r+0x176>
 800c0a2:	2240      	movs	r2, #64	@ 0x40
 800c0a4:	9b04      	ldr	r3, [sp, #16]
 800c0a6:	eba0 000a 	sub.w	r0, r0, sl
 800c0aa:	4082      	lsls	r2, r0
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	3401      	adds	r4, #1
 800c0b0:	9304      	str	r3, [sp, #16]
 800c0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b6:	2206      	movs	r2, #6
 800c0b8:	4829      	ldr	r0, [pc, #164]	@ (800c160 <_vfiprintf_r+0x224>)
 800c0ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0be:	f000 fb71 	bl	800c7a4 <memchr>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d03f      	beq.n	800c146 <_vfiprintf_r+0x20a>
 800c0c6:	4b27      	ldr	r3, [pc, #156]	@ (800c164 <_vfiprintf_r+0x228>)
 800c0c8:	bb1b      	cbnz	r3, 800c112 <_vfiprintf_r+0x1d6>
 800c0ca:	9b03      	ldr	r3, [sp, #12]
 800c0cc:	3307      	adds	r3, #7
 800c0ce:	f023 0307 	bic.w	r3, r3, #7
 800c0d2:	3308      	adds	r3, #8
 800c0d4:	9303      	str	r3, [sp, #12]
 800c0d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d8:	443b      	add	r3, r7
 800c0da:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0dc:	e76a      	b.n	800bfb4 <_vfiprintf_r+0x78>
 800c0de:	460c      	mov	r4, r1
 800c0e0:	2001      	movs	r0, #1
 800c0e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0e6:	e7a8      	b.n	800c03a <_vfiprintf_r+0xfe>
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	f04f 0c0a 	mov.w	ip, #10
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	3401      	adds	r4, #1
 800c0f2:	9305      	str	r3, [sp, #20]
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0fa:	3a30      	subs	r2, #48	@ 0x30
 800c0fc:	2a09      	cmp	r2, #9
 800c0fe:	d903      	bls.n	800c108 <_vfiprintf_r+0x1cc>
 800c100:	2b00      	cmp	r3, #0
 800c102:	d0c6      	beq.n	800c092 <_vfiprintf_r+0x156>
 800c104:	9105      	str	r1, [sp, #20]
 800c106:	e7c4      	b.n	800c092 <_vfiprintf_r+0x156>
 800c108:	4604      	mov	r4, r0
 800c10a:	2301      	movs	r3, #1
 800c10c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c110:	e7f0      	b.n	800c0f4 <_vfiprintf_r+0x1b8>
 800c112:	ab03      	add	r3, sp, #12
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	462a      	mov	r2, r5
 800c118:	4630      	mov	r0, r6
 800c11a:	4b13      	ldr	r3, [pc, #76]	@ (800c168 <_vfiprintf_r+0x22c>)
 800c11c:	a904      	add	r1, sp, #16
 800c11e:	f3af 8000 	nop.w
 800c122:	4607      	mov	r7, r0
 800c124:	1c78      	adds	r0, r7, #1
 800c126:	d1d6      	bne.n	800c0d6 <_vfiprintf_r+0x19a>
 800c128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c12a:	07d9      	lsls	r1, r3, #31
 800c12c:	d405      	bmi.n	800c13a <_vfiprintf_r+0x1fe>
 800c12e:	89ab      	ldrh	r3, [r5, #12]
 800c130:	059a      	lsls	r2, r3, #22
 800c132:	d402      	bmi.n	800c13a <_vfiprintf_r+0x1fe>
 800c134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c136:	f7ff fc7b 	bl	800ba30 <__retarget_lock_release_recursive>
 800c13a:	89ab      	ldrh	r3, [r5, #12]
 800c13c:	065b      	lsls	r3, r3, #25
 800c13e:	f53f af1f 	bmi.w	800bf80 <_vfiprintf_r+0x44>
 800c142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c144:	e71e      	b.n	800bf84 <_vfiprintf_r+0x48>
 800c146:	ab03      	add	r3, sp, #12
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	462a      	mov	r2, r5
 800c14c:	4630      	mov	r0, r6
 800c14e:	4b06      	ldr	r3, [pc, #24]	@ (800c168 <_vfiprintf_r+0x22c>)
 800c150:	a904      	add	r1, sp, #16
 800c152:	f000 f87d 	bl	800c250 <_printf_i>
 800c156:	e7e4      	b.n	800c122 <_vfiprintf_r+0x1e6>
 800c158:	0800d30a 	.word	0x0800d30a
 800c15c:	0800d310 	.word	0x0800d310
 800c160:	0800d314 	.word	0x0800d314
 800c164:	00000000 	.word	0x00000000
 800c168:	0800bf17 	.word	0x0800bf17

0800c16c <_printf_common>:
 800c16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c170:	4616      	mov	r6, r2
 800c172:	4698      	mov	r8, r3
 800c174:	688a      	ldr	r2, [r1, #8]
 800c176:	690b      	ldr	r3, [r1, #16]
 800c178:	4607      	mov	r7, r0
 800c17a:	4293      	cmp	r3, r2
 800c17c:	bfb8      	it	lt
 800c17e:	4613      	movlt	r3, r2
 800c180:	6033      	str	r3, [r6, #0]
 800c182:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c186:	460c      	mov	r4, r1
 800c188:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c18c:	b10a      	cbz	r2, 800c192 <_printf_common+0x26>
 800c18e:	3301      	adds	r3, #1
 800c190:	6033      	str	r3, [r6, #0]
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	0699      	lsls	r1, r3, #26
 800c196:	bf42      	ittt	mi
 800c198:	6833      	ldrmi	r3, [r6, #0]
 800c19a:	3302      	addmi	r3, #2
 800c19c:	6033      	strmi	r3, [r6, #0]
 800c19e:	6825      	ldr	r5, [r4, #0]
 800c1a0:	f015 0506 	ands.w	r5, r5, #6
 800c1a4:	d106      	bne.n	800c1b4 <_printf_common+0x48>
 800c1a6:	f104 0a19 	add.w	sl, r4, #25
 800c1aa:	68e3      	ldr	r3, [r4, #12]
 800c1ac:	6832      	ldr	r2, [r6, #0]
 800c1ae:	1a9b      	subs	r3, r3, r2
 800c1b0:	42ab      	cmp	r3, r5
 800c1b2:	dc2b      	bgt.n	800c20c <_printf_common+0xa0>
 800c1b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c1b8:	6822      	ldr	r2, [r4, #0]
 800c1ba:	3b00      	subs	r3, #0
 800c1bc:	bf18      	it	ne
 800c1be:	2301      	movne	r3, #1
 800c1c0:	0692      	lsls	r2, r2, #26
 800c1c2:	d430      	bmi.n	800c226 <_printf_common+0xba>
 800c1c4:	4641      	mov	r1, r8
 800c1c6:	4638      	mov	r0, r7
 800c1c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c1cc:	47c8      	blx	r9
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	d023      	beq.n	800c21a <_printf_common+0xae>
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	6922      	ldr	r2, [r4, #16]
 800c1d6:	f003 0306 	and.w	r3, r3, #6
 800c1da:	2b04      	cmp	r3, #4
 800c1dc:	bf14      	ite	ne
 800c1de:	2500      	movne	r5, #0
 800c1e0:	6833      	ldreq	r3, [r6, #0]
 800c1e2:	f04f 0600 	mov.w	r6, #0
 800c1e6:	bf08      	it	eq
 800c1e8:	68e5      	ldreq	r5, [r4, #12]
 800c1ea:	f104 041a 	add.w	r4, r4, #26
 800c1ee:	bf08      	it	eq
 800c1f0:	1aed      	subeq	r5, r5, r3
 800c1f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c1f6:	bf08      	it	eq
 800c1f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	bfc4      	itt	gt
 800c200:	1a9b      	subgt	r3, r3, r2
 800c202:	18ed      	addgt	r5, r5, r3
 800c204:	42b5      	cmp	r5, r6
 800c206:	d11a      	bne.n	800c23e <_printf_common+0xd2>
 800c208:	2000      	movs	r0, #0
 800c20a:	e008      	b.n	800c21e <_printf_common+0xb2>
 800c20c:	2301      	movs	r3, #1
 800c20e:	4652      	mov	r2, sl
 800c210:	4641      	mov	r1, r8
 800c212:	4638      	mov	r0, r7
 800c214:	47c8      	blx	r9
 800c216:	3001      	adds	r0, #1
 800c218:	d103      	bne.n	800c222 <_printf_common+0xb6>
 800c21a:	f04f 30ff 	mov.w	r0, #4294967295
 800c21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c222:	3501      	adds	r5, #1
 800c224:	e7c1      	b.n	800c1aa <_printf_common+0x3e>
 800c226:	2030      	movs	r0, #48	@ 0x30
 800c228:	18e1      	adds	r1, r4, r3
 800c22a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c22e:	1c5a      	adds	r2, r3, #1
 800c230:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c234:	4422      	add	r2, r4
 800c236:	3302      	adds	r3, #2
 800c238:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c23c:	e7c2      	b.n	800c1c4 <_printf_common+0x58>
 800c23e:	2301      	movs	r3, #1
 800c240:	4622      	mov	r2, r4
 800c242:	4641      	mov	r1, r8
 800c244:	4638      	mov	r0, r7
 800c246:	47c8      	blx	r9
 800c248:	3001      	adds	r0, #1
 800c24a:	d0e6      	beq.n	800c21a <_printf_common+0xae>
 800c24c:	3601      	adds	r6, #1
 800c24e:	e7d9      	b.n	800c204 <_printf_common+0x98>

0800c250 <_printf_i>:
 800c250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c254:	7e0f      	ldrb	r7, [r1, #24]
 800c256:	4691      	mov	r9, r2
 800c258:	2f78      	cmp	r7, #120	@ 0x78
 800c25a:	4680      	mov	r8, r0
 800c25c:	460c      	mov	r4, r1
 800c25e:	469a      	mov	sl, r3
 800c260:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c262:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c266:	d807      	bhi.n	800c278 <_printf_i+0x28>
 800c268:	2f62      	cmp	r7, #98	@ 0x62
 800c26a:	d80a      	bhi.n	800c282 <_printf_i+0x32>
 800c26c:	2f00      	cmp	r7, #0
 800c26e:	f000 80d3 	beq.w	800c418 <_printf_i+0x1c8>
 800c272:	2f58      	cmp	r7, #88	@ 0x58
 800c274:	f000 80ba 	beq.w	800c3ec <_printf_i+0x19c>
 800c278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c27c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c280:	e03a      	b.n	800c2f8 <_printf_i+0xa8>
 800c282:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c286:	2b15      	cmp	r3, #21
 800c288:	d8f6      	bhi.n	800c278 <_printf_i+0x28>
 800c28a:	a101      	add	r1, pc, #4	@ (adr r1, 800c290 <_printf_i+0x40>)
 800c28c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c290:	0800c2e9 	.word	0x0800c2e9
 800c294:	0800c2fd 	.word	0x0800c2fd
 800c298:	0800c279 	.word	0x0800c279
 800c29c:	0800c279 	.word	0x0800c279
 800c2a0:	0800c279 	.word	0x0800c279
 800c2a4:	0800c279 	.word	0x0800c279
 800c2a8:	0800c2fd 	.word	0x0800c2fd
 800c2ac:	0800c279 	.word	0x0800c279
 800c2b0:	0800c279 	.word	0x0800c279
 800c2b4:	0800c279 	.word	0x0800c279
 800c2b8:	0800c279 	.word	0x0800c279
 800c2bc:	0800c3ff 	.word	0x0800c3ff
 800c2c0:	0800c327 	.word	0x0800c327
 800c2c4:	0800c3b9 	.word	0x0800c3b9
 800c2c8:	0800c279 	.word	0x0800c279
 800c2cc:	0800c279 	.word	0x0800c279
 800c2d0:	0800c421 	.word	0x0800c421
 800c2d4:	0800c279 	.word	0x0800c279
 800c2d8:	0800c327 	.word	0x0800c327
 800c2dc:	0800c279 	.word	0x0800c279
 800c2e0:	0800c279 	.word	0x0800c279
 800c2e4:	0800c3c1 	.word	0x0800c3c1
 800c2e8:	6833      	ldr	r3, [r6, #0]
 800c2ea:	1d1a      	adds	r2, r3, #4
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6032      	str	r2, [r6, #0]
 800c2f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e09e      	b.n	800c43a <_printf_i+0x1ea>
 800c2fc:	6833      	ldr	r3, [r6, #0]
 800c2fe:	6820      	ldr	r0, [r4, #0]
 800c300:	1d19      	adds	r1, r3, #4
 800c302:	6031      	str	r1, [r6, #0]
 800c304:	0606      	lsls	r6, r0, #24
 800c306:	d501      	bpl.n	800c30c <_printf_i+0xbc>
 800c308:	681d      	ldr	r5, [r3, #0]
 800c30a:	e003      	b.n	800c314 <_printf_i+0xc4>
 800c30c:	0645      	lsls	r5, r0, #25
 800c30e:	d5fb      	bpl.n	800c308 <_printf_i+0xb8>
 800c310:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c314:	2d00      	cmp	r5, #0
 800c316:	da03      	bge.n	800c320 <_printf_i+0xd0>
 800c318:	232d      	movs	r3, #45	@ 0x2d
 800c31a:	426d      	negs	r5, r5
 800c31c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c320:	230a      	movs	r3, #10
 800c322:	4859      	ldr	r0, [pc, #356]	@ (800c488 <_printf_i+0x238>)
 800c324:	e011      	b.n	800c34a <_printf_i+0xfa>
 800c326:	6821      	ldr	r1, [r4, #0]
 800c328:	6833      	ldr	r3, [r6, #0]
 800c32a:	0608      	lsls	r0, r1, #24
 800c32c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c330:	d402      	bmi.n	800c338 <_printf_i+0xe8>
 800c332:	0649      	lsls	r1, r1, #25
 800c334:	bf48      	it	mi
 800c336:	b2ad      	uxthmi	r5, r5
 800c338:	2f6f      	cmp	r7, #111	@ 0x6f
 800c33a:	6033      	str	r3, [r6, #0]
 800c33c:	bf14      	ite	ne
 800c33e:	230a      	movne	r3, #10
 800c340:	2308      	moveq	r3, #8
 800c342:	4851      	ldr	r0, [pc, #324]	@ (800c488 <_printf_i+0x238>)
 800c344:	2100      	movs	r1, #0
 800c346:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c34a:	6866      	ldr	r6, [r4, #4]
 800c34c:	2e00      	cmp	r6, #0
 800c34e:	bfa8      	it	ge
 800c350:	6821      	ldrge	r1, [r4, #0]
 800c352:	60a6      	str	r6, [r4, #8]
 800c354:	bfa4      	itt	ge
 800c356:	f021 0104 	bicge.w	r1, r1, #4
 800c35a:	6021      	strge	r1, [r4, #0]
 800c35c:	b90d      	cbnz	r5, 800c362 <_printf_i+0x112>
 800c35e:	2e00      	cmp	r6, #0
 800c360:	d04b      	beq.n	800c3fa <_printf_i+0x1aa>
 800c362:	4616      	mov	r6, r2
 800c364:	fbb5 f1f3 	udiv	r1, r5, r3
 800c368:	fb03 5711 	mls	r7, r3, r1, r5
 800c36c:	5dc7      	ldrb	r7, [r0, r7]
 800c36e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c372:	462f      	mov	r7, r5
 800c374:	42bb      	cmp	r3, r7
 800c376:	460d      	mov	r5, r1
 800c378:	d9f4      	bls.n	800c364 <_printf_i+0x114>
 800c37a:	2b08      	cmp	r3, #8
 800c37c:	d10b      	bne.n	800c396 <_printf_i+0x146>
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	07df      	lsls	r7, r3, #31
 800c382:	d508      	bpl.n	800c396 <_printf_i+0x146>
 800c384:	6923      	ldr	r3, [r4, #16]
 800c386:	6861      	ldr	r1, [r4, #4]
 800c388:	4299      	cmp	r1, r3
 800c38a:	bfde      	ittt	le
 800c38c:	2330      	movle	r3, #48	@ 0x30
 800c38e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c392:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c396:	1b92      	subs	r2, r2, r6
 800c398:	6122      	str	r2, [r4, #16]
 800c39a:	464b      	mov	r3, r9
 800c39c:	4621      	mov	r1, r4
 800c39e:	4640      	mov	r0, r8
 800c3a0:	f8cd a000 	str.w	sl, [sp]
 800c3a4:	aa03      	add	r2, sp, #12
 800c3a6:	f7ff fee1 	bl	800c16c <_printf_common>
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	d14a      	bne.n	800c444 <_printf_i+0x1f4>
 800c3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b2:	b004      	add	sp, #16
 800c3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	f043 0320 	orr.w	r3, r3, #32
 800c3be:	6023      	str	r3, [r4, #0]
 800c3c0:	2778      	movs	r7, #120	@ 0x78
 800c3c2:	4832      	ldr	r0, [pc, #200]	@ (800c48c <_printf_i+0x23c>)
 800c3c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c3c8:	6823      	ldr	r3, [r4, #0]
 800c3ca:	6831      	ldr	r1, [r6, #0]
 800c3cc:	061f      	lsls	r7, r3, #24
 800c3ce:	f851 5b04 	ldr.w	r5, [r1], #4
 800c3d2:	d402      	bmi.n	800c3da <_printf_i+0x18a>
 800c3d4:	065f      	lsls	r7, r3, #25
 800c3d6:	bf48      	it	mi
 800c3d8:	b2ad      	uxthmi	r5, r5
 800c3da:	6031      	str	r1, [r6, #0]
 800c3dc:	07d9      	lsls	r1, r3, #31
 800c3de:	bf44      	itt	mi
 800c3e0:	f043 0320 	orrmi.w	r3, r3, #32
 800c3e4:	6023      	strmi	r3, [r4, #0]
 800c3e6:	b11d      	cbz	r5, 800c3f0 <_printf_i+0x1a0>
 800c3e8:	2310      	movs	r3, #16
 800c3ea:	e7ab      	b.n	800c344 <_printf_i+0xf4>
 800c3ec:	4826      	ldr	r0, [pc, #152]	@ (800c488 <_printf_i+0x238>)
 800c3ee:	e7e9      	b.n	800c3c4 <_printf_i+0x174>
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	f023 0320 	bic.w	r3, r3, #32
 800c3f6:	6023      	str	r3, [r4, #0]
 800c3f8:	e7f6      	b.n	800c3e8 <_printf_i+0x198>
 800c3fa:	4616      	mov	r6, r2
 800c3fc:	e7bd      	b.n	800c37a <_printf_i+0x12a>
 800c3fe:	6833      	ldr	r3, [r6, #0]
 800c400:	6825      	ldr	r5, [r4, #0]
 800c402:	1d18      	adds	r0, r3, #4
 800c404:	6961      	ldr	r1, [r4, #20]
 800c406:	6030      	str	r0, [r6, #0]
 800c408:	062e      	lsls	r6, r5, #24
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	d501      	bpl.n	800c412 <_printf_i+0x1c2>
 800c40e:	6019      	str	r1, [r3, #0]
 800c410:	e002      	b.n	800c418 <_printf_i+0x1c8>
 800c412:	0668      	lsls	r0, r5, #25
 800c414:	d5fb      	bpl.n	800c40e <_printf_i+0x1be>
 800c416:	8019      	strh	r1, [r3, #0]
 800c418:	2300      	movs	r3, #0
 800c41a:	4616      	mov	r6, r2
 800c41c:	6123      	str	r3, [r4, #16]
 800c41e:	e7bc      	b.n	800c39a <_printf_i+0x14a>
 800c420:	6833      	ldr	r3, [r6, #0]
 800c422:	2100      	movs	r1, #0
 800c424:	1d1a      	adds	r2, r3, #4
 800c426:	6032      	str	r2, [r6, #0]
 800c428:	681e      	ldr	r6, [r3, #0]
 800c42a:	6862      	ldr	r2, [r4, #4]
 800c42c:	4630      	mov	r0, r6
 800c42e:	f000 f9b9 	bl	800c7a4 <memchr>
 800c432:	b108      	cbz	r0, 800c438 <_printf_i+0x1e8>
 800c434:	1b80      	subs	r0, r0, r6
 800c436:	6060      	str	r0, [r4, #4]
 800c438:	6863      	ldr	r3, [r4, #4]
 800c43a:	6123      	str	r3, [r4, #16]
 800c43c:	2300      	movs	r3, #0
 800c43e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c442:	e7aa      	b.n	800c39a <_printf_i+0x14a>
 800c444:	4632      	mov	r2, r6
 800c446:	4649      	mov	r1, r9
 800c448:	4640      	mov	r0, r8
 800c44a:	6923      	ldr	r3, [r4, #16]
 800c44c:	47d0      	blx	sl
 800c44e:	3001      	adds	r0, #1
 800c450:	d0ad      	beq.n	800c3ae <_printf_i+0x15e>
 800c452:	6823      	ldr	r3, [r4, #0]
 800c454:	079b      	lsls	r3, r3, #30
 800c456:	d413      	bmi.n	800c480 <_printf_i+0x230>
 800c458:	68e0      	ldr	r0, [r4, #12]
 800c45a:	9b03      	ldr	r3, [sp, #12]
 800c45c:	4298      	cmp	r0, r3
 800c45e:	bfb8      	it	lt
 800c460:	4618      	movlt	r0, r3
 800c462:	e7a6      	b.n	800c3b2 <_printf_i+0x162>
 800c464:	2301      	movs	r3, #1
 800c466:	4632      	mov	r2, r6
 800c468:	4649      	mov	r1, r9
 800c46a:	4640      	mov	r0, r8
 800c46c:	47d0      	blx	sl
 800c46e:	3001      	adds	r0, #1
 800c470:	d09d      	beq.n	800c3ae <_printf_i+0x15e>
 800c472:	3501      	adds	r5, #1
 800c474:	68e3      	ldr	r3, [r4, #12]
 800c476:	9903      	ldr	r1, [sp, #12]
 800c478:	1a5b      	subs	r3, r3, r1
 800c47a:	42ab      	cmp	r3, r5
 800c47c:	dcf2      	bgt.n	800c464 <_printf_i+0x214>
 800c47e:	e7eb      	b.n	800c458 <_printf_i+0x208>
 800c480:	2500      	movs	r5, #0
 800c482:	f104 0619 	add.w	r6, r4, #25
 800c486:	e7f5      	b.n	800c474 <_printf_i+0x224>
 800c488:	0800d31b 	.word	0x0800d31b
 800c48c:	0800d32c 	.word	0x0800d32c

0800c490 <__sflush_r>:
 800c490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c496:	0716      	lsls	r6, r2, #28
 800c498:	4605      	mov	r5, r0
 800c49a:	460c      	mov	r4, r1
 800c49c:	d454      	bmi.n	800c548 <__sflush_r+0xb8>
 800c49e:	684b      	ldr	r3, [r1, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	dc02      	bgt.n	800c4aa <__sflush_r+0x1a>
 800c4a4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	dd48      	ble.n	800c53c <__sflush_r+0xac>
 800c4aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4ac:	2e00      	cmp	r6, #0
 800c4ae:	d045      	beq.n	800c53c <__sflush_r+0xac>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c4b6:	682f      	ldr	r7, [r5, #0]
 800c4b8:	6a21      	ldr	r1, [r4, #32]
 800c4ba:	602b      	str	r3, [r5, #0]
 800c4bc:	d030      	beq.n	800c520 <__sflush_r+0x90>
 800c4be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	0759      	lsls	r1, r3, #29
 800c4c4:	d505      	bpl.n	800c4d2 <__sflush_r+0x42>
 800c4c6:	6863      	ldr	r3, [r4, #4]
 800c4c8:	1ad2      	subs	r2, r2, r3
 800c4ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c4cc:	b10b      	cbz	r3, 800c4d2 <__sflush_r+0x42>
 800c4ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4d0:	1ad2      	subs	r2, r2, r3
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	4628      	mov	r0, r5
 800c4d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4d8:	6a21      	ldr	r1, [r4, #32]
 800c4da:	47b0      	blx	r6
 800c4dc:	1c43      	adds	r3, r0, #1
 800c4de:	89a3      	ldrh	r3, [r4, #12]
 800c4e0:	d106      	bne.n	800c4f0 <__sflush_r+0x60>
 800c4e2:	6829      	ldr	r1, [r5, #0]
 800c4e4:	291d      	cmp	r1, #29
 800c4e6:	d82b      	bhi.n	800c540 <__sflush_r+0xb0>
 800c4e8:	4a28      	ldr	r2, [pc, #160]	@ (800c58c <__sflush_r+0xfc>)
 800c4ea:	410a      	asrs	r2, r1
 800c4ec:	07d6      	lsls	r6, r2, #31
 800c4ee:	d427      	bmi.n	800c540 <__sflush_r+0xb0>
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	6062      	str	r2, [r4, #4]
 800c4f4:	6922      	ldr	r2, [r4, #16]
 800c4f6:	04d9      	lsls	r1, r3, #19
 800c4f8:	6022      	str	r2, [r4, #0]
 800c4fa:	d504      	bpl.n	800c506 <__sflush_r+0x76>
 800c4fc:	1c42      	adds	r2, r0, #1
 800c4fe:	d101      	bne.n	800c504 <__sflush_r+0x74>
 800c500:	682b      	ldr	r3, [r5, #0]
 800c502:	b903      	cbnz	r3, 800c506 <__sflush_r+0x76>
 800c504:	6560      	str	r0, [r4, #84]	@ 0x54
 800c506:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c508:	602f      	str	r7, [r5, #0]
 800c50a:	b1b9      	cbz	r1, 800c53c <__sflush_r+0xac>
 800c50c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c510:	4299      	cmp	r1, r3
 800c512:	d002      	beq.n	800c51a <__sflush_r+0x8a>
 800c514:	4628      	mov	r0, r5
 800c516:	f7ff fa9b 	bl	800ba50 <_free_r>
 800c51a:	2300      	movs	r3, #0
 800c51c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c51e:	e00d      	b.n	800c53c <__sflush_r+0xac>
 800c520:	2301      	movs	r3, #1
 800c522:	4628      	mov	r0, r5
 800c524:	47b0      	blx	r6
 800c526:	4602      	mov	r2, r0
 800c528:	1c50      	adds	r0, r2, #1
 800c52a:	d1c9      	bne.n	800c4c0 <__sflush_r+0x30>
 800c52c:	682b      	ldr	r3, [r5, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d0c6      	beq.n	800c4c0 <__sflush_r+0x30>
 800c532:	2b1d      	cmp	r3, #29
 800c534:	d001      	beq.n	800c53a <__sflush_r+0xaa>
 800c536:	2b16      	cmp	r3, #22
 800c538:	d11d      	bne.n	800c576 <__sflush_r+0xe6>
 800c53a:	602f      	str	r7, [r5, #0]
 800c53c:	2000      	movs	r0, #0
 800c53e:	e021      	b.n	800c584 <__sflush_r+0xf4>
 800c540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c544:	b21b      	sxth	r3, r3
 800c546:	e01a      	b.n	800c57e <__sflush_r+0xee>
 800c548:	690f      	ldr	r7, [r1, #16]
 800c54a:	2f00      	cmp	r7, #0
 800c54c:	d0f6      	beq.n	800c53c <__sflush_r+0xac>
 800c54e:	0793      	lsls	r3, r2, #30
 800c550:	bf18      	it	ne
 800c552:	2300      	movne	r3, #0
 800c554:	680e      	ldr	r6, [r1, #0]
 800c556:	bf08      	it	eq
 800c558:	694b      	ldreq	r3, [r1, #20]
 800c55a:	1bf6      	subs	r6, r6, r7
 800c55c:	600f      	str	r7, [r1, #0]
 800c55e:	608b      	str	r3, [r1, #8]
 800c560:	2e00      	cmp	r6, #0
 800c562:	ddeb      	ble.n	800c53c <__sflush_r+0xac>
 800c564:	4633      	mov	r3, r6
 800c566:	463a      	mov	r2, r7
 800c568:	4628      	mov	r0, r5
 800c56a:	6a21      	ldr	r1, [r4, #32]
 800c56c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c570:	47e0      	blx	ip
 800c572:	2800      	cmp	r0, #0
 800c574:	dc07      	bgt.n	800c586 <__sflush_r+0xf6>
 800c576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c57a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c57e:	f04f 30ff 	mov.w	r0, #4294967295
 800c582:	81a3      	strh	r3, [r4, #12]
 800c584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c586:	4407      	add	r7, r0
 800c588:	1a36      	subs	r6, r6, r0
 800c58a:	e7e9      	b.n	800c560 <__sflush_r+0xd0>
 800c58c:	dfbffffe 	.word	0xdfbffffe

0800c590 <_fflush_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	690b      	ldr	r3, [r1, #16]
 800c594:	4605      	mov	r5, r0
 800c596:	460c      	mov	r4, r1
 800c598:	b913      	cbnz	r3, 800c5a0 <_fflush_r+0x10>
 800c59a:	2500      	movs	r5, #0
 800c59c:	4628      	mov	r0, r5
 800c59e:	bd38      	pop	{r3, r4, r5, pc}
 800c5a0:	b118      	cbz	r0, 800c5aa <_fflush_r+0x1a>
 800c5a2:	6a03      	ldr	r3, [r0, #32]
 800c5a4:	b90b      	cbnz	r3, 800c5aa <_fflush_r+0x1a>
 800c5a6:	f7ff f80f 	bl	800b5c8 <__sinit>
 800c5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d0f3      	beq.n	800c59a <_fflush_r+0xa>
 800c5b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5b4:	07d0      	lsls	r0, r2, #31
 800c5b6:	d404      	bmi.n	800c5c2 <_fflush_r+0x32>
 800c5b8:	0599      	lsls	r1, r3, #22
 800c5ba:	d402      	bmi.n	800c5c2 <_fflush_r+0x32>
 800c5bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5be:	f7ff fa36 	bl	800ba2e <__retarget_lock_acquire_recursive>
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	f7ff ff63 	bl	800c490 <__sflush_r>
 800c5ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5cc:	4605      	mov	r5, r0
 800c5ce:	07da      	lsls	r2, r3, #31
 800c5d0:	d4e4      	bmi.n	800c59c <_fflush_r+0xc>
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	059b      	lsls	r3, r3, #22
 800c5d6:	d4e1      	bmi.n	800c59c <_fflush_r+0xc>
 800c5d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5da:	f7ff fa29 	bl	800ba30 <__retarget_lock_release_recursive>
 800c5de:	e7dd      	b.n	800c59c <_fflush_r+0xc>

0800c5e0 <__swhatbuf_r>:
 800c5e0:	b570      	push	{r4, r5, r6, lr}
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e8:	4615      	mov	r5, r2
 800c5ea:	2900      	cmp	r1, #0
 800c5ec:	461e      	mov	r6, r3
 800c5ee:	b096      	sub	sp, #88	@ 0x58
 800c5f0:	da0c      	bge.n	800c60c <__swhatbuf_r+0x2c>
 800c5f2:	89a3      	ldrh	r3, [r4, #12]
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5fa:	bf14      	ite	ne
 800c5fc:	2340      	movne	r3, #64	@ 0x40
 800c5fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c602:	2000      	movs	r0, #0
 800c604:	6031      	str	r1, [r6, #0]
 800c606:	602b      	str	r3, [r5, #0]
 800c608:	b016      	add	sp, #88	@ 0x58
 800c60a:	bd70      	pop	{r4, r5, r6, pc}
 800c60c:	466a      	mov	r2, sp
 800c60e:	f000 f897 	bl	800c740 <_fstat_r>
 800c612:	2800      	cmp	r0, #0
 800c614:	dbed      	blt.n	800c5f2 <__swhatbuf_r+0x12>
 800c616:	9901      	ldr	r1, [sp, #4]
 800c618:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c61c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c620:	4259      	negs	r1, r3
 800c622:	4159      	adcs	r1, r3
 800c624:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c628:	e7eb      	b.n	800c602 <__swhatbuf_r+0x22>

0800c62a <__smakebuf_r>:
 800c62a:	898b      	ldrh	r3, [r1, #12]
 800c62c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c62e:	079d      	lsls	r5, r3, #30
 800c630:	4606      	mov	r6, r0
 800c632:	460c      	mov	r4, r1
 800c634:	d507      	bpl.n	800c646 <__smakebuf_r+0x1c>
 800c636:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c63a:	6023      	str	r3, [r4, #0]
 800c63c:	6123      	str	r3, [r4, #16]
 800c63e:	2301      	movs	r3, #1
 800c640:	6163      	str	r3, [r4, #20]
 800c642:	b003      	add	sp, #12
 800c644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c646:	466a      	mov	r2, sp
 800c648:	ab01      	add	r3, sp, #4
 800c64a:	f7ff ffc9 	bl	800c5e0 <__swhatbuf_r>
 800c64e:	9f00      	ldr	r7, [sp, #0]
 800c650:	4605      	mov	r5, r0
 800c652:	4639      	mov	r1, r7
 800c654:	4630      	mov	r0, r6
 800c656:	f7ff fa65 	bl	800bb24 <_malloc_r>
 800c65a:	b948      	cbnz	r0, 800c670 <__smakebuf_r+0x46>
 800c65c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c660:	059a      	lsls	r2, r3, #22
 800c662:	d4ee      	bmi.n	800c642 <__smakebuf_r+0x18>
 800c664:	f023 0303 	bic.w	r3, r3, #3
 800c668:	f043 0302 	orr.w	r3, r3, #2
 800c66c:	81a3      	strh	r3, [r4, #12]
 800c66e:	e7e2      	b.n	800c636 <__smakebuf_r+0xc>
 800c670:	89a3      	ldrh	r3, [r4, #12]
 800c672:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c67a:	81a3      	strh	r3, [r4, #12]
 800c67c:	9b01      	ldr	r3, [sp, #4]
 800c67e:	6020      	str	r0, [r4, #0]
 800c680:	b15b      	cbz	r3, 800c69a <__smakebuf_r+0x70>
 800c682:	4630      	mov	r0, r6
 800c684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c688:	f000 f86c 	bl	800c764 <_isatty_r>
 800c68c:	b128      	cbz	r0, 800c69a <__smakebuf_r+0x70>
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	f023 0303 	bic.w	r3, r3, #3
 800c694:	f043 0301 	orr.w	r3, r3, #1
 800c698:	81a3      	strh	r3, [r4, #12]
 800c69a:	89a3      	ldrh	r3, [r4, #12]
 800c69c:	431d      	orrs	r5, r3
 800c69e:	81a5      	strh	r5, [r4, #12]
 800c6a0:	e7cf      	b.n	800c642 <__smakebuf_r+0x18>

0800c6a2 <_putc_r>:
 800c6a2:	b570      	push	{r4, r5, r6, lr}
 800c6a4:	460d      	mov	r5, r1
 800c6a6:	4614      	mov	r4, r2
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	b118      	cbz	r0, 800c6b4 <_putc_r+0x12>
 800c6ac:	6a03      	ldr	r3, [r0, #32]
 800c6ae:	b90b      	cbnz	r3, 800c6b4 <_putc_r+0x12>
 800c6b0:	f7fe ff8a 	bl	800b5c8 <__sinit>
 800c6b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6b6:	07d8      	lsls	r0, r3, #31
 800c6b8:	d405      	bmi.n	800c6c6 <_putc_r+0x24>
 800c6ba:	89a3      	ldrh	r3, [r4, #12]
 800c6bc:	0599      	lsls	r1, r3, #22
 800c6be:	d402      	bmi.n	800c6c6 <_putc_r+0x24>
 800c6c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6c2:	f7ff f9b4 	bl	800ba2e <__retarget_lock_acquire_recursive>
 800c6c6:	68a3      	ldr	r3, [r4, #8]
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	60a3      	str	r3, [r4, #8]
 800c6ce:	da05      	bge.n	800c6dc <_putc_r+0x3a>
 800c6d0:	69a2      	ldr	r2, [r4, #24]
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	db12      	blt.n	800c6fc <_putc_r+0x5a>
 800c6d6:	b2eb      	uxtb	r3, r5
 800c6d8:	2b0a      	cmp	r3, #10
 800c6da:	d00f      	beq.n	800c6fc <_putc_r+0x5a>
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	1c5a      	adds	r2, r3, #1
 800c6e0:	6022      	str	r2, [r4, #0]
 800c6e2:	701d      	strb	r5, [r3, #0]
 800c6e4:	b2ed      	uxtb	r5, r5
 800c6e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6e8:	07da      	lsls	r2, r3, #31
 800c6ea:	d405      	bmi.n	800c6f8 <_putc_r+0x56>
 800c6ec:	89a3      	ldrh	r3, [r4, #12]
 800c6ee:	059b      	lsls	r3, r3, #22
 800c6f0:	d402      	bmi.n	800c6f8 <_putc_r+0x56>
 800c6f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6f4:	f7ff f99c 	bl	800ba30 <__retarget_lock_release_recursive>
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	bd70      	pop	{r4, r5, r6, pc}
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	4622      	mov	r2, r4
 800c700:	4630      	mov	r0, r6
 800c702:	f7ff f886 	bl	800b812 <__swbuf_r>
 800c706:	4605      	mov	r5, r0
 800c708:	e7ed      	b.n	800c6e6 <_putc_r+0x44>

0800c70a <memmove>:
 800c70a:	4288      	cmp	r0, r1
 800c70c:	b510      	push	{r4, lr}
 800c70e:	eb01 0402 	add.w	r4, r1, r2
 800c712:	d902      	bls.n	800c71a <memmove+0x10>
 800c714:	4284      	cmp	r4, r0
 800c716:	4623      	mov	r3, r4
 800c718:	d807      	bhi.n	800c72a <memmove+0x20>
 800c71a:	1e43      	subs	r3, r0, #1
 800c71c:	42a1      	cmp	r1, r4
 800c71e:	d008      	beq.n	800c732 <memmove+0x28>
 800c720:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c724:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c728:	e7f8      	b.n	800c71c <memmove+0x12>
 800c72a:	4601      	mov	r1, r0
 800c72c:	4402      	add	r2, r0
 800c72e:	428a      	cmp	r2, r1
 800c730:	d100      	bne.n	800c734 <memmove+0x2a>
 800c732:	bd10      	pop	{r4, pc}
 800c734:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c738:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c73c:	e7f7      	b.n	800c72e <memmove+0x24>
	...

0800c740 <_fstat_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	2300      	movs	r3, #0
 800c744:	4d06      	ldr	r5, [pc, #24]	@ (800c760 <_fstat_r+0x20>)
 800c746:	4604      	mov	r4, r0
 800c748:	4608      	mov	r0, r1
 800c74a:	4611      	mov	r1, r2
 800c74c:	602b      	str	r3, [r5, #0]
 800c74e:	f7f4 f8dd 	bl	800090c <_fstat>
 800c752:	1c43      	adds	r3, r0, #1
 800c754:	d102      	bne.n	800c75c <_fstat_r+0x1c>
 800c756:	682b      	ldr	r3, [r5, #0]
 800c758:	b103      	cbz	r3, 800c75c <_fstat_r+0x1c>
 800c75a:	6023      	str	r3, [r4, #0]
 800c75c:	bd38      	pop	{r3, r4, r5, pc}
 800c75e:	bf00      	nop
 800c760:	200009b0 	.word	0x200009b0

0800c764 <_isatty_r>:
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	2300      	movs	r3, #0
 800c768:	4d05      	ldr	r5, [pc, #20]	@ (800c780 <_isatty_r+0x1c>)
 800c76a:	4604      	mov	r4, r0
 800c76c:	4608      	mov	r0, r1
 800c76e:	602b      	str	r3, [r5, #0]
 800c770:	f7f4 f8db 	bl	800092a <_isatty>
 800c774:	1c43      	adds	r3, r0, #1
 800c776:	d102      	bne.n	800c77e <_isatty_r+0x1a>
 800c778:	682b      	ldr	r3, [r5, #0]
 800c77a:	b103      	cbz	r3, 800c77e <_isatty_r+0x1a>
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	bd38      	pop	{r3, r4, r5, pc}
 800c780:	200009b0 	.word	0x200009b0

0800c784 <_sbrk_r>:
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	2300      	movs	r3, #0
 800c788:	4d05      	ldr	r5, [pc, #20]	@ (800c7a0 <_sbrk_r+0x1c>)
 800c78a:	4604      	mov	r4, r0
 800c78c:	4608      	mov	r0, r1
 800c78e:	602b      	str	r3, [r5, #0]
 800c790:	f7f4 f8e2 	bl	8000958 <_sbrk>
 800c794:	1c43      	adds	r3, r0, #1
 800c796:	d102      	bne.n	800c79e <_sbrk_r+0x1a>
 800c798:	682b      	ldr	r3, [r5, #0]
 800c79a:	b103      	cbz	r3, 800c79e <_sbrk_r+0x1a>
 800c79c:	6023      	str	r3, [r4, #0]
 800c79e:	bd38      	pop	{r3, r4, r5, pc}
 800c7a0:	200009b0 	.word	0x200009b0

0800c7a4 <memchr>:
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	b510      	push	{r4, lr}
 800c7a8:	b2c9      	uxtb	r1, r1
 800c7aa:	4402      	add	r2, r0
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	d101      	bne.n	800c7b6 <memchr+0x12>
 800c7b2:	2000      	movs	r0, #0
 800c7b4:	e003      	b.n	800c7be <memchr+0x1a>
 800c7b6:	7804      	ldrb	r4, [r0, #0]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	428c      	cmp	r4, r1
 800c7bc:	d1f6      	bne.n	800c7ac <memchr+0x8>
 800c7be:	bd10      	pop	{r4, pc}

0800c7c0 <_realloc_r>:
 800c7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c4:	4680      	mov	r8, r0
 800c7c6:	4615      	mov	r5, r2
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	b921      	cbnz	r1, 800c7d6 <_realloc_r+0x16>
 800c7cc:	4611      	mov	r1, r2
 800c7ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d2:	f7ff b9a7 	b.w	800bb24 <_malloc_r>
 800c7d6:	b92a      	cbnz	r2, 800c7e4 <_realloc_r+0x24>
 800c7d8:	f7ff f93a 	bl	800ba50 <_free_r>
 800c7dc:	2400      	movs	r4, #0
 800c7de:	4620      	mov	r0, r4
 800c7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7e4:	f000 f81a 	bl	800c81c <_malloc_usable_size_r>
 800c7e8:	4285      	cmp	r5, r0
 800c7ea:	4606      	mov	r6, r0
 800c7ec:	d802      	bhi.n	800c7f4 <_realloc_r+0x34>
 800c7ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c7f2:	d8f4      	bhi.n	800c7de <_realloc_r+0x1e>
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	4640      	mov	r0, r8
 800c7f8:	f7ff f994 	bl	800bb24 <_malloc_r>
 800c7fc:	4607      	mov	r7, r0
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d0ec      	beq.n	800c7dc <_realloc_r+0x1c>
 800c802:	42b5      	cmp	r5, r6
 800c804:	462a      	mov	r2, r5
 800c806:	4621      	mov	r1, r4
 800c808:	bf28      	it	cs
 800c80a:	4632      	movcs	r2, r6
 800c80c:	f7ff f911 	bl	800ba32 <memcpy>
 800c810:	4621      	mov	r1, r4
 800c812:	4640      	mov	r0, r8
 800c814:	f7ff f91c 	bl	800ba50 <_free_r>
 800c818:	463c      	mov	r4, r7
 800c81a:	e7e0      	b.n	800c7de <_realloc_r+0x1e>

0800c81c <_malloc_usable_size_r>:
 800c81c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c820:	1f18      	subs	r0, r3, #4
 800c822:	2b00      	cmp	r3, #0
 800c824:	bfbc      	itt	lt
 800c826:	580b      	ldrlt	r3, [r1, r0]
 800c828:	18c0      	addlt	r0, r0, r3
 800c82a:	4770      	bx	lr

0800c82c <_init>:
 800c82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82e:	bf00      	nop
 800c830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c832:	bc08      	pop	{r3}
 800c834:	469e      	mov	lr, r3
 800c836:	4770      	bx	lr

0800c838 <_fini>:
 800c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83a:	bf00      	nop
 800c83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c83e:	bc08      	pop	{r3}
 800c840:	469e      	mov	lr, r3
 800c842:	4770      	bx	lr
